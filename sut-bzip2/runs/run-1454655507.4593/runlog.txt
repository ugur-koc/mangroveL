===< 19744 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
5053d5052
< #include <stdio.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
5054d5053
< #include <errno.h>
5055d5054
< #include <ctype.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
5068d5067
< #   include <utime.h>
5069d5068
< #   include <unistd.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
5091d5090
< #     include <io.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
5091d5090
< #     include <fcntl.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
5105,5106d5104
< #if BZ_LCCWIN32
< 
5126,5127d5123
< 
< #endif /* BZ_LCCWIN32 */
5105,5129d5104
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
4805,4807d4804
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4809d4805
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
5018,5066d5017
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5844,5852d5794
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5854d5795
< #  endif
5914,5917d5854
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5922,5927d5858
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5934,5951d5864
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5959,5964d5871
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5971d5877
< #  endif /* BZ_UNIX */
6530,6532d6435
< #     if BZ_UNIX
<       "\n"
< #     endif
6682,6686d6584
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6827,6829d6724
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4985,4991d4984
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5049d5041
< #   ifdef __CYGWIN__
5057d5048
< #   endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1129,1136d1128
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1138,1220d1129
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
751,754c751
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
849,917c849
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
931,984c931
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
1011,1019c1011
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1091,1101c1091
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
1147,1154c1147
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
---
>    while (1) ;                                             \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
1278,1283c1278
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
---
>       zs->state_in_len == 255)  else {                                       \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
1680,1688c1680
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
---
>       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) 
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_clang :: callexpr-to-value >===
1045c1045
<    makeMaps_e ( s );
---
>    ;
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39958 bytes)
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1247c1247
<    init_RL ( s );
---
>    ;
(80.5 %, 39945 bytes)
1247c1247
<    init_RL ( s );
---
>    ;
1248c1248
<    prepare_new_block ( s );
---
>    ;
(80.5 %, 39932 bytes)
1248c1248
<    prepare_new_block ( s );
---
>    ;
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39909 bytes)
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
(80.5 %, 39896 bytes)
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
1577c1577
<    free ( bzf );
---
>    0;
(80.6 %, 39858 bytes)
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
1577c1577
<    free ( bzf );
---
>    0;
(80.6 %, 39825 bytes)
1577c1577
<    free ( bzf );
---
>    0;
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
(80.6 %, 39814 bytes)
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
1647c1647
<    free ( bzf );
---
>    0;
(80.6 %, 39779 bytes)
1647c1647
<    free ( bzf );
---
>    0;
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
(80.6 %, 39768 bytes)
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
1739c1739
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
(80.6 %, 39672 bytes)
1738c1738
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39638 bytes)
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39612 bytes)
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39586 bytes)
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
(80.7 %, 39560 bytes)
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
(80.7 %, 39513 bytes)
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.7 %, 39488 bytes)
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
(80.7 %, 39460 bytes)
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.8 %, 39432 bytes)
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
(80.8 %, 39404 bytes)
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(80.8 %, 39372 bytes)
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39345 bytes)
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39316 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
(80.8 %, 39288 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
(80.8 %, 39254 bytes)
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
835d834
< UInt32 BZ2_crc32Table[256] = {
837,903d835
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
(80.9 %, 39108 bytes)
832d831
< UInt32 BZ2_crc32Table[256] = {
834,900d832
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
914,967c914
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
(82.7 %, 35550 bytes)
846,899c846
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
1212c1212
<    Bool progress;
---
>    
(84.0 %, 32784 bytes)
1159c1159
<    Bool progress;
---
>    
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
(84.0 %, 32770 bytes)
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
1369c1369
<    Int32 n, n2, ret;
---
>    Int32 n, ret;
(84.0 %, 32768 bytes)
1369c1369
<    Int32  n2, ret;
---
>    Int32   ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
(84.0 %, 32765 bytes)
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32   n, ret;
(84.0 %, 32763 bytes)
1423c1423
<    Int32    n2, ret;
---
>    Int32     ret;
1423c1423
<    Int32    n2, ret;
---
>    Int32    n2;
(84.0 %, 32760 bytes)
1423c1423
<    Int32     ret;
---
>    
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
(84.0 %, 32746 bytes)
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
1534c1534
<    Int32   n, ret;
---
>    Int32   n;
1896c1896
< Int32   verbosity;
---
> 
(84.0 %, 32744 bytes)
1534c1534
<    Int32    ret;
---
>    
1896c1896
< Int32   verbosity;
---
> 
(84.0 %, 32731 bytes)
1896c1896
< Int32   verbosity;
---
> 
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(84.0 %, 32713 bytes)
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
(84.0 %, 32698 bytes)
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
(84.0 %, 32688 bytes)
1897c1897
< Bool      deleteOutputOnInterrupt;
---
> 
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(84.1 %, 32654 bytes)
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(84.1 %, 32639 bytes)
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(84.1 %, 32624 bytes)
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
(84.1 %, 32610 bytes)
1898c1898
< Bool       noisy;
---
> 
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(84.1 %, 32593 bytes)
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(84.1 %, 32580 bytes)
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(84.1 %, 32562 bytes)
1899c1899
< Int32     blockSize100k;
---
> 
1900c1900
< Int32   exitValue;
---
> 
(84.1 %, 32538 bytes)
1900c1900
< Int32   exitValue;
---
> 
1912c1912
< Int32   opMode;
---
> 
(84.1 %, 32520 bytes)
1912c1912
< Int32   opMode;
---
> 
1913c1913
< Int32   srcMode;
---
> 
(84.1 %, 32505 bytes)
1913c1913
< Int32   srcMode;
---
> 
1917c1917
< Int32   longestFileName;
---
> 
(84.1 %, 32489 bytes)
1917c1917
< Int32   longestFileName;
---
> 
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
(84.2 %, 32465 bytes)
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
(84.2 %, 32434 bytes)
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
(84.2 %, 32403 bytes)
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
1921c1921
< Char    *progName;
---
> 
(84.2 %, 32372 bytes)
1921c1921
< Char    *progName;
---
> 
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(84.2 %, 32354 bytes)
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
(84.2 %, 32316 bytes)
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
1924c1924
< Int32   workFactor;
---
> 
(84.2 %, 32284 bytes)
1924c1924
< Int32   workFactor;
---
> 
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(84.3 %, 32265 bytes)
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
2090,2091c2090
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
(84.3 %, 32229 bytes)
2089,2090c2089
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
2091,2092c2091
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32155 bytes)
2090,2091c2090
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32087 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_include_includes :: 0 >===
===< pass_ternary :: b >===
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK (1)
(84.4 %, 32064 bytes)
===< pass_balanced :: curly-only >===
31c31
<    struct {
---
>    struct 
47c47
<    } 
---
>     
355c355
<    struct {
---
>    struct 
423c423
<    }
---
>    
501c501
<    struct {
---
>    struct 
590c590
<    }
---
>    
895c895
< {
---
> 
903c903
< }
---
> 
899c899
<       if (s->inUse[i]) {
---
>       if (s->inUse[i]) 
902c902
<       }
---
>       
909c909
< {
---
> 
964c964
< }
---
> 
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < s->nblock; i++) 
957c957
<    }
---
>    
937c937
<       if (yy[0] == ll_i) { 
---
>       if (yy[0] == ll_i)  
939c939
<       } else {
---
>        else {
(84.4 %, 32062 bytes)
909c909
< {
---
> 
964c964
< }
---
> 
930c930
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < s->nblock; i++) 
957c957
<    }
---
>    
937c937
<       if (yy[0] == ll_i) { 
---
>       if (yy[0] == ll_i)  
939c939
<       } else {
---
>        else {
939c939
<       } else {
---
>       } else 
956c956
<       }
---
>       
942c942
<          {
---
>          
954c954
<          }
---
>          
1074c1074
< {
---
> 
1126c1126
< }
---
> 
(84.4 %, 32060 bytes)
939c939
<        else {
---
>        else 
956c956
<       }
---
>       
942c942
<          {
---
>          
954c954
<          }
---
>          
1074c1074
< {
---
> 
1126c1126
< }
---
> 
1158c1158
< {
---
> 
1169c1169
< }
---
> 
1174c1174
< {
---
> 
1189c1189
< }
---
> 
1201c1201
< {
---
> 
1233c1233
< }
---
> 
1255c1255
< {
---
> 
1267c1267
< }
---
> 
(84.4 %, 32058 bytes)
942c942
<          {
---
>          
954c954
<          }
---
>          
1074c1074
< {
---
> 
1126c1126
< }
---
> 
1158c1158
< {
---
> 
1169c1169
< }
---
> 
1174c1174
< {
---
> 
1189c1189
< }
---
> 
1201c1201
< {
---
> 
1233c1233
< }
---
> 
1255c1255
< {
---
> 
1267c1267
< }
---
> 
1272c1272
< {
---
> 
1287c1287
< }
---
> 
1298c1298
<    struct {
---
>    struct 
1306c1306
<    }
---
>    
1321c1321
< {
---
> 
1358c1358
< }
---
> 
1368c1368
< {
---
> 
1398c1398
< }
---
> 
1386c1386
<    while (True) {
---
>    while (True) 
1397c1397
<    }
---
>    
1408c1408
< {
---
> 
1411c1411
< }
---
> 
1422c1422
< {
---
> 
1454c1454
< }
---
> 
1465c1465
< {
---
> 
1506c1506
< }
---
> 
1511c1511
< {
---
> 
1524c1524
< }
---
> 
(84.4 %, 32056 bytes)
1408c1408
< {
---
> 
1411c1411
< }
---
> 
1422c1422
< {
---
> 
1454c1454
< }
---
> 
1465c1465
< {
---
> 
1506c1506
< }
---
> 
1511c1511
< {
---
> 
1524c1524
< }
---
> 
1533c1533
< {
---
> 
1554c1554
< }
---
> 
1563c1563
< {
---
> 
1575c1575
< }
---
> 
1591c1591
< {
---
> 
1630c1630
< }
---
> 
1641c1641
< {
---
> 
1680c1680
< }
---
> 
1672c1672
<    if (strm.avail_out > 0) {
---
>    if (strm.avail_out > 0) 
1675c1675
<    } else ;      
---
>     else ;      
1690c1690
< {
---
> 
1692c1692
< }
---
> 
1711c1711
< {
---
> 
1713c1713
< }
---
> 
1720c1720
< {
---
> 
1722c1722
< }
---
> 
1727c1727
< {
---
> 
1736c1736
< }
---
> 
1731c1731
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
1733c1733
<    } else {
---
>     else {
1733c1733
<    } else {
---
>    } else 
1735c1735
<    }
---
>    
1741c1741
< {
---
> 
1750c1750
< }
---
> 
(84.4 %, 32054 bytes)
1733c1733
<     else {
---
>     else 
1735c1735
<    }
---
>    
1741c1741
< {
---
> 
1750c1750
< }
---
> 
1745c1745
<    if(bzerr == BZ_OK){
---
>    if(bzerr == BZ_OK)
1747c1747
<    }else{
---
>    else{
(84.4 %, 32052 bytes)
1741c1741
< {
---
> 
1750c1750
< }
---
> 
1745c1745
<    if(bzerr == BZ_OK){
---
>    if(bzerr == BZ_OK)
1747c1747
<    }else{
---
>    else{
1747c1747
<    }else{
---
>    }else
1749c1749
<    }
---
>    
(84.4 %, 32050 bytes)
1747c1747
<    else{
---
>    else
1749c1749
<    }
---
>    
1755c1755
< {
---
> 
1758c1758
< }
---
> 
1763c1763
< {
---
> 
1777c1777
< }
---
> 
1768c1768
<    if(((bzFile*)b)->writing){
---
>    if(((bzFile*)b)->writing)
1773c1773
<    }else
---
>    else
(84.4 %, 32048 bytes)
1755c1755
< {
---
> 
1758c1758
< }
---
> 
1763c1763
< {
---
> 
1777c1777
< }
---
> 
1768c1768
<    if(((bzFile*)b)->writing){
---
>    if(((bzFile*)b)->writing)
1773c1773
<    }else
---
>    else
1770c1770
<       if(bzerr != BZ_OK){
---
>       if(bzerr != BZ_OK)
1772c1772
<       }
---
>       
1774c1774
<    if(fp!=stdin && fp!=stdout){
---
>    if(fp!=stdin && fp!=stdout)
1776c1776
<    }
---
>    
(84.4 %, 32046 bytes)
1770c1770
<       if(bzerr != BZ_OK){
---
>       if(bzerr != BZ_OK)
1772c1772
<       }
---
>       
1774c1774
<    if(fp!=stdin && fp!=stdout){
---
>    if(fp!=stdin && fp!=stdout)
1776c1776
<    }
---
>    
1782c1782
< static char *bzerrorstrings[] = {
---
> static char *bzerrorstrings[] = 
1799c1799
< };
---
> ;
(84.4 %, 32044 bytes)
1774c1774
<    if(fp!=stdin && fp!=stdout){
---
>    if(fp!=stdin && fp!=stdout)
1776c1776
<    }
---
>    
1782c1782
< static char *bzerrorstrings[] = {
---
> static char *bzerrorstrings[] = 
1799c1799
< };
---
> ;
1803c1803
< {
---
> 
1809c1809
< }
---
> 
(84.4 %, 32042 bytes)
1782c1782
< static char *bzerrorstrings[] = {
---
> static char *bzerrorstrings[] = 
1799c1799
< };
---
> ;
1803c1803
< {
---
> 
1809c1809
< }
---
> 
===< pass_clang :: remove-namespace >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-var >===
===< pass_clang :: replace-dependent-typedef >===
===< pass_clang :: reduce-class-template-param >===
===< pass_clang :: remove-unresolved-base >===
===< pass_clang :: empty-struct-to-int >===
1945,1946c1945
<    struct  
<    UInt64;
---
>    
2125c2125
<    struct zzzz 
---
>     int 
(84.4 %, 32035 bytes)
===< pass_clang :: remove-addr-taken >===
===< pass_comments :: 0 >===
===< pass_clex :: rm-toks-15 >===
9,14d8
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
9,14d8
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
9,14d8
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
(84.4 %, 31923 bytes)
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> 3
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> ##define BZ_STREAM_END        4
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define define BZ_STREAM_END        4
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_OK                BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> 4
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> ##define BZ_SEQUENCE_ERROR    (-1)
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define define BZ_SEQUENCE_ERROR    (-1)
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_RUN_OK            BZ_SEQUENCE_ERROR    (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define 1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_FLUSH_OK          )
12,14d11
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
12,14d11
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
12,14d11
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
12,15c12
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_FINISH_OK         (-2)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> -2)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #2)
13,15c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define )
13,16c13
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_STREAM_END        #define BZ_MEM_ERROR         (-3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> define BZ_MEM_ERROR         (-3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #BZ_MEM_ERROR         (-3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define (-3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_SEQUENCE_ERROR    -3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_SEQUENCE_ERROR    (3)
14,16c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_SEQUENCE_ERROR    (-)
14,17c14
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_SEQUENCE_ERROR    (-1#define BZ_DATA_ERROR        (-4)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> define BZ_DATA_ERROR        (-4)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #BZ_DATA_ERROR        (-4)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define (-4)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_PARAM_ERROR       -4)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_PARAM_ERROR       (4)
15,17c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_PARAM_ERROR       (-)
15,18c15
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_PARAM_ERROR       (-2#define BZ_DATA_ERROR_MAGIC  (-5)
16,18c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> define BZ_DATA_ERROR_MAGIC  (-5)
16,18c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #BZ_DATA_ERROR_MAGIC  (-5)
16,18c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define (-5)
16,18c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_MEM_ERROR         -5)
16,18c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_MEM_ERROR         (5)
16,18c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_MEM_ERROR         (-)
16,19c16
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_MEM_ERROR         (-3#define BZ_IO_ERROR          (-6)
17,19c17
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> define BZ_IO_ERROR          (-6)
17,19c17
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #BZ_IO_ERROR          (-6)
17,19c17
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #define (-6)
17,19c17
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_DATA_ERROR        -6)
(84.5 %, 31854 bytes)
16,18c16
< #define BZ_MEM_ERROR         (5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_MEM_ERROR         ()
16,19c16
< #define BZ_MEM_ERROR         (5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_MEM_ERROR         (5#define BZ_OUTBUFF_FULL      (-8)
17,19c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> define BZ_OUTBUFF_FULL      (-8)
17,19c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #BZ_OUTBUFF_FULL      (-8)
17,19c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define (-8)
17,19c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_IO_ERROR          -8)
17,19c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_IO_ERROR          (8)
17,19c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_IO_ERROR          (-)
17,20c17
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_IO_ERROR          (-6#define BZ_CONFIG_ERROR      (-9)
18,20c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> define BZ_CONFIG_ERROR      (-9)
18,20c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #BZ_CONFIG_ERROR      (-9)
18,20c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define (-9)
18,20c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    -9)
18,20c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    (9)
18,20c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    (-)
18,22c18
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #define BZ_UNEXPECTED_EOF    (-7typedef 
19,23c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> struct {
19,23c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #{
19,24c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define char *next_in;
19,24c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      *next_in;
19,24c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      (next_in;
19,24c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      (-;
19,25c19
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_OUTBUFF_FULL      (-8unsigned int avail_in;
20,25c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> int avail_in;
20,25c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #avail_in;
20,25c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define ;
20,26c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      unsigned int total_in_lo32;
20,26c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (int total_in_lo32;
20,26c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-total_in_lo32;
20,26c20
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-9;
22,27c22
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
> unsigned int total_in_hi32;
23,27c23
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    int total_in_hi32;
23,27c23
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    struct total_in_hi32;
24,27c24
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       ;
24,29c24
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       char char *next_out;
24,29c24
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       char **next_out;
24,29c24
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       char *next_innext_out;
25,29c25
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       ;
25,30c25
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned unsigned int avail_out;
25,30c25
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int int avail_out;
25,30c25
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int avail_inavail_out;
26,30c26
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       ;
26,31c26
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned unsigned int total_out_lo32;
26,31c26
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int int total_out_lo32;
26,31c26
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int total_in_lo32total_out_lo32;
27,31c27
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       ;
27,32c27
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       unsigned unsigned int total_out_hi32;
27,32c27
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       unsigned int int total_out_hi32;
27,32c27
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       unsigned int total_in_hi32total_out_hi32;
29,32c29
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       ;
29,34c29
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char void *state;
29,34c29
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char **state;
29,34c29
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char *next_outstate;
30,34c30
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       ;
30,36c30
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned void *(*bzalloc)(void *,int,int);
30,36c30
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int *(*bzalloc)(void *,int,int);
30,36c30
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int avail_out(*bzalloc)(void *,int,int);
31,36c31
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       *bzalloc)(void *,int,int);
31,36c31
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned bzalloc)(void *,int,int);
31,36c31
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int )(void *,int,int);
31,36c31
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_lo32(void *,int,int);
32,36c32
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *,int,int);
32,36c32
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned *,int,int);
32,36c32
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int ,int,int);
32,36c32
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_hi32int,int);
34,36c34
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       ,int);
34,36c34
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void int);
34,36c34
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *);
35,36d34
< 
<       void *(*bzalloc)(void *,int,int);
36d35
<       void *(*bzalloc)(void *,int,int);
36d35
<       void *(*bzalloc)(void *,int,int);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void **bzfree)(void *,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(bzfree)(void *,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*)(void *,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc(void *,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)void *,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(*,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void ,void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *void *);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,*);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int);
36,37c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,;
36,38c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,int,intvoid *opaque;
36,38c36
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,int,int)*opaque;
37,38c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       opaque;
37,38c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void ;
37,39c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>       void (} 
37,40c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bz_stream;
37,40c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bzfree;
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)#include <stdio.h>
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(include <stdio.h>
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void <stdio.h>
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *stdio.h>
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,.h>
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void h>
37,44c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void *>
37,46c37
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void (*bzfree)(void *,void *)#   define BZ_API(func) func
38,46c38
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       define BZ_API(func) func
38,46c38
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void BZ_API(func) func
38,46c38
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *(func) func
38,46c38
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *opaquefunc) func
39,46c39
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    ) func
40,46c40
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    func
40,47c40
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
>    bz_stream#   define BZ_EXTERN extern
44,47c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> define BZ_EXTERN extern
44,47c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #BZ_EXTERN extern
44,47c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include extern
44,52c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
44,52c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <stdioint BZ_API(BZ2_bzCompressInit) ( 
44,52c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <stdio.BZ_API(BZ2_bzCompressInit) ( 
44,52c44
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <stdio.h(BZ2_bzCompressInit) ( 
46,52c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ2_bzCompressInit) ( 
46,52c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   ) ( 
46,52c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define ( 
46,53c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_APIbz_stream* strm, 
46,53c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_API(* strm, 
46,53c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_API(funcstrm, 
46,53c46
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_API(func) , 
47,54c47
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> int        blockSize100k, 
47,54c47
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   blockSize100k, 
47,54c47
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   define , 
47,55c47
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> #   define BZ_EXTERN int        verbosity, 
52,55c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> verbosity, 
52,55c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> BZ_EXTERN , 
52,56c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> BZ_EXTERN int int        workFactor 
52,56c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> BZ_EXTERN int BZ_APIworkFactor 
52,57c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API();
52,57c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit;
52,59c52
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
53,59c53
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int BZ_API(BZ2_bzCompress) ( 
53,59c53
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_streamBZ_API(BZ2_bzCompress) ( 
53,59c53
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_stream* (BZ2_bzCompress) ( 
53,59c53
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_stream* strmBZ2_bzCompress) ( 
54,59c54
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       ) ( 
54,59c54
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int        ( 
54,60c54
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>       int        blockSize100kbz_stream* strm, 
55,60c55
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>       * strm, 
55,60c55
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>       int        strm, 
(84.5 %, 31713 bytes)
54,58d53
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
54,58d53
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
54,58d53
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
(84.6 %, 31624 bytes)
52,58c52
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API(int BZ_API(BZ2_bzDecompressInit) ( 
52,58c52
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
54,58c54
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> (BZ2_bzDecompressInit) ( 
(84.6 %, 31534 bytes)
52,56c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
> BZ_EXTERN int BZ_API();
52,58c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API()BZ_APIBZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
52,58c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(int BZ_API(BZ2_bzDecompress) ( 
52,58c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInitBZ_API(BZ2_bzDecompress) ( 
52,58c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressInit) (BZ2_bzDecompress) ( 
53,58c53
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       BZ2_bzDecompress) ( 
53,58c53
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream ) ( 
53,58c53
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream *( 
53,59c53
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>       bz_stream *strmbz_stream* strm 
54,59c54
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>       * strm 
54,59c54
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>       int       strm 
54,60c54
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
>       int       verbosity);
55,60c55
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
>       ;
55,62c55
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       int       BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
56,62c56
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>    int BZ_API(BZ2_bzDecompressEnd) ( 
(84.7 %, 31424 bytes)
52,58c52
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
54,58c54
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> (BZ2_bzDecompressEnd) ( 
54,58c54
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_EXTERN BZ2_bzDecompressEnd) ( 
(84.7 %, 31335 bytes)
52,62c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()void BZFILE;
52,62c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_APIBZFILE;
52,62c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_API(;
52,64c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEndBZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
52,64c52
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) BZFILE* BZ_API(BZ2_bzReadOpen) ( 
53,64c53
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       * BZ_API(BZ2_bzReadOpen) ( 
53,64c53
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       bz_stream BZ_API(BZ2_bzReadOpen) ( 
53,64c53
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       bz_stream *(BZ2_bzReadOpen) ( 
54,64c54
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>    BZ2_bzReadOpen) ( 
54,64c54
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>    )) ( 
60,64c60
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> ( 
60,65c60
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #int*  bzerror,   
60,65c60
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #define *  bzerror,   
60,65c60
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #define BZ_MAX_UNUSED bzerror,   
62,65c62
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> ,   
62,66c62
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef FILE* f, 
62,66c62
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void * f, 
62,66c62
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void BZFILEf, 
64,66c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> , 
64,67c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN int   verbosity, 
64,67c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILEverbosity, 
64,67c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* , 
64,68c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_APIint   small,
64,68c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(small,
64,68c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen,
64,69c64
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) void* unused,    
65,69c65
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       * unused,    
65,69c65
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       intunused,    
65,69c65
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  ,    
65,70c65
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int*  bzerrorint   nUnused 
66,70c66
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       nUnused 
66,71c66
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE);
66,71c66
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE* ;
66,73c66
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       FILE* fBZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
67,73c67
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       void BZ_API(BZ2_bzReadClose) ( 
67,73c67
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   BZ_API(BZ2_bzReadClose) ( 
67,73c67
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   verbosity(BZ2_bzReadClose) ( 
68,73c68
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       BZ2_bzReadClose) ( 
68,73c68
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   ) ( 
68,73c68
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   small( 
69,73d68
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
69,74c69
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       void*    bzerror, 
69,74c69
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       void* bzerror, 
69,74c69
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       void* unused, 
70,74d69
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
70,75c70
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>       int   * b 
71,75c71
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>    b 
71,76c71
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
>    ));
73,76c73
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> ;
73,78c73
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
73,78c73
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void void BZ_API(BZ2_bzReadGetUnused) ( 
73,78c73
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ_API(BZ2_bzReadGetUnused) ( 
73,78c73
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API((BZ2_bzReadGetUnused) ( 
73,78c73
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadCloseBZ2_bzReadGetUnused) ( 
(84.8 %, 31248 bytes)
73,77c73
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> , 
75,78c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> void**  unused,  
75,78c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN **  unused,  
75,78c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void *  unused,  
75,78c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_APIunused,  
75,78c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(,  
75,79c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedint*    nUnused 
75,79c75
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) *    nUnused 
76,79c76
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       nUnused 
76,80c76
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int);
76,80c76
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int*    ;
76,82c76
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    bzerrorBZ_EXTERN int BZ_API(BZ2_bzRead) ( 
77,82c77
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int BZ_API(BZ2_bzRead) ( 
77,82c77
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILEBZ_API(BZ2_bzRead) ( 
77,82c77
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILE* (BZ2_bzRead) ( 
77,82c77
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILE* bBZ2_bzRead) ( 
78,82c78
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       ) ( 
78,82c78
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void( 
78,83c78
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       void*int*    bzerror, 
78,83c78
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       void**  *    bzerror, 
78,83c78
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       void**  unusedbzerror, 
79,83c79
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       , 
79,84c79
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       intBZFILE* b, 
79,84c79
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    * b, 
80,84c80
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    b, 
80,84c80
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    ), 
82,85c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> void*   buf, 
82,85c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN *   buf, 
82,85c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int buf, 
82,85c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API, 
82,86c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int BZ_API(int     len 
82,86c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int BZ_API(BZ2_bzReadlen 
82,87c82
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) );
83,87c83
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
83,89c83
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       intBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
83,89c83
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
83,89c83
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    bzerror* BZ_API(BZ2_bzWriteOpen) ( 
84,89c84
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ_API(BZ2_bzWriteOpen) ( 
84,89c84
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE(BZ2_bzWriteOpen) ( 
84,89c84
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ2_bzWriteOpen) ( 
84,89c84
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* b) ( 
85,89c85
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       ( 
(84.8 %, 31167 bytes)
83,87c83
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    * f, 
83,87c83
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    )f, 
85,87c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> , 
85,88c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN int   blockSize100k, 
85,88c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILEblockSize100k, 
85,88c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* , 
85,89c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIint   verbosity, 
85,89c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(verbosity, 
85,89c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen, 
85,90c85
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) int   workFactor 
86,90c86
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       workFactor 
86,91c86
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int);
86,91c86
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int*  ;
86,93c86
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int*  bzerrorBZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
87,93c87
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       void BZ_API(BZ2_bzWrite) ( 
87,93c87
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILEBZ_API(BZ2_bzWrite) ( 
87,93c87
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILE* (BZ2_bzWrite) ( 
87,93c87
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILE* fBZ2_bzWrite) ( 
88,93c88
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       ) ( 
88,93c88
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   ( 
88,94c88
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   blockSize100kint*    bzerror, 
89,94c89
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       *    bzerror, 
89,94c89
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   bzerror, 
90,94d89
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
90,94d89
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
90,95c90
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int   * b, 
91,95c91
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    b, 
91,95c91
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    ), 
93,96c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> void*   buf, 
93,96c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN *   buf, 
93,96c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void buf, 
93,96c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API, 
93,97c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN void BZ_API(int     len 
93,97c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN void BZ_API(BZ2_bzWritelen 
93,98c93
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) );
94,98c94
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
94,100c94
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       intBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
94,100c94
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int*    void BZ_API(BZ2_bzWriteClose) ( 
94,100c94
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int*    bzerrorBZ_API(BZ2_bzWriteClose) ( 
95,100c95
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       (BZ2_bzWriteClose) ( 
95,100c95
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILEBZ2_bzWriteClose) ( 
95,100c95
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* ) ( 
95,100c95
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* b( 
96,100d95
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
96,101c96
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       void*          bzerror, 
96,101c96
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       void*   bzerror, 
97,101d96
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
97,101d96
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
(84.8 %, 31086 bytes)
94,98c94
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    b, 
94,98c94
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    ), 
96,99c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> int           abandon, 
96,99c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN abandon, 
96,99c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void , 
96,100c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_APIunsigned int* nbytes_in, 
96,100c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(int* nbytes_in, 
96,100c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose* nbytes_in, 
96,100c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) nbytes_in, 
97,100c97
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       , 
97,101c97
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       intunsigned int* nbytes_out 
97,101c97
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          int* nbytes_out 
97,101c97
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          bzerror* nbytes_out 
98,101c98
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       nbytes_out 
98,102c98
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE);
98,102c98
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE*       ;
98,104c98
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZFILE*       bBZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
99,104c99
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       void BZ_API(BZ2_bzWriteClose64) ( 
99,104c99
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           BZ_API(BZ2_bzWriteClose64) ( 
99,104c99
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           abandon(BZ2_bzWriteClose64) ( 
100,104c100
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ2_bzWriteClose64) ( 
100,104c100
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned ) ( 
100,104c100
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int( 
100,105c100
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* int*          bzerror, 
100,105c100
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* nbytes_in*          bzerror, 
101,105c101
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       bzerror, 
101,105c101
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned , 
101,106c101
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       unsigned intBZFILE*       b, 
101,106c101
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       unsigned int* *       b, 
102,106c102
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    b, 
102,106c102
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    ), 
104,107c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> int           abandon, 
104,107c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN abandon, 
104,107c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void , 
104,108c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_APIunsigned int* nbytes_in_lo32, 
104,108c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(int* nbytes_in_lo32, 
104,108c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64* nbytes_in_lo32, 
104,108c104
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) nbytes_in_lo32, 
105,108c105
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       , 
105,109c105
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       intunsigned int* nbytes_in_hi32, 
105,109c105
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          int* nbytes_in_hi32, 
105,109c105
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          bzerror* nbytes_in_hi32, 
106,109c106
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       nbytes_in_hi32, 
106,109c106
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE, 
106,110c106
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       BZFILE*       unsigned int* nbytes_out_lo32, 
106,110c106
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       BZFILE*       bint* nbytes_out_lo32, 
107,110c107
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       * nbytes_out_lo32, 
107,110c107
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           nbytes_out_lo32, 
108,110d107
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
108,110d107
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
108,110d107
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
108,110d107
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
108,110d107
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
108,112c108
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_in_lo32);
109,112c109
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       ;
109,117c109
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
109,117c109
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intint BZ_API(BZ2_bzBuffToBuffCompress) ( 
109,117c109
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ_API(BZ2_bzBuffToBuffCompress) ( 
109,117c109
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_in_hi32(BZ2_bzBuffToBuffCompress) ( 
110,117c110
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ2_bzBuffToBuffCompress) ( 
110,117c110
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned ) ( 
110,117c110
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int( 
110,118c110
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* char*         dest, 
110,118c110
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* nbytes_out_lo32*         dest, 
111,118c111
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       dest, 
111,118c111
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned , 
111,119c111
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned intunsigned int* destLen,
111,119c111
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       unsigned int* int* destLen,
112,119c112
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    * destLen,
112,119c112
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )destLen,
117,119c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> ,
117,120c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN char*         source, 
117,120c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int *         source, 
117,120c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIsource, 
117,120c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(, 
117,121c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompressunsigned int  sourceLen,
117,121c117
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) int  sourceLen,
118,121c118
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
118,121c118
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
118,122c118
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         int           blockSize100k, 
118,122c118
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         destblockSize100k, 
119,122c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       , 
119,123c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int           verbosity, 
119,123c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned intverbosity, 
119,123c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* , 
119,124c119
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int* destLenint           workFactor 
120,124c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       workFactor 
120,125c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char);
120,125c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char*         ;
120,127c120
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       char*         sourceBZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
121,127c121
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
121,127c121
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned BZ_API(BZ2_bzBuffToBuffDecompress) ( 
121,127c121
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  (BZ2_bzBuffToBuffDecompress) ( 
121,127c121
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  sourceLenBZ2_bzBuffToBuffDecompress) ( 
122,127c122
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ) ( 
122,127c122
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           ( 
122,128c122
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           blockSize100kchar*         dest, 
123,128c123
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       *         dest, 
123,128c123
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           dest, 
124,128d123
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
124,128d123
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
124,129c124
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>       int           int* destLen,
125,129c125
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    * destLen,
125,129c125
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )destLen,
127,129c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> ,
127,130c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN char*         source, 
127,130c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int *         source, 
127,130c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIsource, 
127,130c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(, 
127,131c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int  sourceLen,
127,131c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) int  sourceLen,
128,131c128
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
128,131c128
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
128,132c128
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         int           small, 
128,132c128
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         destsmall, 
129,132c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       , 
129,133c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int           verbosity 
129,133c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned intverbosity 
129,134c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned int* );
129,134c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       unsigned int* destLen;
130,139c130
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
130,139c130
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       charconst char * BZ_API(BZ2_bzlibVersion) (
130,139c130
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         char * BZ_API(BZ2_bzlibVersion) (
130,139c130
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         source* BZ_API(BZ2_bzlibVersion) (
131,139c131
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       BZ_API(BZ2_bzlibVersion) (
131,139c131
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned (BZ2_bzlibVersion) (
131,139c131
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  BZ2_bzlibVersion) (
131,139c131
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  sourceLen) (
132,139c132
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       (
132,140c132
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
---
>       int           void
132,141c132
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>       int           small);
133,141c133
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>       ;
133,143c133
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
134,143c134
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    BZFILE * BZ_API(BZ2_bzopen) (
134,143c134
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    )* BZ_API(BZ2_bzopen) (
139,143c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_API(BZ2_bzopen) (
139,143c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN (BZ2_bzopen) (
139,143c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const BZ2_bzopen) (
139,143c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const char ) (
139,143c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const char * (
139,144c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN const char * BZ_APIconst char *path,
139,144c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN const char * BZ_API(char *path,
139,144c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion*path,
139,144c139
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) path,
140,144c140
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       ,
141,145c141
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
>    const char *mode
141,145c141
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
>    )char *mode
143,145c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> *mode
143,145c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN mode
143,146c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE );
143,146c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * ;
143,148c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
143,148c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZFILE * BZ_API(BZ2_bzdopen) (
143,148c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen* BZ_API(BZ2_bzdopen) (
143,148c143
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) BZ_API(BZ2_bzdopen) (
144,148c144
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       (BZ2_bzdopen) (
144,148c144
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const BZ2_bzdopen) (
144,148c144
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char ) (
144,148c144
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char *(
144,149c144
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>       const char *pathint        fd,
145,149c145
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>       fd,
145,149c145
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>       const ,
145,150c145
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
>       const char const char *mode
145,150c145
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
>       const char *char *mode
146,150c146
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
>    *mode
146,150c146
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
>    )mode
148,151c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> );
148,151c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN ;
148,153c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE BZ_EXTERN int BZ_API(BZ2_bzread) (
148,153c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * int BZ_API(BZ2_bzread) (
148,153c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ_API(BZ2_bzread) (
148,153c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_API((BZ2_bzread) (
148,153c148
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopenBZ2_bzread) (
(84.9 %, 31007 bytes)
148,152c148
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> BZ_EXTERN , 
150,153c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
> int len 
150,153c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
> BZ_EXTERN len 
150,154c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int );
150,154c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int BZ_API;
150,156c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ_EXTERN int BZ_API(BZ2_bzwrite) (
150,156c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ2_bzreadint BZ_API(BZ2_bzwrite) (
150,156c150
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ2_bzread) BZ_API(BZ2_bzwrite) (
151,156c151
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       (BZ2_bzwrite) (
151,156c151
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILEBZ2_bzwrite) (
151,156c151
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILE* ) (
151,156c151
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILE* b(
152,156d151
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
152,157c152
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
>       void* b, 
152,157c152
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
>       void* b, 
153,157d152
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
153,157d152
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
(84.9 %, 30937 bytes)
150,154c150
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API, 
152,155c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> int     len 
152,155c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN len 
152,156c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int );
152,156c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API;
152,158c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ_EXTERN int BZ_API(BZ2_bzflush) (
152,158c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzwriteint BZ_API(BZ2_bzflush) (
152,158c152
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) BZ_API(BZ2_bzflush) (
153,158c153
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       (BZ2_bzflush) (
153,158c153
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILEBZ2_bzflush) (
153,158c153
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILE* ) (
153,158c153
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILE* b(
154,158d153
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
154,159c154
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
---
>       void* b
154,159c154
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
---
>       void*   b
154,160c154
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
---
>       void*   buf);
155,160c155
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
---
>       ;
155,162c155
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
>       int     BZ_EXTERN void BZ_API(BZ2_bzclose) (
(84.9 %, 30860 bytes)
152,158c152
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_APIBZ_API(BZ2_bzclose) (
154,158c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> (BZ2_bzclose) (
154,158c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN BZ2_bzclose) (
154,158c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int ) (
154,158c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_API(
154,159c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
> BZ_EXTERN int BZ_API(BZFILE* b
154,159c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
> BZ_EXTERN int BZ_API(BZ2_bzflush* b
154,159c154
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) b
155,160c155
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
---
>       );
155,160c155
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
---
>       BZFILE;
155,162c155
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>       BZFILE* BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
156,162c156
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>    const char * BZ_API(BZ2_bzerror) (
156,162c156
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>    )char * BZ_API(BZ2_bzerror) (
158,162c158
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> * BZ_API(BZ2_bzerror) (
158,162c158
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN BZ_API(BZ2_bzerror) (
158,162c158
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void (BZ2_bzerror) (
158,162c158
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void BZ_APIBZ2_bzerror) (
158,162c158
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void BZ_API() (
158,162c158
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> BZ_EXTERN void BZ_API(BZ2_bzclose(
(85.0 %, 30787 bytes)
155,158d154
<       );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
155,159c155
<       );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
>       )*errnum
157,159c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> errnum
157,160c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN );
157,160c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN const ;
157,170c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN const char #define _BZLIB_PRIVATE_H
157,170c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN const char * define _BZLIB_PRIVATE_H
157,170c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN const char * BZ_API_BZLIB_PRIVATE_H
157,172c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char * BZ_API(#include <stdlib.h>
157,172c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerrorinclude <stdlib.h>
157,172c157
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> BZ_EXTERN const char * BZ_API(BZ2_bzerror) <stdlib.h>
158,172c158
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       stdlib.h>
158,172c158
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE .h>
158,172c158
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *h>
158,172c158
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *b>
159,177c159
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       #define BZ_VERSION  "1.0.2, 30-Dec-2001"
159,177c159
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       int    define BZ_VERSION  "1.0.2, 30-Dec-2001"
159,177c159
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       int    *BZ_VERSION  "1.0.2, 30-Dec-2001"
160,177c160
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    "1.0.2, 30-Dec-2001"
160,179c160
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
>    )typedef char            Char;
170,179c170
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> char            Char;
170,179c170
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #Char;
170,179c170
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define ;
(85.0 %, 30715 bytes)
157,176c157
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> BZ_EXTERN const typedef char            Char;
167,176c167
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> char            Char;
167,176c167
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #Char;
167,176c167
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define ;
169,176d168
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
169,177c169
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #unsigned char   Bool;
169,177c169
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include char   Bool;
169,177c169
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <Bool;
169,177c169
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlib;
169,178c169
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #include <stdlib.typedef unsigned char   UChar;
169,178c169
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #include <stdlib.hunsigned char   UChar;
174,178c174
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> char   UChar;
174,178c174
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #UChar;
174,178c174
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define ;
174,179c174
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> #define BZ_VERSION  typedef int             Int32;
176,179c176
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> int             Int32;
176,179c176
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef Int32;
176,179c176
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            ;
176,180c176
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef char            Chartypedef unsigned int    UInt32;
177,180c177
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> unsigned int    UInt32;
177,180c177
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int    UInt32;
177,180c177
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned UInt32;
177,180c177
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   ;
177,181c177
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   Booltypedef short           Int16;
178,181c178
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> short           Int16;
178,181c178
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef Int16;
178,181c178
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned ;
178,182c178
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned char   typedef unsigned short  UInt16;
178,182c178
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned char   UCharunsigned short  UInt16;
179,182c179
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> short  UInt16;
179,182c179
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef UInt16;
179,182c179
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             ;
179,184c179
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef int             Int32#define True  ((Bool)1)
180,184c180
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
180,184c180
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef True  ((Bool)1)
180,184c180
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned ((Bool)1)
180,184c180
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    (Bool)1)
180,184c180
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    UInt32Bool)1)
181,184c181
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> )1)
181,184c181
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef 1)
181,184c181
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           )
181,185c181
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef short           Int16#define False ((Bool)0)
182,185c182
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> define False ((Bool)0)
182,185c182
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef False ((Bool)0)
182,185c182
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned ((Bool)0)
182,185c182
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  (Bool)0)
182,185c182
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  UInt16Bool)0)
184,185c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> )0)
184,185c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #0)
184,185c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define )
184,187c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  #define __inline__  
184,187c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  (define __inline__  
184,187c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((__inline__  
184,189c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  ((Boolextern void BZ2_bz__AssertH__fail ( int errcode );
184,189c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  ((Bool)void BZ2_bz__AssertH__fail ( int errcode );
184,189c184
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  ((Bool)1BZ2_bz__AssertH__fail ( int errcode );
185,189c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> ( int errcode );
185,189c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #int errcode );
185,189c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define errcode );
185,189c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define False );
185,189c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define False (;
185,190c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> #define False ((#define AssertH(cond,errcode) \
185,190c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> #define False ((Booldefine AssertH(cond,errcode) \
185,190c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> #define False ((Bool)AssertH(cond,errcode) \
185,190c185
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> #define False ((Bool)0(cond,errcode) \
187,190c187
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> cond,errcode) \
187,190c187
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> #,errcode) \
187,190c187
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> #define errcode) \
189,190c189
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> ) \
189,190c189
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> extern \
189,192c189
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> extern void #define AssertD(cond,msg) \
189,192c189
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> extern void BZ2_bz__AssertH__fail define AssertD(cond,msg) \
189,192c189
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> extern void BZ2_bz__AssertH__fail ( AssertD(cond,msg) \
189,192c189
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> extern void BZ2_bz__AssertH__fail ( int (cond,msg) \
189,192c189
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> extern void BZ2_bz__AssertH__fail ( int errcode cond,msg) \
189,192c189
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> extern void BZ2_bz__AssertH__fail ( int errcode ),msg) \
190,192c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> msg) \
190,192c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #) \
190,192c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #define \
190,194c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH#define VPrintf0(zf) \
190,194c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH(define VPrintf0(zf) \
190,194c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH(condVPrintf0(zf) \
190,194c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH(cond,(zf) \
190,194c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH(cond,errcodezf) \
190,194c190
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH(cond,errcode) ) \
192,194c192
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> \
192,195c192
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #fprintf(stderr,zf)
192,195c192
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define (stderr,zf)
192,195c192
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define AssertDstderr,zf)
192,195c192
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define AssertD(,zf)
192,195c192
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define AssertD(condzf)
192,195c192
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define AssertD(cond,)
192,196c192
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
---
> #define AssertD(cond,msg#define VPrintf1(zf,za1) \
192,196c192
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
---
> #define AssertD(cond,msg) define VPrintf1(zf,za1) \
194,196c194
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
---
> VPrintf1(zf,za1) \
194,196c194
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
---
> #(zf,za1) \
194,196c194
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
---
> #define zf,za1) \
(85.0 %, 30664 bytes)
192,194c192
< #define AssertDstderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
---
> #define AssertDstderr,zf,za1)
192,194c192
< #define AssertDstderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
---
> #define AssertDstderr,zf,za1)
(85.1 %, 30615 bytes)
192,193c192
< #define AssertDstderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
---
> #define AssertDstderr\
192,194c192
< #define AssertDstderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
---
> #define AssertDstderr,fprintf(stderr,zf,za1,za2)
(85.1 %, 30577 bytes)
192,194c192
< #define AssertDstderr\
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define AssertDstderrzf,za1,za2,za3) \
193,194c193
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    ,za1,za2,za3) \
193,194c193
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    fprintfza1,za2,za3) \
(85.1 %, 30528 bytes)
192,193c192
< #define AssertDstderrzf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define AssertDstderrzf,za2,za3)
192,193c192
< #define AssertDstderrzf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define AssertDstderrzf,za2,za3)
(85.1 %, 30488 bytes)
192,193c192
< #define AssertDstderrzf,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define AssertDstderrzfza3,za4) \
192,193c192
< #define AssertDstderrzf,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define AssertDstderrzf,,za4) \
(85.1 %, 30450 bytes)
192,193c192
< #define AssertDstderrzfza3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define AssertDstderrzfza3,za4)
192,193c192
< #define AssertDstderrzfza3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define AssertDstderrzfza3,za4)
(85.2 %, 30410 bytes)
192,193c192
< #define AssertDstderrzfza3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define AssertDstderrzfza3za4,za5) \
192,193c192
< #define AssertDstderrzfza3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define AssertDstderrzfza3,,za5) \
(85.2 %, 30372 bytes)
192,193c192
< #define AssertDstderrzfza3za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define AssertDstderrzfza3za4,za4,za5)
192,193c192
< #define AssertDstderrzfza3za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define AssertDstderrzfza3za4,za4,za5)
192,193c192
< #define AssertDstderrzfza3za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define AssertDstderrzfza3za4,za5,za5)
(85.2 %, 30332 bytes)
192,195c192
< #define AssertDstderrzfza3za4,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define AssertDstderrzfza3za4)(strm->opaque,(nnn),1)
192,195c192
< #define AssertDstderrzfza3za4,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define AssertDstderrzfza3za4,(strm->opaque,(nnn),1)
(85.2 %, 30285 bytes)
192,193c192
< #define AssertDstderrzfza3za4)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define AssertDstderrzfza3za4(ppp)  (strm->bzfree)(strm->opaque,(ppp))
192,193c192
< #define AssertDstderrzfza3za4)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define AssertDstderrzfza3za4)ppp)  (strm->bzfree)(strm->opaque,(ppp))
192,193c192
< #define AssertDstderrzfza3za4)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define AssertDstderrzfza3za4)()  (strm->bzfree)(strm->opaque,(ppp))
(85.2 %, 30247 bytes)
192c192
< #define AssertDstderrzfza3za4(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define AssertDstderrzfza3za4))
192c192
< #define AssertDstderrzfza3za4(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define AssertDstderrzfza3za4()
(85.3 %, 30208 bytes)
192,200c192
< #define AssertDstderrzfza3za4))
< 
< 
< 
< 
< #define BZ_HDR_B 0x42   
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
---
> #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
192,200c192
< #define AssertDstderrzfza3za4))
< 
< 
< 
< 
< #define BZ_HDR_B 0x42   
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
---
> #define AssertDstderrzfza3za4)BZ_HDR_0 0x30   
197,200c197
< #define BZ_HDR_B 0x42   
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
---
> 0x30   
(85.3 %, 30125 bytes)
192,200c192
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define AssertDstderrzfza3za4define define BZ_RUNB 1
192,200c192
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define AssertDstderrzfza3za4define BZ_HDR_0 BZ_RUNB 1
196,200c196
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> 1
196,202c196
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> ##define BZ_N_GROUPS 6
196,202c196
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define define BZ_N_GROUPS 6
196,202c196
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_MAX_ALPHA_SIZE BZ_N_GROUPS 6
197,202c197
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> 6
197,203c197
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> ##define BZ_G_SIZE   50
197,203c197
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define define BZ_G_SIZE   50
197,203c197
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_MAX_CODE_LEN    BZ_G_SIZE   50
199,203c199
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> 50
199,204c199
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> ##define BZ_N_ITERS  4
199,204c199
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define define BZ_N_ITERS  4
199,204c199
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_RUNA BZ_N_ITERS  4
200,204c200
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> 4
200,206c200
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> ##define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
200,206c200
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
200,206c200
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_RUNB BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
202,206c202
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> (2 + (900000 / BZ_G_SIZE))
202,206c202
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #2 + (900000 / BZ_G_SIZE))
202,206c202
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define + (900000 / BZ_G_SIZE))
202,206c202
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_N_GROUPS (900000 / BZ_G_SIZE))
203,206c203
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> 900000 / BZ_G_SIZE))
203,206c203
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #/ BZ_G_SIZE))
203,206c203
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_G_SIZE))
203,206c203
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_G_SIZE   ))
204,206c204
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> )
204,214c204
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> ##define BZ_RAND_DECLS                          \
204,214c204
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define define BZ_RAND_DECLS                          \
204,214c204
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define BZ_N_ITERS  BZ_RAND_DECLS                          \
206,214c206
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> \
206,215c206
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #Int32 rNToGo;                               \
206,215c206
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define rNToGo;                               \
206,215c206
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS ;                               \
206,215c206
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (\
206,216c206
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 Int32 rTPos                                 \
206,216c206
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 + rTPos                                 \
206,216c206
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 + (\
206,218c206
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS (2 + (900000 #define BZ_RAND_INIT_MASK                      \
206,218c206
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / define BZ_RAND_INIT_MASK                      \
206,218c206
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZEBZ_RAND_INIT_MASK                      \
206,218c206
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE)\
214,219c214
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> s->rNToGo = 0;                              \
214,219c214
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #->rNToGo = 0;                              \
214,219c214
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define rNToGo = 0;                              \
214,219c214
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define BZ_RAND_DECLS                          = 0;                              \
215,219c215
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    0;                              \
215,219c215
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 ;                              \
215,219c215
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 rNToGo\
215,220c215
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rNToGo;                               s->rTPos  = 0                               \
216,220c216
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    ->rTPos  = 0                               \
216,220c216
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rTPos  = 0                               \
216,220c216
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rTPos                                 = 0                               \
218,220c218
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> 0                               \
218,220c218
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> #\
218,222c218
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK (1)
---
> #define #define BZ_RAND_MASK (1)
218,222c218
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK (1)
---
> #define BZ_RAND_INIT_MASK                      define BZ_RAND_MASK (1)
(85.4 %, 29981 bytes)
218,223c218
< #\
< 
< #define BZ_RAND_MASK (1)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #rNToGo == 0)                                            \
220,223c220
< #define BZ_RAND_MASK (1)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> == 0)                                            \
220,223c220
< #define BZ_RAND_MASK (1)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #0)                                            \
220,223c220
< #define BZ_RAND_MASK (1)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define )                                            \
220,223c220
< #define BZ_RAND_MASK (1)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define BZ_RAND_MASK \
220,224c220
< #define BZ_RAND_MASK (1)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
<    s->rNToGo--;
---
> #define BZ_RAND_MASK (s->rNToGo--;
220,224c220
< #define BZ_RAND_MASK (1)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
<    s->rNToGo--;
---
> #define BZ_RAND_MASK (1->rNToGo--;
(85.4 %, 29861 bytes)
220,232c220
< #define BZ_RAND_MASK \
<    s->rNToGo--;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
---
> #define BZ_RAND_MASK BZ_FINALISE_CRC(crcVar)                \
221,232c221
<    s->rNToGo--;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
---
>    (crcVar)                \
(85.5 %, 29777 bytes)
220,230c220
< #define BZ_RAND_MASK BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
> #define BZ_RAND_MASK define BZ_M_IDLE      1
220,230c220
< #define BZ_RAND_MASK BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
> #define BZ_RAND_MASK BZ_FINALISE_CRCBZ_M_IDLE      1
(85.5 %, 29678 bytes)
220,225c220
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define BZ_RAND_MASK #define BZ_S_OUTPUT    1
220,225c220
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define BZ_RAND_MASK define define BZ_S_OUTPUT    1
220,225c220
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define BZ_RAND_MASK define BZ_M_IDLE      BZ_S_OUTPUT    1
221,225c221
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> 1
221,226c221
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> ##define BZ_S_INPUT     2
221,226c221
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define define BZ_S_INPUT     2
221,226c221
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define BZ_M_RUNNING   BZ_S_INPUT     2
222,226c222
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> 2
222,228c222
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> ##define BZ_N_RADIX 2
222,228c222
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define define BZ_N_RADIX 2
222,228c222
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define BZ_M_FLUSHING  BZ_N_RADIX 2
223,228c223
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> 2
223,229c223
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> ##define BZ_N_QSORT 12
223,229c223
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define define BZ_N_QSORT 12
223,229c223
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_M_FINISHING BZ_N_QSORT 12
225,229c225
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> 12
225,230c225
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> ##define BZ_N_SHELL 18
225,230c225
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define define BZ_N_SHELL 18
225,230c225
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_S_OUTPUT    BZ_N_SHELL 18
226,230c226
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> 18
226,231c226
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> ##define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
226,231c226
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
226,231c226
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_S_INPUT     BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
228,231c228
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
228,231c228
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
228,231c228
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define + BZ_N_QSORT + BZ_N_SHELL + 2)
228,231c228
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_RADIX BZ_N_QSORT + BZ_N_SHELL + 2)
229,231c229
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> + BZ_N_SHELL + 2)
229,231c229
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_SHELL + 2)
229,231c229
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define + 2)
229,231c229
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT 2)
230,231c230
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> )
230,238c230
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
---
> #typedef
230,239c230
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define struct {
230,239c230
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define BZ_N_SHELL {
231,241c231
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> bz_stream* strm;
231,241c231
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #* strm;
231,241c231
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define strm;
231,241c231
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT ;
231,245c231
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (Int32    mode;
231,245c231
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX mode;
231,245c231
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + ;
231,246c231
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT Int32    state;
231,246c231
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + state;
231,246c231
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL ;
231,249c231
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + UInt32   avail_in_expect;
231,249c231
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2avail_in_expect;
238,249c238
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
> ;
239,252c239
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>    UInt32*  arr1;
239,252c239
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>    struct *  arr1;
241,252c241
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       arr1;
241,252c241
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       bz_stream;
241,253c241
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* UInt32*  arr2;
241,253c241
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* strm*  arr2;
245,253c245
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       arr2;
245,253c245
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       Int32    ;
245,254c245
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    modeUInt32*  ftab;
246,254c246
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       *  ftab;
246,254c246
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    ftab;
247,254d246
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
249,254d248
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
249,255c249
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32   origPtr;
252,257d251
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
252,257d251
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
252,257d251
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
252,257d251
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
253,258d252
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
253,258d252
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
253,259c253
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32*   block;
253,259c253
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32*  block;
254,259d253
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
254,259d253
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
254,260c254
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32*  mtfv;
254,260c254
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32*  mtfv;
255,260d254
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
255,260d254
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
255,261c255
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       Int32    *   zbits;
255,261c255
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       Int32    origPtrzbits;
258,261c258
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       ;
258,264c258
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       UInt32Int32    workFactor;
258,264c258
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       UInt32*  workFactor;
259,264d258
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
259,266d258
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
259,267c259
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
---
>       UCharstate_in_ch;
259,267c259
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
---
>       UChar*   ;
259,268c259
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
---
>       UChar*   blockInt32    state_in_len;
260,268c260
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
---
>       state_in_len;
260,268c260
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
---
>       UInt16;
260,269c260
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
---
>       UInt16*  BZ_RAND_DECLS;
261,269d260
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
261,271d260
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
261,272c261
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
---
>       UCharnblock;
261,272c261
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
---
>       UChar*   ;
261,273c261
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       UChar*   zbitsInt32    nblockMAX;
264,273c264
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       nblockMAX;
264,273c264
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    ;
264,274c264
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       Int32    workFactorInt32    numZ;
267,274c267
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       numZ;
267,274c267
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       UInt32   ;
267,275c267
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       UInt32   state_in_chInt32    state_out_pos;
268,275c268
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       state_out_pos;
268,275c268
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       Int32    ;
268,278c268
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
---
>       Int32    state_in_lenInt32    nInUse;
269,278c269
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
---
>       nInUse;
270,278d269
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
272,278d271
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
272,279c272
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    inUse[256];
272,279c272
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    nblock[256];
273,279c273
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       256];
273,279c273
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    ];
274,279d273
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
274,279d273
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
274,280c274
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    unseqToSeq[256];
274,280c274
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    numZ[256];
275,280c275
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       256];
275,280c275
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    ];
278,282d277
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
278,282d277
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
278,283c278
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
---
>       Int32    bsBuff;
279,283d278
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
279,283d278
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
279,284c279
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       Bool     bsLive;
279,284c279
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       Bool     inUse;
279,287c279
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
---
>       Bool     inUse[UInt32   blockCRC;
279,287c279
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
---
>       Bool     inUse[256blockCRC;
280,287d279
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
280,287d279
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
280,288c280
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       UChar    combinedCRC;
280,288c280
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       UChar    unseqToSeq;
280,291c280
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       UChar    unseqToSeq[Int32    verbosity;
280,291c280
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       UChar    unseqToSeq[256verbosity;
281,291d280
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
283,291d282
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
283,292c283
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       UInt32   blockNo;
284,292d283
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
284,292d283
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
284,292d283
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
287,295d286
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
287,295d286
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
287,296c287
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
---
>       UInt32   nMTF;
288,296d287
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
288,296d287
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
288,297c288
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       UInt32   mtfFreq    [BZ_MAX_ALPHA_SIZE];
288,297c288
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       UInt32   combinedCRC[BZ_MAX_ALPHA_SIZE];
291,297c291
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       BZ_MAX_ALPHA_SIZE];
291,297c291
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    ];
292,297d291
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
292,297d291
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
292,298c292
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       Int32    selector   [BZ_MAX_SELECTORS];
292,298c292
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       Int32    blockNo[BZ_MAX_SELECTORS];
293,298c293
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       BZ_MAX_SELECTORS];
293,298c293
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       Int32    ];
294,298d293
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
296,298d295
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
296,299c296
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    selectorMtf[BZ_MAX_SELECTORS];
296,299c296
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    nMTF[BZ_MAX_SELECTORS];
297,299c297
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       BZ_MAX_SELECTORS];
297,299c297
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    ];
297,299c297
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfFreq    ;
297,301c297
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
297,301c297
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZElen     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
297,301c297
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
298,301c298
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
298,301c298
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    ][BZ_MAX_ALPHA_SIZE];
298,301c298
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_MAX_ALPHA_SIZE];
298,301c298
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_MAX_ALPHA_SIZE];
299,301d298
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(85.6 %, 29575 bytes)
298,300c298
<       UChar    selector   [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
298,300c298
<       UChar    selector   [BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(85.6 %, 29474 bytes)
298,300c298
<       UChar    selector   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       UChar    selector   ;
298,302c298
<       UChar    selector   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>       UChar    selector   [}
298,303c298
<       UChar    selector   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
---
>       UChar    selector   [BZ_N_GROUPSEState;
298,303c298
<       UChar    selector   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
---
>       UChar    selector   [BZ_N_GROUPS];
298,311c298
<       UChar    selector   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
>       UChar    selector   [BZ_N_GROUPS][;
298,313c298
<       UChar    selector   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
>       UChar    selector   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE;
298,323c298
<       UChar    selector   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       UChar    selector   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE]#define BZ_X_IDLE        1
300,323c300
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       define BZ_X_IDLE        1
300,323c300
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       UInt32   BZ_X_IDLE        1
300,323c300
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       UInt32   len_pack1
300,324c300
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       UInt32   len_pack[#define BZ_X_OUTPUT      2
300,324c300
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       UInt32   len_pack[BZ_MAX_ALPHA_SIZEdefine BZ_X_OUTPUT      2
300,324c300
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       UInt32   len_pack[BZ_MAX_ALPHA_SIZE]BZ_X_OUTPUT      2
300,324c300
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][2
300,326c300
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4#define BZ_X_MAGIC_1     10
300,326c300
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4]define BZ_X_MAGIC_1     10
302,326c302
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    BZ_X_MAGIC_1     10
(85.7 %, 29388 bytes)
298,324c298
<       UChar    selector   ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>       UChar    selector   define BZ_X_MAGIC_1     10
300,324c300
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    BZ_X_MAGIC_1     10
301,324c301
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    10
301,325c301
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
>    EState#define BZ_X_MAGIC_2     11
309,325c309
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
> define BZ_X_MAGIC_2     11
311,325c311
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
> BZ_X_MAGIC_2     11
321,325c321
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
> 11
321,326c321
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> ##define BZ_X_MAGIC_3     12
321,326c321
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> #define define BZ_X_MAGIC_3     12
321,326c321
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_IDLE        BZ_X_MAGIC_3     12
322,326c322
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> 12
322,327c322
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
---
> ##define BZ_X_MAGIC_4     13
322,327c322
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
---
> #define define BZ_X_MAGIC_4     13
322,327c322
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_OUTPUT      BZ_X_MAGIC_4     13
324,327c324
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
---
> 13
324,328c324
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
---
> ##define BZ_X_BLKHDR_1    14
324,328c324
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
---
> #define define BZ_X_BLKHDR_1    14
324,328c324
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_MAGIC_1     BZ_X_BLKHDR_1    14
325,328c325
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
---
> 14
325,329c325
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> ##define BZ_X_BLKHDR_2    15
325,329c325
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> #define define BZ_X_BLKHDR_2    15
325,329c325
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_MAGIC_2     BZ_X_BLKHDR_2    15
326,329c326
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> 15
326,330c326
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
---
> ##define BZ_X_BLKHDR_3    16
(85.7 %, 29283 bytes)
325,329c325
< #define define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
---
> #define #define BZ_X_BLKHDR_6    19
325,329c325
< #define define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
---
> #define define define BZ_X_BLKHDR_6    19
325,329c325
< #define define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
---
> #define define BZ_X_BLKHDR_2    BZ_X_BLKHDR_6    19
326,329c326
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
---
> 19
326,330c326
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
---
> ##define BZ_X_BCRC_1      20
326,330c326
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
---
> #define define BZ_X_BCRC_1      20
(85.8 %, 29178 bytes)
325,329c325
< #define define define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
---
> #define define #define BZ_X_BCRC_4      23
325,329c325
< #define define define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
---
> #define define define define BZ_X_BCRC_4      23
325,329c325
< #define define define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
---
> #define define define BZ_X_BLKHDR_6    BZ_X_BCRC_4      23
(85.8 %, 29067 bytes)
325,328c325
< #define define #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
---
> #define define 26
325,329c325
< #define define #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
---
> #define define ##define BZ_X_ORIGPTR_3   27
325,329c325
< #define define #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
---
> #define define #define define BZ_X_ORIGPTR_3   27
(85.9 %, 28958 bytes)
325,329c325
< #define define 26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
---
> #define define BZ_X_SELECTOR_1  30
326,329c326
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
---
> 30
326,330c326
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> ##define BZ_X_SELECTOR_2  31
326,330c326
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> #define define BZ_X_SELECTOR_2  31
(85.9 %, 28863 bytes)
325,329c325
< #define define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
---
> #define define define BZ_X_CODING_2    34
325,329c325
< #define define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
---
> #define define BZ_X_SELECTOR_1  BZ_X_CODING_2    34
(86.0 %, 28758 bytes)
325,329c325
< #define define define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
---
> #define define #define BZ_X_MTF_3       38
325,329c325
< #define define define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
---
> #define define define define BZ_X_MTF_3       38
(86.0 %, 28647 bytes)
325,328c325
< #define define #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
---
> #define define 41
325,329c325
< #define define #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
---
> #define define ##define BZ_X_ENDHDR_2    42
325,329c325
< #define define #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
---
> #define define #define define BZ_X_ENDHDR_2    42
325,329c325
< #define define #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
---
> #define define #define BZ_X_MTF_3       BZ_X_ENDHDR_2    42
(86.1 %, 28538 bytes)
325,329c325
< #define define 41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
---
> #define define BZ_X_ENDHDR_5    45
326,329c326
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
---
> 45
326,330c326
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
---
> ##define BZ_X_ENDHDR_6    46
326,330c326
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
---
> #define define BZ_X_ENDHDR_6    46
326,330c326
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
---
> #define BZ_X_ENDHDR_2    BZ_X_ENDHDR_6    46
(86.1 %, 28443 bytes)
325,329c325
< #define define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
---
> #define define define BZ_X_CCRC_3      49
325,329c325
< #define define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
---
> #define define BZ_X_ENDHDR_5    BZ_X_CCRC_3      49
(86.2 %, 28338 bytes)
325,339c325
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
---
> #define define typedef
325,340c325
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define define define struct {
325,340c325
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define define define BZ_X_CCRC_3      {
326,342c326
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> bz_stream* strm;
326,342c326
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #* strm;
326,342c326
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define strm;
326,342c326
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_X_CCRC_4      ;
332,345c332
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> Int32    state;
332,345c332
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #state;
332,345c332
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define ;
332,348c332
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #define MTFA_SIZE UChar    state_out_ch;
333,348c333
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> state_out_ch;
333,348c333
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #;
333,349c333
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> #define Int32    state_out_len;
333,349c333
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> #define MTFL_SIZE state_out_len;
339,349c339
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> ;
340,350c340
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>    Bool     blockRandomised;
340,350c340
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>    struct blockRandomised;
342,350c342
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>       ;
342,351c342
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
---
>       bz_streamBZ_RAND_DECLS;
342,351c342
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
---
>       bz_stream* ;
342,354c342
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       bz_stream* strmUInt32   bsBuff;
345,354c345
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       bsBuff;
345,354c345
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       Int32    ;
345,355c345
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       Int32    stateInt32    bsLive;
348,355c348
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       bsLive;
348,355c348
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       UChar    ;
348,358c348
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
---
>       UChar    state_out_chInt32    blockSize100k;
349,358c349
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
---
>       blockSize100k;
349,358c349
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
---
>       Int32    ;
349,359c349
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
---
>       Int32    state_out_lenBool     smallDecompress;
350,359c350
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
---
>       smallDecompress;
350,359c350
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
---
>       Bool     ;
350,360c350
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       Bool     blockRandomisedInt32    currBlockNo;
351,360c351
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       currBlockNo;
352,360d351
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
354,360d353
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
354,361c354
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       UInt32   verbosity;
355,361d354
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
355,363d354
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
355,363d354
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
356,364d355
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
358,364d357
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
358,365c358
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
---
>       Int32    tPos;
359,365d358
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
359,365d358
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
359,366c359
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
---
>       Bool     k0;
360,366d359
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
360,366d359
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
360,366d359
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
360,367c360
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
---
>       Int32    currBlockNo[256];
361,367c361
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
---
>       256];
361,367c361
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
---
>       Int32    ];
362,367d361
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
364,367d363
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
(86.2 %, 28237 bytes)
362,364d361
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
362,366d361
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
362,367c362
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
---
>       Int32    *tt;
(86.3 %, 28151 bytes)
362,371d361
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
364,371d363
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
364,371d363
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
364,372c364
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       UInt32   *;
364,373c364
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
---
>       UInt32   *ttUInt32   calculatedBlockCRC;
367,373c367
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
---
>       calculatedBlockCRC;
367,373c367
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
---
>       UInt16   ;
367,374c367
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       UInt16   *UInt32   calculatedCombinedCRC;
367,374c367
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       UInt16   *ll16calculatedCombinedCRC;
368,374c368
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       ;
368,377c368
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
---
>       UChar    Int32    nInUse;
368,377c368
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
---
>       UChar    *nInUse;
369,377d368
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
371,377d370
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
371,378c371
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       UInt32   inUse[256];
371,378c371
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       UInt32   storedBlockCRC[256];
372,378c372
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       256];
372,378c372
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       UInt32   ];
373,378d372
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
373,378d372
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
373,379c373
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       UInt32   inUse16[16];
373,379c373
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       UInt32   calculatedBlockCRC[16];
374,379c374
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       16];
374,379c374
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
---
>       UInt32   ];
375,379d374
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
377,379d376
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
(86.3 %, 28065 bytes)
374,379c374
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       UInt32   calculatedCombinedCRC[256 / MTFL_SIZE];
375,379c375
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       256 / MTFL_SIZE];
375,379c375
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       UChar    / MTFL_SIZE];
375,379c375
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       UChar    seqToUnseqMTFL_SIZE];
375,379c375
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       UChar    seqToUnseq[];
375,379c375
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       UChar    seqToUnseq[256;
375,380c375
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    seqToUnseq[256]UChar    selector   [BZ_MAX_SELECTORS];
378,380c378
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       selector   [BZ_MAX_SELECTORS];
378,380c378
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    [BZ_MAX_SELECTORS];
378,380c378
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   BZ_MAX_SELECTORS];
378,380c378
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [];
378,380c378
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [MTFA_SIZE;
378,381c378
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       UChar    mtfa   [MTFA_SIZE]UChar    selectorMtf[BZ_MAX_SELECTORS];
379,381c379
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       selectorMtf[BZ_MAX_SELECTORS];
379,381c379
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    [BZ_MAX_SELECTORS];
379,381c379
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbaseBZ_MAX_SELECTORS];
379,381c379
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[];
379,381c379
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       Int32    mtfbase[256 ;
379,382c379
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
379,382c379
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZElen  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
379,382c379
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
380,382c380
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
380,382c380
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    ][BZ_MAX_ALPHA_SIZE];
380,382c380
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       UChar    selector   [BZ_MAX_ALPHA_SIZE];
(86.4 %, 27951 bytes)
379,381c379
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE];
379,382c379
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE][Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
379,382c379
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPSbase   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
379,382c379
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_N_GROUPS][BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
(86.4 %, 27862 bytes)
379,381c379
<       Int32    mtfbase[256 / MTFL_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
380,381c380
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       BZ_MAX_ALPHA_SIZE];
380,381c380
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    ];
380,381c380
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       Int32    base   ;
(86.4 %, 27769 bytes)
379,384c379
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
---
>       Int32    mtfbase[256 / MTFL_SIZE];
379,385c379
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
---
>       Int32    mtfbase[256 / MTFL_SIZE][Int32    save_t;
379,385c379
<       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
---
>       Int32    mtfbase[256 / MTFL_SIZE][BZ_MAX_ALPHA_SIZEsave_t;
380,385d379
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
(86.5 %, 27659 bytes)
380,384d379
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
380,384d379
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
380,384d379
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
(86.6 %, 27519 bytes)
380,384d379
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
380,384d379
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
(86.6 %, 27372 bytes)
379,384c379
<       Int32    mtfbase[256 / MTFL_SIZE];
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
---
>       Int32    mtfbase[256 / MTFL_SIZE]; 
380,384d379
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
(86.7 %, 27251 bytes)
379,384c379
<       Int32    mtfbase[256 / MTFL_SIZE]; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
---
>       Int32    mtfbase[256 / MTFL_SIZE]save_gLimit;
380,384c380
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
---
>       ;
380,385c380
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
---
>       Int32    Int32*   save_gBase;
380,385c380
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
---
>       Int32    save_zvec*   save_gBase;
381,385c381
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
---
>       save_gBase;
381,385c381
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
---
>       Int32    ;
(86.8 %, 27126 bytes)
380,391c380
<       ;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
---
>       (cccc)                     \
381,391c381
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
---
>       cccc)                     \
381,391c381
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
---
>       Int32)                     \
381,391c381
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
---
>       Int32*   \
381,392c381
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32*   save_gBases->tPos = s->tt[s->tPos];                 \
382,392c382
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       ->tPos = s->tt[s->tPos];                 \
382,392c382
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32tPos = s->tt[s->tPos];                 \
382,392c382
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32*   = s->tt[s->tPos];                 \
382,392c382
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       Int32*   save_gPerms->tt[s->tPos];                 \
384,392c384
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    ->tt[s->tPos];                 \
385,392c385
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    tt[s->tPos];                 \
385,392c385
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    DState[s->tPos];                 \
391,392c391
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> s->tPos];                 \
391,392c391
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #->tPos];                 \
391,392c391
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define tPos];                 \
391,392c391
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define BZ_GET_FAST];                 \
(86.8 %, 27063 bytes)
391,392c391
< #define tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
---
> #define );           \
391,392c391
< #define tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
---
> #define tPos;           \
391,392c391
< #define tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
---
> #define tPos]\
(86.8 %, 27008 bytes)
391,395c391
< #define tPos;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define tPosc_tPos = c_tt[c_tPos];                    \
391,395c391
< #define tPos;           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
---
> #define tPos;           = c_tt[c_tPos];                    \
(86.9 %, 26922 bytes)
391,392c391
< #define tPosc_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
---
> #define tPosc_tPos 0xff);            \
391,392c391
< #define tPosc_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
---
> #define tPosc_tPos = );            \
(86.9 %, 26857 bytes)
391,394c391
< #define tPosc_tPos 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
---
> #define tPosc_tPos )                                          \
391,394c391
< #define tPosc_tPos 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
---
> #define tPosc_tPos 0xff\
(86.9 %, 26799 bytes)
391,395c391
< #define tPosc_tPos )                                          \
<    
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define tPosc_tPos (s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
391,395c391
< #define tPosc_tPos )                                          \
<    
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define tPosc_tPos )                                          s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(87.0 %, 26686 bytes)
391c391
< #define tPosc_tPos (s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define tPosc_tPos ((i) << 2) & 0x4)) & 0xF)
391c391
< #define tPosc_tPos (s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define tPosc_tPos ((i) << 2) & 0x4)) & 0xF)
391c391
< #define tPosc_tPos (s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define tPosc_tPos (si) << 2) & 0x4)) & 0xF)
(87.0 %, 26662 bytes)
391,393c391
< #define tPosc_tPos ((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
---
> #define tPosc_tPos define SET_LL(i,n)                          \
391,393c391
< #define tPosc_tPos ((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
---
> #define tPosc_tPos (SET_LL(i,n)                          \
391,393c391
< #define tPosc_tPos ((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
---
> #define tPosc_tPos (((i,n)                          \
(87.0 %, 26634 bytes)
391,395c391
< #define tPosc_tPos define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
> #define tPosc_tPos (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
391,395c391
< #define tPosc_tPos define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
> #define tPosc_tPos define ((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
(87.0 %, 26560 bytes)
391c391
< #define tPosc_tPos (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
> #define tPosc_tPos (i) << 16))
391c391
< #define tPosc_tPos (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
> #define tPosc_tPos (i) << 16))
(87.1 %, 26528 bytes)
391,394c391
< #define tPosc_tPos (i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define tPosc_tPos = BZ2_indexIntoF ( s->tPos, s->cftab );    \
391,394c391
< #define tPosc_tPos (i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define tPosc_tPos (BZ2_indexIntoF ( s->tPos, s->cftab );    \
(87.1 %, 26448 bytes)
391,392c391
< #define tPosc_tPos = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
---
> #define tPosc_tPos tPos = GET_LL(s->tPos);
391,392c391
< #define tPosc_tPos = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
---
> #define tPosc_tPos = = GET_LL(s->tPos);
(87.1 %, 26394 bytes)
391,399c391
< #define tPosc_tPos tPos = GET_LL(s->tPos);
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
---
> #define tPosc_tPos );
391,399c391
< #define tPosc_tPos tPos = GET_LL(s->tPos);
< 
< 
< 
< 
< 
< 
< extern Int32 
< BZ2_decompress ( DState* );
---
> #define tPosc_tPos tPos ;
(87.2 %, 26325 bytes)
391,423c391
< #define tPosc_tPos );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap(zz1, zz2) \
<    
< 
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define tPosc_tPos zzp1, zzp2, zzn)       \
391,423c391
< #define tPosc_tPos );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap(zz1, zz2) \
<    
< 
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define tPosc_tPos ), zzp2, zzn)       \
420,423c420
< #define fswap(zz1, zz2) \
<    
< 
< #define fvswap(zzp1, zzp2, zzn)       \
---
> zzp2, zzn)       \
(87.2 %, 26248 bytes)
391,395c391
< #define tPosc_tPos zzp1, zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos ((a) < (b)) ? (a) : (b)
391,395c391
< #define tPosc_tPos zzp1, zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos zzp1(a) < (b)) ? (a) : (b)
391,395c391
< #define tPosc_tPos zzp1, zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos zzp1, a) < (b)) ? (a) : (b)
(87.2 %, 26202 bytes)
391c391
< #define tPosc_tPos ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos b)
391c391
< #define tPosc_tPos ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos ()
(87.2 %, 26181 bytes)
391,395c391
< #define tPosc_tPos b)
< 
< #define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
---
> #define tPosc_tPos ,hz) 
391,395c391
< #define tPosc_tPos b)
< 
< #define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
---
> #define tPosc_tPos bhz) 
393,395c393
< #define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
---
> ) 
(87.2 %, 26139 bytes)
391,400c391
< #define tPosc_tPos ,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
---
> #define tPosc_tPos undef fpush
391,400c391
< #define tPosc_tPos ,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
---
> #define tPosc_tPos ,fpush
(87.3 %, 26036 bytes)
391,396c391
< #define tPosc_tPos undef fpush
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> #define tPosc_tPos undef FALLBACK_QSORT_STACK_SIZE
391,396c391
< #define tPosc_tPos undef fpush
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> #define tPosc_tPos undef FALLBACK_QSORT_STACK_SIZE
392,401d391
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
(87.3 %, 25949 bytes)
391,397c391
< #define tPosc_tPos undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define tPosc_tPos ] |= (1 << ((zz) & 31))
391,397c391
< #define tPosc_tPos undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define tPosc_tPos undef |= (1 << ((zz) & 31))
(87.4 %, 25871 bytes)
391,392c391
< #define tPosc_tPos ] |= (1 << ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define tPosc_tPos CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
391,392c391
< #define tPosc_tPos ] |= (1 << ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define tPosc_tPos ] (zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
391,392c391
< #define tPosc_tPos ] |= (1 << ((zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define tPosc_tPos ] |= zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
(87.4 %, 25835 bytes)
391c391
< #define tPosc_tPos CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define tPosc_tPos 1 << ((zz) & 31))
391c391
< #define tPosc_tPos CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define tPosc_tPos CLEAR_BH<< ((zz) & 31))
(87.4 %, 25799 bytes)
391,392c391
< #define tPosc_tPos 1 << ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define tPosc_tPos )  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
391,392c391
< #define tPosc_tPos 1 << ((zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define tPosc_tPos 1 (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
(87.4 %, 25758 bytes)
391c391
< #define tPosc_tPos )  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define tPosc_tPos (zz) & 31)))
391c391
< #define tPosc_tPos )  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define tPosc_tPos )  zz) & 31)))
391c391
< #define tPosc_tPos )  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define tPosc_tPos )  () & 31)))
(87.4 %, 25728 bytes)
391,392c391
< #define tPosc_tPos (zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define tPosc_tPos [(zz) >> 5]
391,392c391
< #define tPosc_tPos (zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define tPosc_tPos ((zz) >> 5]
(87.5 %, 25684 bytes)
391,392c391
< #define tPosc_tPos [(zz) >> 5]
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define tPosc_tPos zz) & 0x01f)
391,392c391
< #define tPosc_tPos [(zz) >> 5]
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define tPosc_tPos [) & 0x01f)
(87.5 %, 25644 bytes)
391,398c391
< #define tPosc_tPos zz) & 0x01f)
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
---
> #define tPosc_tPos undef      WORD_BH
391,398c391
< #define tPosc_tPos zz) & 0x01f)
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
---
> #define tPosc_tPos zzWORD_BH
(87.5 %, 25567 bytes)
391,418c391
< #define tPosc_tPos undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
<    
< 
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define tPosc_tPos define mvswap(zzp1, zzp2, zzn)       \
391,418c391
< #define tPosc_tPos undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
<    
< 
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define tPosc_tPos undef      mvswap(zzp1, zzp2, zzn)       \
(87.6 %, 25474 bytes)
391,396c391
< #define tPosc_tPos define mvswap(zzp1, zzp2, zzn)       \
< 
< 
< 
< 
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos ,b) ((a) < (b)) ? (a) : (b)
391,396c391
< #define tPosc_tPos define mvswap(zzp1, zzp2, zzn)       \
< 
< 
< 
< 
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos define b) ((a) < (b)) ? (a) : (b)
(87.6 %, 25417 bytes)
391c391
< #define tPosc_tPos ,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos ) : (b)
391c391
< #define tPosc_tPos ,b) ((a) < (b)) ? (a) : (b)
---
> #define tPosc_tPos ,: (b)
(87.6 %, 25397 bytes)
391,395c391
< #define tPosc_tPos ) : (b)
< 
< #define mpush(lz,hz,dz) 
< 
< #define mpop(lz,hz,dz) 
---
> #define tPosc_tPos #define mpop(lz,hz,dz) 
391,395c391
< #define tPosc_tPos ) : (b)
< 
< #define mpush(lz,hz,dz) 
< 
< #define mpop(lz,hz,dz) 
---
> #define tPosc_tPos ) define mpop(lz,hz,dz) 
(87.6 %, 25362 bytes)
391,394c391
< #define tPosc_tPos #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define tPosc_tPos ) (nextHi[az]-nextLo[az])
391,394c391
< #define tPosc_tPos #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define tPosc_tPos #(nextHi[az]-nextLo[az])
391,394c391
< #define tPosc_tPos #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define tPosc_tPos #define nextHi[az]-nextLo[az])
(87.6 %, 25316 bytes)
391,393c391
< #define tPosc_tPos ) (nextHi[az]-nextLo[az])
< 
< #define mnextswap(az,bz)                                        \
---
> #define tPosc_tPos (az,bz)                                        \
391,393c391
< #define tPosc_tPos ) (nextHi[az]-nextLo[az])
< 
< #define mnextswap(az,bz)                                        \
---
> #define tPosc_tPos ) az,bz)                                        \
(87.7 %, 25272 bytes)
391,396c391
< #define tPosc_tPos (az,bz)                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define tPosc_tPos + BZ_N_QSORT)
391,396c391
< #define tPosc_tPos (az,bz)                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define tPosc_tPos (BZ_N_QSORT)
391,396c391
< #define tPosc_tPos (az,bz)                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
---
> #define tPosc_tPos (az)
(87.7 %, 25138 bytes)
391,398c391
< #define tPosc_tPos + BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 100
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
---
> #define tPosc_tPos mpush
391,399c391
< #define tPosc_tPos + BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 100
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
---
> #define tPosc_tPos + #undef mpop
(87.8 %, 25053 bytes)
391,396c391
< #define tPosc_tPos mpush
< #undef mpop
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
---
> #define tPosc_tPos MAIN_QSORT_SMALL_THRESH
392,396d391
< #undef mpop
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
(87.8 %, 24982 bytes)
391,399c391
< #define tPosc_tPos MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define tPosc_tPos [((b)+1) << 8] - ftab[(b) << 8])
392,399c392
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> ((b)+1) << 8] - ftab[(b) << 8])
392,399c392
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #(b)+1) << 8] - ftab[(b) << 8])
392,399c392
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #undef b)+1) << 8] - ftab[(b) << 8])
(87.9 %, 24869 bytes)
391c391
< #define tPosc_tPos [((b)+1) << 8] - ftab[(b) << 8])
---
> #define tPosc_tPos b) << 8])
391c391
< #define tPosc_tPos [((b)+1) << 8] - ftab[(b) << 8])
---
> #define tPosc_tPos [) << 8])
391c391
< #define tPosc_tPos [((b)+1) << 8] - ftab[(b) << 8])
---
> #define tPosc_tPos [(<< 8])
(87.9 %, 24846 bytes)
391,393c391
< #define tPosc_tPos b) << 8])
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
---
> #define tPosc_tPos define CLEARMASK (~(SETMASK))
391,393c391
< #define tPosc_tPos b) << 8])
< #define SETMASK (1 << 21)
< #define CLEARMASK (~(SETMASK))
---
> #define tPosc_tPos bCLEARMASK (~(SETMASK))
(87.9 %, 24809 bytes)
391,397c391
< #define tPosc_tPos define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
---
> #define tPosc_tPos undef CLEARMASK
391,397c391
< #define tPosc_tPos define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
---
> #define tPosc_tPos define CLEARMASK
391,416c391
< #define tPosc_tPos define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define tPosc_tPos define CLEARMASK #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
(87.9 %, 24745 bytes)
391,411c391
< #define tPosc_tPos undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define tPosc_tPos #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
391,411c391
< #define tPosc_tPos undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define tPosc_tPos undef define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
410,411c410
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> DEPTHOF(zz1)   ((zz1) & 0x000000ff)
(88.0 %, 24667 bytes)
391,392c391
< #define tPosc_tPos #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define tPosc_tPos MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
391,392c391
< #define tPosc_tPos #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define tPosc_tPos #(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
(88.0 %, 24615 bytes)
391c391
< #define tPosc_tPos MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define tPosc_tPos (zz2) : (zz3))
391c391
< #define tPosc_tPos MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define tPosc_tPos MYMAXzz2) : (zz3))
(88.0 %, 24583 bytes)
391,393c391
< #define tPosc_tPos (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define tPosc_tPos )                           \
391,393c391
< #define tPosc_tPos (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define tPosc_tPos (\
391,394c391
< #define tPosc_tPos (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define tPosc_tPos (zz2(WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
(88.0 %, 24541 bytes)
391,393c391
< #define tPosc_tPos )                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
> #define tPosc_tPos (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
391,393c391
< #define tPosc_tPos )                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
> #define tPosc_tPos )                           1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
(88.1 %, 24452 bytes)
391c391
< #define tPosc_tPos (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
> #define tPosc_tPos )
391,393c391
< #define tPosc_tPos (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
---
> #define tPosc_tPos (#define UPHEAP(z)                                     \
(88.1 %, 24415 bytes)
391,464c391
< #define tPosc_tPos )
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> #define tPosc_tPos #define bsNEEDW(nz)                           \
393,464c393
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> define bsNEEDW(nz)                           \
393,464c393
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> #bsNEEDW(nz)                           \
393,464c393
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> #define (nz)                           \
393,464c393
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> #define UPHEAPnz)                           \
(88.2 %, 24231 bytes)
391,414c391
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
---
> #define tPosc_tPos {
391,415c391
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
---
> #define tPosc_tPos #Int32 i;
391,415c391
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
---
> #define tPosc_tPos #define i;
391,415c391
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
---
> #define tPosc_tPos #define bsNEEDW;
391,416c391
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> #define tPosc_tPos #define bsNEEDW(s->nInUse = 0;
391,416c391
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> #define tPosc_tPos #define bsNEEDW(nz->nInUse = 0;
391,416c391
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> #define tPosc_tPos #define bsNEEDW(nz)                           nInUse = 0;
412,416c412
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> = 0;
413,416c413
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> 0;
413,416c413
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> void ;
413,417c413
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
> void makeMaps_e for (i = 0; i < 256; i++)
413,417c413
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
> void makeMaps_e ( (i = 0; i < 256; i++)
413,417c413
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
> void makeMaps_e ( EStatei = 0; i < 256; i++)
413,417c413
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
> void makeMaps_e ( EState* = 0; i < 256; i++)
413,417c413
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
> void makeMaps_e ( EState* s 0; i < 256; i++)
414,417c414
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
> ; i < 256; i++)
415,417c415
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    i < 256; i++)
415,417c415
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    Int32 < 256; i++)
415,417c415
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    Int32 i256; i++)
416,417c416
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    ; i++)
416,417c416
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    si++)
416,417c416
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    s->++)
416,417c416
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    s->nInUse )
416,418c416
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    s->nInUse = if (s->inUse[i]) 
416,418c416
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    s->nInUse = 0(s->inUse[i]) 
417,418c417
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    s->inUse[i]) 
417,418c417
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for ->inUse[i]) 
417,418c417
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for (inUse[i]) 
417,418c417
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for (i [i]) 
417,418c417
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for (i = i]) 
417,418c417
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for (i = 0]) 
417,418c417
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for (i = 0; ) 
417,419c417
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
---
>    for (i = 0; i s->unseqToSeq[i] = s->nInUse;
417,419c417
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
---
>    for (i = 0; i < ->unseqToSeq[i] = s->nInUse;
417,419c417
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
---
>    for (i = 0; i < 256unseqToSeq[i] = s->nInUse;
417,419c417
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
---
>    for (i = 0; i < 256; [i] = s->nInUse;
417,419c417
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
---
>    for (i = 0; i < 256; ii] = s->nInUse;
417,419c417
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
---
>    for (i = 0; i < 256; i++] = s->nInUse;
418,419c418
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
---
>       = s->nInUse;
418,419c418
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
---
>       if s->nInUse;
418,419c418
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
---
>       if (->nInUse;
418,419c418
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
---
>       if (snInUse;
418,419c418
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
---
>       if (s->;
418,420c418
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
>       if (s->inUses->nInUse++;
418,420c418
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
>       if (s->inUse[->nInUse++;
418,420c418
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
>       if (s->inUse[inInUse++;
418,420c418
<       if (s->inUse[i]) 
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
>       if (s->inUse[i]++;
419,420c419
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
---
>          ;
419,422c419
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       
< }
---
>          s}
419,426c419
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       
< }
< 
< 
< 
< static
---
>          s->static
419,427c419
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>          s->unseqToSeqvoid generateMTFValues ( EState* s )
419,427c419
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>          s->unseqToSeq[generateMTFValues ( EState* s )
419,427c419
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>          s->unseqToSeq[i( EState* s )
419,427c419
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>          s->unseqToSeq[i] EState* s )
419,427c419
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>          s->unseqToSeq[i] = * s )
419,427c419
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>          s->unseqToSeq[i] = ss )
419,427c419
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>          s->unseqToSeq[i] = s->)
419,428c419
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
---
>          s->unseqToSeq[i] = s->nInUse{
420,429c420
<          s->nInUse++;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
>          UChar   yy[256];
420,429c420
<          s->nInUse++;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
>          syy[256];
420,429c420
<          s->nInUse++;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
>          s->[256];
(88.2 %, 24181 bytes)
419,428c419
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
>          ];
421,428c421
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> ;
425,429c425
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> Int32   i, j;
426,429c426
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> i, j;
426,429c426
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void , j;
426,429c426
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues j;
426,429c426
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues ( ;
426,430c426
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
---
> void generateMTFValues ( EStateInt32   zPend;
426,430c426
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
---
> void generateMTFValues ( EState* zPend;
426,430c426
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
---
> void generateMTFValues ( EState* s ;
427,431c427
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
> Int32   wr;
428,431c428
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    wr;
428,431c428
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    UChar   ;
428,432c428
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    UChar   yyInt32   EOB;
428,432c428
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    UChar   yy[EOB;
428,432c428
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    UChar   yy[256;
428,435c428
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    UChar   yy[256]UInt32* ptr   = s->ptr;
429,435c429
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    * ptr   = s->ptr;
429,435c429
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   ptr   = s->ptr;
429,435c429
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i= s->ptr;
429,435c429
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i, s->ptr;
429,435c429
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i, j->ptr;
430,435c430
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    ptr;
430,435c430
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   ;
430,436c430
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    Int32   zPendUChar* block  = s->block;
431,436c431
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    * block  = s->block;
431,436c431
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    Int32   block  = s->block;
431,436c431
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    Int32   wr= s->block;
432,436c432
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    s->block;
432,436c432
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    Int32   ->block;
432,436c432
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    Int32   EOBblock;
435,436c435
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    ;
435,437c435
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UInt32UInt16* mtfv  = s->mtfv;
435,437c435
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UInt32* * mtfv  = s->mtfv;
435,437c435
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UInt32* ptr   mtfv  = s->mtfv;
435,437c435
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UInt32* ptr   = = s->mtfv;
435,437c435
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UInt32* ptr   = ss->mtfv;
435,437c435
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UInt32* ptr   = s->->mtfv;
435,437c435
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UInt32* ptr   = s->ptrmtfv;
436,437c436
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    ;
436,439c436
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
---
>    UChar;
436,440c436
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    UChar* EOB = s->nInUse+1;
436,440c436
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    UChar* block  = s->nInUse+1;
436,440c436
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    UChar* block  = s->nInUse+1;
436,440c436
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    UChar* block  = s->nInUse+1;
436,440c436
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    UChar* block  = s->nInUse+1;
436,440c436
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    UChar* block  = s->block+1;
437,440c437
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    1;
437,440c437
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    UInt16;
437,442c437
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    UInt16* for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
437,442c437
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    UInt16* mtfv  (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
437,442c437
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    UInt16* mtfv  = i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
437,442c437
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    UInt16* mtfv  = s= 0; i <= EOB; i++) s->mtfFreq[i] = 0;
437,442c437
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    UInt16* mtfv  = s->0; i <= EOB; i++) s->mtfFreq[i] = 0;
437,442c437
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    UInt16* mtfv  = s->mtfv; i <= EOB; i++) s->mtfFreq[i] = 0;
439,442c439
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    i <= EOB; i++) s->mtfFreq[i] = 0;
440,442c440
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    <= EOB; i++) s->mtfFreq[i] = 0;
440,442c440
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB EOB; i++) s->mtfFreq[i] = 0;
440,442c440
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB = ; i++) s->mtfFreq[i] = 0;
440,442c440
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB = si++) s->mtfFreq[i] = 0;
440,442c440
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB = s->++) s->mtfFreq[i] = 0;
440,442c440
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB = s->nInUse) s->mtfFreq[i] = 0;
440,442c440
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB = s->nInUse+s->mtfFreq[i] = 0;
440,442c440
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    EOB = s->nInUse+1->mtfFreq[i] = 0;
442c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    mtfFreq[i] = 0;
442c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for [i] = 0;
442c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i] = 0;
442c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i ] = 0;
442c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = = 0;
442c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 00;
442c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
---
>    for (i = 0; ;
442,444c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
---
>    for (i = 0; i wr = 0;
442,444c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
---
>    for (i = 0; i <= = 0;
442,444c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
---
>    for (i = 0; i <= EOB0;
442,444c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
---
>    for (i = 0; i <= EOB; ;
442,445c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
---
>    for (i = 0; i <= EOB; izPend = 0;
442,445c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
---
>    for (i = 0; i <= EOB; i++= 0;
442,445c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
---
>    for (i = 0; i <= EOB; i++) 0;
442,445c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
---
>    for (i = 0; i <= EOB; i++) s;
442,446c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i <= EOB; i++) s->for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
442,446c442
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i <= EOB; i++) s->mtfFreq(i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
(88.2 %, 24139 bytes)
442,443c442
<    for (i = 0; i <= EOB; i++) 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i <= EOB; i++) ++) yy[i] = (UChar) i;
442,443c442
<    for (i = 0; i <= EOB; i++) 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i <= EOB; i++) 0) yy[i] = (UChar) i;
443c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    yy[i] = (UChar) i;
443c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for [i] = (UChar) i;
443c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i] = (UChar) i;
443c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i ] = (UChar) i;
443c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = = (UChar) i;
443c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0(UChar) i;
443c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; UChar) i;
443c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i ) i;
443c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i < i;
443c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
---
>    for (i = 0; i < s;
443,445c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < s->for (i = 0; i < s->nblock; i++) {
443,445c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < s->nInUse(i = 0; i < s->nblock; i++) {
443,445c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < s->nInUse; i = 0; i < s->nblock; i++) {
443,445c443
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    for (i = 0; i < s->nInUse; i= 0; i < s->nblock; i++) {
(88.2 %, 24107 bytes)
443,445c443
<    yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    ; i < s->nblock; i++) {
443,445c443
<    yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yyi < s->nblock; i++) {
443,445c443
<    yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[< s->nblock; i++) {
443,445c443
<    yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[is->nblock; i++) {
443,445c443
<    yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i] ->nblock; i++) {
443,445c443
<    yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i] = nblock; i++) {
443,445c443
<    yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i] = (; i++) {
443,445c443
<    yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i] = (UChari++) {
443,445c443
<    yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i] = (UChar) ++) {
443,445c443
<    yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
---
>    yy[i] = (UChar) i) {
445c445
<    for (i = 0; i < s->nblock; i++) {
---
>    {
445,446c445
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
---
>    for UChar ll_i;
445,446c445
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
---
>    for (ll_i;
445,446c445
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
---
>    for (i ;
445,447c445
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = AssertD ( wr <= i, "generateMTFValues(1)" );
445,447c445
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0( wr <= i, "generateMTFValues(1)" );
445,447c445
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; wr <= i, "generateMTFValues(1)" );
445,447c445
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; i <= i, "generateMTFValues(1)" );
445,447c445
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; i < i, "generateMTFValues(1)" );
445,447c445
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; i < s, "generateMTFValues(1)" );
445,447c445
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; i < s->"generateMTFValues(1)" );
445,447c445
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; i < s->nblock);
445,447c445
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
---
>    for (i = 0; i < s->nblock; ;
445,448c445
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>    for (i = 0; i < s->nblock; ij = ptr[i]-1; if (j < 0) j += s->nblock;
(88.3 %, 24075 bytes)
445,448c445
<    {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>    ptr[i]-1; if (j < 0) j += s->nblock;
446,448c446
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       [i]-1; if (j < 0) j += s->nblock;
446,448c446
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       UChar i]-1; if (j < 0) j += s->nblock;
446,448c446
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       UChar ll_i]-1; if (j < 0) j += s->nblock;
447,448c447
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       -1; if (j < 0) j += s->nblock;
447,448c447
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD 1; if (j < 0) j += s->nblock;
447,448c447
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD ( ; if (j < 0) j += s->nblock;
447,448c447
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD ( wr if (j < 0) j += s->nblock;
447,448c447
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD ( wr <= (j < 0) j += s->nblock;
447,448c447
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD ( wr <= ij < 0) j += s->nblock;
447,448c447
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD ( wr <= i, < 0) j += s->nblock;
447,448c447
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD ( wr <= i, "generateMTFValues(1)" 0) j += s->nblock;
447,448c447
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       AssertD ( wr <= i, "generateMTFValues(1)" )) j += s->nblock;
448c448
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
---
>       j += s->nblock;
(88.3 %, 24014 bytes)
447d446
<       -1; if (j < 0) j += s->nblock;
447,448c447
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -= s->unseqToSeq[block[j]];
447,448c447
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1s->unseqToSeq[block[j]];
447,448c447
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; ->unseqToSeq[block[j]];
447,448c447
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if unseqToSeq[block[j]];
447,448c447
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if ([block[j]];
447,448c447
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if (j block[j]];
447,448c447
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if (j < [j]];
447,448c447
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if (j < 0j]];
447,448c447
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if (j < 0) ]];
447,448c447
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if (j < 0) j ];
447,448c447
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
---
>       -1; if (j < 0) j += ;
447,449c447
<       -1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       -1; if (j < 0) j += sAssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
(88.3 %, 23977 bytes)
447,448c447
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       < s->nInUse, "generateMTFValues(2a)" );
447,448c447
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i s->nInUse, "generateMTFValues(2a)" );
447,448c447
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = ->nInUse, "generateMTFValues(2a)" );
447,448c447
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = snInUse, "generateMTFValues(2a)" );
447,448c447
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = s->, "generateMTFValues(2a)" );
447,448c447
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = s->unseqToSeq"generateMTFValues(2a)" );
447,448c447
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = s->unseqToSeq[);
447,448c447
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = s->unseqToSeq[block;
447,450c447
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
---
>       ll_i = s->unseqToSeq[block[if (yy[0] == ll_i)  
447,450c447
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
---
>       ll_i = s->unseqToSeq[block[j(yy[0] == ll_i)  
447,450c447
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
---
>       ll_i = s->unseqToSeq[block[j]yy[0] == ll_i)  
447,450c447
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
---
>       ll_i = s->unseqToSeq[block[j]][0] == ll_i)  
448,450c448
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
---
>       0] == ll_i)  
448,450c448
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
---
>       AssertD ] == ll_i)  
448,450c448
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
---
>       AssertD ( == ll_i)  
448,450c448
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
---
>       AssertD ( ll_i ll_i)  
448,450c448
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
---
>       AssertD ( ll_i < )  
448,451c448
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
<          zPend++;
---
>       AssertD ( ll_i < szPend++;
448,451c448
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
<          zPend++;
---
>       AssertD ( ll_i < s->++;
448,451c448
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
<          zPend++;
---
>       AssertD ( ll_i < s->nInUse;
448,452c448
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
<          zPend++;
<        else 
---
>       AssertD ( ll_i < s->nInUse, else 
448,454c448
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
<          zPend++;
<        else 
< 
<          if (zPend > 0) 
---
>       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" if (zPend > 0) 
448,454c448
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i)  
<          zPend++;
<        else 
< 
<          if (zPend > 0) 
---
>       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" )(zPend > 0) 
450,454c450
<       if (yy[0] == ll_i)  
<          zPend++;
<        else 
< 
<          if (zPend > 0) 
---
>       zPend > 0) 
450,454c450
<       if (yy[0] == ll_i)  
<          zPend++;
<        else 
< 
<          if (zPend > 0) 
---
>       if > 0) 
450,454c450
<       if (yy[0] == ll_i)  
<          zPend++;
<        else 
< 
<          if (zPend > 0) 
---
>       if (0) 
450,454c450
<       if (yy[0] == ll_i)  
<          zPend++;
<        else 
< 
<          if (zPend > 0) 
---
>       if (yy) 
450,455c450
<       if (yy[0] == ll_i)  
<          zPend++;
<        else 
< 
<          if (zPend > 0) 
<          {
---
>       if (yy[{
450,456c450
<       if (yy[0] == ll_i)  
<          zPend++;
<        else 
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
---
>       if (yy[0register UChar  rtmp;
450,456c450
<       if (yy[0] == ll_i)  
<          zPend++;
<        else 
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
---
>       if (yy[0] UChar  rtmp;
(88.3 %, 23907 bytes)
450,454c450
<       if (0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
---
>       if (;
450,455c450
<       if (0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
---
>       if (0rtmp  = yy[1];
451,455c451
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
---
>          = yy[1];
452,455c452
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
---
>             yy[1];
452,455c452
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
---
>             register [1];
452,455c452
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
---
>             register UChar  1];
452,455c452
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
---
>             register UChar  rtmp];
453,455c453
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
---
>             ;
453,456c453
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register yy[1] = yy[0];
453,456c453
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register UChar[1] = yy[0];
453,456c453
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register UChar* 1] = yy[0];
453,456c453
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register UChar* ryy_j] = yy[0];
454,456c454
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             = yy[0];
454,456c454
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register yy[0];
454,456c454
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register UChar  [0];
454,456c454
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             register UChar  rll_i0];
455,456c455
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             ];
455,456c455
<             rtmp  = yy[1];
<             yy[1] = yy[0];
---
>             rtmp  ;
455,457c455
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
---
>             rtmp  = ryy_j = &(yy[1]);
(88.4 %, 23873 bytes)
455,458c455
<             rtmp  ;
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             rtmp  while ( rll_i != rtmp ) ;
456,458c456
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             ( rll_i != rtmp ) ;
456,458c456
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             ryy_j rll_i != rtmp ) ;
456,458c456
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             ryy_j = != rtmp ) ;
456,458c456
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             ryy_j = &rtmp ) ;
456,458c456
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             ryy_j = &() ;
456,458c456
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
---
>             ryy_j = &(yy;
456,459c456
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             ryy_j = &(yy[yy[0] = rtmp;
456,459c456
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             ryy_j = &(yy[1[0] = rtmp;
456,459c456
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             ryy_j = &(yy[1]0] = rtmp;
456,459c456
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             ryy_j = &(yy[1])] = rtmp;
457,459c457
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             = rtmp;
457,459c457
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             rll_i rtmp;
457,459c457
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
---
>             rll_i = ;
(88.4 %, 23811 bytes)
456,458c456
<             ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             ryy_j - &(yy[0]);
456,458c456
<             ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             ( - &(yy[0]);
456,458c456
<             ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             ( rll_i &(yy[0]);
456,458c456
<             ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             ( rll_i != (yy[0]);
456,458c456
<             ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             ( rll_i != rtmp yy[0]);
456,458c456
<             ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             ( rll_i != rtmp ) [0]);
457,458c457
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             0]);
457,458c457
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             yy]);
457,458c457
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             yy[);
457,458c457
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
---
>             yy[0;
457,459c457
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             yy[0] mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
457,459c457
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             yy[0] = [wr] = j+1; wr++; s->mtfFreq[j+1]++;
457,459c457
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             yy[0] = rtmpwr] = j+1; wr++; s->mtfFreq[j+1]++;
458,459c458
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             ] = j+1; wr++; s->mtfFreq[j+1]++;
(88.4 %, 23749 bytes)
456,457c456
<             ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             j+1; wr++; s->mtfFreq[j+1]++;
456,457c456
<             ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
---
>             ryy_j +1; wr++; s->mtfFreq[j+1]++;
(88.4 %, 23708 bytes)
456c456
<             j+1; wr++; s->mtfFreq[j+1]++;
---
>             ++;
456c456
<             j+1; wr++; s->mtfFreq[j+1]++;
---
>             j;
456,457c456
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>             j+}
456,460c456
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
---
>             j+1}
456,462c456
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
< 
<    if (zPend > 0) 
---
>             j+1; if (zPend > 0) 
456,462c456
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
< 
<    if (zPend > 0) 
---
>             j+1; wr(zPend > 0) 
456,462c456
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
< 
<    if (zPend > 0) 
---
>             j+1; wr++zPend > 0) 
456,462c456
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
< 
<    if (zPend > 0) 
---
>             j+1; wr++; > 0) 
456,462c456
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
< 
<    if (zPend > 0) 
---
>             j+1; wr++; s0) 
456,462c456
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
< 
<    if (zPend > 0) 
---
>             j+1; wr++; s->) 
456,464c456
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>             j+1; wr++; s->mtfFreqmtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
456,464c456
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>             j+1; wr++; s->mtfFreq[[wr] = EOB; wr++; s->mtfFreq[EOB]++;
456,464c456
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>             j+1; wr++; s->mtfFreq[jwr] = EOB; wr++; s->mtfFreq[EOB]++;
456,464c456
<             j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>             j+1; wr++; s->mtfFreq[j+] = EOB; wr++; s->mtfFreq[EOB]++;
(88.4 %, 23681 bytes)
456,464c456
<             j;
<          }
< 
<       
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>             j; wr++; s->mtfFreq[EOB]++;
457,464c457
<          }
< 
<       
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>          wr++; s->mtfFreq[EOB]++;
460,464c460
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    ++; s->mtfFreq[EOB]++;
462,464c462
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    ; s->mtfFreq[EOB]++;
462,464c462
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    if s->mtfFreq[EOB]++;
462,464c462
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    if (->mtfFreq[EOB]++;
462,464c462
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    if (zPend mtfFreq[EOB]++;
462,464c462
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    if (zPend > [EOB]++;
462,464c462
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    if (zPend > 0EOB]++;
464c464
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    ]++;
464c464
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
---
>    mtfv++;
(88.5 %, 23641 bytes)
462,465c462
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
>    }
462,469c462
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
>    ; #define BZ_LESSER_ICOST  0
462,469c462
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
>    ; sdefine BZ_LESSER_ICOST  0
462,469c462
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
>    ; s->BZ_LESSER_ICOST  0
462,469c462
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
>    ; s->mtfFreq0
462,470c462
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
---
>    ; s->mtfFreq[#define BZ_GREATER_ICOST 15
462,470c462
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
---
>    ; s->mtfFreq[EOBdefine BZ_GREATER_ICOST 15
462,470c462
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
---
>    ; s->mtfFreq[EOB]BZ_GREATER_ICOST 15
462,470c462
<    ; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
---
>    ; s->mtfFreq[EOB]++15
464,494c464
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
>    #define RETURN(rrr)                               \
464,494c464
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
>    sdefine RETURN(rrr)                               \
464,494c464
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
>    s->RETURN(rrr)                               \
464,494c464
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
>    s->nMTF (rrr)                               \
464,494c464
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
>    s->nMTF = rrr)                               \
(88.5 %, 23602 bytes)
462,491c462
<    }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
>    \
466,492c466
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
<    ;
---
> ;
466,494c466
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
<    ;
< 
< #define GET_BITS(lll,vvv,nnn)                     \
---
> ##define GET_BITS(lll,vvv,nnn)                     \
466,494c466
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
<    ;
< 
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define define GET_BITS(lll,vvv,nnn)                     \
(88.5 %, 23469 bytes)
466,469c466
< ;
< 
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> s->state = lll;                      \
468,469c468
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> ->state = lll;                      \
468,469c468
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> #state = lll;                      \
468,469c468
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> #define = lll;                      \
468,469c468
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> #define GET_BITSlll;                      \
468,469c468
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> #define GET_BITS(;                      \
468,469c468
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
---
> #define GET_BITS(lll\
468,470c468
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
<    while (True) 
---
> #define GET_BITS(lll,while (True) 
468,470c468
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
<    while (True) 
---
> #define GET_BITS(lll,vvv(True) 
468,470c468
< #define GET_BITS(lll,vvv,nnn)                     \
<    case lll: s->state = lll;                      \
<    while (True) 
---
> #define GET_BITS(lll,vvv,True) 
(88.6 %, 23409 bytes)
468,472c468
< #define GET_BITSlll;                      \
<    while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define GET_BITSlllGET_BITS(lll,uuu,8)
468,472c468
< #define GET_BITSlll;                      \
<    while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define GET_BITSlll;                      (lll,uuu,8)
469,472c469
<    while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
<    GET_BITS(lll,uuu,8)
---
>    lll,uuu,8)
(88.6 %, 23326 bytes)
468,470c468
< #define GET_BITSlll;                      (lll,uuu,8)
< 
< #define GET_BIT(lll,uuu)                          \
---
> #define GET_BITSlll;                      \
468,471c468
< #define GET_BITSlll;                      (lll,uuu,8)
< 
< #define GET_BIT(lll,uuu)                          \
<    GET_BITS(lll,uuu,1)
---
> #define GET_BITSlll;                      (GET_BITS(lll,uuu,1)
468,471c468
< #define GET_BITSlll;                      (lll,uuu,8)
< 
< #define GET_BIT(lll,uuu)                          \
<    GET_BITS(lll,uuu,1)
---
> #define GET_BITSlll;                      (lll(lll,uuu,1)
(88.6 %, 23263 bytes)
468,472c468
< #define GET_BITSlll;                      \
<    GET_BITS(lll,uuu,1)
< 
< 
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define GET_BITSlll;                      label2,lval)           \
469,472c469
<    GET_BITS(lll,uuu,1)
< 
< 
< #define GET_MTF_VAL(label1,label2,lval)           \
---
>    ,lval)           \
(88.7 %, 23209 bytes)
468,492c468
< #define GET_BITSlll;                      label2,lval)           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( int errcode )
---
> #define GET_BITSlll;                      ( int errcode )
468,492c468
< #define GET_BITSlll;                      label2,lval)           \
< 
< 
< 
< 
< Int32 BZ2_decompress ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< void BZ2_bz__AssertH__fail ( int errcode )
---
> #define GET_BITSlll;                      label2int errcode )
(88.7 %, 23099 bytes)
468,480c468
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define GET_BITSlll;                      default_bzalloc ( void* opaque, Int32 items, Int32 size )
468,480c468
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define GET_BITSlll;                      ( ( void* opaque, Int32 items, Int32 size )
468,480c468
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define GET_BITSlll;                      ( int void* opaque, Int32 items, Int32 size )
468,480c468
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define GET_BITSlll;                      ( int errcode * opaque, Int32 items, Int32 size )
469,480c469
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> opaque, Int32 items, Int32 size )
473,480c473
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> , Int32 items, Int32 size )
474,480c474
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> Int32 items, Int32 size )
474,480c474
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> int items, Int32 size )
474,480c474
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> int bz_config_ok , Int32 size )
474,480c474
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> int bz_config_ok ( Int32 size )
474,480c474
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> int bz_config_ok ( void size )
475,480c475
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> )
479,480d478
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
480,482d479
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
480,484c480
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> voidvoid default_bzfree ( void* opaque, void* addr )
480,484c480
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzfree ( void* opaque, void* addr )
480,484c480
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, void* addr )
480,484c480
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, void* addr )
480,484c480
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, void* addr )
480,484c480
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, void* addr )
480,484c480
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, void* addr )
480,484c480
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, void* addr )
480,484c480
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 * addr )
480,484c480
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 itemsaddr )
480,484c480
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 items, )
480,485c480
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
< ;
---
> void* default_bzalloc ( void* opaque, Int32 items, Int32 ;
480,489c480
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
---
> void* default_bzalloc ( void* opaque, Int32 items, Int32 size static
481,489d480
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
483,490c483
< static
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
> prepare_new_block ( EState* s )
484,490c484
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
> ( EState* s )
484,490c484
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
> void EState* s )
484,490c484
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
> void default_bzfree * s )
484,490c484
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
> void default_bzfree ( s )
484,490c484
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
---
> void default_bzfree ( void)
484,491c484
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
< ;
---
> void default_bzfree ( void* ;
484,495c484
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
< ;
< 
< 
< 
< static
---
> void default_bzfree ( void* opaquestatic
484,496c484
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
---
> void default_bzfree ( void* opaque, void init_RL ( EState* s )
484,496c484
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
---
> void default_bzfree ( void* opaque, voidinit_RL ( EState* s )
484,496c484
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
---
> void default_bzfree ( void* opaque, void* ( EState* s )
484,496c484
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
---
> void default_bzfree ( void* opaque, void* addr EState* s )
485,496c485
< ;
< 
< 
< 
< static
< void prepare_new_block ( EState* s )
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
---
> * s )
(88.8 %, 23029 bytes)
484,495c484
< void default_bzfree ( void)
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
---
> void default_bzfree ( voidEState* s )
485,495c485
< ;
< 
< 
< 
< static
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
---
> * s )
489,495c489
< static
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
---
> s )
490,495c490
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
---
> )
490,496c490
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
< ;
---
> void ;
490,500c490
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void init_RL int BZ_API(BZ2_bzCompressInit) 
490,500c490
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void init_RL ( BZ_API(BZ2_bzCompressInit) 
490,500c490
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void init_RL ( EState(BZ2_bzCompressInit) 
490,500c490
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void init_RL ( EState* BZ2_bzCompressInit) 
490,500c490
< void init_RL ( EState* s )
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void init_RL ( EState* s ) 
491,501c491
< ;
< 
< 
< static
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> ( bz_stream* strm, 
494,501c494
< static
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> bz_stream* strm, 
495,501c495
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> * strm, 
495,501c495
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> Bool strm, 
495,501c495
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> Bool isempty_RL , 
495,502c495
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> Bool isempty_RL ( int        blockSize100k,
495,502c495
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> Bool isempty_RL ( EStateblockSize100k,
495,502c495
< Bool isempty_RL ( EState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> Bool isempty_RL ( EState* ,
(88.8 %, 22966 bytes)
490,497c490
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> void verbosity,
494,497c494
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> ,
494,498c494
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int int        workFactor )
494,498c494
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int BZ_APIworkFactor )
494,498c494
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int BZ_API()
494,499c494
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
---
> int BZ_API(BZ2_bzCompressInit{
495,500c495
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     Int32   n;
495,500c495
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( n;
495,500c495
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream;
495,501c495
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                     ( bz_stream* EState* s;
495,501c495
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                     ( bz_stream* strm* s;
496,501c496
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      s;
496,501c496
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        ;
496,503c496
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        blockSize100kif (!0) return BZ_CONFIG_ERROR;
497,503c497
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      (!0) return BZ_CONFIG_ERROR;
497,503c497
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        !0) return BZ_CONFIG_ERROR;
497,503c497
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        verbosity0) return BZ_CONFIG_ERROR;
498,503c498
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      ) return BZ_CONFIG_ERROR;
498,503c498
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        return BZ_CONFIG_ERROR;
498,503c498
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        workFactor BZ_CONFIG_ERROR;
499,503c499
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
> ;
500,504d499
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
500,505c500
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    Int32   (strm == NULL || 
500,505c500
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    Int32   nstrm == NULL || 
501,505c501
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    == NULL || 
501,505c501
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    EStateNULL || 
501,505c501
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    EState* || 
501,506c501
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    EState* sblockSize100k < 1 || blockSize100k > 9 ||
503,506c503
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    < 1 || blockSize100k > 9 ||
503,506c503
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if 1 || blockSize100k > 9 ||
503,506c503
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (|| blockSize100k > 9 ||
503,506c503
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (!blockSize100k > 9 ||
503,506c503
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (!0> 9 ||
503,506c503
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (!0) 9 ||
(88.8 %, 22886 bytes)
503,507c503
<    if (!blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    if (!if (workFactor == 0) workFactor = 30;
503,507c503
<    if (!blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    if (!blockSize100k (workFactor == 0) workFactor = 30;
503,507c503
<    if (!blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    if (!blockSize100k > workFactor == 0) workFactor = 30;
503,507c503
<    if (!blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    if (!blockSize100k > 9 == 0) workFactor = 30;
504,507c504
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>        0) workFactor = 30;
(88.9 %, 22802 bytes)
503,504c503
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > ) strm->bzalloc = default_bzalloc;
503,504c503
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > workFactor strm->bzalloc = default_bzalloc;
503,504c503
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > workFactor == ->bzalloc = default_bzalloc;
503,504c503
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > workFactor == 0bzalloc = default_bzalloc;
503,504c503
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > workFactor == 0) = default_bzalloc;
503,504c503
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > workFactor == 0) workFactor default_bzalloc;
503,504c503
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (!blockSize100k > workFactor == 0) workFactor = ;
503,505c503
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (!blockSize100k > workFactor == 0) workFactor = 30if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
504,505c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    (strm->bzfree == NULL) strm->bzfree = default_bzfree;
504,505c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if strm->bzfree == NULL) strm->bzfree = default_bzfree;
504,505c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (->bzfree == NULL) strm->bzfree = default_bzfree;
504,505c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strmbzfree == NULL) strm->bzfree = default_bzfree;
504,505c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->== NULL) strm->bzfree = default_bzfree;
504,505c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc NULL) strm->bzfree = default_bzfree;
504,505c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == ) strm->bzfree = default_bzfree;
504,505c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULLstrm->bzfree = default_bzfree;
504,505c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) ->bzfree = default_bzfree;
504,505c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) strmbzfree = default_bzfree;
504,505c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) strm->= default_bzfree;
504,505c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) strm->bzalloc default_bzfree;
504,505c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) strm->bzalloc = ;
504,507c504
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strm->bzalloc == NULL) strm->bzalloc = default_bzallocs = BZALLOC( sizeof(EState) );
505,507c505
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    = BZALLOC( sizeof(EState) );
505,507c505
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if BZALLOC( sizeof(EState) );
505,507c505
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (( sizeof(EState) );
505,507c505
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strmsizeof(EState) );
505,507c505
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strm->(EState) );
505,507c505
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strm->bzfree EState) );
505,507c505
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strm->bzfree == ) );
505,507c505
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strm->bzfree == NULL);
505,507c505
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (strm->bzfree == NULL) ;
(88.9 %, 22737 bytes)
505,507c505
<    if (strm->bzfree == NULL);
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
---
>    if (strm->bzfree == NULLstrm;
506,507d505
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
506,508d505
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
506,509c506
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
---
>    if ->arr1 = NULL;
506,509c506
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
---
>    if (arr1 = NULL;
506,509c506
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
---
>    if (s = NULL;
(88.9 %, 22679 bytes)
505,509c505
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    if (strm->bzfree == NULL)ftab = NULL;
507,509c507
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    = NULL;
507,509c507
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    sNULL;
507,509c507
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    s->;
507,511c507
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
---
>    s->arr1 n       = 100000 * blockSize100k;
507,511c507
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
---
>    s->arr1 = = 100000 * blockSize100k;
507,511c507
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
---
>    s->arr1 = NULL100000 * blockSize100k;
508,511c508
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
---
>    * blockSize100k;
508,511c508
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
---
>    sblockSize100k;
508,511c508
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
---
>    s->;
508,512c508
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr2 s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
508,512c508
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr2 = ->arr1 = BZALLOC( n                  * sizeof(UInt32) );
508,512c508
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr2 = NULLarr1 = BZALLOC( n                  * sizeof(UInt32) );
509,512c509
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    = BZALLOC( n                  * sizeof(UInt32) );
509,512c509
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof(UInt32) );
509,512c509
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->( n                  * sizeof(UInt32) );
509,512c509
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->ftab n                  * sizeof(UInt32) );
509,512c509
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->ftab = * sizeof(UInt32) );
509,512c509
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->ftab = NULLsizeof(UInt32) );
511,512c511
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    (UInt32) );
511,512c511
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    n       UInt32) );
511,512c511
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    n       = ) );
511,512c511
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    n       = 100000 );
511,512c511
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    n       = 100000 * ;
511,513c511
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    n       = 100000 * blockSize100ks->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
512,513c512
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
512,513c512
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sarr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
(89.0 %, 22613 bytes)
509,510c509
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
509,510c509
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
509,510c509
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  +BZ_N_OVERSHOOT) * sizeof(UInt32) );
509,510c509
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * BZ_N_OVERSHOOT) * sizeof(UInt32) );
509,510c509
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof) * sizeof(UInt32) );
509,510c509
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof(* sizeof(UInt32) );
509,510c509
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof(UInt32sizeof(UInt32) );
509,510c509
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof(UInt32) (UInt32) );
509,510c509
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof(UInt32) )UInt32) );
510c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ) );
510c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s);
510c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->;
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = ->ftab = BZALLOC( 65537              * sizeof(UInt32) );
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOCftab = BZALLOC( 65537              * sizeof(UInt32) );
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( = BZALLOC( 65537              * sizeof(UInt32) );
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (BZALLOC( 65537              * sizeof(UInt32) );
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n( 65537              * sizeof(UInt32) );
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+65537              * sizeof(UInt32) );
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT* sizeof(UInt32) );
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) sizeof(UInt32) );
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * (UInt32) );
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeofUInt32) );
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof() );
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32);
510,511c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ;
510,513c510
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) )if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    ss->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = == NULL || s->arr2 == NULL || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOCNULL || s->arr2 == NULL || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( || s->arr2 == NULL || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              s->arr2 == NULL || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * ->arr2 == NULL || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * sizeofarr2 == NULL || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * sizeof(== NULL || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * sizeof(UInt32NULL || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * sizeof(UInt32) || s->ftab == NULL) 
511,513c511
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * sizeof(UInt32) )s->ftab == NULL) 
513c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    ->ftab == NULL) 
513c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if ftab == NULL) 
513c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (== NULL) 
513c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (sNULL) 
513c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->) 
513,515c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 s->blockNo           = 0;
513,515c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == ->blockNo           = 0;
513,515c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL blockNo           = 0;
513,515c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || = 0;
513,515c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || s0;
513,515c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || s->;
513,516c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 s->state             = BZ_S_INPUT;
513,516c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == ->state             = BZ_S_INPUT;
513,516c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL state             = BZ_S_INPUT;
513,516c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || = BZ_S_INPUT;
513,516c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || sBZ_S_INPUT;
513,516c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->;
513,517c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab s->mode              = BZ_M_RUNNING;
513,517c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == ->mode              = BZ_M_RUNNING;
513,517c513
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULLmode              = BZ_M_RUNNING;
515,517c515
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    = BZ_M_RUNNING;
515,517c515
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    sBZ_M_RUNNING;
515,517c515
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    s->;
515,518c515
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s->blockNo           s->combinedCRC       = 0;
515,518c515
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s->blockNo           = ->combinedCRC       = 0;
515,518c515
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s->blockNo           = 0combinedCRC       = 0;
516,518c516
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    = 0;
516,518c516
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s0;
516,518c516
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s->;
516,519c516
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    s->state             s->blockSize100k     = blockSize100k;
516,519c516
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    s->state             = ->blockSize100k     = blockSize100k;
516,519c516
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    s->state             = BZ_S_INPUTblockSize100k     = blockSize100k;
517,519c517
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    = blockSize100k;
517,519c517
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    sblockSize100k;
517,519c517
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    s->;
517,520c517
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->mode              s->nblockMAX         = 100000 * blockSize100k - 19;
517,520c517
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->mode              = ->nblockMAX         = 100000 * blockSize100k - 19;
517,520c517
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->mode              = BZ_M_RUNNINGnblockMAX         = 100000 * blockSize100k - 19;
518,520c518
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    = 100000 * blockSize100k - 19;
518,520c518
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s100000 * blockSize100k - 19;
518,520c518
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->* blockSize100k - 19;
518,520c518
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->combinedCRC       blockSize100k - 19;
518,520c518
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->combinedCRC       = - 19;
518,520c518
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->combinedCRC       = 019;
519,520c519
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    ;
(89.0 %, 22520 bytes)
518,522c518
<    s->combinedCRC       = - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->combinedCRC       = s->block             = (UChar*)s->arr2;
518,522c518
<    s->combinedCRC       = - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->combinedCRC       = - ->block             = (UChar*)s->arr2;
518,522c518
<    s->combinedCRC       = - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->combinedCRC       = - 19block             = (UChar*)s->arr2;
519,522c519
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    = (UChar*)s->arr2;
519,522c519
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s(UChar*)s->arr2;
519,522c519
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->UChar*)s->arr2;
519,522c519
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->verbosity         *)s->arr2;
519,522c519
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->verbosity         = )s->arr2;
519,522c519
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->verbosity         = verbositys->arr2;
520,522c520
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    ->arr2;
520,522c520
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    sarr2;
520,522c520
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->;
520,523c520
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->workFactor        s->mtfv              = (UInt16*)s->arr1;
520,523c520
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->workFactor        = ->mtfv              = (UInt16*)s->arr1;
520,523c520
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->workFactor        = workFactormtfv              = (UInt16*)s->arr1;
(89.1 %, 22435 bytes)
518,519c518
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = = (UInt16*)s->arr1;
518,519c518
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s(UInt16*)s->arr1;
518,519c518
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->UInt16*)s->arr1;
518,519c518
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             *)s->arr1;
518,519c518
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             = )s->arr1;
518,519c518
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             = (s->arr1;
518,519c518
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             = (UChar->arr1;
518,519c518
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             = (UChar*arr1;
518,519c518
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             = (UChar*);
518,520c518
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    s->combinedCRC       = s->block             = (UChar*)ss->zbits             = NULL;
518,520c518
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    s->combinedCRC       = s->block             = (UChar*)s->->zbits             = NULL;
518,520c518
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    s->combinedCRC       = s->block             = (UChar*)s->arr2zbits             = NULL;
519,520c519
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    = NULL;
519,520c519
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    sNULL;
519,520c519
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    s->;
519,521c519
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              s->ptr               = (UInt32*)s->arr1;
519,521c519
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = ->ptr               = (UInt32*)s->arr1;
519,521c519
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (ptr               = (UInt32*)s->arr1;
519,521c519
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (UInt16= (UInt32*)s->arr1;
519,521c519
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (UInt16*(UInt32*)s->arr1;
519,521c519
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (UInt16*)UInt32*)s->arr1;
519,521c519
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (UInt16*)s*)s->arr1;
519,521c519
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (UInt16*)s->)s->arr1;
519,521c519
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (UInt16*)s->arr1s->arr1;
520,521c520
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    ->arr1;
520,521c520
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    sarr1;
520,521c520
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->;
520,523c520
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->zbits             strm->state          = s;
520,523c520
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->zbits             = ->state          = s;
520,523c520
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->zbits             = NULLstate          = s;
521,523c521
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    = s;
521,523c521
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    ss;
521,523c521
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->;
521,524c521
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               strm->total_in_lo32  = 0;
521,524c521
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = ->total_in_lo32  = 0;
521,524c521
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (total_in_lo32  = 0;
521,524c521
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32= 0;
521,524c521
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*0;
521,524c521
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*);
521,525c521
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    s->ptr               = (UInt32*)sstrm->total_in_hi32  = 0;
521,525c521
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    s->ptr               = (UInt32*)s->->total_in_hi32  = 0;
521,525c521
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    s->ptr               = (UInt32*)s->arr1total_in_hi32  = 0;
523,525c523
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    = 0;
523,525c523
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    strm0;
523,525c523
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    strm->;
523,526c523
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm->state          strm->total_out_lo32 = 0;
523,526c523
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm->state          = ->total_out_lo32 = 0;
523,526c523
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm->state          = stotal_out_lo32 = 0;
524,526c524
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    = 0;
524,526c524
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm0;
524,526c524
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm->;
524,527c524
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm->total_in_lo32  strm->total_out_hi32 = 0;
524,527c524
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm->total_in_lo32  = ->total_out_hi32 = 0;
524,527c524
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm->total_in_lo32  = 0total_out_hi32 = 0;
525,527c525
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    = 0;
525,527c525
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm0;
525,527c525
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm->;
525,528c525
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
---
>    strm->total_in_hi32  ;
525,529c525
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
---
>    strm->total_in_hi32  = ;
525,530c525
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
<    return BZ_OK;
---
>    strm->total_in_hi32  = 0return BZ_OK;
526,530c526
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
<    ;
<    return BZ_OK;
---
>    BZ_OK;
(89.1 %, 22369 bytes)
525,553c525
<    strm->total_in_hi32  ;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>    strm->total_in_hi32  static
526,554c526
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>    Bool handle_compress ( bz_stream* strm )
527,554c527
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>    handle_compress ( bz_stream* strm )
527,554c527
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>    return ( bz_stream* strm )
527,554c527
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>    return BZ_OKbz_stream* strm )
528,554c528
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> * strm )
540,554c540
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> strm )
540,554c540
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> #)
540,555c540
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
---
> #define ;
540,559c540
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCKint BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
540,559c540
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
540,559c540
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs(BZ2_bzCompress) ( bz_stream *strm, int action )
540,559c540
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,BZ2_bzCompress) ( bz_stream *strm, int action )
540,559c540
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,zchh0) ( bz_stream *strm, int action )
540,559c540
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,zchh0)               ( bz_stream *strm, int action )
553,559c553
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> bz_stream *strm, int action )
554,559c554
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> *strm, int action )
554,559c554
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> Bool strm, int action )
554,559c554
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> Bool handle_compress , int action )
554,559c554
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> Bool handle_compress ( int action )
554,559c554
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> Bool handle_compress ( bz_streamaction )
554,559c554
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> Bool handle_compress ( bz_stream* )
554,560c554
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
---
> Bool handle_compress ( bz_stream* strm {
555,562c555
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> EState* s;
559,562c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> * s;
559,562c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int s;
559,562c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(if (strm == NULL) return BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress(strm == NULL) return BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) strm == NULL) return BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( == NULL) return BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream NULL) return BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *) return BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strmreturn BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int ;
559,564c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action s = strm->state;
560,564c560
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> = strm->state;
562,564c562
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    strm->state;
562,564c562
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    EState->state;
562,564c562
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    EState* state;
563,564d562
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
563,564d562
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
563,564d562
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
(89.1 %, 22305 bytes)
562,564c562
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    EState* s!= strm) return BZ_PARAM_ERROR;
563,564c563
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    strm) return BZ_PARAM_ERROR;
563,564c563
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if ) return BZ_PARAM_ERROR;
563,564c563
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (return BZ_PARAM_ERROR;
563,564c563
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s BZ_PARAM_ERROR;
563,564c563
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s == ;
563,566c563
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
---
>    if (s == NULLpreswitch:
563,566c563
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
---
>    if (s == NULL) :
563,567c563
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
---
>    if (s == NULL) return switch (s->mode) 
563,567c563
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
---
>    if (s == NULL) return BZ_PARAM_ERROR(s->mode) 
564,567c564
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
---
>    s->mode) 
564,567c564
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
---
>    if ->mode) 
564,567c564
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
---
>    if (mode) 
564,567c564
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
---
>    if (s) 
564,568c564
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
---
>    if (s->return BZ_OK; 
564,568c564
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
---
>    if (s->strm BZ_OK; 
564,568c564
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
---
>    if (s->strm != ; 
564,569c564
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
>    if (s->strm != strm}
564,573c564
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    if (s->strm != strm) int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
564,573c564
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    if (s->strm != strm) return BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
564,573c564
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    if (s->strm != strm) return BZ_PARAM_ERROR(BZ2_bzCompressEnd)  ( bz_stream *strm )
566,573c566
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    BZ2_bzCompressEnd)  ( bz_stream *strm )
566,573c566
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    preswitch)  ( bz_stream *strm )
567,573c567
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    ( bz_stream *strm )
567,573c567
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    switch bz_stream *strm )
567,573c567
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    switch (*strm )
(89.2 %, 22233 bytes)
564,571c564
<    if (s) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
---
>    if (s{
565,571d564
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
565,572c565
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
---
>    return * s;
565,572c565
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
---
>    return BZ_OKs;
566,572c566
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
---
> ;
570,573c570
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> if (strm == NULL) return BZ_PARAM_ERROR;
570,573c570
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int (strm == NULL) return BZ_PARAM_ERROR;
570,573c570
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_APIstrm == NULL) return BZ_PARAM_ERROR;
570,573c570
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(== NULL) return BZ_PARAM_ERROR;
570,573c570
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEndNULL) return BZ_PARAM_ERROR;
570,573c570
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEnd)  ) return BZ_PARAM_ERROR;
570,573c570
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEnd)  ( return BZ_PARAM_ERROR;
570,573c570
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEnd)  ( bz_stream BZ_PARAM_ERROR;
570,573c570
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *;
570,574c570
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm s = strm->state;
(89.2 %, 22163 bytes)
567,568d566
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
567,568d566
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
567,568d566
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
(89.2 %, 22099 bytes)
566,568c566
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> != strm) return BZ_PARAM_ERROR;
567,568c567
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    strm) return BZ_PARAM_ERROR;
567,568c567
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if ) return BZ_PARAM_ERROR;
567,568c567
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (return BZ_PARAM_ERROR;
567,568c567
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s BZ_PARAM_ERROR;
567,568c567
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s == ;
567,570c567
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s == NULLif (s->arr1 != NULL) BZFREE(s->arr1);
567,570c567
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s == NULL) (s->arr1 != NULL) BZFREE(s->arr1);
567,570c567
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s == NULL) return s->arr1 != NULL) BZFREE(s->arr1);
567,570c567
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s == NULL) return BZ_PARAM_ERROR->arr1 != NULL) BZFREE(s->arr1);
568,570c568
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    arr1 != NULL) BZFREE(s->arr1);
568,570c568
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if != NULL) BZFREE(s->arr1);
568,570c568
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (NULL) BZFREE(s->arr1);
568,570c568
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s) BZFREE(s->arr1);
568,570c568
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s->BZFREE(s->arr1);
568,570c568
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s->strm (s->arr1);
568,570c568
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (s->strm != s->arr1);
(89.2 %, 22040 bytes)
568,569c568
<    if (NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (NULL) BZFREE(s->arr2);
568,569c568
<    if (NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (NULL) BZFREE(s->arr2);
(89.3 %, 21999 bytes)
568,569c568
<    if (NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (NULL) BZFREE(s->ftab);
568,569c568
<    if (NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (NULL) BZFREE(s->ftab);
(89.3 %, 21958 bytes)
568,569c568
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
---
>    if (;
568,571c568
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
---
>    if (NULLstrm->state = NULL;   
568,571c568
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
---
>    if (NULL) ->state = NULL;   
568,571c568
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
---
>    if (NULL) BZFREEstate = NULL;   
568,571c568
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
---
>    if (NULL) BZFREE(= NULL;   
568,571c568
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
---
>    if (NULL) BZFREE(sNULL;   
568,571c568
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
---
>    if (NULL) BZFREE(s->;   
568,573c568
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
---
>    if (NULL) BZFREE(s->ftabreturn BZ_OK;
568,573c568
<    if (NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
---
>    if (NULL) BZFREE(s->ftab)BZ_OK;
569,573c569
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
---
>    ;
569,574c569
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
>    BZFREE}
569,582c569
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZFREE(int BZ_API(BZ2_bzDecompressInit) 
569,582c569
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZFREE(strmBZ_API(BZ2_bzDecompressInit) 
569,582c569
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZFREE(strm->(BZ2_bzDecompressInit) 
569,582c569
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZFREE(strm->stateBZ2_bzDecompressInit) 
569,582c569
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZFREE(strm->state)) 
571,583c571
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    ( bz_stream* strm, 
571,583c571
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strmbz_stream* strm, 
571,583c571
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->* strm, 
571,583c571
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->state strm, 
571,583c571
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->state = , 
571,584c571
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>    strm->state = NULLint        verbosity,
573,584c573
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>    verbosity,
573,584c573
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>    return ,
(89.3 %, 21894 bytes)
569,581c569
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>    int        small )
570,581c570
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> small )
578,581c578
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> )
578,582c578
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
---
> int {
578,583c578
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
> int BZ_APIDState* s;
578,583c578
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
> int BZ_API(* s;
578,583c578
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
> int BZ_API(BZ2_bzDecompressInits;
579,583c579
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ;
579,585c579
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      ( if (!0) return BZ_CONFIG_ERROR;
579,585c579
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      ( bz_stream(!0) return BZ_CONFIG_ERROR;
579,585c579
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      ( bz_stream* !0) return BZ_CONFIG_ERROR;
579,585c579
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      ( bz_stream* strm0) return BZ_CONFIG_ERROR;
580,585c580
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        ) return BZ_CONFIG_ERROR;
580,585c580
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        int        return BZ_CONFIG_ERROR;
580,585c580
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        int        verbosityBZ_CONFIG_ERROR;
581,585c581
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        ;
581,587c581
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>                        int        if (strm == NULL) return BZ_PARAM_ERROR;
581,587c581
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>                        int        small (strm == NULL) return BZ_PARAM_ERROR;
582,587c582
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> strm == NULL) return BZ_PARAM_ERROR;
583,587c583
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    == NULL) return BZ_PARAM_ERROR;
583,587c583
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    DStateNULL) return BZ_PARAM_ERROR;
583,587c583
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    DState* ) return BZ_PARAM_ERROR;
583,587c583
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    DState* sreturn BZ_PARAM_ERROR;
585,587c585
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR;
585,587c585
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if ;
585,588c585
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (if (small != 0 && small != 1) return BZ_PARAM_ERROR;
585,588c585
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!(small != 0 && small != 1) return BZ_PARAM_ERROR;
585,588c585
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!0small != 0 && small != 1) return BZ_PARAM_ERROR;
585,588c585
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!0) != 0 && small != 1) return BZ_PARAM_ERROR;
585,588c585
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!0) return 0 && small != 1) return BZ_PARAM_ERROR;
585,588c585
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR&& small != 1) return BZ_PARAM_ERROR;
587,588c587
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    small != 1) return BZ_PARAM_ERROR;
587,588c587
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if != 1) return BZ_PARAM_ERROR;
587,588c587
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (1) return BZ_PARAM_ERROR;
(89.3 %, 21833 bytes)
585,586d584
<    BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
585,587c585
<    BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    BZ_PARAM_ERROR(verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
586,587c586
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
586,587c586
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if < 0 || verbosity > 4) return BZ_PARAM_ERROR;
586,587c586
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (0 || verbosity > 4) return BZ_PARAM_ERROR;
586,587c586
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (small || verbosity > 4) return BZ_PARAM_ERROR;
(89.4 %, 21758 bytes)
585,587c585
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
585,587c585
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if ->bzalloc == NULL) strm->bzalloc = default_bzalloc;
585,587c585
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc == NULL) strm->bzalloc = default_bzalloc;
585,587c585
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
585,587c585
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (verbosity < NULL) strm->bzalloc = default_bzalloc;
585,587c585
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (verbosity < 0 ) strm->bzalloc = default_bzalloc;
(89.4 %, 21691 bytes)
585,586c585
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity NULL) strm->bzfree = default_bzfree;
585,586c585
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == ) strm->bzfree = default_bzfree;
585,586c585
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == NULLstrm->bzfree = default_bzfree;
585,586c585
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == NULL) ->bzfree = default_bzfree;
585,586c585
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == NULL) strmbzfree = default_bzfree;
585,586c585
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == NULL) strm->= default_bzfree;
585,586c585
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == NULL) strm->bzalloc default_bzfree;
585,586c585
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (verbosity == NULL) strm->bzalloc = ;
585,588c585
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (verbosity == NULL) strm->bzalloc = default_bzallocs = BZALLOC( sizeof(DState) );
586,588c586
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    = BZALLOC( sizeof(DState) );
586,588c586
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if BZALLOC( sizeof(DState) );
586,588c586
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (( sizeof(DState) );
586,588c586
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strmsizeof(DState) );
586,588c586
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->(DState) );
586,588c586
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->bzfree DState) );
586,588c586
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->bzfree == ) );
586,588c586
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->bzfree == NULL);
586,588c586
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->bzfree == NULL) ;
(89.4 %, 21626 bytes)
586,588c586
<    if (strm->bzfree == NULL);
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
---
>    if (strm->bzfree == NULLstrm;
587,588d586
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
587,588d586
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
587,589c587
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
---
>    if ->state              = s;
587,589c587
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
---
>    if (state              = s;
(89.5 %, 21551 bytes)
586,589c586
<    if (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    if (strm->bzfree == NULL)bsLive                = 0;
587,589c587
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    = 0;
587,589c587
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strm0;
587,589c587
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strm->;
587,590c587
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    strm->state              s->bsBuff                = 0;
587,590c587
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    strm->state              = ->bsBuff                = 0;
587,590c587
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    strm->state              = sbsBuff                = 0;
588,590c588
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    = 0;
588,590c588
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    s0;
588,590c588
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    s->;
588,591c588
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->state                 s->calculatedCombinedCRC = 0;
588,591c588
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->state                 = ->calculatedCombinedCRC = 0;
588,591c588
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->state                 = BZ_X_MAGIC_1calculatedCombinedCRC = 0;
589,591c589
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    = 0;
589,591c589
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s0;
589,591c589
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->;
589,592c589
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsLive                strm->total_in_lo32      = 0;
589,592c589
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsLive                = ->total_in_lo32      = 0;
589,592c589
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsLive                = 0total_in_lo32      = 0;
590,592c590
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    = 0;
590,592c590
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s0;
590,592c590
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->;
590,593c590
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->bsBuff                strm->total_in_hi32      = 0;
590,593c590
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->bsBuff                = ->total_in_hi32      = 0;
590,593c590
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->bsBuff                = 0total_in_hi32      = 0;
591,593c591
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    = 0;
591,593c591
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s0;
591,593c591
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->;
591,594c591
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    s->calculatedCombinedCRC strm->total_out_lo32     = 0;
591,594c591
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    s->calculatedCombinedCRC = ->total_out_lo32     = 0;
591,594c591
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    s->calculatedCombinedCRC = 0total_out_lo32     = 0;
592,594c592
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    = 0;
592,594c592
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    strm0;
592,594c592
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    strm->;
592,595c592
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm->total_in_lo32      strm->total_out_hi32     = 0;
592,595c592
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm->total_in_lo32      = ->total_out_hi32     = 0;
592,595c592
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm->total_in_lo32      = 0total_out_hi32     = 0;
593,595c593
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    = 0;
593,595c593
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm0;
593,595c593
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm->;
593,596c593
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_in_hi32      s->smallDecompress       = (Bool)small;
593,596c593
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_in_hi32      = ->smallDecompress       = (Bool)small;
593,596c593
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_in_hi32      = 0smallDecompress       = (Bool)small;
594,596c594
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    = (Bool)small;
594,596c594
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm(Bool)small;
594,596c594
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->Bool)small;
594,596c594
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_out_lo32     )small;
594,596c594
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_out_lo32     = small;
595,596d594
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
(89.5 %, 21479 bytes)
594,597c594
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    strm->total_out_lo32     = ->tt                    = NULL;
594,597c594
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    strm->total_out_lo32     = smalltt                    = NULL;
595,597c595
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    = NULL;
595,597c595
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    sNULL;
595,597c595
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    s->;
595,598c595
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s->ll4                   s->currBlockNo           = 0;
595,598c595
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s->ll4                   = ->currBlockNo           = 0;
595,598c595
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s->ll4                   = NULLcurrBlockNo           = 0;
596,598c596
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    = 0;
596,598c596
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s0;
596,598c596
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s->;
596,599c596
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    s->ll16                  s->verbosity             = verbosity;
596,599c596
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    s->ll16                  = ->verbosity             = verbosity;
596,599c596
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    s->ll16                  = NULLverbosity             = verbosity;
597,599c597
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    = verbosity;
597,599c597
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    sverbosity;
597,599c597
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    s->;
597,601c597
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
---
>    s->tt                    return BZ_OK;
597,601c597
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
---
>    s->tt                    = BZ_OK;
598,601d597
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
598,602c598
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
---
>    }
(89.6 %, 21388 bytes)
597,614c597
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
>    s->tt                    = ( DState* s )
597,614c597
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
>    s->tt                    = BZ_OKDState* s )
598,614c598
< }
< 
< 
< 
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> * s )
602,614c602
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> s )
603,614c603
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
---
> )
603,615c603
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
---
> void ;
603,619c603
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> void unRLE_obuf_to_output_FAST int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
603,619c603
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> void unRLE_obuf_to_output_FAST ( BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
603,619c603
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> void unRLE_obuf_to_output_FAST ( DState(BZ2_bzDecompress) ( bz_stream *strm )
603,619c603
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> void unRLE_obuf_to_output_FAST ( DState* BZ2_bzDecompress) ( bz_stream *strm )
603,619c603
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> void unRLE_obuf_to_output_FAST ( DState* s ) ( bz_stream *strm )
604,619c604
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> ( bz_stream *strm )
613,619c613
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> bz_stream *strm )
614,619c614
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> *strm )
614,619c614
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> void strm )
614,619c614
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> void unRLE_obuf_to_output_SMALL )
614,620c614
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
---
> void unRLE_obuf_to_output_SMALL ( {
614,621c614
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> void unRLE_obuf_to_output_SMALL ( DStateDState* s;
(89.6 %, 21285 bytes)
604,609d603
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
607,610c607
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> if (strm == NULL) return BZ_PARAM_ERROR;
607,610c607
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int (strm == NULL) return BZ_PARAM_ERROR;
607,610c607
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_APIstrm == NULL) return BZ_PARAM_ERROR;
607,610c607
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(== NULL) return BZ_PARAM_ERROR;
607,610c607
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressNULL) return BZ_PARAM_ERROR;
607,610c607
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompress) ) return BZ_PARAM_ERROR;
607,610c607
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompress) ( return BZ_PARAM_ERROR;
607,610c607
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream BZ_PARAM_ERROR;
607,610c607
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream *;
607,611c607
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream *strm s = strm->state;
608,611c608
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> = strm->state;
609,611c609
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    strm->state;
609,611c609
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    DState->state;
609,611c609
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    DState* state;
610,611d609
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
610,611d609
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
610,611d609
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
(89.6 %, 21221 bytes)
609,611c609
<    DState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    DState* s!= strm) return BZ_PARAM_ERROR;
610,611c610
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    strm) return BZ_PARAM_ERROR;
610,611c610
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if ) return BZ_PARAM_ERROR;
610,611c610
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (return BZ_PARAM_ERROR;
610,611c610
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s BZ_PARAM_ERROR;
610,611c610
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s == ;
610,613c610
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
---
>    if (s == NULLwhile (True) 
610,613c610
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
---
>    if (s == NULL) (True) 
610,613c610
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
---
>    if (s == NULL) return True) 
610,613c610
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
---
>    if (s == NULL) return BZ_PARAM_ERROR) 
611,614d610
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
(89.7 %, 21141 bytes)
610,619c610
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    if (s == NULL) BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
610,619c610
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    if (s == NULL) ((BZ2_bzDecompressEnd)  ( bz_stream *strm )
610,619c610
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    if (s == NULL) (TrueBZ2_bzDecompressEnd)  ( bz_stream *strm )
612,619c612
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    )  ( bz_stream *strm )
612,619c612
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    AssertH ( bz_stream *strm )
612,619c612
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    AssertH ( bz_stream *strm )
612,619c612
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    AssertH ( 0*strm )
612,619c612
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    AssertH ( 0, strm )
612,619c612
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    AssertH ( 0, 6001 )
612,620c612
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
---
>    AssertH ( 0, 6001 ){
614,620d613
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
614,621c614
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
---
>    return * s;
614,621c614
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
---
>    return 0s;
615,621c615
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
---
> ;
619,622c619
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> if (strm == NULL) return BZ_PARAM_ERROR;
619,622c619
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int (strm == NULL) return BZ_PARAM_ERROR;
619,622c619
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_APIstrm == NULL) return BZ_PARAM_ERROR;
619,622c619
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(== NULL) return BZ_PARAM_ERROR;
619,622c619
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEndNULL) return BZ_PARAM_ERROR;
619,622c619
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEnd)  ) return BZ_PARAM_ERROR;
619,622c619
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEnd)  ( return BZ_PARAM_ERROR;
619,622c619
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream BZ_PARAM_ERROR;
619,622c619
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *;
619,623c619
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm s = strm->state;
620,623c620
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> = strm->state;
621,623c621
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    strm->state;
621,623c621
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    DState->state;
621,623c621
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    DState* state;
(89.7 %, 21069 bytes)
616,617d615
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
616,617d615
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
616,617d615
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
(89.8 %, 21005 bytes)
615,617c615
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> != strm) return BZ_PARAM_ERROR;
616,617c616
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    strm) return BZ_PARAM_ERROR;
616,617c616
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if ) return BZ_PARAM_ERROR;
616,617c616
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (return BZ_PARAM_ERROR;
616,617c616
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s BZ_PARAM_ERROR;
616,617c616
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s == ;
616,619c616
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s == NULLif (s->tt   != NULL) BZFREE(s->tt);
616,619c616
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s == NULL) (s->tt   != NULL) BZFREE(s->tt);
616,619c616
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s == NULL) return s->tt   != NULL) BZFREE(s->tt);
616,619c616
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s == NULL) return BZ_PARAM_ERROR->tt   != NULL) BZFREE(s->tt);
617,619c617
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    tt   != NULL) BZFREE(s->tt);
617,619c617
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if != NULL) BZFREE(s->tt);
617,619c617
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (NULL) BZFREE(s->tt);
617,619c617
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s) BZFREE(s->tt);
617,619c617
<    if (s->strm != strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (s->BZFREE(s->tt);
(89.8 %, 20946 bytes)
617,618c617
<    if (NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (NULL) BZFREE(s->ll16);
617,618c617
<    if (NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (NULL) BZFREE(s->ll16);
(89.8 %, 20907 bytes)
617,618c617
<    if (NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (NULL) BZFREE(s->ll4);
617,618c617
<    if (NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (NULL) BZFREE(s->ll4);
617,618c617
<    if (NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (NULL) BZFREE(s->ll4);
(89.8 %, 20866 bytes)
617,619c617
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
---
>    if (;
617,620c617
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
---
>    if (NULLstrm->state = NULL;
617,620c617
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
---
>    if (NULL) ->state = NULL;
617,620c617
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
---
>    if (NULL) BZFREEstate = NULL;
617,620c617
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
---
>    if (NULL) BZFREE(= NULL;
617,620c617
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
---
>    if (NULL) BZFREE(sNULL;
617,620c617
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
---
>    if (NULL) BZFREE(s->;
617,622c617
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
---
>    if (NULL) BZFREE(s->ll4return BZ_OK;
617,622c617
<    if (NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
---
>    if (NULL) BZFREE(s->ll4)BZ_OK;
619,622c619
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
---
>    ;
619,623c619
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
>    BZFREE}
619,630c619
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(#define BZ_SETERR(eee)                    \
619,630c619
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(strmdefine BZ_SETERR(eee)                    \
619,630c619
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(strm->BZ_SETERR(eee)                    \
619,630c619
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(strm->state(eee)                    \
619,630c619
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(strm->state)eee)                    \
620,630c620
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    )                    \
620,630c620
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    strm\
620,633c620
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
---
>    strm->typedef 
620,634c620
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
>    strm->state struct {
620,634c620
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
>    strm->state = {
620,635c620
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    strm->state = NULLFILE*     handle;
622,635c622
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    *     handle;
622,635c622
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    return handle;
(89.8 %, 20806 bytes)
620,632d619
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
620,633c620
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> Char      buf[BZ_MAX_UNUSED];
627,633c627
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> buf[BZ_MAX_UNUSED];
627,633c627
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #[BZ_MAX_UNUSED];
627,633c627
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_MAX_UNUSED];
627,633c627
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR];
627,633c627
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(;
627,634c627
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> #define BZ_SETERR(eeeInt32     bufN;
627,634c627
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> #define BZ_SETERR(eee)                    bufN;
630,634c630
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> ;
631,635c631
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>    Bool      writing;
631,635c631
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>    struct writing;
632,635c632
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       ;
632,636c632
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       FILEbz_stream strm;
632,636c632
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       FILE*     strm;
633,636d632
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
633,636d632
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
633,637c633
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      lastErr;
633,637c633
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf;
633,638c633
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Char      buf[Bool      initialisedOk;
633,638c633
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Char      buf[BZ_MAX_UNUSEDinitialisedOk;
634,638d633
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
634,639c634
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       }
634,640c634
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Int32     bzFile;
635,640d634
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
635,648c635
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) 
635,648c635
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      * BZ_API(BZ2_bzWriteOpen) 
635,648c635
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      writingBZ_API(BZ2_bzWriteOpen) 
636,648c636
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       (BZ2_bzWriteOpen) 
636,648c636
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream BZ2_bzWriteOpen) 
636,648c636
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strm) 
637,649c637
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       ( int*  bzerror,      
637,649c637
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Int32     int*  bzerror,      
637,649c637
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Int32     lastErr*  bzerror,      
638,649c638
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       bzerror,      
638,649c638
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      ,      
638,650c638
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>       Bool      initialisedOkFILE* f, 
639,650c639
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    * f, 
640,650c640
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    f, 
640,650c640
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFile, 
648,651c648
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> int   blockSize100k, 
648,651c648
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILEblockSize100k, 
648,651c648
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* , 
648,652c648
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_APIint   verbosity,
648,652c648
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(verbosity,
648,652c648
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzWriteOpen,
649,653c649
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     int   workFactor )
649,653c649
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( workFactor )
649,653c649
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int)
649,654c649
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                     ( int*  {
649,655c649
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                     ( int*  bzerrorInt32   ret;
650,655c650
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       ret;
650,655c650
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE;
650,656c650
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       FILE* bzFile* bzf = NULL;
650,656c650
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       FILE* f* bzf = NULL;
651,656c651
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       bzf = NULL;
651,656c651
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   = NULL;
651,656c651
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   blockSize100kNULL;
652,656c652
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       ;
652,658c652
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   BZ_SETERR(BZ_OK);
652,658c652
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   verbosity(BZ_OK);
653,658c653
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       BZ_OK);
653,658c653
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   );
653,658c653
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   workFactor ;
654,660c654
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
> if (f == NULL ||
655,660c655
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    (f == NULL ||
655,660c655
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    Int32   f == NULL ||
655,660c655
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    Int32   ret== NULL ||
656,660c656
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    NULL ||
656,660c656
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile||
656,661c656
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    bzFile* (blockSize100k < 1 || blockSize100k > 9) ||
656,661c656
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    bzFile* bzf blockSize100k < 1 || blockSize100k > 9) ||
656,661c656
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    bzFile* bzf = < 1 || blockSize100k > 9) ||
656,661c656
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    bzFile* bzf = NULL1 || blockSize100k > 9) ||
658,661c658
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    || blockSize100k > 9) ||
658,661c658
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERRblockSize100k > 9) ||
658,661c658
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR(> 9) ||
658,661c658
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR(BZ_OK9) ||
658,661c658
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR(BZ_OK)) ||
660,661c660
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    ||
660,662c660
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>    if (workFactor < 0 || workFactor > 250) ||
660,662c660
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>    if (workFactor < 0 || workFactor > 250) ||
660,662c660
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>    if (f < 0 || workFactor > 250) ||
660,662c660
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>    if (f == 0 || workFactor > 250) ||
660,662c660
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>    if (f == NULL || workFactor > 250) ||
661,662c661
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>        workFactor > 250) ||
661,662c661
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>        (> 250) ||
661,662c661
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>        (blockSize100k 250) ||
661,662c661
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>        (blockSize100k < ) ||
661,662c661
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>        (blockSize100k < 1 ||
661,663c661
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (blockSize100k < 1 || (verbosity < 0 || verbosity > 4))
661,663c661
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (blockSize100k < 1 || blockSize100k verbosity < 0 || verbosity > 4))
661,663c661
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (blockSize100k < 1 || blockSize100k > < 0 || verbosity > 4))
661,663c661
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
661,663c661
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (blockSize100k < 1 || blockSize100k > 9) || verbosity > 4))
662,663c662
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        verbosity > 4))
662,663c662
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (> 4))
662,663c662
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (workFactor 4))
662,663c662
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (workFactor < ))
662,663c662
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (workFactor < 0 )
662,664c662
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
---
>        (workFactor < 0 || ;
662,666c662
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        (workFactor < 0 || workFactor if (ferror(f))
662,666c662
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        (workFactor < 0 || workFactor > (ferror(f))
662,666c662
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        (workFactor < 0 || workFactor > 250ferror(f))
662,666c662
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        (workFactor < 0 || workFactor > 250) (f))
663,666c663
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        f))
663,666c663
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        ())
(89.9 %, 20734 bytes)
661,667c661
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (blockSize100k < 1 || blockSize100k > 90 bzf = malloc ( sizeof(bzFile) );
661,667c661
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (blockSize100k < 1 || blockSize100k > 90 || = malloc ( sizeof(bzFile) );
661,667c661
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity malloc ( sizeof(bzFile) );
661,667c661
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > ( sizeof(bzFile) );
661,667c661
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4sizeof(bzFile) );
661,667c661
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4)(bzFile) );
662,667c662
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>       bzFile) );
664,667c664
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    ) );
664,667c664
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    if );
664,667c664
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    if (;
664,668c664
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>    if (ferrorif (bzf == NULL)
664,668c664
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>    if (ferror((bzf == NULL)
664,668c664
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>    if (ferror(fbzf == NULL)
664,668c664
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>    if (ferror(f)== NULL)
665,668c665
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>       NULL)
667,668c667
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>    )
667,669c667
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
---
>    bzf ;
667,671c667
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzf = BZ_SETERR(BZ_OK);
(89.9 %, 20676 bytes)
664,669c664
<    if (ferror(f)== NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    if (ferror(f)bzf->bufN          = 0;
664,669c664
<    if (ferror(f)== NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    if (ferror(f)== ->bufN          = 0;
664,669c664
<    if (ferror(f)== NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    if (ferror(f)== NULLbufN          = 0;
665,669c665
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>       = 0;
667,669c667
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    0;
667,669c667
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    BZ_SETERR;
667,670c667
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    BZ_SETERR(bzf->handle        = f;
667,670c667
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    BZ_SETERR(BZ_OK->handle        = f;
667,670c667
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    BZ_SETERR(BZ_OK)handle        = f;
668,670c668
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    = f;
668,670c668
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    bzff;
668,670c668
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    bzf->;
668,671c668
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    bzf->initialisedOk bzf->writing       = True;
668,671c668
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    bzf->initialisedOk = ->writing       = True;
668,671c668
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    bzf->initialisedOk = Falsewriting       = True;
(89.9 %, 20603 bytes)
667,670c667
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    ->strm.bzalloc  = NULL;
667,670c667
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    0strm.bzalloc  = NULL;
668,670c668
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    .bzalloc  = NULL;
668,670c668
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzfbzalloc  = NULL;
668,670c668
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->= NULL;
668,670c668
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->handle        NULL;
668,670c668
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->handle        = ;
668,671c668
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->handle        = fbzf->strm.bzfree   = NULL;
669,671c669
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    ->strm.bzfree   = NULL;
669,671c669
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzfstrm.bzfree   = NULL;
669,671c669
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->.bzfree   = NULL;
669,671c669
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       bzfree   = NULL;
669,671c669
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       = = NULL;
669,671c669
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       = TrueNULL;
670,671c670
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    ;
670,672c670
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzfbzf->strm.opaque   = NULL;
670,672c670
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->->strm.opaque   = NULL;
670,672c670
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strmstrm.opaque   = NULL;
670,672c670
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm..opaque   = NULL;
670,672c670
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.bzalloc  opaque   = NULL;
670,672c670
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.bzalloc  = = NULL;
670,672c670
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.bzalloc  = NULLNULL;
671,672c671
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    ;
(90.0 %, 20548 bytes)
670,673c670
<    ;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    workFactor = 30;
671,673c671
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    = 30;
671,673c671
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    bzf30;
671,673c671
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    bzf->;
671,674c671
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    bzf->strmret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
671,674c671
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    bzf->strm.= BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
671,674c671
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    bzf->strm.opaque   BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
671,674c671
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    bzf->strm.opaque   = ( &(bzf->strm), blockSize100k, 
(90.0 %, 20491 bytes)
670,671c670
<    workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    blockSize100k, 
670,671c670
<    workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    workFactor , 
670,672c670
<    workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    workFactor = verbosity, workFactor );
670,672c670
<    workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    workFactor = 30, workFactor );
671,672c671
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    workFactor );
671,672c671
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    ret );
671,672c671
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = ;
671,673c671
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    ret = BZ2_bzCompressInit if (ret != BZ_OK)
671,673c671
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    ret = BZ2_bzCompressInit ( (ret != BZ_OK)
671,673c671
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    ret = BZ2_bzCompressInit ( &ret != BZ_OK)
671,673c671
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    ret = BZ2_bzCompressInit ( &(!= BZ_OK)
671,673c671
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    ret = BZ2_bzCompressInit ( &(bzfBZ_OK)
671,673c671
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    ret = BZ2_bzCompressInit ( &(bzf->)
671,674c671
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
---
>    ret = BZ2_bzCompressInit ( &(bzf->strm;
671,676c671
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>    ret = BZ2_bzCompressInit ( &(bzf->strm)bzf->strm.avail_in = 0;
671,676c671
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>    ret = BZ2_bzCompressInit ( &(bzf->strm), ->strm.avail_in = 0;
671,676c671
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100kstrm.avail_in = 0;
672,676c672
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>                               .avail_in = 0;
672,676c672
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>                               verbosityavail_in = 0;
672,676c672
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>                               verbosity, = 0;
672,676c672
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>                               verbosity, workFactor 0;
673,676d672
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
673,676d672
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
(90.0 %, 20434 bytes)
672,680c672
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                               verbosity, workFactor ))
673,681c673
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    ( int*    bzerror, 
673,681c673
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzfint*    bzerror, 
673,681c673
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->*    bzerror, 
673,681c673
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk bzerror, 
673,681c673
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk = , 
673,682c673
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    bzf->initialisedOk = TrueBZFILE* b, 
674,682c674
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    * b, 
674,682c674
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    return b, 
674,682c674
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    return bzf, 
675,683c675
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void*   buf, 
680,683c680
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> *   buf, 
680,683c680
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void buf, 
680,683c680
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API, 
680,684c680
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
> void BZ_API(int     len )
680,684c680
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
> void BZ_API(BZ2_bzWritelen )
681,684c681
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              )
681,685c681
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
---
>              ( {
681,686c681
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>              ( intInt32   ret;
681,686c681
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>              ( int*    ret;
681,686c681
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>              ( int*    bzerror;
682,687c682
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                bzFile* bzf = (bzFile*)b;
682,687c682
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* bzf = (bzFile*)b;
682,687c682
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* bzf = (bzFile*)b;
682,687c682
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* b= (bzFile*)b;
683,687c683
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                (bzFile*)b;
683,687c683
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                voidbzFile*)b;
683,687c683
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   *)b;
683,687c683
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   buf)b;
684,687c684
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                b;
684,687c684
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     ;
684,689c684
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>                int     len BZ_SETERR(BZ_OK);
685,689c685
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> (BZ_OK);
686,689c686
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
686,689c686
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    Int32   );
687,689d686
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
687,689d686
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
687,690c687
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile(bzf == NULL || buf == NULL || len < 0)
687,690c687
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf == NULL || buf == NULL || len < 0)
687,690c687
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf == NULL || buf == NULL || len < 0)
687,690c687
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = NULL || buf == NULL || len < 0)
687,690c687
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (|| buf == NULL || len < 0)
687,690c687
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFilebuf == NULL || len < 0)
687,690c687
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*== NULL || len < 0)
687,690c687
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)NULL || len < 0)
687,690c687
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)b|| len < 0)
689,690c689
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    len < 0)
689,690c689
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR< 0)
689,690c689
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(0)
689,690c689
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(BZ_OK)
690,691d689
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
(90.1 %, 20383 bytes)
689,693c689
<    BZ_SETERR(0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    BZ_SETERR(ferror(bzf->handle))
689,693c689
<    BZ_SETERR(0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    BZ_SETERR(0(bzf->handle))
690,693c690
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>       bzf->handle))
691,693c691
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    ->handle))
691,693c691
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if handle))
691,693c691
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if ())
691,693c691
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (!)
(90.1 %, 20333 bytes)
689,695c689
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(bzf->strm.avail_in = len;
689,695c689
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(ferror->strm.avail_in = len;
689,695c689
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(ferror(strm.avail_in = len;
689,695c689
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(ferror(bzf.avail_in = len;
689,695c689
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(ferror(bzf->avail_in = len;
689,695c689
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(ferror(bzf->handle= len;
689,695c689
<    BZ_SETERR(ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    BZ_SETERR(ferror(bzf->handle)len;
691,695d690
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
692,695d691
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
692,696c692
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    if ->strm.next_in  = buf;
692,696c692
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    if (strm.next_in  = buf;
692,696c692
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    if (len .next_in  = buf;
692,696c692
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    if (len == next_in  = buf;
(90.1 %, 20277 bytes)
690,694c690
<       ;
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>       strm.avail_out = BZ_MAX_UNUSED;
691,694c691
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    .avail_out = BZ_MAX_UNUSED;
691,694c691
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzfavail_out = BZ_MAX_UNUSED;
691,694c691
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->= BZ_MAX_UNUSED;
691,694c691
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strmBZ_MAX_UNUSED;
691,694c691
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm.;
691,695c691
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    bzf->strm.next_in  bzf->strm.next_out = bzf->buf;
691,695c691
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    bzf->strm.next_in  = ->strm.next_out = bzf->buf;
691,695c691
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    bzf->strm.next_in  = bufstrm.next_out = bzf->buf;
693,695c693
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    .next_out = bzf->buf;
693,695c693
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    while next_out = bzf->buf;
693,695c693
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    while (= bzf->buf;
693,695c693
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    while (Truebzf->buf;
694,695c694
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       ->buf;
694,695c694
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       bzfbuf;
694,695c694
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       bzf->;
694,696c694
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
---
>       bzf->strmret = 0;
694,696c694
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
---
>       bzf->strm.= 0;
694,696c694
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
---
>       bzf->strm.avail_out 0;
694,696c694
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
---
>       bzf->strm.avail_out = ;
694,697c694
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
<       if (ret != BZ_RUN_OK)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK)
695,697c695
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
<       if (ret != BZ_RUN_OK)
---
>       (ret != BZ_RUN_OK)
695,697c695
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
<       if (ret != BZ_RUN_OK)
---
>       bzfret != BZ_RUN_OK)
(90.1 %, 20217 bytes)
694,697c694
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif ) 
694,699c694
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (if (bzf->strm.avail_in == 0)
694,699c694
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret (bzf->strm.avail_in == 0)
694,699c694
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
694,699c694
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != BZ_RUN_OK->strm.avail_in == 0)
695,699c695
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>          strm.avail_in == 0)
697,699c697
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       .avail_in == 0)
697,699c697
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       if avail_in == 0)
697,699c697
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       if (== 0)
697,699c697
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf0)
697,699c697
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       if (bzf->)
697,700c697
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
---
>       if (bzf->strm;
697,702c697
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    
< }
---
>       if (bzf->strm.}
697,706c697
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       if (bzf->strm.avail_out void BZ_API(BZ2_bzWriteClose)
697,706c697
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       if (bzf->strm.avail_out < BZ_API(BZ2_bzWriteClose)
697,706c697
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED(BZ2_bzWriteClose)
699,706c699
<       if (bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       BZ2_bzWriteClose)
699,706c699
<       if (bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       if )
(90.2 %, 20135 bytes)
694,702c694
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != ( int*          bzerror, 
694,702c694
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzfint*          bzerror, 
694,702c694
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->*          bzerror, 
694,702c694
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strmbzerror, 
694,702c694
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm., 
694,703c694
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in BZFILE*       b, 
694,703c694
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == *       b, 
694,703c694
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0b, 
695,703c695
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>          , 
697,704c697
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> int           abandon,
701,704c701
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> abandon,
701,704c701
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void ,
701,705c701
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void BZ_APIunsigned int* nbytes_in,
701,705c701
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void BZ_API(int* nbytes_in,
701,705c701
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void BZ_API(BZ2_bzWriteClose* nbytes_in,
702,705c702
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   nbytes_in,
702,705c702
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( ,
702,706c702
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( intunsigned int* nbytes_out )
702,706c702
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( int*          int* nbytes_out )
702,706c702
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( int*          bzerror* nbytes_out )
703,706c703
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     nbytes_out )
703,706c703
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE)
703,707c703
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     BZFILE*       {
703,708c703
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     BZFILE*       bBZ2_bzWriteClose64 ( bzerror, b, abandon, 
704,708c704
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     ( bzerror, b, abandon, 
704,708c704
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     int           bzerror, b, abandon, 
704,708c704
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     int           abandon, b, abandon, 
705,708c705
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     b, abandon, 
705,708c705
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned , abandon, 
705,708c705
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned intabandon, 
705,708c705
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* , 
705,709c705
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int* nbytes_innbytes_in, NULL, nbytes_out, NULL );
706,709c706
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     , NULL, nbytes_out, NULL );
706,709c706
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned NULL, nbytes_out, NULL );
706,709c706
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int, nbytes_out, NULL );
706,709c706
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int* nbytes_out, NULL );
706,709c706
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int* nbytes_out , NULL );
707,709c707
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
> NULL );
708,709c708
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    );
708,709c708
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ;
708,710c708
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
>    BZ2_bzWriteClose64 ( }
708,713c708
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerrorvoid BZ_API(BZ2_bzWriteClose64)
708,713c708
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, BZ_API(BZ2_bzWriteClose64)
708,713c708
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, b(BZ2_bzWriteClose64)
708,713c708
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, b, BZ2_bzWriteClose64)
708,713c708
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, b, abandon)
709,714c709
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         ( int*          bzerror, 
709,714c709
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_inint*          bzerror, 
709,714c709
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, *          bzerror, 
709,714c709
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULLbzerror, 
709,714c709
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, , 
709,715c709
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                         nbytes_in, NULL, nbytes_outBZFILE*       b, 
709,715c709
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                         nbytes_in, NULL, nbytes_out, *       b, 
709,715c709
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                         nbytes_in, NULL, nbytes_out, NULL b, 
(90.2 %, 20052 bytes)
708,714c708
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    BZ2_bzWriteClose64 , 
709,715c709
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> int           abandon,
712,715c712
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> abandon,
712,715c712
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void ,
712,716c712
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_APIunsigned int* nbytes_in_lo32,
712,716c712
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_API(int* nbytes_in_lo32,
712,716c712
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64* nbytes_in_lo32,
713,716c713
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   nbytes_in_lo32,
713,716c713
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( ,
713,717c713
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( intunsigned int* nbytes_in_hi32,
713,717c713
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          int* nbytes_in_hi32,
713,717c713
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          bzerror* nbytes_in_hi32,
714,717c714
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     nbytes_in_hi32,
714,717c714
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE,
714,718c714
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     BZFILE*       unsigned int* nbytes_out_lo32,
714,718c714
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     BZFILE*       bint* nbytes_out_lo32,
715,718c715
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     * nbytes_out_lo32,
715,718c715
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           nbytes_out_lo32,
716,718d715
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
716,718d715
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
716,718d715
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
716,718d715
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
716,718d715
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
716,719c716
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32)
717,720c717
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     {
717,722c717
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned bzFile* bzf = (bzFile*)b;
717,722c717
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* bzf = (bzFile*)b;
717,722c717
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* bzf = (bzFile*)b;
717,722c717
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* nbytes_in_hi32= (bzFile*)b;
718,722c718
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     (bzFile*)b;
718,722c718
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned bzFile*)b;
718,722c718
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int*)b;
718,722c718
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* )b;
718,722c718
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* nbytes_out_lo32b;
719,722c719
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     ;
719,724c719
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>                     unsigned if (bzf == NULL)
719,724c719
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>                     unsigned int(bzf == NULL)
719,724c719
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>                     unsigned int* bzf == NULL)
719,724c719
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>                     unsigned int* nbytes_out_hi32 == NULL)
720,724c720
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
> NULL)
722,724c722
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>    )
722,725c722
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
---
>    bzFile;
722,726c722
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* if (!(bzf->writing))
722,726c722
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf (!(bzf->writing))
722,726c722
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = !(bzf->writing))
722,726c722
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = ((bzf->writing))
722,726c722
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = (bzFilebzf->writing))
722,726c722
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = (bzFile*->writing))
722,726c722
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = (bzFile*)writing))
722,726c722
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = (bzFile*)b))
724,726c724
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    )
724,727c724
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
---
>    if ;
724,728c724
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (if (ferror(bzf->handle))
724,728c724
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (bzf (ferror(bzf->handle))
724,728c724
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (bzf == ferror(bzf->handle))
(90.2 %, 20004 bytes)
722,724c722
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ()
722,725c722
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
---
>    bzFile* bzf = ((;
722,727c722
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    bzFile* bzf = ((bzfif (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
722,727c722
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    bzFile* bzf = ((bzf->(nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
722,727c722
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    bzFile* bzf = ((bzf->writingnbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
722,727c722
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    bzFile* bzf = ((bzf->writing)!= NULL) *nbytes_in_lo32 = 0;
723,727c723
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>       NULL) *nbytes_in_lo32 = 0;
724,727c724
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    ) *nbytes_in_lo32 = 0;
724,727c724
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if *nbytes_in_lo32 = 0;
724,727c724
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (nbytes_in_lo32 = 0;
724,727c724
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (ferror= 0;
724,727c724
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (ferror(0;
724,727c724
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (ferror(bzf;
724,728c724
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (ferror(bzf->if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
724,728c724
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (ferror(bzf->handle(nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
724,728c724
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (ferror(bzf->handle)nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
725,728c725
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>       != NULL) *nbytes_in_hi32 = 0;
727,728c727
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    NULL) *nbytes_in_hi32 = 0;
727,728c727
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if ) *nbytes_in_hi32 = 0;
727,728c727
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (*nbytes_in_hi32 = 0;
727,728c727
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (nbytes_in_lo32 nbytes_in_hi32 = 0;
727,728c727
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (nbytes_in_lo32 != = 0;
727,728c727
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (nbytes_in_lo32 != NULL0;
727,728c727
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (nbytes_in_lo32 != NULL) ;
727,729c727
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_lo32 != NULL) *if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
727,729c727
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
727,729c727
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
727,729c727
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0!= NULL) *nbytes_out_lo32 = 0;
728,729c728
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    NULL) *nbytes_out_lo32 = 0;
728,729c728
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if ) *nbytes_out_lo32 = 0;
728,729c728
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (*nbytes_out_lo32 = 0;
728,729c728
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_hi32 nbytes_out_lo32 = 0;
728,729c728
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_hi32 != = 0;
728,729c728
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_hi32 != NULL0;
728,729c728
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (nbytes_in_hi32 != NULL) ;
(90.3 %, 19933 bytes)
727,729c727
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (nbytes_in_lo32 != NULL) != NULL) *nbytes_out_hi32 = 0;
728,729c728
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    NULL) *nbytes_out_hi32 = 0;
728,729c728
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if ) *nbytes_out_hi32 = 0;
728,729c728
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (*nbytes_out_hi32 = 0;
728,729c728
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (nbytes_out_lo32 nbytes_out_hi32 = 0;
728,729c728
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (nbytes_out_lo32 != = 0;
728,729c728
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (nbytes_out_lo32 != NULL0;
728,729c728
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (nbytes_out_lo32 != NULL) ;
728,731c728
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_lo32 != NULL) *if ((!abandon) && bzf->lastErr == BZ_OK) 
728,731c728
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 ((!abandon) && bzf->lastErr == BZ_OK) 
728,731c728
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = (!abandon) && bzf->lastErr == BZ_OK) 
728,731c728
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0!abandon) && bzf->lastErr == BZ_OK) 
729,731c729
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    abandon) && bzf->lastErr == BZ_OK) 
729,731c729
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if ) && bzf->lastErr == BZ_OK) 
729,731c729
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (&& bzf->lastErr == BZ_OK) 
729,731c729
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 bzf->lastErr == BZ_OK) 
729,731c729
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != ->lastErr == BZ_OK) 
729,731c729
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != NULLlastErr == BZ_OK) 
729,731c729
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != NULL) == BZ_OK) 
729,731c729
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != NULL) *BZ_OK) 
(90.3 %, 19859 bytes)
728,732c728
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if (nbytes_out_lo32 != NULL) ( !abandon && !ferror ( bzf->handle ) ) 
730,732c730
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    !abandon && !ferror ( bzf->handle ) ) 
730,732c730
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if abandon && !ferror ( bzf->handle ) ) 
730,732c730
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if (&& !ferror ( bzf->handle ) ) 
730,732c730
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!ferror ( bzf->handle ) ) 
730,732c730
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!ferror ( bzf->handle ) ) 
730,732c730
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!abandon( bzf->handle ) ) 
730,732c730
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!abandon) bzf->handle ) ) 
730,732c730
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!abandon) && ->handle ) ) 
730,732c730
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!abandon) && bzfhandle ) ) 
730,732c730
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!abandon) && bzf->) ) 
730,732c730
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if ((!abandon) && bzf->lastErr ) 
730,734c730
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
---
>    if ((!abandon) && bzf->lastErr == if (nbytes_in_lo32 != NULL)
730,734c730
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
---
>    if ((!abandon) && bzf->lastErr == BZ_OK(nbytes_in_lo32 != NULL)
732,734c732
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
---
>    nbytes_in_lo32 != NULL)
732,734c732
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
---
>    if != NULL)
732,734c732
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
<    if (nbytes_in_lo32 != NULL)
---
>    if ( NULL)
(90.3 %, 19803 bytes)
730,733c730
<    if ((!abandon) && bzf->lastErr ) 
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>    if ((!abandon) && bzf->lastErr ;
732,733d731
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
732,733d731
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
(90.4 %, 19723 bytes)
732,733d731
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
732,733d731
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
(90.4 %, 19643 bytes)
732,733d731
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
732,733d731
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
(90.5 %, 19560 bytes)
732,734d731
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
732,735c732
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
---
>    if (BZ_OK);
(90.5 %, 19476 bytes)
732,739c732
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    ) 
732,740c732
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    BZ_SETERR( int*  bzerror, 
732,740c732
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    BZ_SETERR(int*  bzerror, 
732,740c732
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    BZ_SETERR(BZ_OK*  bzerror, 
732,740c732
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    BZ_SETERR(BZ_OK)bzerror, 
733,740c733
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    , 
733,741c733
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>    0FILE* f, 
734,741c734
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>    * f, 
734,741c734
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>    0f, 
735,741c735
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> , 
739,742c739
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> int   verbosity,
739,742c739
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILEverbosity,
739,742c739
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* ,
739,743c739
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* BZ_APIint   small,
739,743c739
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* BZ_API(small,
739,743c739
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* BZ_API(BZ2_bzReadOpen,
740,744c740
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    void* unused,
740,744c740
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( * unused,
740,744c740
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( intunused,
740,744c740
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  ,
740,745c740
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                    ( int*  bzerrorint   nUnused )
741,745c741
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      nUnused )
741,745c741
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE)
741,746c741
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      FILE* {
741,747c741
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      FILE* fbzFile* bzf = NULL;
742,747c742
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      * bzf = NULL;
742,747c742
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   bzf = NULL;
742,747c742
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   verbosity= NULL;
743,747c743
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      NULL;
743,747c743
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   ;
743,748c743
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      int   smallint     ret;
744,748c744
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      ret;
744,748c744
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void;
744,750c744
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      void* BZ_SETERR(BZ_OK);
744,750c744
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      void* unused(BZ_OK);
745,750c745
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      BZ_OK);
745,750c745
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   );
745,750c745
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   nUnused ;
746,752c746
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
> if (f == NULL || 
747,752c747
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    (f == NULL || 
747,752c747
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFilef == NULL || 
747,752c747
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* == NULL || 
747,752c747
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf NULL || 
747,752c747
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = || 
747,753c747
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    bzFile* bzf = NULL(small != 0 && small != 1) ||
748,753c748
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    small != 0 && small != 1) ||
748,753c748
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    int     != 0 && small != 1) ||
748,753c748
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    int     ret0 && small != 1) ||
750,753c750
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    && small != 1) ||
750,753c750
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERRsmall != 1) ||
750,753c750
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(!= 1) ||
750,753c750
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OK1) ||
750,753c750
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OK)) ||
752,753c752
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    ||
752,754c752
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (verbosity < 0 || verbosity > 4) ||
752,754c752
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (verbosity < 0 || verbosity > 4) ||
752,754c752
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f < 0 || verbosity > 4) ||
752,754c752
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == 0 || verbosity > 4) ||
752,754c752
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == NULL || verbosity > 4) ||
753,754c753
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        verbosity > 4) ||
753,754c753
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (> 4) ||
753,754c753
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small 4) ||
753,754c753
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != ) ||
753,754c753
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != 0 ||
753,755c753
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && (unused == NULL && nUnused != 0) ||
753,755c753
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small unused == NULL && nUnused != 0) ||
753,755c753
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != == NULL && nUnused != 0) ||
753,755c753
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != 1NULL && nUnused != 0) ||
753,755c753
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != 1) && nUnused != 0) ||
754,755c754
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        nUnused != 0) ||
754,755c754
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (!= 0) ||
754,755c754
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity 0) ||
754,755c754
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < ) ||
754,755c754
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < 0 ||
754,756c754
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
754,756c754
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
754,756c754
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
754,756c754
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > 4NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
754,756c754
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > 4) && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
755,756c755
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
755,756c755
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
755,756c755
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused < 0 || nUnused > BZ_MAX_UNUSED)))
755,756c755
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == 0 || nUnused > BZ_MAX_UNUSED)))
755,756c755
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL || nUnused > BZ_MAX_UNUSED)))
755,756c755
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused > BZ_MAX_UNUSED)))
755,756c755
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused > BZ_MAX_UNUSED)))
755,756c755
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != BZ_MAX_UNUSED)))
755,756c755
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != 0)))
755,756c755
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != 0) ))
756c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        )
756,757c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
---
>        (;
756,759c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused if (ferror(f))
756,759c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != (ferror(f))
756,759c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL ferror(f))
756,759c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (f))
756,759c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (f))
756,759c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (nUnused ))
756,759c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (nUnused < )
756,760c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
---
>        (unused != NULL && (nUnused < 0 ;
756,762c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || bzf = malloc ( sizeof(bzFile) );
756,762c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused = malloc ( sizeof(bzFile) );
756,762c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused > malloc ( sizeof(bzFile) );
756,762c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED( sizeof(bzFile) );
756,762c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)sizeof(bzFile) );
756,762c756
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))(bzFile) );
757,762c757
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>       bzFile) );
759,762c759
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    ) );
759,762c759
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    if );
759,762c759
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    if (;
759,763c759
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    if (ferrorif (bzf == NULL) 
759,763c759
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    if (ferror((bzf == NULL) 
759,763c759
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    if (ferror(fbzf == NULL) 
759,763c759
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    if (ferror(f)== NULL) 
760,763c760
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>       NULL) 
762,763c762
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    ) 
762,764c762
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
---
>    bzf ;
(90.5 %, 19418 bytes)
759,765c759
<    if (ferror(f)== NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    if (ferror(f)bzf->handle        = f;
759,765c759
<    if (ferror(f)== NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    if (ferror(f)== ->handle        = f;
759,765c759
<    if (ferror(f)== NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    if (ferror(f)== NULLhandle        = f;
760,765c760
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>       = f;
762,765c762
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    f;
762,765c762
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    BZ_SETERR;
762,766c762
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    BZ_SETERR(bzf->bufN          = 0;
762,766c762
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    BZ_SETERR(BZ_OK->bufN          = 0;
762,766c762
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    BZ_SETERR(BZ_OK)bufN          = 0;
764,766c764
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    = 0;
764,766c764
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    bzf0;
764,766c764
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    bzf->;
764,767c764
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    bzf->initialisedOk bzf->writing       = False;
764,767c764
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    bzf->initialisedOk = ->writing       = False;
764,767c764
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    bzf->initialisedOk = Falsewriting       = False;
765,767c765
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    = False;
765,767c765
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    bzfFalse;
(90.6 %, 19344 bytes)
762,765c762
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    ->strm.bzalloc  = NULL;
762,765c762
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    fstrm.bzalloc  = NULL;
763,765c763
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    .bzalloc  = NULL;
763,765c763
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzfbzalloc  = NULL;
763,765c763
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->= NULL;
763,765c763
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->bufN          NULL;
763,765c763
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->bufN          = ;
763,766c763
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->bufN          = 0bzf->strm.bzfree   = NULL;
764,766c764
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    ->strm.bzfree   = NULL;
764,766c764
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzfstrm.bzfree   = NULL;
764,766c764
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->.bzfree   = NULL;
764,766c764
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       bzfree   = NULL;
764,766c764
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       = = NULL;
764,766c764
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       = FalseNULL;
765,766c765
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    ;
765,767c765
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzfbzf->strm.opaque   = NULL;
765,767c765
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->->strm.opaque   = NULL;
765,767c765
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strmstrm.opaque   = NULL;
765,767c765
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm..opaque   = NULL;
765,767c765
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.bzalloc  opaque   = NULL;
765,767c765
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.bzalloc  = = NULL;
765,767c765
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.bzalloc  = NULLNULL;
766,767c766
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    ;
(90.6 %, 19289 bytes)
765,769d764
<    ;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
766,770c766
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
766,770c766
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    bzfBZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
766,770c766
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    bzf->( &(bzf->strm), verbosity, small );
(90.6 %, 19225 bytes)
765c765
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ;
765,766c765
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
---
>    ret if (ret != BZ_OK)
765,766c765
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
---
>    ret = (ret != BZ_OK)
(90.6 %, 19164 bytes)
765,769c765
<    ;
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    ->bufN;
766,769c766
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    bufN;
766,769c766
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    if ;
766,770c766
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    if (bzf->strm.next_in  = bzf->buf;
766,770c766
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    if (ret ->strm.next_in  = bzf->buf;
766,770c766
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    if (ret != strm.next_in  = bzf->buf;
766,770c766
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    if (ret != BZ_OK.next_in  = bzf->buf;
767,770c767
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>       next_in  = bzf->buf;
769,770c769
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    = bzf->buf;
769,770c769
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    bzfbzf->buf;
769,770c769
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf->->buf;
769,770c769
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf->strmbuf;
769,770c769
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf->strm.;
769,772c769
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzf->strm.avail_in bzf->initialisedOk = True;
769,772c769
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzf->strm.avail_in = ->initialisedOk = True;
769,772c769
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzf->strm.avail_in = bzfinitialisedOk = True;
769,772c769
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzf->strm.avail_in = bzf->= True;
769,772c769
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzf->strm.avail_in = bzf->bufNTrue;
770,772c770
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    ;
770,773c770
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
---
>    bzfreturn bzf;   
770,773c770
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
---
>    bzf->bzf;   
770,773c770
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
---
>    bzf->strm;   
770,774c770
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
>    bzf->strm.}
770,778c770
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzf->strm.next_in  void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
(90.7 %, 19104 bytes)
770,776c770
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    BZFILE *b )
771,776c771
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    *b )
771,776c771
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return b )
771,776c771
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return bzf)
772,776d771
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
776,778c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> bzFile* bzf = (bzFile*)b;
776,778c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void * bzf = (bzFile*)b;
776,778c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_APIbzf = (bzFile*)b;
776,778c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(= (bzFile*)b;
776,778c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose(bzFile*)b;
776,778c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) bzFile*)b;
776,778c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( *)b;
776,778c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( int )b;
776,778c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( int *b;
776,778c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror;
776,780c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZ_SETERR(BZ_OK);
776,780c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE (BZ_OK);
776,780c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *BZ_OK);
776,780c776
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b );
777,780c777
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> ;
778,780d777
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
778,781c778
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile(bzf == NULL)
778,781c778
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* bzf == NULL)
778,781c778
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* bzf == NULL)
778,781c778
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* bzf = NULL)
778,781c778
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* bzf = ()
778,782c778
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
---
>    bzFile* bzf = (bzFile;
778,784c778
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    bzFile* bzf = (bzFile*if (bzf->writing)
778,784c778
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    bzFile* bzf = (bzFile*)(bzf->writing)
778,784c778
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    bzFile* bzf = (bzFile*)bbzf->writing)
780,784c780
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    ->writing)
780,784c780
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    BZ_SETERRwriting)
780,784c780
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    BZ_SETERR()
(90.7 %, 19044 bytes)
778,782c778
<    bzFile* bzf = (bzFile*)(bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
---
>    bzFile* bzf = (bzFile*)0;
778,782c778
<    bzFile* bzf = (bzFile*)(bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
---
>    bzFile* bzf = (bzFile*)(;
778,783c778
<    bzFile* bzf = (bzFile*)(bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
---
>    bzFile* bzf = (bzFile*)(bzf0;
778,783c778
<    bzFile* bzf = (bzFile*)(bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
---
>    bzFile* bzf = (bzFile*)(bzf->;
778,784c778
<    bzFile* bzf = (bzFile*)(bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
---
>    bzFile* bzf = (bzFile*)(bzf->writing}
779,788c779
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>       int BZ_API(BZ2_bzRead) 
781,788c781
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    BZ_API(BZ2_bzRead) 
781,788c781
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    if (BZ2_bzRead) 
781,788c781
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    if (BZ2_bzRead) 
781,788c781
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    if (bzf) 
781,789c781
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    if (bzf->( int*    bzerror, 
781,789c781
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    if (bzf->initialisedOkint*    bzerror, 
782,789c782
<       (void)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>       *    bzerror, 
(90.7 %, 18981 bytes)
778,786c778
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    bzFile* bzf = (bzFile*)BZFILE* b, 
778,786c778
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    bzFile* bzf = (bzFile*)0* b, 
779,786c779
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    b, 
779,786c779
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    0, 
780,787c780
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> void*   buf, 
784,787c784
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> *   buf, 
784,787c784
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int buf, 
784,787c784
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API, 
784,788c784
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> int BZ_API(int     len )
784,788c784
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
> int BZ_API(BZ2_bzReadlen )
785,788c785
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            )
785,789c785
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>            ( {
785,791c785
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( intbzFile* bzf = (bzFile*)b;
785,791c785
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( int*    * bzf = (bzFile*)b;
785,791c785
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( int*    bzerrorbzf = (bzFile*)b;
786,791c786
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              = (bzFile*)b;
786,791c786
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE(bzFile*)b;
786,791c786
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* bzFile*)b;
786,791c786
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* b*)b;
787,791c787
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              )b;
787,791c787
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              voidb;
787,791c787
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   ;
787,793c787
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              void*   bufBZ_SETERR(BZ_OK);
788,793c788
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              (BZ_OK);
788,793c788
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              int     BZ_OK);
788,793c788
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              int     len );
789,793c789
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> ;
791,794d790
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
791,795c791
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile(bzf == NULL || buf == NULL || len < 0)
791,795c791
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf == NULL || buf == NULL || len < 0)
791,795c791
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf == NULL || buf == NULL || len < 0)
791,795c791
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = NULL || buf == NULL || len < 0)
791,795c791
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (|| buf == NULL || len < 0)
791,795c791
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFilebuf == NULL || len < 0)
791,795c791
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*== NULL || len < 0)
791,795c791
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)NULL || len < 0)
791,795c791
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)b|| len < 0)
793,795c793
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    len < 0)
793,795c793
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR< 0)
793,795c793
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(0)
793,795c793
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(BZ_OK)
795,797d794
<    if (bzf == NULL || buf == NULL || len < 0)
<       ;
< 
(90.8 %, 18929 bytes)
793,799c793
<    BZ_SETERR(0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
---
>    BZ_SETERR()
793,800c793
<    BZ_SETERR(0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
---
>    BZ_SETERR(0;
794,802c794
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>       bzf->strm.avail_out = len;
(90.8 %, 18872 bytes)
793,797c793
<    BZ_SETERR()
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ_SETERR(= buf;
794,797c794
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>       buf;
796,797c796
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    ;
(90.8 %, 18815 bytes)
794,804c794
<       buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>       ( int*    bzerror, 
794,804c794
<       buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>       bufint*    bzerror, 
796,804c796
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    *    bzerror, 
796,804c796
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while bzerror, 
796,804c796
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (, 
796,805c796
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    while (TrueBZFILE* b, 
798,805c798
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    * b, 
798,805c798
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return b, 
798,805c798
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return 0, 
799,806c799
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void**  unused, 
803,806c803
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> **  unused, 
803,806c803
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void *  unused, 
803,806c803
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_APIunused, 
803,806c803
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(, 
803,807c803
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
> void BZ_API(BZ2_bzReadGetUnusedint*    nUnused )
804,807c804
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      *    nUnused )
804,807c804
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( nUnused )
804,807c804
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int)
804,808c804
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                      ( int*    {
804,809c804
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                      ( int*    bzerrorbzFile* bzf = (bzFile*)b;
805,809c805
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        * bzf = (bzFile*)b;
805,809c805
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILEbzf = (bzFile*)b;
805,809c805
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILE* = (bzFile*)b;
805,809c805
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILE* b(bzFile*)b;
806,809c806
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        bzFile*)b;
806,809c806
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void*)b;
806,809c806
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void*)b;
806,809c806
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void**  b;
806,809c806
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void**  unused;
807,810c807
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>                        if (bzf == NULL)
807,810c807
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>                        int(bzf == NULL)
807,810c807
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>                        int*    bzf == NULL)
807,810c807
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>                        int*    nUnused == NULL)
808,810c808
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
> NULL)
809,810c809
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>    )
809,811c809
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
---
>    bzFile;
809,812c809
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* if (bzf->lastErr != BZ_STREAM_END)
809,812c809
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf (bzf->lastErr != BZ_STREAM_END)
809,812c809
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = bzf->lastErr != BZ_STREAM_END)
809,812c809
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (->lastErr != BZ_STREAM_END)
809,812c809
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (bzFilelastErr != BZ_STREAM_END)
809,812c809
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (bzFile*!= BZ_STREAM_END)
809,812c809
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (bzFile*)BZ_STREAM_END)
809,812c809
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (bzFile*)b)
810,813c810
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
---
>    ;
810,814c810
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if if (unused == NULL || nUnused == NULL)
810,814c810
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if ((unused == NULL || nUnused == NULL)
810,814c810
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if (bzf unused == NULL || nUnused == NULL)
810,814c810
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if (bzf == == NULL || nUnused == NULL)
810,814c810
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if (bzf == NULLNULL || nUnused == NULL)
811,814c811
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>       || nUnused == NULL)
812,814c812
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    nUnused == NULL)
812,814c812
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if == NULL)
812,814c812
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if (NULL)
(90.9 %, 18746 bytes)
810,814c810
<    ;
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
---
>    );
811,814c811
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
---
>    ;
811,815c811
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if *nUnused = bzf->strm.avail_in;
811,815c811
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (nUnused = bzf->strm.avail_in;
811,815c811
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (unused = bzf->strm.avail_in;
811,815c811
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (unused == bzf->strm.avail_in;
811,815c811
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (unused == NULL ->strm.avail_in;
811,815c811
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (unused == NULL || strm.avail_in;
811,815c811
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (unused == NULL || nUnused .avail_in;
811,815c811
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (unused == NULL || nUnused == avail_in;
811,815c811
<    if (unused == NULL || nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (unused == NULL || nUnused == NULL;
(90.9 %, 18679 bytes)
811,813c811
<    ;
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    strm.next_in;
812,813c812
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    .next_in;
812,813c812
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    *next_in;
812,813c812
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    *nUnused ;
812,814c812
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
---
>    *nUnused = }
812,822c812
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    *nUnused = bzfint BZ_API(BZ2_bzBuffToBuffCompress) 
812,822c812
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    *nUnused = bzf->BZ_API(BZ2_bzBuffToBuffCompress) 
812,822c812
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    *nUnused = bzf->strm(BZ2_bzBuffToBuffCompress) 
812,822c812
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    *nUnused = bzf->strm.BZ2_bzBuffToBuffCompress) 
812,822c812
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    *nUnused = bzf->strm.avail_in) 
813,823c813
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    ( char*         dest, 
813,823c813
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *char*         dest, 
813,823c813
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *unused *         dest, 
813,823c813
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *unused = dest, 
(90.9 %, 18627 bytes)
812,823c812
<    *nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>    *nUnused destLen,
813,823c813
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> ,
821,824c821
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> char*         source, 
821,824c821
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int *         source, 
821,824c821
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_APIsource, 
821,824c821
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(, 
821,825c821
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompressunsigned int  sourceLen,
822,825c822
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          int  sourceLen,
822,825c822
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( sourceLen,
822,825c822
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char,
822,826c822
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                          ( char*         int           blockSize100k, 
822,826c822
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                          ( char*         destblockSize100k, 
823,826c823
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            , 
823,827c823
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int           verbosity, 
823,827c823
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned intverbosity, 
823,827c823
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* , 
823,828c823
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int* destLenint           workFactor )
824,828c824
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            workFactor )
824,828c824
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char)
824,829c824
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            char*         {
824,830c824
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            char*         sourcebz_stream strm;
825,830c825
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            strm;
825,830c825
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned ;
825,831c825
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            unsigned int  int ret;
825,831c825
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            unsigned int  sourceLenret;
826,831c826
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            ;
826,833c826
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           if (dest == NULL || destLen == NULL || 
826,833c826
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           blockSize100k(dest == NULL || destLen == NULL || 
827,833c827
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            dest == NULL || destLen == NULL || 
827,833c827
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           == NULL || destLen == NULL || 
827,833c827
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           verbosityNULL || destLen == NULL || 
828,833c828
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            || destLen == NULL || 
828,833c828
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           destLen == NULL || 
828,833c828
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           workFactor == NULL || 
829,833c829
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> NULL || 
830,833c830
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    || 
830,834c830
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    bz_stream source == NULL ||
830,834c830
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    bz_stream strm== NULL ||
831,834c831
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    NULL ||
831,834c831
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int ||
831,835c831
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    int retblockSize100k < 1 || blockSize100k > 9 ||
833,835c833
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    < 1 || blockSize100k > 9 ||
833,835c833
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if 1 || blockSize100k > 9 ||
833,835c833
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (|| blockSize100k > 9 ||
833,835c833
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest blockSize100k > 9 ||
833,835c833
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == > 9 ||
833,835c833
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL 9 ||
833,835c833
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL || ||
833,836c833
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>    if (dest == NULL || destLen verbosity < 0 || verbosity > 4 ||
833,836c833
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>    if (dest == NULL || destLen == < 0 || verbosity > 4 ||
833,836c833
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>    if (dest == NULL || destLen == NULL 0 || verbosity > 4 ||
834,836c834
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        || verbosity > 4 ||
834,836c834
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        source verbosity > 4 ||
834,836c834
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        source == > 4 ||
834,836c834
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        source == NULL 4 ||
835,836c835
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        ||
835,837c835
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        blockSize100k workFactor < 0 || workFactor > 250) 
835,837c835
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        blockSize100k < < 0 || workFactor > 250) 
835,837c835
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        blockSize100k < 1 0 || workFactor > 250) 
835,837c835
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        blockSize100k < 1 || || workFactor > 250) 
835,837c835
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        blockSize100k < 1 || blockSize100k workFactor > 250) 
835,837c835
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        blockSize100k < 1 || blockSize100k > > 250) 
835,837c835
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        blockSize100k < 1 || blockSize100k > 9 250) 
836,837c836
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        ) 
836,838c836
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
---
>        verbosity return BZ_PARAM_ERROR;
836,838c836
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
---
>        verbosity < BZ_PARAM_ERROR;
836,838c836
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
---
>        verbosity < 0 ;
836,840c836
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>        verbosity < 0 || if (workFactor == 0) workFactor = 30;
836,840c836
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>        verbosity < 0 || verbosity (workFactor == 0) workFactor = 30;
836,840c836
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>        verbosity < 0 || verbosity > workFactor == 0) workFactor = 30;
836,840c836
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>        verbosity < 0 || verbosity > 4 == 0) workFactor = 30;
(91.0 %, 18541 bytes)
836,838c836
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > .bzfree = NULL;
836,838c836
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > workFactor bzfree = NULL;
836,838c836
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > workFactor == = NULL;
836,838c836
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > workFactor == 0NULL;
836,838c836
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > workFactor == 0) ;
836,839c836
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>        verbosity < 0 || verbosity > workFactor == 0) workFactor strm.opaque = NULL;
836,839c836
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>        verbosity < 0 || verbosity > workFactor == 0) workFactor = .opaque = NULL;
836,839c836
<        verbosity < 0 || verbosity > workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>        verbosity < 0 || verbosity > workFactor == 0) workFactor = 30opaque = NULL;
837,839c837
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    = NULL;
837,839c837
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    strmNULL;
837,839c837
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    strm.;
837,840c837
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.bzalloc ret = 0;
837,840c837
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.bzalloc = = 0;
837,840c837
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.bzalloc = NULL0;
838,840c838
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    ;
(91.0 %, 18479 bytes)
836,839c836
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>        verbosity < 0 || verbosity > workFactor == 0) BZ_OK) return ret;
837,839c837
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    ) return ret;
837,839c837
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strmreturn ret;
837,839c837
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strm.ret;
837,839c837
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strm.opaque ;
837,841c837
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
---
>    strm.opaque = strm.next_in = source;
837,841c837
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
---
>    strm.opaque = NULL.next_in = source;
(91.0 %, 18428 bytes)
837,841c837
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.opaque avail_in = sourceLen;
839,841c839
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    = sourceLen;
839,841c839
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strmsourceLen;
839,841c839
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.;
839,842c839
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in strm.avail_out = *destLen;
839,842c839
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in = .avail_out = *destLen;
839,842c839
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in = sourceavail_out = *destLen;
840,842c840
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    = *destLen;
840,842c840
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm*destLen;
840,842c840
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.destLen;
840,842c840
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_out ;
840,844c840
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = 0;
---
>    strm.next_out = ret = 0;
(91.0 %, 18362 bytes)
840,844c840
<    strm.next_out ;
< 
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    strm.next_out (ret != BZ_STREAM_END) goto errhandler;
842,844c842
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret != BZ_STREAM_END) goto errhandler;
842,844c842
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret != BZ_STREAM_END) goto errhandler;
842,844c842
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret = BZ_STREAM_END) goto errhandler;
842,844c842
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret = 0) goto errhandler;
843,844c843
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    goto errhandler;
843,844c843
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if errhandler;
843,844c843
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (;
843,847c843
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
---
>    if (ret *destLen -= strm.avail_out;   
843,847c843
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
---
>    if (ret == destLen -= strm.avail_out;   
843,847c843
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
---
>    if (ret == BZ_FINISH_OK-= strm.avail_out;   
843,847c843
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
---
>    if (ret == BZ_FINISH_OK) strm.avail_out;   
(91.1 %, 18286 bytes)
843,849d842
<    goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
843,850c843
<    goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
---
>    goto :
843,851c843
<    goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
---
>    goto errhandler0;
846,851c846
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
---
>    ;
846,852c846
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
---
>    *return BZ_OUTBUFF_FULL;
846,852c846
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
---
>    *destLen BZ_OUTBUFF_FULL;
846,852c846
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
---
>    *destLen -= ;
(91.1 %, 18203 bytes)
843,854c843
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    int BZ_API(BZ2_bzBuffToBuffDecompress) 
843,854c843
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    output_overflowBZ_API(BZ2_bzBuffToBuffDecompress) 
844,854c844
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    (BZ2_bzBuffToBuffDecompress) 
844,854c844
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    0BZ2_bzBuffToBuffDecompress) 
845,854c845
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    ) 
845,855c845
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return ( char*         dest, 
845,855c845
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return BZ_OUTBUFF_FULLchar*         dest, 
847,855c847
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    *         dest, 
847,855c847
<    errhandler:
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    errhandlerdest, 
848,855c848
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    , 
848,856c848
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    0unsigned int* destLen,
849,856c849
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    int* destLen,
849,856c849
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    return * destLen,
849,856c849
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    return retdestLen,
850,856c850
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> ,
854,857c854
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> char*         source, 
854,857c854
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int *         source, 
854,857c854
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_APIsource, 
854,857c854
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(, 
854,858c854
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int  sourceLen,
855,858c855
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            int  sourceLen,
855,858c855
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( sourceLen,
855,858c855
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char,
855,859c855
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                            ( char*         int           small,
855,859c855
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                            ( char*         destsmall,
856,859c856
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              ,
856,860c856
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int           verbosity )
856,860c856
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned intverbosity )
856,860c856
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* )
856,861c856
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
---
>                              unsigned int* destLen{
857,862c857
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              bz_stream strm;
857,862c857
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              charstrm;
857,862c857
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              char*         ;
857,863c857
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              char*         sourceint ret;
858,863c858
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              ret;
858,863c858
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned ;
858,865c858
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              unsigned int  if (dest == NULL || destLen == NULL || 
858,865c858
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              unsigned int  sourceLen(dest == NULL || destLen == NULL || 
859,865c859
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              dest == NULL || destLen == NULL || 
859,865c859
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           == NULL || destLen == NULL || 
859,865c859
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           smallNULL || destLen == NULL || 
860,865c860
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              || destLen == NULL || 
860,865c860
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           destLen == NULL || 
860,865c860
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           verbosity == NULL || 
861,865c861
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> NULL || 
862,865c862
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    || 
862,866c862
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    bz_stream source == NULL ||
862,866c862
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    bz_stream strm== NULL ||
863,866c863
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    NULL ||
863,866c863
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int ||
863,867c863
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    int ret(small != 0 && small != 1) ||
865,867c865
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    small != 0 && small != 1) ||
865,867c865
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if != 0 && small != 1) ||
865,867c865
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (0 && small != 1) ||
865,867c865
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest && small != 1) ||
865,867c865
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == small != 1) ||
865,867c865
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL != 1) ||
865,867c865
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || 1) ||
865,867c865
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen ) ||
865,867c865
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == ||
865,868c865
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if (dest == NULL || destLen == NULL verbosity < 0 || verbosity > 4) 
866,868c866
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        < 0 || verbosity > 4) 
866,868c866
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source 0 || verbosity > 4) 
866,868c866
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source == || verbosity > 4) 
866,868c866
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source == NULL verbosity > 4) 
867,868c867
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        > 4) 
867,868c867
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (4) 
867,868c867
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (small ) 
867,869c867
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
---
>        (small != return BZ_PARAM_ERROR;
867,869c867
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
---
>        (small != 0 BZ_PARAM_ERROR;
867,869c867
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
---
>        (small != 0 && ;
867,871c867
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        (small != 0 && small strm.bzalloc = NULL;
867,871c867
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        (small != 0 && small != .bzalloc = NULL;
867,871c867
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        (small != 0 && small != 1bzalloc = NULL;
867,871c867
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        (small != 0 && small != 1) = NULL;
868,871c868
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        NULL;
868,871c868
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        verbosity ;
868,872c868
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < strm.bzfree = NULL;
868,872c868
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 .bzfree = NULL;
868,872c868
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || bzfree = NULL;
868,872c868
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity = NULL;
868,872c868
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > NULL;
868,872c868
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > 4;
869,873c869
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>           strm.opaque = NULL;
869,873c869
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>           return .opaque = NULL;
869,873c869
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>           return BZ_PARAM_ERRORopaque = NULL;
871,873c871
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    = NULL;
871,873c871
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    strmNULL;
871,873c871
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    strm.;
871,874c871
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.bzalloc ret = 0;
871,874c871
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.bzalloc = = 0;
871,874c871
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.bzalloc = NULL0;
872,874c872
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    ;
(91.2 %, 18129 bytes)
869,871c869
<           strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>           ) return ret;
869,871c869
<           strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>           strmreturn ret;
869,871c869
<           strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>           strm.ret;
869,871c869
<           strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>           strm.opaque ;
869,873c869
<           strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
---
>           strm.opaque = strm.next_in = source;
(91.2 %, 18078 bytes)
869,873c869
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>           strm.opaque avail_in = sourceLen;
871,873c871
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    = sourceLen;
871,873c871
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strmsourceLen;
871,873c871
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.;
871,874c871
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in strm.avail_out = *destLen;
871,874c871
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in = .avail_out = *destLen;
871,874c871
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in = sourceavail_out = *destLen;
872,874c872
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    = *destLen;
872,874c872
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm*destLen;
872,874c872
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.destLen;
872,874c872
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_out ;
872,876c872
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = 0;
---
>    strm.next_out = ret = 0;
(91.2 %, 18012 bytes)
872,876c872
<    strm.next_out ;
< 
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    strm.next_out (ret != BZ_STREAM_END) goto errhandler;
874,876c874
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret != BZ_STREAM_END) goto errhandler;
874,876c874
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret != BZ_STREAM_END) goto errhandler;
874,876c874
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret = BZ_STREAM_END) goto errhandler;
874,876c874
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    ret = 0) goto errhandler;
875,876c875
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    goto errhandler;
875,876c875
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if errhandler;
875,876c875
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
---
>    if (;
875,879c875
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
---
>    if (ret *destLen -= strm.avail_out;
875,879c875
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
---
>    if (ret == destLen -= strm.avail_out;
875,879c875
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
---
>    if (ret == BZ_OK-= strm.avail_out;
875,879c875
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
---
>    if (ret == BZ_OK) strm.avail_out;
(91.2 %, 17936 bytes)
875,881d874
<    goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
875,882c875
<    goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
---
>    goto :
875,883c875
<    goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    goto errhandlerif (strm.avail_out > 0) {
878,883c878
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    (strm.avail_out > 0) {
878,883c878
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *strm.avail_out > 0) {
878,883c878
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen .avail_out > 0) {
878,883c878
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen -= avail_out > 0) {
878,883c878
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen -= strm> 0) {
878,883c878
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen -= strm.0) {
878,883c878
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen -= strm.avail_out) {
879,883c879
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    {
(91.3 %, 17856 bytes)
875,878c875
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
---
>    ;
875,879c875
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    output_overflow_or_eof} else ;      
876,879c876
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    else ;      
876,879c876
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    if ;      
876,881c876
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
---
>    if (errhandler:
876,881c876
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
---
>    if (strm:
876,882c876
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
---
>    if (strm.0;
876,882c876
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
---
>    if (strm.avail_out ;
876,883c876
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
---
>    if (strm.avail_out > return ret; 
876,883c876
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
---
>    if (strm.avail_out > 0ret; 
876,883c876
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
---
>    if (strm.avail_out > 0) ; 
877,884c877
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
---
>       }
877,893c877
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>       0const char * BZ_API(BZ2_bzlibVersion)(void)
878,893c878
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>       char * BZ_API(BZ2_bzlibVersion)(void)
878,893c878
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>       return * BZ_API(BZ2_bzlibVersion)(void)
878,893c878
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>       return BZ_UNEXPECTED_EOFBZ_API(BZ2_bzlibVersion)(void)
879,893c879
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    (BZ2_bzlibVersion)(void)
879,893c879
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    } BZ2_bzlibVersion)(void)
879,893c879
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    } else )(void)
881,893c881
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    (void)
881,893c881
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    errhandlervoid)
(91.3 %, 17760 bytes)
876,888c876
<    if (strm.avail_out > 0) ; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
---
>    if (strm.avail_out > 0) ;
882,893d881
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
886,893d885
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
(91.4 %, 17681 bytes)
876,886c876
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
>    if (strm.avail_out > 0) const char *mode,
877,886c877
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> char *mode,
882,886c882
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> *mode,
883,886c883
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> mode,
883,886c883
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> BZFILE ,
883,887c883
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
> BZFILE * int open_mode)      
884,887c884
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                open_mode)      
884,887c884
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                ( )      
884,888c884
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
---
>                ( const ;
884,893c884
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( const char BZFILE * BZ_API(BZ2_bzopen)
884,893c884
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( const char ** BZ_API(BZ2_bzopen)
884,893c884
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( const char *pathBZ_API(BZ2_bzopen)
885,893c885
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  (BZ2_bzopen)
885,893c885
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  int BZ2_bzopen)
885,893c885
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  int fd)
886,894c886
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  ( const char *path,
886,894c886
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  const const char *path,
886,894c886
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  const char char *path,
886,894c886
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  const char **path,
(91.4 %, 17557 bytes)
884,892c884
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
>                ( char *mode )
885,892c885
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> *mode )
890,892c890
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> mode )
890,892c890
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE )
890,893c890
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
---
> BZFILE * {
890,894c890
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
> BZFILE * BZ_APIreturn 0;
890,894c890
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
> BZFILE * BZ_API(0;
890,894c890
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
> BZFILE * BZ_API(BZ2_bzopen;
891,895c891
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
---
>                }
891,899c891
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( BZFILE * BZ_API(BZ2_bzdopen)
891,899c891
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const * BZ_API(BZ2_bzdopen)
891,899c891
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char BZ_API(BZ2_bzdopen)
891,899c891
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *(BZ2_bzdopen)
891,899c891
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *pathBZ2_bzdopen)
892,899c892
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  )
892,900c892
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const ( int fd,
892,900c892
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char int fd,
892,900c892
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char *fd,
892,900c892
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char *mode ,
893,901c893
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> const char *mode )
894,901c894
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    char *mode )
894,901c894
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    return *mode )
894,901c894
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    return 0mode )
895,901c895
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> )
899,901d898
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
899,903c899
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE return bzopen_or_bzdopen(NULL,fd,mode,1);
899,903c899
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * bzopen_or_bzdopen(NULL,fd,mode,1);
899,903c899
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(NULL,fd,mode,1);
899,903c899
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(NULL,fd,mode,1);
899,903c899
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(BZ2_bzdopen,fd,mode,1);
900,903c900
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                fd,mode,1);
900,903c900
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( ,mode,1);
900,903c900
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int mode,1);
900,903c900
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int fd,1);
901,903c901
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  1);
901,903c901
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const );
901,903c901
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char ;
901,904c901
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
>                  const char *}
901,908c901
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char *mode int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
902,908c902
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
903,908c903
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    (BZ2_bzread) (BZFILE* b, void* buf, int len )
903,908c903
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return BZ2_bzread) (BZFILE* b, void* buf, int len )
903,908c903
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen) (BZFILE* b, void* buf, int len )
903,908c903
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen((BZFILE* b, void* buf, int len )
903,908c903
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULLBZFILE* b, void* buf, int len )
903,908c903
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,* b, void* buf, int len )
903,908c903
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fdb, void* buf, int len )
903,908c903
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,, void* buf, int len )
903,908c903
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,modevoid* buf, int len )
903,908c903
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,* buf, int len )
903,908c903
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1buf, int len )
903,908c903
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1), int len )
904,908c904
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int len )
908c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> len )
908c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int )
908,909c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API{
908,910c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(int bzerr, nread;
908,910c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzreadbzerr, nread;
908,910c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) , nread;
908,910c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (nread;
908,910c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE;
908,911c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
908,911c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b(((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
908,911c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
908,911c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void(bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
908,911c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
908,911c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf*)b)->lastErr == BZ_STREAM_END) return 0;
908,911c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, )b)->lastErr == BZ_STREAM_END) return 0;
908,911c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int b)->lastErr == BZ_STREAM_END) return 0;
908,911c908
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )->lastErr == BZ_STREAM_END) return 0;
909,911c909
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> ->lastErr == BZ_STREAM_END) return 0;
910,911c910
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    lastErr == BZ_STREAM_END) return 0;
910,911c910
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int == BZ_STREAM_END) return 0;
910,911c910
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerrBZ_STREAM_END) return 0;
910,911c910
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, ) return 0;
910,911c910
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nreadreturn 0;
911c911
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    0;
911c911
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ;
911,912c911
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (nread = 0;
911,912c911
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if ((= 0;
911,912c911
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((0;
911,912c911
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile;
911,913c911
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
---
>    if (((bzFile*if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
911,913c911
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
---
>    if (((bzFile*)(bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
911,913c911
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
---
>    if (((bzFile*)bbzerr == BZ_OK || bzerr == BZ_STREAM_END) 
911,913c911
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
---
>    if (((bzFile*)b)== BZ_OK || bzerr == BZ_STREAM_END) 
(91.5 %, 17506 bytes)
911,913c911
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
---
>    ) 
911,914c911
<    0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
---
>    0return nread;
912,914c912
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
---
>    nread;
912,914c912
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
---
>    nread ;
912,915c912
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
<     else 
---
>    nread = else 
912,916c912
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
<     else 
<       return -1;
---
>    nread = 0return -1;
913,916c913
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
<     else 
<       return -1;
---
>    -1;
913,916c913
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
<     else 
<       return -1;
---
>    if 1;
913,916c913
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
<     else 
<       return -1;
---
>    if (;
913,918c913
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
<     else 
<       return -1;
<    
< }
---
>    if (bzerr }
913,922c913
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
<     else 
<       return -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
913,922c913
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
<     else 
<       return -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
913,922c913
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
<     else 
<       return -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
913,922c913
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
<     else 
<       return -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr BZ2_bzwrite) (BZFILE* b, void* buf, int len )
913,922c913
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) 
<       return nread;
<     else 
<       return -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (bzerr == BZ_OK || bzerr == ) (BZFILE* b, void* buf, int len )
(91.5 %, 17416 bytes)
913,919c913
<    -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    * buf, int len )
913,919c913
<    -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    -buf, int len )
913,919c913
<    -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    -1, int len )
915,919c915
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int len )
919c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> len )
919c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int )
919,920c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API{
919,921c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(int bzerr;
919,921c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwritebzerr;
919,921c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) ;
919,923c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
---
> int BZ_API(BZ2_bzwrite) (;
919,924c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
---
> int BZ_API(BZ2_bzwrite) (BZFILEif(bzerr == BZ_OK)
919,924c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* (bzerr == BZ_OK)
919,924c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* bbzerr == BZ_OK)
919,924c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, == BZ_OK)
919,924c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, voidBZ_OK)
919,924c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* )
919,925c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
<       return len;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* bufreturn len;
919,925c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
<       return len;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, len;
919,925c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
<       return len;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int ;
919,926c919
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
<       return len;
<    else
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len else
920,927c920
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
<       return len;
<    else
<       return -1;
---
> return -1;
921,927c921
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
<       return len;
<    else
<       return -1;
---
>    -1;
921,927c921
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK)
<       return len;
<    else
<       return -1;
---
>    int 1;
922,927d921
< 
<    ;
<    if(bzerr == BZ_OK)
<       return len;
<    else
<       return -1;
(91.5 %, 17338 bytes)
921,929d920
<    -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
921,930c921
<    -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
---
>    -0;
922,930d921
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
(91.6 %, 17280 bytes)
921,927d920
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
921,928c921
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
---
>    return bzerr;
922,928d921
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
922,929c922
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> FILE *fp = ((bzFile *)b)->handle;
926,929c926
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> *fp = ((bzFile *)b)->handle;
926,929c926
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void fp = ((bzFile *)b)->handle;
926,929c926
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API= ((bzFile *)b)->handle;
926,929c926
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(((bzFile *)b)->handle;
926,929c926
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(BZ2_bzclose(bzFile *)b)->handle;
926,929c926
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(BZ2_bzclose) bzFile *)b)->handle;
926,929c926
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(BZ2_bzclose) (*)b)->handle;
(91.6 %, 17223 bytes)
921,922c921
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    handle;
921,922c921
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int ;
921,924c921
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    int bzerrif (b==NULL) 
922,924c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    (b==NULL) 
922,924c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE b==NULL) 
922,924c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *==NULL) 
922,924c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *fp NULL) 
922,924c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *fp = ) 
922,925c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
---
>    FILE *fp = (if(((bzFile*)b)->writing)
922,925c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
---
>    FILE *fp = (((((bzFile*)b)->writing)
922,925c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
---
>    FILE *fp = ((bzFile ((bzFile*)b)->writing)
922,925c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
---
>    FILE *fp = ((bzFile *(bzFile*)b)->writing)
922,925c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
---
>    FILE *fp = ((bzFile *)bzFile*)b)->writing)
922,925c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
---
>    FILE *fp = ((bzFile *)b*)b)->writing)
922,925c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
---
>    FILE *fp = ((bzFile *)b))b)->writing)
922,925c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
---
>    FILE *fp = ((bzFile *)b)->b)->writing)
922,925c922
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
---
>    FILE *fp = ((bzFile *)b)->handle)->writing)
924,925c924
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
---
>    ->writing)
924,925c924
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
---
>    if writing)
924,925c924
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
---
>    if ()
924,926c924
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if (bBZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
924,926c924
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if (b==(&bzerr,b,0,NULL,NULL);
924,926c924
<    if (b==NULL) 
<    if(((bzFile*)b)->writing)
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if (b==NULL&bzerr,b,0,NULL,NULL);
925,926c925
<    if(((bzFile*)b)->writing)
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    bzerr,b,0,NULL,NULL);
925,926c925
<    if(((bzFile*)b)->writing)
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if,b,0,NULL,NULL);
925,926c925
<    if(((bzFile*)b)->writing)
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(b,0,NULL,NULL);
(91.6 %, 17168 bytes)
924,925c924
<    if (b==NULL&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK)
---
>    if (b==NULL!= BZ_OK)
924,925c924
<    if (b==NULL&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK)
---
>    if (b==NULL&BZ_OK)
(91.6 %, 17130 bytes)
924,925c924
<    if (b==NULL!= BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>    if (b==NULL;
924,927c924
<    if (b==NULL!= BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
---
>    if (b==NULL!= else
924,928c924
<    if (b==NULL!= BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
---
>    if (b==NULL!= BZ_OKif(fp!=stdin && fp!=stdout)
925,928c925
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
---
>          (fp!=stdin && fp!=stdout)
925,928c925
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
---
>          BZ2_bzWriteClosefp!=stdin && fp!=stdout)
925,928c925
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
---
>          BZ2_bzWriteClose(!=stdin && fp!=stdout)
925,928c925
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
---
>          BZ2_bzWriteClose(NULLstdin && fp!=stdout)
925,928c925
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
---
>          BZ2_bzWriteClose(NULL,&& fp!=stdout)
925,928c925
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
---
>          BZ2_bzWriteClose(NULL,bfp!=stdout)
925,928c925
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
---
>          BZ2_bzWriteClose(NULL,b,!=stdout)
925,928c925
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
---
>          BZ2_bzWriteClose(NULL,b,1stdout)
925,928c925
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
---
>          BZ2_bzWriteClose(NULL,b,1,)
925,929c925
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
---
>          BZ2_bzWriteClose(NULL,b,1,NULLfclose(fp);
925,929c925
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
---
>          BZ2_bzWriteClose(NULL,b,1,NULL,(fp);
925,929c925
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
---
>          BZ2_bzWriteClose(NULL,b,1,NULL,NULLfp);
925,929c925
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    else
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
---
>          BZ2_bzWriteClose(NULL,b,1,NULL,NULL));
927,929c927
<    else
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
---
>    ;
928,931c928
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
<    
< }
---
>    }
928,936c928
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    ifstatic char *bzerrorstrings[] = {
928,936c928
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(char *bzerrorstrings[] = {
928,936c928
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp*bzerrorstrings[] = {
928,936c928
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=bzerrorstrings[] = {
928,936c928
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin [] = {
928,936c928
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin && ] = {
928,936c928
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin && fp= {
928,936c928
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin && fp!={
928,937c928
<    if(fp!=stdin && fp!=stdout)
<       fclose(fp);
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
---
>    if(fp!=stdin && fp!=stdout"OK"
(91.7 %, 17078 bytes)
927,938c927
<    ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
---
>    ,"MEM_ERROR"
929,938c929
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
---
> "MEM_ERROR"
934,939c934
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
---
> ,"DATA_ERROR"
934,939c934
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
---
> static "DATA_ERROR"
934,940c934
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
---
> static char ,"DATA_ERROR_MAGIC"
934,940c934
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
---
> static char *"DATA_ERROR_MAGIC"
934,941c934
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
---
> static char *bzerrorstrings,"IO_ERROR"
934,941c934
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
---
> static char *bzerrorstrings["IO_ERROR"
934,942c934
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
---
> static char *bzerrorstrings[] ,"UNEXPECTED_EOF"
934,942c934
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
---
> static char *bzerrorstrings[] = "UNEXPECTED_EOF"
935,943c935
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
---
>        ,"OUTBUFF_FULL"
936,943c936
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
---
>       "OUTBUFF_FULL"
936,944c936
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
---
>       ,,"CONFIG_ERROR"
937,944c937
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
---
>       "CONFIG_ERROR"
(91.7 %, 16925 bytes)
936,944c936
<       "OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
>       };
937,944c937
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
>       ;
937,947c937
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
938,947c938
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
938,947c938
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,* BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
939,947c939
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
939,947c939
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,(BZ2_bzerror) (BZFILE *b, int *errnum)
940,947c940
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       BZ2_bzerror) (BZFILE *b, int *errnum)
940,947c940
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,) (BZFILE *b, int *errnum)
(91.8 %, 16792 bytes)
936,939c936
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       *errnum)
936,939c936
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       }errnum)
939c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> )
939,940c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
---
> const {
939,941c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char int err = ((bzFile *)b)->lastErr;
939,941c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * err = ((bzFile *)b)->lastErr;
939,941c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API= ((bzFile *)b)->lastErr;
939,941c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(((bzFile *)b)->lastErr;
939,941c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror(bzFile *)b)->lastErr;
939,941c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) bzFile *)b)->lastErr;
939,941c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (*)b)->lastErr;
939,941c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE )b)->lastErr;
939,941c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b)->lastErr;
939,941c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b)->lastErr;
939,941c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, ->lastErr;
939,941c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int lastErr;
939,941c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *;
939,943c939
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnumif(err>0) err = 0;
940,943c940
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
> (err>0) err = 0;
941,943c941
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    err>0) err = 0;
941,943c941
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int >0) err = 0;
941,943c941
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err 0) err = 0;
941,943c941
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = ) err = 0;
941,943c941
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = (err = 0;
941,943c941
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = ((= 0;
941,943c941
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = ((bzFile 0;
941,943c941
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = ((bzFile *;
941,944c941
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
---
>    int err = ((bzFile *)*errnum = err;
941,944c941
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
---
>    int err = ((bzFile *)berrnum = err;
941,944c941
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
---
>    int err = ((bzFile *)b)= err;
941,944c941
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
---
>    int err = ((bzFile *)b)->err;
942,944d941
< 
<    if(err>0) err = 0;
<    *errnum = err;
943,944d942
<    if(err>0) err = 0;
<    *errnum = err;
(91.8 %, 16751 bytes)
941,975c941
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
>    int err = ((bzFile *)b)->lastErr#define BZ_LCCWIN32  0
942,975c942
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
>    define BZ_LCCWIN32  0
942,975c942
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
>    return BZ_LCCWIN32  0
942,975c942
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
>    return bzerrorstrings0
942,981c942
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[#include <signal.h>
942,981c942
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[errinclude <signal.h>
942,981c942
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[err*<signal.h>
942,981c942
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[err*-signal.h>
942,981c942
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[err*-1.h>
942,981c942
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[err*-1]h>
943,981c943
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> >
972,981d971
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
972,981d971
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
(91.9 %, 16678 bytes)
972,975c972
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> ERROR_IF_NOT_ZERO(i)  
972,975c972
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> #(i)  
972,975c972
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> #include i)  
972,975c972
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> #include <)  
972,976c972
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #include <errno#define ERROR_IF_MINUS_ONE(i) 
972,976c972
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #include <errno.define ERROR_IF_MINUS_ONE(i) 
972,976c972
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #include <errno.hERROR_IF_MINUS_ONE(i) 
974,976c974
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> (i) 
974,976c974
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #i) 
974,976c974
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ) 
974,982c974
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define ERROR_IF_EOF#if BZ_UNIX
974,982c974
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define ERROR_IF_EOF(if BZ_UNIX
974,982c974
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define ERROR_IF_EOF(iBZ_UNIX
975,982d974
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
975,983c975
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #include <fcntl.h>
975,983c975
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define <fcntl.h>
975,983c975
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define ERROR_IF_NOT_ZEROfcntl.h>
975,983c975
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define ERROR_IF_NOT_ZERO(.h>
975,983c975
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define ERROR_IF_NOT_ZERO(ih>
976,983c976
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> >
976,984c976
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> ##   include <utime.h>
976,984c976
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define include <utime.h>
976,984c976
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define ERROR_IF_MINUS_ONE<utime.h>
976,984c976
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define ERROR_IF_MINUS_ONE(utime.h>
976,984c976
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define ERROR_IF_MINUS_ONE(i.h>
982,984c982
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> h>
982,984c982
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #>
982,986c982
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #if #   define PATH_SEP    '/'
983,986c983
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> define PATH_SEP    '/'
983,986c983
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #   PATH_SEP    '/'
983,986c983
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #   include '/'
(91.9 %, 16629 bytes)
983,986d982
< define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
983,987c983
< define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> define define MY_S_ISDIR  S_ISDIR
983,987c983
< define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> define PATH_SEP    MY_S_ISDIR  S_ISDIR
(91.9 %, 16518 bytes)
983,986c983
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> snocString((root), (name))
983,986c983
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> #   ((root), (name))
983,986c983
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> #   define (root), (name))
(92.0 %, 16434 bytes)
983,985c983
< snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
> , name) \
983,985c983
< snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
> snocStringname) \
(92.0 %, 16379 bytes)
983,984c983
< , name) \
<       root=snocString((root), (name))
---
> )
983,986c983
< , name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) 
---
> , #   define SET_BINARY_MODE(fd) 
983,986c983
< , name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) 
---
> , namedefine SET_BINARY_MODE(fd) 
(92.0 %, 16333 bytes)
983,996c983
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> ((Bool)1)
985,996c985
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> (Bool)1)
985,996c985
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #   Bool)1)
985,996c985
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #   define )1)
985,996c985
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #   define SET_BINARY_MODE1)
985,996c985
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #   define SET_BINARY_MODE()
985,997c985
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #   define SET_BINARY_MODE(fd#define False ((Bool)0)
987,997c987
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> define False ((Bool)0)
987,997c987
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #      False ((Bool)0)
987,997c987
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #      define ((Bool)0)
989,997c989
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> (Bool)0)
989,997c989
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #Bool)0)
996,997c996
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> )0)
996,997c996
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #0)
996,997c996
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define )
996,1000c996
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
---
> #define True  typedef int IntNative;
996,1000c996
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
---
> #define True  (int IntNative;
996,1000c996
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
---
> #define True  ((IntNative;
996,1000c996
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
---
> #define True  ((Bool;
996,1014c996
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> #define True  ((Bool)#define SM_I2O           1
996,1014c996
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> #define True  ((Bool)1define SM_I2O           1
997,1014c997
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> SM_I2O           1
997,1014c997
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
---
> #1
997,1015c997
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define #define SM_F2O           2
997,1015c997
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define False define SM_F2O           2
997,1015c997
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define False (SM_F2O           2
997,1015c997
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define False ((2
997,1016c997
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #define False ((Bool#define SM_F2F           3
997,1016c997
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #define False ((Bool)define SM_F2F           3
997,1016c997
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #define False ((Bool)0SM_F2F           3
1000,1016c1000
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> 3
1000,1019c1000
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef #define OM_Z             1
1000,1019c1000
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef int define OM_Z             1
1000,1019c1000
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef int IntNativeOM_Z             1
1014,1019c1014
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> 1
1014,1020c1014
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> ##define OM_UNZ           2
1014,1020c1014
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define define OM_UNZ           2
1014,1020c1014
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define SM_I2O           OM_UNZ           2
(92.1 %, 16230 bytes)
1014,1177c1014
< #define define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define #if BZ_UNIX
1014,1177c1014
< #define define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define define if BZ_UNIX
1014,1177c1014
< #define define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define define OM_UNZ           BZ_UNIX
1015,1178d1014
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
1015,1178d1014
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
1015,1192c1015
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #define #define BZ_N_SUFFIX_PAIRS 4
1015,1192c1015
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #define OM_TEST          define BZ_N_SUFFIX_PAIRS 4
1020,1192c1020
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> BZ_N_SUFFIX_PAIRS 4
1020,1192c1020
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
---
> #4
(92.2 %, 15980 bytes)
1015,1074c1015
< #define OM_TEST          define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<     int 
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define OM_TEST          (aa->name, (s))==0)
1015,1074c1015
< #define OM_TEST          define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<     int 
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define OM_TEST          define aa->name, (s))==0)
1015,1074c1015
< #define OM_TEST          define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<     int 
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define OM_TEST          define BZ_N_SUFFIX_PAIRS ->name, (s))==0)
(92.3 %, 15847 bytes)
1015,1017c1015
< #define OM_TEST          (aa->name, (s))==0)
< 
< IntNative main ( IntNative argc, Char *argv[] )
---
> #define OM_TEST          IntNative argc, Char *argv[] )
1015,1017c1015
< #define OM_TEST          (aa->name, (s))==0)
< 
< IntNative main ( IntNative argc, Char *argv[] )
---
> #define OM_TEST          (argc, Char *argv[] )
1015,1017c1015
< #define OM_TEST          (aa->name, (s))==0)
< 
< IntNative main ( IntNative argc, Char *argv[] )
---
> #define OM_TEST          (aa, Char *argv[] )
(92.3 %, 15809 bytes)
1015,1021c1015
< #define OM_TEST          IntNative argc, Char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define OM_TEST          
\ No newline at end of file
1015,1021c1015
< #define OM_TEST          IntNative argc, Char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define OM_TEST          IntNative 
\ No newline at end of file
1015,1021c1015
< #define OM_TEST          IntNative argc, Char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define OM_TEST          IntNative argc
\ No newline at end of file
(92.3 %, 15771 bytes)
===< pass_clex :: rm-toks-13 >===
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> define BZ_FINISH_OK         3
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #BZ_FINISH_OK         3
9,12c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define 3
9,13c9
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_OK                #define BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #BZ_STREAM_END        4
10,13c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define 4
10,14c10
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> define BZ_SEQUENCE_ERROR    (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #BZ_SEQUENCE_ERROR    (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define (-1)
11,14c11
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_FLUSH_OK          -1)
(92.4 %, 15676 bytes)
10,11c10
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_RUN_OK            )
10,12c10
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
---
> #define BZ_RUN_OK            ##define BZ_MEM_ERROR         (5)
10,12c10
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
---
> #define BZ_RUN_OK            #define define BZ_MEM_ERROR         (5)
10,12c10
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
---
> #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    BZ_MEM_ERROR         (5)
10,12c10
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
---
> #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    ((5)
10,12c10
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
---
> #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-5)
11,12d10
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
11,12d10
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
11,12d10
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
11,12d10
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
11,13c11
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_PARAM_ERROR       (-6)
11,13c11
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (5)
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_PARAM_ERROR       (-6)
(92.4 %, 15609 bytes)
11,13c11
< #define BZ_PARAM_ERROR       (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_PARAM_ERROR       BZ_OUTBUFF_FULL      (-8)
11,13c11
< #define BZ_PARAM_ERROR       (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_PARAM_ERROR       ((-8)
11,13c11
< #define BZ_PARAM_ERROR       (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_PARAM_ERROR       (--8)
11,13c11
< #define BZ_PARAM_ERROR       (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_PARAM_ERROR       (-68)
12,13c12
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> )
12,14c12
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> ##define BZ_CONFIG_ERROR      (-9)
12,14c12
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define define BZ_CONFIG_ERROR      (-9)
12,14c12
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    BZ_CONFIG_ERROR      (-9)
12,14c12
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    ((-9)
12,14c12
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    (--9)
12,14c12
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    (-79)
13,14c13
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> )
13,16c13
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #typedef 
13,17c13
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define struct {
13,17c13
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_OUTBUFF_FULL      {
13,18c13
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      (char *next_in;
13,18c13
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      (-*next_in;
13,18c13
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      (-8next_in;
14,18c14
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> ;
14,19c14
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #unsigned int avail_in;
14,19c14
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define int avail_in;
14,19c14
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      avail_in;
14,19c14
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      (;
14,20c14
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-unsigned int total_in_lo32;
14,20c14
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-9int total_in_lo32;
16,20c16
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> total_in_lo32;
17,20c17
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    ;
17,21c17
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    struct unsigned int total_in_hi32;
18,21c18
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       int total_in_hi32;
18,21c18
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char total_in_hi32;
18,21c18
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char *;
18,23c18
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       char *next_inchar *next_out;
19,23c19
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       *next_out;
19,23c19
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned next_out;
19,23c19
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned int ;
19,24c19
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int avail_inunsigned int avail_out;
20,24c20
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       int avail_out;
20,24c20
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned avail_out;
20,24c20
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int ;
20,25c20
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int total_in_lo32unsigned int total_out_lo32;
21,25c21
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       int total_out_lo32;
21,25c21
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned total_out_lo32;
21,25c21
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int ;
21,26c21
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       unsigned int total_in_hi32unsigned int total_out_hi32;
23,26c23
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       int total_out_hi32;
23,26c23
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char total_out_hi32;
23,26c23
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char *;
23,28c23
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char *next_outvoid *state;
24,28c24
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       *state;
24,28c24
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned state;
24,28c24
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned int ;
24,30c24
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int avail_outvoid *(*bzalloc)(void *,int,int);
25,30c25
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       *(*bzalloc)(void *,int,int);
25,30c25
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned (*bzalloc)(void *,int,int);
25,30c25
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int *bzalloc)(void *,int,int);
25,30c25
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_lo32bzalloc)(void *,int,int);
26,30c26
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       )(void *,int,int);
26,30c26
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned (void *,int,int);
26,30c26
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int void *,int,int);
26,30c26
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_hi32*,int,int);
28,30c28
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       ,int,int);
28,30c28
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void int,int);
28,30c28
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *,int);
28,30c28
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *stateint);
30c30
<       void *(*bzalloc)(void *,int,int);
---
>       );
30c30
<       void *(*bzalloc)(void *,int,int);
---
>       void ;
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *void (*bzfree)(void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *((*bzfree)(void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(**bzfree)(void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzallocbzfree)(void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc))(void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)((void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void **,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,intvoid *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,*);
31d30
<       void (*bzfree)(void *,void *);
31d30
<       void (*bzfree)(void *,void *);
31d30
<       void (*bzfree)(void *,void *);
31d30
<       void (*bzfree)(void *,void *);
31,32c31
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (opaque;
31,32c31
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*;
31,33c31
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>       void (*bzfree} 
31,34c31
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bzfree)bz_stream;
31,34c31
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bzfree)(;
31,38c31
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void #include <stdio.h>
31,38c31
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *include <stdio.h>
31,38c31
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,<stdio.h>
31,38c31
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void stdio.h>
31,38c31
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void *.h>
31,38c31
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void *)h>
32,38c32
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       >
32,40c32
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void #   define BZ_API(func) func
32,40c32
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *define BZ_API(func) func
32,40c32
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *opaqueBZ_API(func) func
33,40c33
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    (func) func
34,40c34
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    func) func
34,40c34
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_stream) func
38,40c38
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> func
38,41c38
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> ##   define BZ_EXTERN extern
38,41c38
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include define BZ_EXTERN extern
38,41c38
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <BZ_EXTERN extern
38,41c38
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdioextern
38,46c38
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #include <stdio.BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
38,46c38
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #include <stdio.hint BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
40,46c40
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
40,46c40
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   ()BZ_API(BZ2_bzDecompressEnd) ( 
40,46c40
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define )BZ_API(BZ2_bzDecompressEnd) ( 
40,46c40
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define BZ_APIBZ_API(BZ2_bzDecompressEnd) ( 
40,46c40
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define BZ_API((BZ2_bzDecompressEnd) ( 
40,46c40
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define BZ_API(funcBZ2_bzDecompressEnd) ( 
40,46c40
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> #   define BZ_API(func) ) ( 
41,46c41
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
---
> ( 
41,47c41
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
> #   bz_stream *strm 
41,47c41
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
> #   define *strm 
41,47c41
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
> #   define BZ_EXTERN strm 
46,48c46
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> );
46,48c46
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
> BZ_EXTERN ;
46,54c46
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int #define BZ_MAX_UNUSED 5000
46,54c46
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int BZ_APIdefine BZ_MAX_UNUSED 5000
46,54c46
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int BZ_API(BZ_MAX_UNUSED 5000
46,54c46
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int BZ_API()5000
46,56c46
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_APItypedef void BZFILE;
46,56c46
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_API(void BZFILE;
46,56c46
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEndBZFILE;
46,56c46
< BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API()BZ_API(BZ2_bzDecompressEnd) ;
47,58c47
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
47,58c47
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       bz_stream BZFILE* BZ_API(BZ2_bzReadOpen) ( 
47,58c47
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       bz_stream ** BZ_API(BZ2_bzReadOpen) ( 
(92.4 %, 15539 bytes)
46,56c46
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN (BZ2_bzReadOpen) ( 
52,56c52
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ2_bzReadOpen) ( 
52,56c52
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #) ( 
52,56c52
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define ( 
52,57c52
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #define BZ_MAX_UNUSED int*  bzerror,   
54,57c54
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> *  bzerror,   
54,57c54
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef bzerror,   
54,57c54
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void ,   
54,58c54
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void BZFILEFILE* f, 
56,58c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> * f, 
56,58c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN f, 
56,58c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE, 
56,59c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* int   verbosity, 
56,59c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIverbosity, 
56,59c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(, 
56,60c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpenint   small,
56,60c56
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) small,
57,60c57
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       ,
57,61c57
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       intvoid* unused,    
57,61c57
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  * unused,    
57,61c57
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  bzerrorunused,    
58,61c58
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       ,    
58,62c58
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILEint   nUnused 
58,62c58
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* nUnused 
58,63c58
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE* f);
59,63c59
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       ;
59,65c59
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
---
>       int   ;
59,67c59
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   verbosityBZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
60,67c60
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void BZ_API(BZ2_bzReadGetUnused) ( 
60,67c60
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   BZ_API(BZ2_bzReadGetUnused) ( 
60,67c60
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   small(BZ2_bzReadGetUnused) ( 
61,67c61
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ2_bzReadGetUnused) ( 
61,67c61
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void) ( 
61,67c61
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* ( 
61,68c61
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       void* unusedint*    bzerror, 
62,68c62
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       *    bzerror, 
62,68c62
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       int   bzerror, 
63,68c63
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    , 
63,69c63
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )BZFILE* b, 
65,69c65
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
67,69c67
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> b, 
67,69c67
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN , 
67,70c67
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void void**  unused,  
67,70c67
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API**  unused,  
67,70c67
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(*  unused,  
67,70c67
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedunused,  
67,70c67
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ,  
68,70d67
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
68,70d67
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
68,70d67
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
68,72c68
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int*    bzerror);
69,72c69
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       ;
69,74c69
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILEBZ_EXTERN int BZ_API(BZ2_bzReadlen 
69,74c69
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILE* int BZ_API(BZ2_bzReadlen 
69,74c69
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILE* bBZ_API(BZ2_bzReadlen 
70,74c70
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       (BZ2_bzReadlen 
70,74c70
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       voidBZ2_bzReadlen 
70,75c70
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       void*);
70,75c70
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       void**  ;
70,77c70
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void**  unusedBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
71,77c71
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
71,77c71
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int* BZ_API(BZ2_bzWriteOpen) ( 
71,77c71
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    BZ_API(BZ2_bzWriteOpen) ( 
72,77c72
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    (BZ2_bzWriteOpen) ( 
72,77c72
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZ2_bzWriteOpen) ( 
74,77c74
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> ) ( 
74,77c74
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN ( 
74,78c74
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int int*  bzerror,      
74,78c74
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int BZ_API*  bzerror,      
74,78c74
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int BZ_API(bzerror,      
75,78c75
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    ,      
75,79c75
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    )FILE* f, 
77,79c77
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> * f, 
77,79c77
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN f, 
77,79c77
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE, 
77,80c77
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* int   blockSize100k, 
77,80c77
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_APIblockSize100k, 
77,80c77
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(, 
77,81c77
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenint   verbosity, 
77,81c77
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) verbosity, 
78,81c78
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       , 
78,82c78
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       intint   workFactor 
78,82c78
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  workFactor 
78,83c78
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int*  bzerror);
79,83c79
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
79,85c79
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILEBZ_EXTERN void BZ_API(BZ2_bzWritelen 
79,85c79
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILE* void BZ_API(BZ2_bzWritelen 
79,85c79
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILE* fBZ_API(BZ2_bzWritelen 
80,85c80
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       (BZ2_bzWritelen 
80,85c80
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   BZ2_bzWritelen 
80,86c80
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       int   blockSize100k);
81,86c81
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       ;
81,88c81
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
81,88c81
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   verbosityvoid BZ_API(BZ2_bzWriteClose) ( 
82,88c82
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZ_API(BZ2_bzWriteClose) ( 
82,88c82
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   (BZ2_bzWriteClose) ( 
83,88c83
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    BZ2_bzWriteClose) ( 
83,88c83
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )) ( 
85,88c85
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> ( 
85,89c85
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN int*          bzerror, 
85,89c85
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void *          bzerror, 
85,89c85
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
85,89c85
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(, 
86,90c86
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    BZFILE*       b, 
86,90c86
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )*       b, 
88,90c88
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> b, 
88,90c88
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN , 
88,91c88
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void int           abandon, 
88,91c88
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIabandon, 
88,91c88
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(, 
88,92c88
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseunsigned int* nbytes_in, 
88,92c88
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) int* nbytes_in, 
89,92c89
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       * nbytes_in, 
89,92c89
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       intnbytes_in, 
89,92c89
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          , 
89,93c89
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          bzerrorunsigned int* nbytes_out 
90,93c90
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
90,93c90
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE* nbytes_out 
90,93c90
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       nbytes_out 
90,94c90
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE*       b);
91,94c91
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       ;
91,96c91
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
91,96c91
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           abandonvoid BZ_API(BZ2_bzWriteClose64) ( 
92,96c92
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ_API(BZ2_bzWriteClose64) ( 
92,96c92
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned (BZ2_bzWriteClose64) ( 
92,96c92
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ2_bzWriteClose64) ( 
92,96c92
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* ) ( 
92,96c92
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_in( 
93,96d92
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
93,97c93
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned *          bzerror, 
93,97c93
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned intbzerror, 
93,97c93
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* , 
94,98c94
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    BZFILE*       b, 
94,98c94
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )*       b, 
96,98c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> b, 
96,98c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN , 
96,99c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void int           abandon, 
96,99c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIabandon, 
96,99c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(, 
96,100c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64unsigned int* nbytes_in_lo32, 
96,100c96
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) int* nbytes_in_lo32, 
97,100c97
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       * nbytes_in_lo32, 
97,100c97
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       intnbytes_in_lo32, 
97,100c97
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          , 
97,101c97
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          bzerrorunsigned int* nbytes_in_hi32, 
98,101c98
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
98,101c98
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE* nbytes_in_hi32, 
98,101c98
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       nbytes_in_hi32, 
99,101d98
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
99,101d98
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
99,102c99
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           int* nbytes_out_lo32, 
99,102c99
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           abandon* nbytes_out_lo32, 
100,102c100
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       nbytes_out_lo32, 
100,102c100
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned , 
100,103c100
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intunsigned int* nbytes_out_hi32
100,103c100
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* int* nbytes_out_hi32
100,103c100
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_lo32* nbytes_out_hi32
101,103c101
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       nbytes_out_hi32
101,104c101
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned );
101,104c101
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int;
101,109c101
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
101,109c101
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_in_hi32int BZ_API(BZ2_bzBuffToBuffCompress) ( 
102,109c102
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffCompress) ( 
102,109c102
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned (BZ2_bzBuffToBuffCompress) ( 
102,109c102
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ2_bzBuffToBuffCompress) ( 
102,109c102
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* ) ( 
102,109c102
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32( 
103,109d102
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
103,110c103
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned *         dest, 
103,110c103
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned intdest, 
103,110c103
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* , 
104,111c104
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    unsigned int* destLen,
104,111c104
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )int* destLen,
109,111c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> * destLen,
109,111c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN destLen,
109,111c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int ,
109,112c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIchar*         source, 
109,112c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(*         source, 
109,112c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompresssource, 
109,112c109
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) , 
110,112d109
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
110,113c110
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charint  sourceLen,
110,113c110
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceLen,
110,113c110
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         dest,
111,113d110
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
111,114c111
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned blockSize100k, 
111,114c111
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int, 
111,115c111
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* int           verbosity, 
111,115c111
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* destLenverbosity, 
112,115c112
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       , 
112,116c112
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       charint           workFactor 
112,116c112
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         workFactor 
112,117c112
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char*         source);
113,117c113
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       ;
113,119c113
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
113,119c113
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
113,119c113
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  sourceLenBZ_API(BZ2_bzBuffToBuffDecompress) ( 
114,119c114
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       (BZ2_bzBuffToBuffDecompress) ( 
114,119c114
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ2_bzBuffToBuffDecompress) ( 
114,119c114
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100k) ( 
115,119c115
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ( 
115,120c115
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           char*         dest, 
115,120c115
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           verbosity*         dest, 
116,120c116
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       dest, 
116,120c116
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           , 
117,121c117
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    unsigned int* destLen,
117,121c117
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )int* destLen,
119,121c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> * destLen,
119,121c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN destLen,
119,121c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int ,
119,122c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIchar*         source, 
119,122c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(*         source, 
119,122c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompresssource, 
119,122c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) , 
120,122d119
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
120,123c120
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charint  sourceLen,
120,123c120
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceLen,
120,123c120
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         dest,
121,123d120
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
121,124c121
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned small, 
121,124c121
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int, 
121,125c121
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int* int           verbosity 
121,125c121
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int* destLenverbosity 
122,126c122
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       );
122,126c122
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       char;
122,131c122
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
122,131c122
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         sourceconst char * BZ_API(BZ2_bzlibVersion) (
123,131c123
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char * BZ_API(BZ2_bzlibVersion) (
123,131c123
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned * BZ_API(BZ2_bzlibVersion) (
123,131c123
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  BZ_API(BZ2_bzlibVersion) (
123,131c123
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  sourceLen(BZ2_bzlibVersion) (
124,131c124
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       BZ2_bzlibVersion) (
124,131c124
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       int           ) (
124,131c124
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       int           small(
125,131d124
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
125,133c125
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>       int           );
126,133c126
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>    ;
126,135c126
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    )BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
131,135c131
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZFILE * BZ_API(BZ2_bzopen) (
131,135c131
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN * BZ_API(BZ2_bzopen) (
131,135c131
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZ_EXTERN const BZ_API(BZ2_bzopen) (
(92.5 %, 15454 bytes)
125,128c125
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           path,
125,128c125
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           ),
127,129c127
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> const char *mode
127,129c127
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN char *mode
127,129c127
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE *mode
127,129c127
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * mode
127,130c127
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API);
127,130c127
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(;
127,132c127
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopenBZ_EXTERN ;
127,132c127
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
128,134c128
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
---
>       BZ_EXTERN int BZ_API;
128,134c128
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
---
>       const int BZ_API;
128,134c128
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
---
>       const char BZ_API;
128,134c128
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
---
>       const char *;
128,136c128
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
---
>       const char *pathBZ_EXTERN int BZ_API;
129,136c129
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
---
>       int BZ_API;
129,136c129
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
---
>       const BZ_API;
129,136c129
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
---
>       const char ;
129,138c129
<       const char *mode
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       const char *BZ_EXTERN int BZ_API(BZ2_bzflush) (
130,138c130
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>    int BZ_API(BZ2_bzflush) (
130,138c130
<    );
< 
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>    )BZ_API(BZ2_bzflush) (
132,138c132
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> (BZ2_bzflush) (
132,138c132
< BZ_EXTERN ;
<          
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN BZ2_bzflush) (
134,138c134
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> ) (
134,138c134
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN (
134,139c134
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       );
---
> BZ_EXTERN int );
136,140d135
< BZ_EXTERN int BZ_API;
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       );
< 
(92.5 %, 15366 bytes)
132,147c132
< (BZ2_bzflush) (
<       );
< 
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> include <stdlib.h>
132,147c132
< (BZ2_bzflush) (
<       );
< 
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> (<stdlib.h>
132,147c132
< (BZ2_bzflush) (
<       );
< 
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> (BZ2_bzflushstdlib.h>
132,147c132
< (BZ2_bzflush) (
<       );
< 
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> (BZ2_bzflush) .h>
133,147c133
<       );
< 
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       h>
133,147c133
<       );
< 
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       )>
135,151d134
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
135,152c135
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN define BZ_VERSION  "1.0.2, 30-Dec-2001"
135,152c135
< BZ_EXTERN const ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN const BZ_VERSION  "1.0.2, 30-Dec-2001"
145,152c145
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> "1.0.2, 30-Dec-2001"
145,154c145
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #typedef char            Char;
145,154c145
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define char            Char;
147,154c147
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> Char;
147,154c147
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #;
147,155c147
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include typedef unsigned char   Bool;
147,155c147
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <unsigned char   Bool;
147,155c147
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlibchar   Bool;
(92.5 %, 15289 bytes)
135,138d134
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
135,139c135
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #unsigned char   UChar;
135,139c135
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define char   UChar;
135,139c135
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define BZ_VERSION  UChar;
137,139c137
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> ;
137,140c137
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef typedef int             Int32;
137,140c137
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            int             Int32;
137,140c137
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            CharInt32;
138,140c138
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> ;
138,141c138
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef typedef unsigned int    UInt32;
138,141c138
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned unsigned int    UInt32;
138,141c138
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   int    UInt32;
138,141c138
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   BoolUInt32;
139,141c139
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> ;
139,142c139
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef typedef short           Int16;
139,142c139
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned short           Int16;
139,142c139
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   Int16;
140,142d139
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
140,142d139
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
140,142d139
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
140,143c140
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             short  UInt16;
140,143c140
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             Int32UInt16;
141,143c141
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> ;
141,145c141
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef #define True  ((Bool)1)
141,145c141
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned define True  ((Bool)1)
141,145c141
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    True  ((Bool)1)
141,145c141
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    UInt32((Bool)1)
142,145c142
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> (Bool)1)
142,145c142
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef Bool)1)
142,145c142
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           )1)
142,145c142
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           Int161)
143,145c143
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> )
143,146c143
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef #define False ((Bool)0)
143,146c143
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned define False ((Bool)0)
143,146c143
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  False ((Bool)0)
143,146c143
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  UInt16((Bool)0)
145,146c145
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> (Bool)0)
145,146c145
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #Bool)0)
145,146c145
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define )0)
145,146c145
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  0)
145,146c145
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  ()
145,148c145
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((#define __inline__  
145,148c145
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Booldefine __inline__  
145,148c145
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool)__inline__  
145,150c145
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  ((Bool)1extern void BZ2_bz__AssertH__fail ( int errcode );
146,150c146
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> void BZ2_bz__AssertH__fail ( int errcode );
146,150c146
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #BZ2_bz__AssertH__fail ( int errcode );
146,150c146
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define ( int errcode );
146,150c146
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define False int errcode );
146,150c146
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define False (errcode );
146,150c146
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define False (();
146,150c146
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define False ((Bool;
146,151c146
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> #define False ((Bool)#define AssertH(cond,errcode) \
146,151c146
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> #define False ((Bool)0define AssertH(cond,errcode) \
148,151c148
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> AssertH(cond,errcode) \
148,151c148
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> #(cond,errcode) \
148,151c148
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> #define cond,errcode) \
150,151c150
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> ,errcode) \
150,151c150
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> extern errcode) \
150,151c150
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> extern void ) \
150,151c150
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> extern void BZ2_bz__AssertH__fail \
150,153c150
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
---
> extern void BZ2_bz__AssertH__fail ( #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
150,153c150
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
---
> extern void BZ2_bz__AssertH__fail ( int define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
150,153c150
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
---
> extern void BZ2_bz__AssertH__fail ( int errcode AssertDstderrzfza3za4define BZ_HDR_0 0x30   
150,153c150
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
---
> extern void BZ2_bz__AssertH__fail ( int errcode )BZ_HDR_0 0x30   
151,153c151
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
---
> 0x30   
151,157c151
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> ##define BZ_MAX_ALPHA_SIZE 258
151,157c151
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define define BZ_MAX_ALPHA_SIZE 258
151,157c151
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define AssertHBZ_MAX_ALPHA_SIZE 258
151,157c151
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define AssertH(258
151,158c151
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define AssertH(cond#define BZ_MAX_CODE_LEN    23
151,158c151
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define AssertH(cond,define BZ_MAX_CODE_LEN    23
151,158c151
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define AssertH(cond,errcodeBZ_MAX_CODE_LEN    23
151,158c151
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define AssertH(cond,errcode) 23
153,159d152
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
153,159d152
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
153,159d152
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
153,160c153
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
---
> #define AssertDstderrzfza3za4define 0
153,161c153
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define AssertDstderrzfza3za4define BZ_HDR_0 #define BZ_RUNB 1
157,161c157
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> define BZ_RUNB 1
157,161c157
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #BZ_RUNB 1
157,161c157
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define 1
157,163c157
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define BZ_MAX_ALPHA_SIZE #define BZ_N_GROUPS 6
158,163c158
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> define BZ_N_GROUPS 6
158,163c158
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #BZ_N_GROUPS 6
158,163c158
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
---
> #define 6
158,164c158
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define BZ_MAX_CODE_LEN    #define BZ_G_SIZE   50
160,164c160
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> define BZ_G_SIZE   50
160,164c160
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #BZ_G_SIZE   50
160,164c160
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
---
> #define 50
160,165c160
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define BZ_RUNA #define BZ_N_ITERS  4
(92.6 %, 15226 bytes)
158,161c158
< #define BZ_MAX_CODE_LEN    #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
158,161c158
< #define BZ_MAX_CODE_LEN    #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define BZ_MAX_CODE_LEN    #(900000 / BZ_G_SIZE))
(92.6 %, 15152 bytes)
158,167c158
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_CODE_LEN    ;                               \
158,167c158
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_CODE_LEN    + \
158,168c158
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_CODE_LEN    + (Int32 rTPos                                 \
158,168c158
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_CODE_LEN    + (900000 rTPos                                 \
158,168c158
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_CODE_LEN    + (900000 / \
158,170c158
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
---
> #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE#\
158,170c158
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
---
> #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE)\
166,171d165
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
166,171d165
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
166,171d165
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
166,172c166
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
---
> #define BZ_RAND_DECLS                          define BZ_M_IDLE      1
167,172c167
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
---
>    BZ_M_IDLE      1
167,172c167
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
---
>    Int32 1
167,173c167
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
>    Int32 rNToGo#define BZ_M_RUNNING   2
167,173c167
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
>    Int32 rNToGo;                               define BZ_M_RUNNING   2
168,173c168
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
>    BZ_M_RUNNING   2
168,173c168
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
>    Int32 2
168,174c168
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
>    Int32 rTPos                                 #define BZ_M_FLUSHING  3
170,174c170
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> define BZ_M_FLUSHING  3
170,174c170
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #BZ_M_FLUSHING  3
172,174c172
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> 3
172,175c172
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> ##define BZ_M_FINISHING 4
172,175c172
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define define BZ_M_FINISHING 4
172,175c172
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define BZ_RAND_MASK BZ_M_FINISHING 4
172,175c172
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define BZ_RAND_MASK define 4
172,177c172
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define BZ_RAND_MASK define BZ_M_IDLE      #define BZ_S_OUTPUT    1
173,177c173
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> define BZ_S_OUTPUT    1
173,177c173
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #BZ_S_OUTPUT    1
173,177c173
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define 1
173,178c173
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define BZ_M_RUNNING   #define BZ_S_INPUT     2
174,178c174
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> define BZ_S_INPUT     2
174,178c174
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #BZ_S_INPUT     2
174,178c174
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define 2
174,180c174
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define BZ_M_FLUSHING  #define BZ_N_RADIX 2
175,180c175
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
175,180c175
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #BZ_N_RADIX 2
175,180c175
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define 2
175,181c175
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_M_FINISHING #define BZ_N_QSORT 12
177,181c177
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> define BZ_N_QSORT 12
177,181c177
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #BZ_N_QSORT 12
177,181c177
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define 12
177,182c177
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_S_OUTPUT    #define BZ_N_SHELL 18
178,182c178
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> define BZ_N_SHELL 18
178,182c178
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #BZ_N_SHELL 18
178,182c178
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define 18
178,183c178
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_S_INPUT     #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
180,183c180
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
180,183c180
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
180,183c180
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
180,183c180
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_RADIX BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
181,183c181
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> + BZ_N_QSORT + BZ_N_SHELL + 2)
181,183c181
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_QSORT + BZ_N_SHELL + 2)
181,183c181
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define + BZ_N_SHELL + 2)
181,183c181
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT BZ_N_SHELL + 2)
182,183c182
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> + 2)
182,183c182
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #2)
182,183c182
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define )
182,190c182
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
---
> #define BZ_N_SHELL typedef
183,191c183
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> struct {
183,191c183
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #{
183,193c183
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define bz_stream* strm;
183,193c183
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT * strm;
183,193c183
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (strm;
183,193c183
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX ;
183,197c183
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + Int32    mode;
183,197c183
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT mode;
183,197c183
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + ;
183,198c183
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL Int32    state;
183,198c183
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + state;
183,198c183
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2;
190,201c190
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
> UInt32   avail_in_expect;
191,201c191
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
>    avail_in_expect;
191,201c191
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
>    struct ;
193,203d192
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
193,204c193
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       bz_stream*  arr1;
193,204c193
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       bz_stream* arr1;
194,204d193
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
197,204d196
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
197,205c197
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       Int32    *  arr2;
197,205c197
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       Int32    modearr2;
198,205c198
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       ;
198,206c198
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    UInt32*  ftab;
198,206c198
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    state*  ftab;
201,206c201
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       ftab;
201,206c201
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32   ;
201,207c201
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32   avail_in_expectInt32    origPtr;
204,207c204
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       origPtr;
204,207c204
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32;
204,210c204
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       UInt32*  UInt32*  ptr;
204,210c204
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       UInt32*  arr1*  ptr;
205,210c205
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       ptr;
205,210c205
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       UInt32;
205,211c205
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32*  UChar*   block;
205,211c205
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32*  arr2*   block;
206,211c206
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       block;
206,211c206
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32;
206,212c206
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32*  UInt16*  mtfv;
206,212c206
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32*  ftab*  mtfv;
207,212c207
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       mtfv;
207,212c207
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       Int32    ;
207,213c207
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       Int32    origPtrUChar*   zbits;
210,213c210
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       *   zbits;
210,213c210
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32zbits;
210,213c210
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32*  ;
210,216c210
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       UInt32*  ptrInt32    workFactor;
211,216c211
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       workFactor;
211,216c211
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       UChar;
211,219c211
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
---
>       UChar*   UInt32   state_in_ch;
211,219c211
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
---
>       UChar*   blockstate_in_ch;
212,219c212
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
---
>       ;
212,220c212
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
---
>       UInt16Int32    state_in_len;
212,220c212
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
---
>       UInt16*  state_in_len;
213,220d212
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
213,220d212
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
213,221c213
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
---
>       UChar;
213,224c213
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
---
>       UChar*   Int32    nblock;
213,224c213
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
---
>       UChar*   zbitsnblock;
216,224c216
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
---
>       ;
216,225c216
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    Int32    nblockMAX;
216,225c216
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
---
>       Int32    workFactornblockMAX;
(92.7 %, 15016 bytes)
216,222d215
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
217,223c217
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       inUse[256];
217,223c217
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    [256];
217,223c217
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    nblockMAX256];
218,223c218
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       ];
218,223c218
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    ;
218,224c218
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    numZUChar    unseqToSeq[256];
219,224c219
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       unseqToSeq[256];
219,224c219
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    [256];
219,224c219
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    state_out_pos256];
222,224c222
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       ];
222,224c222
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    ;
222,227c222
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
---
>       Int32    nInUseUInt32   bsBuff;
223,227c223
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
---
>       bsBuff;
223,227c223
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
---
>       Bool     ;
223,228c223
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       Bool     inUseInt32    bsLive;
223,228c223
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       Bool     inUse[bsLive;
223,228c223
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       Bool     inUse[256;
223,231c223
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
---
>       Bool     inUse[256]UInt32   blockCRC;
224,231c224
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
---
>       blockCRC;
224,231c224
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
---
>       UChar    ;
224,232c224
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       UChar    unseqToSeqUInt32   combinedCRC;
224,232c224
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       UChar    unseqToSeq[combinedCRC;
224,232c224
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       UChar    unseqToSeq[256;
224,235c224
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       UChar    unseqToSeq[256]Int32    verbosity;
227,235c227
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       verbosity;
227,235c227
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       UInt32   ;
227,236c227
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       UInt32   bsBuffInt32    blockNo;
228,236c228
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       blockNo;
228,236c228
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       Int32    ;
228,237c228
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    bsLiveInt32    blockSize100k;
231,237c231
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       blockSize100k;
231,237c231
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       UInt32   ;
231,240c231
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
---
>       UInt32   blockCRCInt32    nMTF;
232,240c232
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
---
>       nMTF;
232,240c232
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
---
>       UInt32   ;
232,241c232
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       UInt32   combinedCRCInt32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
235,241c235
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       mtfFreq    [BZ_MAX_ALPHA_SIZE];
235,241c235
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    [BZ_MAX_ALPHA_SIZE];
235,241c235
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    verbosityBZ_MAX_ALPHA_SIZE];
236,241c236
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       ];
236,241c236
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       Int32    ;
236,242c236
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   ;
---
>       Int32    blockNoUChar    selector   ;
237,242c237
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   ;
---
>       selector   ;
237,242c237
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   ;
---
>       Int32    ;
237,244c237
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   ;
< 
<    }
---
>       Int32    blockSize100k}
(92.7 %, 14899 bytes)
237,261c237
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    2
239,263c239
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    #define BZ_X_MAGIC_1     10
240,263c240
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    define BZ_X_MAGIC_1     10
240,263c240
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    EStateBZ_X_MAGIC_1     10
248,263c248
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
> 10
250,263d249
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
260,264c260
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define define define BZ_X_CCRC_3      49
---
> define define define BZ_X_CCRC_3      49
260,264c260
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define define define BZ_X_CCRC_3      49
---
> #define define BZ_X_CCRC_3      49
260,264c260
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define define define BZ_X_CCRC_3      49
---
> #define define BZ_X_CCRC_3      49
260,264c260
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define define define BZ_X_CCRC_3      49
---
> #define BZ_X_IDLE        BZ_X_CCRC_3      49
261,264c261
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define define define BZ_X_CCRC_3      49
---
> 49
261,265c261
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
---
> ##define BZ_X_CCRC_4      50
261,265c261
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
---
> #define define BZ_X_CCRC_4      50
261,265c261
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_OUTPUT      BZ_X_CCRC_4      50
263,265c263
< #define BZ_X_MAGIC_1     10
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
---
> 50
263,271c263
< #define BZ_X_MAGIC_1     10
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> ##define MTFA_SIZE 4096
263,271c263
< #define BZ_X_MAGIC_1     10
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define define MTFA_SIZE 4096
263,271c263
< #define BZ_X_MAGIC_1     10
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define BZ_X_MAGIC_1     MTFA_SIZE 4096
264,271c264
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> 4096
264,272c264
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> ##define MTFL_SIZE 16
264,272c264
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define define MTFL_SIZE 16
264,272c264
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define define MTFL_SIZE 16
264,272c264
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define define define 16
264,278c264
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
---
> #define define define BZ_X_CCRC_3      typedef
265,279c265
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> struct {
265,279c265
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #{
265,281c265
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define bz_stream* strm;
265,281c265
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_X_CCRC_4      * strm;
271,281c271
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> strm;
271,281c271
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #;
271,284c271
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define Int32    state;
271,284c271
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define MTFA_SIZE state;
272,284c272
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> ;
272,287c272
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #UChar    state_out_ch;
272,287c272
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #define state_out_ch;
272,287c272
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #define MTFL_SIZE ;
278,288c278
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
> Int32    state_out_len;
279,288c279
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
>    state_out_len;
279,288c279
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
>    struct ;
281,288d280
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
281,289c281
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>       bz_streamblockRandomised;
281,289c281
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>       bz_stream* ;
281,290c281
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
---
>       bz_stream* strmBZ_RAND_DECLS;
284,290c284
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
---
>       ;
284,293c284
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       Int32    UInt32   bsBuff;
284,293c284
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       Int32    statebsBuff;
287,293c287
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>       ;
287,294c287
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       UChar    Int32    bsLive;
287,294c287
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       UChar    state_out_chbsLive;
288,294c288
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       ;
288,297c288
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
---
>       Int32    Int32    blockSize100k;
288,297c288
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
---
>       Int32    state_out_lenblockSize100k;
289,297c289
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
---
>       ;
289,298c289
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
---
>       Bool     Bool     smallDecompress;
289,298c289
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
---
>       Bool     blockRandomisedsmallDecompress;
290,298c290
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
---
>       ;
290,299c290
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       BZ_RAND_DECLSInt32    currBlockNo;
293,299c293
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       currBlockNo;
293,299c293
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       UInt32   ;
293,300c293
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       UInt32   bsBuffInt32    verbosity;
294,300c294
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       verbosity;
294,300c294
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       Int32    ;
294,303c294
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       UInt32   *tt;
---
>       Int32    bsLiveUInt32   *tt;
297,303c297
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       UInt32   *tt;
---
>       *tt;
297,303c297
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       UInt32   *tt;
---
>       Int32    tt;
298,303d297
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       UInt32   *tt;
298,305d297
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       UInt32   *tt;
< 
<       
298,306c298
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
---
>       Bool     *ll16;
298,306c298
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
---
>       Bool     smallDecompressll16;
299,306c299
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
---
>       ;
299,307c299
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    UChar    *ll4;
299,307c299
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    currBlockNo*ll4;
300,307c300
<       Int32    verbosity;
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       ll4;
300,307c300
<       Int32    verbosity;
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    ;
300,310c300
<       Int32    verbosity;
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
---
>       Int32    verbosityUInt32   storedBlockCRC;
303,310c303
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
---
>       storedBlockCRC;
(92.8 %, 14774 bytes)
297,305c297
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       Int32    UInt32   storedCombinedCRC;
297,305c297
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       Int32    ttstoredCombinedCRC;
300,305c300
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       ;
300,306c300
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
---
>       UInt16   UInt32   calculatedBlockCRC;
300,306c300
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
---
>       UInt16   *calculatedBlockCRC;
301,306d300
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
301,306d300
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
301,307c301
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       UChar    calculatedCombinedCRC;
301,307c301
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       UChar    *;
301,308c301
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
---
>       UChar    *ll4UChar    seqToUnseq[256];
304,308c304
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
---
>       seqToUnseq[256];
304,308c304
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
---
>       UInt32   [256];
304,308c304
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
---
>       UInt32   storedBlockCRC256];
305,308c305
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
---
>       ];
305,308c305
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
---
>       UInt32   ;
305,311c305
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       UInt32   storedCombinedCRCUChar    mtfa   [MTFA_SIZE];
306,311c306
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       mtfa   [MTFA_SIZE];
306,311c306
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       UInt32   [MTFA_SIZE];
306,311c306
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       UInt32   calculatedBlockCRCMTFA_SIZE];
307,311c307
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       ];
307,311c307
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
---
>       UInt32   ;
307,312c307
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE]; 
---
>       UInt32   calculatedCombinedCRCInt32    mtfbase[256 / MTFL_SIZE]; 
308,312c308
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE]; 
---
>       mtfbase[256 / MTFL_SIZE]; 
308,312c308
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE]; 
---
>       UChar    [256 / MTFL_SIZE]; 
308,312c308
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE]; 
---
>       UChar    seqToUnseq256 / MTFL_SIZE]; 
308,312c308
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE]; 
---
>       UChar    seqToUnseq[/ MTFL_SIZE]; 
308,312c308
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE]; 
---
>       UChar    seqToUnseq[256MTFL_SIZE]; 
308,312c308
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE]; 
---
>       UChar    seqToUnseq[256]]; 
311,312c311
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE]; 
---
>       ; 
311,313c311
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE]; 
<       ;
---
>       UChar    ;
(92.8 %, 14706 bytes)
311,323c311
<       ; 
<       ;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       #define tPosc_tPos #define bsNEEDW(nz)                           \
312,323c312
<       ;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       define tPosc_tPos #define bsNEEDW(nz)                           \
313,323c313
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       tPosc_tPos #define bsNEEDW(nz)                           \
313,323c313
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       Int32#define bsNEEDW(nz)                           \
313,323c313
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       Int32*   define bsNEEDW(nz)                           \
313,323c313
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       Int32*   save_gBasebsNEEDW(nz)                           \
314,323c314
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       (nz)                           \
314,323c314
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       Int32nz)                           \
314,323c314
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       Int32*   )                           \
314,323c314
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       Int32*   save_gPerm\
316,344c316
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>    static
317,345c317
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
>    void makeMaps_e ( EState* s )
317,345c317
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
>    DStatemakeMaps_e ( EState* s )
323,345c323
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> ( EState* s )
323,345c323
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> #EState* s )
323,345c323
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> #define * s )
323,345c323
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> #define tPosc_tPos s )
323,345c323
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> #define tPosc_tPos #)
323,346c323
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
---
> #define tPosc_tPos #define {
323,347c323
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
---
> #define tPosc_tPos #define bsNEEDWInt32 i;
323,347c323
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
---
> #define tPosc_tPos #define bsNEEDW(i;
323,347c323
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
---
> #define tPosc_tPos #define bsNEEDW(nz;
323,348c323
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> #define tPosc_tPos #define bsNEEDW(nz)                           s->nInUse = 0;
344,348c344
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> ->nInUse = 0;
345,348c345
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> nInUse = 0;
345,348c345
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> void = 0;
345,348c345
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> void makeMaps_e 0;
345,348c345
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> void makeMaps_e ( ;
345,349c345
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
> void makeMaps_e ( EStatefor (i = 0; i < 256; i++)
345,349c345
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
> void makeMaps_e ( EState* (i = 0; i < 256; i++)
345,349c345
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
> void makeMaps_e ( EState* s i = 0; i < 256; i++)
346,349c346
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
> = 0; i < 256; i++)
347,349c347
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    0; i < 256; i++)
347,349c347
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    Int32 ; i < 256; i++)
347,349c347
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    Int32 ii < 256; i++)
348,349c348
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    < 256; i++)
348,349c348
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    s256; i++)
348,349c348
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    s->; i++)
348,349c348
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    s->nInUse i++)
348,349c348
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    s->nInUse = ++)
348,349c348
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
---
>    s->nInUse = 0)
349,350c349
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    if (s->inUse[i]) 
349,350c349
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for (s->inUse[i]) 
349,350c349
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for (s->inUse[i]) 
349,350c349
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for (i ->inUse[i]) 
349,350c349
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for (i = inUse[i]) 
349,350c349
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for (i = 0[i]) 
349,350c349
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for (i = 0; i]) 
349,350c349
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for (i = 0; i ]) 
349,350c349
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
---
>    for (i = 0; i < ) 
349,351c349
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
<          ;
---
>    for (i = 0; i < 256;
349,353c349
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
<          ;
<       
< }
---
>    for (i = 0; i < 256; }
349,357c349
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
---
>    for (i = 0; i < 256; istatic
349,358c349
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    for (i = 0; i < 256; i++void generateMTFValues ( EState* s )
(92.8 %, 14674 bytes)
349,357c349
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    generateMTFValues ( EState* s )
349,357c349
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    if ( EState* s )
349,357c349
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    if (EState* s )
349,357c349
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    if (s* s )
349,357c349
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    if (s->s )
349,357c349
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    if (s->inUse)
349,358c349
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
---
>    if (s->inUse[{
349,359c349
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
>    if (s->inUse[iUChar   yy[256];
349,359c349
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
>    if (s->inUse[i]yy[256];
350,359c350
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
>          [256];
352,359c352
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> 256];
356,359c356
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> ];
357,359c357
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> ;
357,360c357
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void Int32   i, j;
357,360c357
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues i, j;
357,360c357
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues ( , j;
357,360c357
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues ( EStatej;
357,360c357
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues ( EState* ;
357,361c357
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
---
> void generateMTFValues ( EState* s Int32   zPend;
358,361c358
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
---
> zPend;
359,361c359
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
---
>    ;
359,362c359
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    UChar   Int32   wr;
359,362c359
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    UChar   yywr;
359,362c359
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    UChar   yy[;
359,363c359
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    UChar   yy[256Int32   EOB;
359,363c359
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    UChar   yy[256]EOB;
360,363c360
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    ;
360,366c360
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   UInt32* ptr   = s->ptr;
360,366c360
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i* ptr   = s->ptr;
360,366c360
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i, ptr   = s->ptr;
360,366c360
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i, j= s->ptr;
361,366c361
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    s->ptr;
361,366c361
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   ->ptr;
361,366c361
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   zPendptr;
362,366c362
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    ;
362,367c362
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    Int32   UChar* block  = s->block;
362,367c362
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    Int32   wr* block  = s->block;
363,367c363
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    block  = s->block;
363,367c363
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    Int32   = s->block;
363,367c363
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    Int32   EOBs->block;
366,367c366
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    ->block;
366,367c366
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    UInt32block;
366,367c366
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
---
>    UInt32* ;
366,368c366
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UInt32* ptr   UInt16* mtfv  = s->mtfv;
366,368c366
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UInt32* ptr   = * mtfv  = s->mtfv;
366,368c366
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UInt32* ptr   = smtfv  = s->mtfv;
366,368c366
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UInt32* ptr   = s->= s->mtfv;
366,368c366
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UInt32* ptr   = s->ptrs->mtfv;
367,368c367
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    ->mtfv;
367,368c367
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UCharmtfv;
367,368c367
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
---
>    UChar* ;
367,370c367
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
---
>    UChar* block  ;
367,371c367
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
---
>    UChar* block  = EOB = s->nInUse+1;
(92.9 %, 14630 bytes)
367,370c367
<    UChar* block  ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    UChar* block  0; i <= EOB; i++) 0;
368,370c368
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    ; i <= EOB; i++) 0;
368,370c368
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    EOB i <= EOB; i++) 0;
368,370c368
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    EOB = <= EOB; i++) 0;
368,370c368
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    EOB = sEOB; i++) 0;
368,370c368
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    EOB = s->; i++) 0;
368,370c368
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    EOB = s->nInUsei++) 0;
368,370c368
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    EOB = s->nInUse+++) 0;
368,370c368
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) 0;
---
>    EOB = s->nInUse+1) 0;
370c370
<    for (i = 0; i <= EOB; i++) 0;
---
>    0;
370c370
<    for (i = 0; i <= EOB; i++) 0;
---
>    for ;
370,371c370
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (UChar) i;
---
>    for (yy[i] = (UChar) i;
370,371c370
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (UChar) i;
---
>    for (i [i] = (UChar) i;
370,371c370
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (UChar) i;
---
>    for (i = i] = (UChar) i;
370,371c370
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (UChar) i;
---
>    for (i = 0] = (UChar) i;
370,371c370
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (UChar) i;
---
>    for (i = 0; = (UChar) i;
370,371c370
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (UChar) i;
---
>    for (i = 0; i (UChar) i;
370,371c370
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (UChar) i;
---
>    for (i = 0; i <= UChar) i;
370,371c370
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (UChar) i;
---
>    for (i = 0; i <= EOB) i;
370,371c370
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (UChar) i;
---
>    for (i = 0; i <= EOB; i;
370,371c370
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (UChar) i;
---
>    for (i = 0; i <= EOB; i;
370,373c370
<    for (i = 0; i <= EOB; i++) 0;
<    yy[i] = (UChar) i;
< 
<    {
---
>    for (i = 0; i <= EOB; i++{
(92.9 %, 14603 bytes)
370,374c370
<    0;
<    yy[i] = (UChar) i;
< 
<    {
<       UChar ll_i;
---
>    UChar ll_i;
370,374c370
<    0;
<    yy[i] = (UChar) i;
< 
<    {
<       UChar ll_i;
---
>    0ll_i;
371,374c371
<    yy[i] = (UChar) i;
< 
<    {
<       UChar ll_i;
---
>    ;
371,375c371
<    yy[i] = (UChar) i;
< 
<    {
<       UChar ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yyll_i = s->unseqToSeq[block[j]];
371,375c371
<    yy[i] = (UChar) i;
< 
<    {
<       UChar ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[= s->unseqToSeq[block[j]];
371,375c371
<    yy[i] = (UChar) i;
< 
<    {
<       UChar ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[is->unseqToSeq[block[j]];
371,375c371
<    yy[i] = (UChar) i;
< 
<    {
<       UChar ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[i] ->unseqToSeq[block[j]];
371,375c371
<    yy[i] = (UChar) i;
< 
<    {
<       UChar ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[i] = unseqToSeq[block[j]];
371,375c371
<    yy[i] = (UChar) i;
< 
<    {
<       UChar ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[i] = ([block[j]];
371,375c371
<    yy[i] = (UChar) i;
< 
<    {
<       UChar ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[i] = (UCharblock[j]];
371,375c371
<    yy[i] = (UChar) i;
< 
<    {
<       UChar ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[i] = (UChar) [j]];
371,375c371
<    yy[i] = (UChar) i;
< 
<    {
<       UChar ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    yy[i] = (UChar) ij]];
373,375c373
<    {
<       UChar ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>    ]];
374,375c374
<       UChar ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>       ];
374,375c374
<       UChar ll_i;
<       ll_i = s->unseqToSeq[block[j]];
---
>       UChar ;
374,376c374
<       UChar ll_i;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       UChar ll_iAssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
375,376c375
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
375,376c375
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i ll_i < s->nInUse, "generateMTFValues(2a)" );
375,376c375
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = < s->nInUse, "generateMTFValues(2a)" );
375,376c375
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = ss->nInUse, "generateMTFValues(2a)" );
375,376c375
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = s->->nInUse, "generateMTFValues(2a)" );
375,376c375
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = s->unseqToSeqnInUse, "generateMTFValues(2a)" );
375,376c375
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = s->unseqToSeq[, "generateMTFValues(2a)" );
375,376c375
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = s->unseqToSeq[block"generateMTFValues(2a)" );
375,376c375
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = s->unseqToSeq[block[);
375,376c375
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ll_i = s->unseqToSeq[block[j;
375,378c375
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
---
>       ll_i = s->unseqToSeq[block[j]if (0) 
375,378c375
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
---
>       ll_i = s->unseqToSeq[block[j]](0) 
376,378c376
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
---
>       0) 
(92.9 %, 14557 bytes)
375,377c375
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
---
>       ) 
375,378c375
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
<          {
---
>       ( {
375,379c375
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
<          {
<             register UChar  rtmp;
---
>       ( ll_i register UChar  rtmp;
375,379c375
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
<          {
<             register UChar  rtmp;
---
>       ( ll_i < UChar  rtmp;
375,379c375
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
<          {
<             register UChar  rtmp;
---
>       ( ll_i < srtmp;
375,379c375
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
<          {
<             register UChar  rtmp;
---
>       ( ll_i < s->;
375,380c375
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
---
>       ( ll_i < s->nInUseregister UChar* ryy_j;
375,380c375
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
---
>       ( ll_i < s->nInUse, UChar* ryy_j;
375,380c375
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
---
>       ( ll_i < s->nInUse, "generateMTFValues(2a)" * ryy_j;
375,380c375
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
---
>       ( ll_i < s->nInUse, "generateMTFValues(2a)" )ryy_j;
377,380c377
<       if (0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
---
>       ;
377,381c377
<       if (0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
---
>       if register UChar  rll_i;
377,381c377
<       if (0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
---
>       if (UChar  rll_i;
377,381c377
<       if (0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
---
>       if (0rll_i;
378,381c378
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
---
>          ;
379,381d378
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
379,382c379
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  ;
---
>             register ;
379,383c379
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  ;
<             j;
---
>             register UChar  j;
380,383d379
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  ;
<             j;
(92.9 %, 14456 bytes)
379,392c379
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( int errcode )
---
>             register errcode )
380,392c380
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( int errcode )
---
>             )
381,393d380
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( int errcode )
< ;
381,397c381
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
---
>          static
384,398c384
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
---
>    int bz_config_ok ( void )
386,398c386
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
---
>    bz_config_ok ( void )
390,398c390
< ;
< 
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
---
> ( void )
392,398c392
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
---
> void )
392,398c392
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
---
> #)
392,399c392
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
---
> #define ;
392,403c392
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
---
> #define GET_BITSlllstatic
392,404c392
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define GET_BITSlll;                      void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
392,404c392
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define GET_BITSlll;                      ( * default_bzalloc ( void* opaque, Int32 items, Int32 size )
392,404c392
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define GET_BITSlll;                      ( int default_bzalloc ( void* opaque, Int32 items, Int32 size )
392,404c392
< #define GET_BITSlll;                      ( int errcode )
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define GET_BITSlll;                      ( int errcode ( void* opaque, Int32 items, Int32 size )
393,404c393
< ;
< 
< 
< 
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* opaque, Int32 items, Int32 size )
397,404c397
< static
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> * opaque, Int32 items, Int32 size )
398,404c398
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> opaque, Int32 items, Int32 size )
398,404c398
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> int , Int32 items, Int32 size )
398,404c398
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> int bz_config_ok Int32 items, Int32 size )
398,404c398
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> int bz_config_ok ( items, Int32 size )
398,404c398
< int bz_config_ok ( void )
< ;
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> int bz_config_ok ( void , Int32 size )
(93.0 %, 14374 bytes)
393c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> )
393,394c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
---
> void;
393,396c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
---
> void* static
393,397c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void)
---
> void* default_bzalloc void default_bzfree ( void)
393,397c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void)
---
> void* default_bzalloc ( default_bzfree ( void)
393,397c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void)
---
> void* default_bzalloc ( void( void)
393,397c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void)
---
> void* default_bzalloc ( void* void)
393,397c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void)
---
> void* default_bzalloc ( void* opaque)
393,398c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void)
< ;
---
> void* default_bzalloc ( void* opaque, ;
393,402c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void)
< ;
< 
< 
< 
< static
---
> void* default_bzalloc ( void* opaque, Int32 static
393,403c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void)
< ;
< 
< 
< 
< static
< void ;
---
> void* default_bzalloc ( void* opaque, Int32 itemsvoid ;
393,403c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void)
< ;
< 
< 
< 
< static
< void ;
---
> void* default_bzalloc ( void* opaque, Int32 items, ;
393,407c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void)
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void* default_bzalloc ( void* opaque, Int32 items, Int32 int BZ_API(BZ2_bzCompressInit) 
393,407c393
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void)
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void* default_bzalloc ( void* opaque, Int32 items, Int32 size BZ_API(BZ2_bzCompressInit) 
394,407c394
< ;
< 
< static
< void default_bzfree ( void)
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit) 
396,407c396
< static
< void default_bzfree ( void)
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit) 
397,407c397
< void default_bzfree ( void)
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> ) 
397,408c397
< void default_bzfree ( void)
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void ( bz_stream* strm, 
397,408c397
< void default_bzfree ( void)
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree bz_stream* strm, 
397,408c397
< void default_bzfree ( void)
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree ( * strm, 
(93.0 %, 14310 bytes)
393,404c393
< void* default_bzalloc ( void* opaque)
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void* default_bzalloc ( void* opaquestrm, 
394,404c394
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> , 
398,405c398
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int        blockSize100k,
399,405c399
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> blockSize100k,
399,405c399
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> void ,
403,406c403
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int        verbosity,
403,406c403
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int verbosity,
403,406c403
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_API,
403,407c403
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int BZ_API(int        workFactor )
403,407c403
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int BZ_API(BZ2_bzCompressInitworkFactor )
404,407c404
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     )
404,408c404
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
---
>                     ( {
404,409c404
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_streamInt32   n;
404,409c404
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* n;
404,409c404
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* strm;
405,410c405
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      EState* s;
405,410c405
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        * s;
405,410c405
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        blockSize100ks;
406,410c406
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      ;
406,412c406
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
---
>                      int        if (!blockSize100k > workFactor == 0) workFactor = 30;
406,412c406
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
---
>                      int        verbosity(!blockSize100k > workFactor == 0) workFactor = 30;
407,412c407
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
---
>                      !blockSize100k > workFactor == 0) workFactor = 30;
407,412c407
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
---
>                      int        blockSize100k > workFactor == 0) workFactor = 30;
407,412c407
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
---
>                      int        workFactor > workFactor == 0) workFactor = 30;
408,412c408
< {
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
---
> workFactor == 0) workFactor = 30;
409,412c409
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
---
>    == 0) workFactor = 30;
409,412c409
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
---
>    Int32   0) workFactor = 30;
409,412c409
<    Int32   n;
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
---
>    Int32   n) workFactor = 30;
410,412c410
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
---
>    workFactor = 30;
410,412c410
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
---
>    EState= 30;
410,412c410
<    EState* s;
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
---
>    EState* 30;
411,412d410
< 
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
412d411
<    if (!blockSize100k > workFactor == 0) workFactor = 30;
(93.0 %, 14251 bytes)
410,411c410
<    EState* s;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    EState* sdefault_bzalloc;
411c411
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    ;
411,412c411
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if if (strm->bzfree == NULL);
411,412c411
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if ((strm->bzfree == NULL);
411,412c411
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strmstrm->bzfree == NULL);
411,412c411
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strm->->bzfree == NULL);
411,412c411
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strm->bzalloc bzfree == NULL);
411,412c411
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strm->bzalloc == == NULL);
411,412c411
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strm->bzalloc == NULLNULL);
411,412c411
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strm->bzalloc == NULL) );
411,412c411
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (strm->bzalloc == NULL) strm;
(93.1 %, 14193 bytes)
411,414c411
<    ;
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
---
>    = NULL;
412,414c412
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
---
>    NULL;
412,414c412
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
---
>    if ;
412,415c412
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
---
>    if (s->arr2 = NULL;
412,415c412
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
---
>    if (strm->arr2 = NULL;
412,415c412
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
---
>    if (strm->arr2 = NULL;
412,415c412
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
---
>    if (strm->bzfree = NULL;
412,415c412
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
---
>    if (strm->bzfree == NULL;
412,415c412
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
---
>    if (strm->bzfree == NULL;
412,416c412
<    if (strm->bzfree == NULL);
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
---
>    if (strm->bzfree == NULL)sBZALLOC( n                  * sizeof(UInt32) );
(93.1 %, 14152 bytes)
412,414c412
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
---
>    (UInt32) );
412,414c412
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
---
>    NULLUInt32) );
413,414c413
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
---
>    ) );
413,414c413
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
---
>    s);
413,414c413
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
---
>    s->;
413,415c413
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
413,415c413
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = ->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
413,415c413
<    s->arr2 = NULL;
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = NULLarr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
414,415c414
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
414,415c414
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
414,415c414
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( ( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
414,415c414
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
414,415c414
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
414,415c414
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof+BZ_N_OVERSHOOT) * sizeof(UInt32) );
414,415c414
<    sBZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOC( n                  * sizeof(BZ_N_OVERSHOOT) * sizeof(UInt32) );
(93.1 %, 14098 bytes)
414,415c414
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOCs->ftab = BZALLOC( 65537              * sizeof(UInt32) );
414,415c414
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( ->ftab = BZALLOC( 65537              * sizeof(UInt32) );
414,415c414
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (ftab = BZALLOC( 65537              * sizeof(UInt32) );
414,415c414
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n= BZALLOC( 65537              * sizeof(UInt32) );
414,415c414
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZALLOC( 65537              * sizeof(UInt32) );
414,415c414
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT( 65537              * sizeof(UInt32) );
414,415c414
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) 65537              * sizeof(UInt32) );
414,415c414
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * * sizeof(UInt32) );
414,415c414
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeofsizeof(UInt32) );
414,415c414
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof((UInt32) );
414,415c414
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32UInt32) );
414,415c414
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ) );
414,415c414
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ));
415c415
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    ;
415,417c415
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sif (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
415,417c415
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->(s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
415,417c415
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
415,417c415
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
415,417c415
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOCarr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
415,417c415
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( == NULL || s->arr2 == NULL || s->ftab == NULL) 
415,417c415
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              NULL || s->arr2 == NULL || s->ftab == NULL) 
415,417c415
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * || s->arr2 == NULL || s->ftab == NULL) 
415,417c415
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * sizeofs->arr2 == NULL || s->ftab == NULL) 
415,417c415
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * sizeof(->arr2 == NULL || s->ftab == NULL) 
415,417c415
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * sizeof(UInt32arr2 == NULL || s->ftab == NULL) 
415,417c415
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * sizeof(UInt32) == NULL || s->ftab == NULL) 
(93.1 %, 14042 bytes)
415,417c415
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    NULL || s->ftab == NULL) 
417c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    || s->ftab == NULL) 
417c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s->ftab == NULL) 
417c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (->ftab == NULL) 
417c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (sftab == NULL) 
417c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->== NULL) 
417c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->arr1 NULL) 
417c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->arr1 == ) 
417,419c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL s->blockNo           = 0;
417,419c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || ->blockNo           = 0;
417,419c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || sblockNo           = 0;
417,419c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || s->= 0;
417,419c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || s->arr2 0;
417,419c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || s->arr2 == ;
417,420c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL s->state             = BZ_S_INPUT;
417,420c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || ->state             = BZ_S_INPUT;
417,420c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || sstate             = BZ_S_INPUT;
417,420c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->= BZ_S_INPUT;
417,420c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab BZ_S_INPUT;
417,420c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == ;
417,421c417
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULLs->mode              = BZ_M_RUNNING;
419,421c419
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    ->mode              = BZ_M_RUNNING;
419,421c419
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    smode              = BZ_M_RUNNING;
419,421c419
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    s->= BZ_M_RUNNING;
419,421c419
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    s->blockNo           BZ_M_RUNNING;
419,421c419
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    s->blockNo           = ;
419,422c419
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    s->blockNo           = 0s->combinedCRC       = s->block             = (UChar*)s->arr2;
420,422c420
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    ->combinedCRC       = s->block             = (UChar*)s->arr2;
420,422c420
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    scombinedCRC       = s->block             = (UChar*)s->arr2;
420,422c420
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    s->= s->block             = (UChar*)s->arr2;
420,422c420
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    s->state             s->block             = (UChar*)s->arr2;
420,422c420
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    s->state             = ->block             = (UChar*)s->arr2;
420,422c420
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    s->state             = BZ_S_INPUTblock             = (UChar*)s->arr2;
421,422c421
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    = (UChar*)s->arr2;
421,422c421
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    s(UChar*)s->arr2;
421,422c421
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    s->UChar*)s->arr2;
421,422c421
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    s->mode              *)s->arr2;
421,422c421
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    s->mode              = )s->arr2;
421,422c421
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    s->mode              = BZ_M_RUNNINGs->arr2;
422c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    ->arr2;
422c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    sarr2;
422c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
---
>    s->;
422,423c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       s->mtfv              = (UInt16*)s->arr1;
422,423c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = ->mtfv              = (UInt16*)s->arr1;
422,423c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = smtfv              = (UInt16*)s->arr1;
422,423c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->= (UInt16*)s->arr1;
422,423c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             (UInt16*)s->arr1;
422,423c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             = UInt16*)s->arr1;
422,423c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             = (*)s->arr1;
422,423c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             = (UChar)s->arr1;
422,423c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             = (UChar*s->arr1;
422,423c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             = (UChar*)->arr1;
422,423c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             = (UChar*)sarr1;
422,423c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->combinedCRC       = s->block             = (UChar*)s->;
422,424c422
<    s->combinedCRC       = s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    s->combinedCRC       = s->block             = (UChar*)s->arr2s->zbits             = NULL;
423,424c423
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    ->zbits             = NULL;
423,424c423
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    szbits             = NULL;
423,424c423
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    s->= NULL;
423,424c423
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    s->mtfv              NULL;
423,424c423
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    s->mtfv              = ;
423,425c423
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (s->ptr               = (UInt32*)s->arr1;
423,425c423
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (UInt16->ptr               = (UInt32*)s->arr1;
(93.2 %, 13997 bytes)
422,424c422
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->combinedCRC       = s->block             = (UCharptr               = (UInt32*)s->arr1;
422,424c422
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->combinedCRC       = s->block             = (UChar)= (UInt32*)s->arr1;
422,424c422
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->combinedCRC       = s->block             = (UChar)s(UInt32*)s->arr1;
422,424c422
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->combinedCRC       = s->block             = (UChar)s->UInt32*)s->arr1;
422,424c422
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->combinedCRC       = s->block             = (UChar)s->arr1*)s->arr1;
423,424c423
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    )s->arr1;
423,424c423
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    ss->arr1;
423,424c423
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->->arr1;
423,424c423
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->zbits             arr1;
423,424c423
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->zbits             = ;
423,426c423
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->zbits             = NULLstrm->state          = s;
424,426c424
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    ->state          = s;
424,426c424
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    sstate          = s;
424,426c424
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->= s;
424,426c424
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->ptr               s;
424,426c424
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->ptr               = ;
424,427c424
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (strm->total_in_lo32  = 0;
424,427c424
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32->total_in_lo32  = 0;
424,427c424
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*total_in_lo32  = 0;
424,427c424
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*)= 0;
424,427c424
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*)s0;
424,427c424
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*)s->;
424,428c424
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
---
>    s->ptr               = (UInt32*)s->arr1strm->total_in_hi32  ;
426,428c426
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
---
>    ->total_in_hi32  ;
426,428c426
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
---
>    strmtotal_in_hi32  ;
426,428c426
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
---
>    strm->;
426,429c426
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
<    ;
---
>    strm->state          ;
426,430c426
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
<    ;
<    return BZ_OK;
---
>    strm->state          = return BZ_OK;
426,430c426
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
<    ;
<    return BZ_OK;
---
>    strm->state          = sBZ_OK;
427,428d426
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  ;
430d427
<    return BZ_OK;
(93.2 %, 13934 bytes)
426,440c426
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    strm->state          \
427,453c427
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>    static
427,454c427
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>    return Bool handle_compress ( bz_stream* strm )
427,454c427
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
>    return BZ_OKhandle_compress ( bz_stream* strm )
428,454c428
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> ( bz_stream* strm )
440,454c440
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> bz_stream* strm )
440,454c440
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> #* strm )
440,454c440
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> #define strm )
440,454c440
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
---
> #define ADD_CHAR_TO_BLOCK)
440,455c440
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
---
> #define ADD_CHAR_TO_BLOCK(;
440,459c440
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zsint BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
440,459c440
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
440,459c440
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,zchh0(BZ2_bzCompress) ( bz_stream *strm, int action )
440,459c440
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,zchh0)               BZ2_bzCompress) ( bz_stream *strm, int action )
453,459c453
< static
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> ) ( bz_stream *strm, int action )
454,459c454
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> ( bz_stream *strm, int action )
454,459c454
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> Bool bz_stream *strm, int action )
454,459c454
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> Bool handle_compress *strm, int action )
454,459c454
< Bool handle_compress ( bz_stream* strm )
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> Bool handle_compress ( strm, int action )
(93.2 %, 13849 bytes)
440,445c440
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCKaction )
441,445c441
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> )
445d444
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
445,448c445
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int EState* s;
445,448c445
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API* s;
445,448c445
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(s;
445,448c445
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompress;
445,449c445
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) if (s == NULL) return BZ_PARAM_ERROR;
445,449c445
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( (s == NULL) return BZ_PARAM_ERROR;
445,449c445
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream s == NULL) return BZ_PARAM_ERROR;
445,449c445
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *== NULL) return BZ_PARAM_ERROR;
445,449c445
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strmNULL) return BZ_PARAM_ERROR;
445,449c445
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, ) return BZ_PARAM_ERROR;
445,449c445
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int return BZ_PARAM_ERROR;
445,449c445
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action BZ_PARAM_ERROR;
446,449c446
< {
<    
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
> ;
448,449d447
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
448,450c448
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
---
>    EState(s) 
448,450c448
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
---
>    EState* s) 
448,450c448
<    EState* s;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
---
>    EState* s) 
449,450d448
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
449,451c449
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
---
>    if BZ_OK; 
449,451c449
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
---
>    if (; 
449,452c449
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
< ;
---
>    if (s ;
449,453c449
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == if (s == NULL) return BZ_PARAM_ERROR;
449,453c449
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == NULL(s == NULL) return BZ_PARAM_ERROR;
449,453c449
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == NULL) s == NULL) return BZ_PARAM_ERROR;
449,453c449
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == NULL) return == NULL) return BZ_PARAM_ERROR;
449,453c449
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == NULL) return BZ_PARAM_ERRORNULL) return BZ_PARAM_ERROR;
450,453c450
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    ) return BZ_PARAM_ERROR;
450,453c450
<    if (s) 
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if return BZ_PARAM_ERROR;
(93.3 %, 13797 bytes)
449,451d448
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
449,452c449
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ftab);
---
>    return (NULL) BZFREE(s->ftab);
449,452c449
<    return BZ_OK; 
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ftab);
---
>    return BZ_OKNULL) BZFREE(s->ftab);
450,452c450
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ftab);
---
> ) BZFREE(s->ftab);
451,452c451
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ftab);
---
>    BZFREE(s->ftab);
(93.3 %, 13736 bytes)
449,459c449
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    int BZ_API(BZ2_bzDecompressInit) 
449,459c449
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    if BZ_API(BZ2_bzDecompressInit) 
449,459c449
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    if ((BZ2_bzDecompressInit) 
449,459c449
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    if (NULLBZ2_bzDecompressInit) 
449,459c449
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    if (NULL) ) 
449,460c449
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    if (NULL) BZFREE( bz_stream* strm, 
449,460c449
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    if (NULL) BZFREE(bz_stream* strm, 
449,460c449
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    if (NULL) BZFREE(s* strm, 
449,460c449
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    if (NULL) BZFREE(s->strm, 
449,460c449
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    if (NULL) BZFREE(s->ftab, 
449,461c449
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>    if (NULL) BZFREE(s->ftab)int        verbosity,
450,461c450
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>    verbosity,
451,461c451
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> ,
459,462c459
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int        small )
459,462c459
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int small )
459,462c459
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API)
459,463c459
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
---
> int BZ_API({
459,464c459
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
> int BZ_API(BZ2_bzDecompressInitDState* s;
460,464c460
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      * s;
460,464c460
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( s;
460,464c460
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_stream;
460,466c460
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                      ( bz_stream* if (verbosity == NULL) strm->bzalloc = default_bzalloc;
460,466c460
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                      ( bz_stream* strm(verbosity == NULL) strm->bzalloc = default_bzalloc;
461,466c461
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                        verbosity == NULL) strm->bzalloc = default_bzalloc;
461,466c461
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                        int        == NULL) strm->bzalloc = default_bzalloc;
461,466c461
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                        int        verbosityNULL) strm->bzalloc = default_bzalloc;
462,466c462
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                        ) strm->bzalloc = default_bzalloc;
462,466c462
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                        int        strm->bzalloc = default_bzalloc;
462,466c462
<                        int        small )
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>                        int        small ->bzalloc = default_bzalloc;
463,466c463
< {
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
> bzalloc = default_bzalloc;
464,466c464
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>    = default_bzalloc;
464,466c464
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>    DStatedefault_bzalloc;
464,466c464
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
---
>    DState* ;
464,467c464
<    DState* s;
< 
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    DState* sif (strm->bzfree == NULL);
466,467c466
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    (strm->bzfree == NULL);
466,467c466
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if strm->bzfree == NULL);
466,467c466
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (->bzfree == NULL);
466,467c466
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (verbosity bzfree == NULL);
466,467c466
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (verbosity == == NULL);
466,467c466
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (verbosity == NULLNULL);
466,467c466
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (verbosity == NULL) );
466,467c466
<    if (verbosity == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL);
---
>    if (verbosity == NULL) strm;
(93.3 %, 13674 bytes)
466,467c466
<    (strm->bzfree == NULL);
<    strm->state              = s;
---
>    ;
466,468c466
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
---
>    (s->state                 = BZ_X_MAGIC_1;
466,468c466
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
---
>    (strm->state                 = BZ_X_MAGIC_1;
466,468c466
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
---
>    (strm->state                 = BZ_X_MAGIC_1;
466,468c466
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
---
>    (strm->bzfree = BZ_X_MAGIC_1;
466,468c466
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
---
>    (strm->bzfree == BZ_X_MAGIC_1;
466,468c466
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
---
>    (strm->bzfree == NULL;
466,469c466
<    (strm->bzfree == NULL);
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    (strm->bzfree == NULL)s->bsLive                = 0;
467,469c467
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    ->bsLive                = 0;
467,469c467
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strmbsLive                = 0;
467,469c467
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strm->= 0;
467,469c467
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strm->state              0;
(93.4 %, 13619 bytes)
466,468d465
<    ;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
467,469c467
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    ->bsBuff                = 0;
467,469c467
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    sbsBuff                = 0;
467,469c467
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    s->= 0;
467,469c467
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    s->state                 0;
467,469c467
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    s->state                 = ;
467,470c467
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->state                 = BZ_X_MAGIC_1s->calculatedCombinedCRC = 0;
468,470c468
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    ->calculatedCombinedCRC = 0;
468,470c468
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    scalculatedCombinedCRC = 0;
468,470c468
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->= 0;
468,470c468
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->bsLive                0;
468,470c468
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->bsLive                = ;
468,471c468
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsLive                = 0strm->total_in_lo32      = 0;
(93.4 %, 13537 bytes)
466,468c466
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    ->total_in_lo32      = 0;
466,468c466
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    stotal_in_lo32      = 0;
466,468c466
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->= 0;
466,468c466
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsBuff                0;
466,468c466
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsBuff                = ;
466,469c466
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->bsBuff                = 0strm->total_in_hi32      = 0;
467,469c467
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    ->total_in_hi32      = 0;
467,469c467
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    stotal_in_hi32      = 0;
467,469c467
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->= 0;
467,469c467
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->calculatedCombinedCRC 0;
467,469c467
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->calculatedCombinedCRC = ;
467,470c467
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
---
>    s->calculatedCombinedCRC = 0strm->total_out_lo32     = small;
468,470c468
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
---
>    ->total_out_lo32     = small;
468,470c468
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
---
>    strmtotal_out_lo32     = small;
468,470c468
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
---
>    strm->= small;
468,470c468
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
---
>    strm->total_in_lo32      small;
468,470c468
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
---
>    strm->total_in_lo32      = ;
468,471c468
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
---
>    strm->total_in_lo32      = 0s->ll4                   = NULL;
469,471c469
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
---
>    ->ll4                   = NULL;
469,471c469
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
---
>    strmll4                   = NULL;
469,471c469
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
---
>    strm->= NULL;
469,471c469
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
---
>    strm->total_in_hi32      NULL;
469,471c469
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
---
>    strm->total_in_hi32      = ;
469,472c469
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    strm->total_in_hi32      = 0s->ll16                  = NULL;
470,472c470
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    ->ll16                  = NULL;
470,472c470
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    strmll16                  = NULL;
470,472c470
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    strm->= NULL;
470,472c470
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    strm->total_out_lo32     NULL;
470,472c470
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    strm->total_out_lo32     = ;
470,473c470
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
---
>    strm->total_out_lo32     = smalls->tt                    = BZ_OK;
471,473c471
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
---
>    ->tt                    = BZ_OK;
471,473c471
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
---
>    stt                    = BZ_OK;
471,473c471
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
---
>    s->= BZ_OK;
471,473c471
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
---
>    s->ll4                   BZ_OK;
471,473c471
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
---
>    s->ll4                   = ;
471,474c471
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
---
>    s->ll4                   = NULL}
472,478c472
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
---
>    static
472,479c472
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void ;
---
>    svoid ;
472,479c472
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void ;
---
>    s->;
472,483c472
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->ll16                  int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
472,483c472
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->ll16                  = BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
472,483c472
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->ll16                  = NULL(BZ2_bzDecompress) ( bz_stream *strm )
473,483c473
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    BZ2_bzDecompress) ( bz_stream *strm )
473,483c473
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s) ( bz_stream *strm )
473,483c473
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->( bz_stream *strm )
473,483c473
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->tt                    bz_stream *strm )
473,483c473
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->tt                    = *strm )
473,483c473
<    s->tt                    = BZ_OK;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->tt                    = BZ_OKstrm )
474,483c474
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> )
478,483d477
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
479,485c479
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> DState* s;
479,485c479
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> void * s;
483,485c483
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> s;
483,485c483
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> int ;
483,486c483
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) (True) 
---
> int BZ_APIif (s == NULL) (True) 
483,486c483
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) (True) 
---
> int BZ_API((s == NULL) (True) 
483,486c483
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) (True) 
---
> int BZ_API(BZ2_bzDecompresss == NULL) (True) 
483,486c483
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) (True) 
---
> int BZ_API(BZ2_bzDecompress) == NULL) (True) 
483,486c483
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) (True) 
---
> int BZ_API(BZ2_bzDecompress) ( NULL) (True) 
483,486c483
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) (True) 
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream ) (True) 
483,486c483
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) (True) 
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream *(True) 
483,486c483
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) (True) 
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream *strm True) 
484,486c484
< {
<    DState* s;
<    if (s == NULL) (True) 
---
> ) 
485,487d484
<    DState* s;
<    if (s == NULL) (True) 
< 
485,488c485
<    DState* s;
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
---
>    DState( 0, 6001 );
485,488c485
<    DState* s;
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
---
>    DState* 0, 6001 );
485,488c485
<    DState* s;
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
---
>    DState* s, 6001 );
486,488c486
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
---
>    6001 );
486,488c486
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
---
>    if );
486,488c486
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
---
>    if (;
486,490c486
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
---
>    if (s return 0;  
486,490c486
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
---
>    if (s == 0;  
486,490c486
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
---
>    if (s == NULL;  
486,491c486
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< ;
---
>    if (s == NULL) ;
486,492c486
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == NULL) (if (s == NULL) return BZ_PARAM_ERROR;
486,492c486
<    if (s == NULL) (True) 
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (s == NULL) (True(s == NULL) return BZ_PARAM_ERROR;
488,492c488
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    s == NULL) return BZ_PARAM_ERROR;
488,492c488
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    AssertH == NULL) return BZ_PARAM_ERROR;
488,492c488
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    AssertH ( NULL) return BZ_PARAM_ERROR;
488,492c488
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    AssertH ( 0) return BZ_PARAM_ERROR;
488,492c488
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    AssertH ( 0, return BZ_PARAM_ERROR;
488,492c488
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    AssertH ( 0, 6001 BZ_PARAM_ERROR;
489,492d488
< 
<    return 0;  
< ;
<    if (s == NULL) return BZ_PARAM_ERROR;
(93.4 %, 13488 bytes)
486,488c486
<    if (s == NULL) ;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ll4);
---
>    if (s == NULL) ) BZFREE(s->ll4);
487,488c487
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ll4);
---
>    BZFREE(s->ll4);
487,488c487
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ll4);
---
>    if (s->ll4);
487,488c487
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (NULL) BZFREE(s->ll4);
---
>    if (s->ll4);
(93.4 %, 13437 bytes)
487,497c487
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    eee)                    \
487,497c487
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE)                    \
487,497c487
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(\
487,500c487
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
---
>    BZFREE(stypedef 
487,501c487
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
>    BZFREE(s->struct {
487,501c487
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
>    BZFREE(s->ll4{
487,502c487
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    BZFREE(s->ll4)FILE*     handle;
489,502c489
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    *     handle;
490,502c490
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> handle;
497,502c497
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> ;
497,503c497
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #Char      buf[BZ_MAX_UNUSED];
497,503c497
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define buf[BZ_MAX_UNUSED];
497,503c497
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR[BZ_MAX_UNUSED];
497,503c497
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(BZ_MAX_UNUSED];
497,503c497
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eee];
497,503c497
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eee)                    ;
500,504c500
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> Int32     bufN;
501,504c501
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    bufN;
501,504c501
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    struct ;
502,504d501
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
502,505c502
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILEwriting;
502,505c502
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILE*     ;
502,506c502
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       FILE*     handlebz_stream strm;
503,506c503
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       strm;
503,506c503
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      ;
503,507c503
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      bufInt32     lastErr;
503,507c503
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf[lastErr;
503,507c503
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf[BZ_MAX_UNUSED;
503,508c503
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Char      buf[BZ_MAX_UNUSED]Bool      initialisedOk;
504,508c504
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       initialisedOk;
504,508c504
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     ;
504,509c504
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       Int32     bufN}
505,510c505
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       bzFile;
505,510c505
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      ;
505,518c505
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      writingBZFILE* BZ_API(BZ2_bzWriteOpen) 
506,518c506
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       * BZ_API(BZ2_bzWriteOpen) 
506,518c506
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream BZ_API(BZ2_bzWriteOpen) 
506,518c506
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strm(BZ2_bzWriteOpen) 
507,518c507
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZ2_bzWriteOpen) 
507,518c507
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     ) 
507,519c507
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Int32     lastErr( int*  bzerror,      
508,519c508
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       int*  bzerror,      
508,519c508
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      *  bzerror,      
508,519c508
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      initialisedOkbzerror,      
509,519c509
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    ,      
510,520c510
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    FILE* f, 
510,520c510
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFile* f, 
518,520c518
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> f, 
518,520c518
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE, 
518,521c518
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* int   blockSize100k, 
518,521c518
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_APIblockSize100k, 
518,521c518
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(, 
518,522c518
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzWriteOpenint   verbosity,
519,522c519
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     verbosity,
519,522c519
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( ,
519,523c519
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( intint   workFactor )
519,523c519
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  workFactor )
519,523c519
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerror)
520,524c520
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       {
520,525c520
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILEInt32   ret;
520,525c520
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* ret;
520,525c520
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* f;
521,526c521
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       bzFile* bzf = NULL;
521,526c521
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   * bzf = NULL;
521,526c521
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   blockSize100kbzf = NULL;
522,526c522
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       = NULL;
522,526c522
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   NULL;
522,526c522
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   verbosity;
523,528c523
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       BZ_SETERR(BZ_OK);
523,528c523
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   (BZ_OK);
523,528c523
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   workFactor BZ_OK);
524,528c524
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
> );
525,528c525
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    ;
525,530c525
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    Int32   if (f == NULL ||
525,530c525
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    Int32   ret(f == NULL ||
526,530c526
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    f == NULL ||
526,530c526
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile== NULL ||
526,530c526
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* NULL ||
526,530c526
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf ||
526,531c526
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    bzFile* bzf = (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
526,531c526
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    bzFile* bzf = NULLblockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
528,531c528
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    < 1 || blockSize100k > 90 || verbosity > 4))
528,531c528
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR1 || blockSize100k > 90 || verbosity > 4))
528,531c528
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(|| blockSize100k > 90 || verbosity > 4))
528,531c528
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(BZ_OKblockSize100k > 90 || verbosity > 4))
528,531c528
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(BZ_OK)> 90 || verbosity > 4))
530,531c530
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    90 || verbosity > 4))
530,531c530
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if || verbosity > 4))
530,531c530
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (verbosity > 4))
530,531c530
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f > 4))
530,531c530
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f == 4))
530,531c530
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f == NULL ))
531c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        )
531,532c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
---
>        (;
531,534c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k if (ferror(f)== NULL)
531,534c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < (ferror(f)== NULL)
531,534c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 ferror(f)== NULL)
531,534c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 || (f)== NULL)
531,534c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 || blockSize100k f)== NULL)
531,534c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 || blockSize100k > )== NULL)
531,534c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 || blockSize100k > 90 == NULL)
531,534c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 || blockSize100k > 90 || NULL)
531,534c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity )
531,535c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
<       ;
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > ;
531,537c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 40;
531,537c531
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       ;
< 
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4);
532,538c532
<       ;
< 
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
---
>       bzf->handle        = f;
534,538c534
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
---
>    ->handle        = f;
534,538c534
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
---
>    if handle        = f;
534,538c534
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
---
>    if (= f;
534,538c534
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
---
>    if (ferrorf;
534,538c534
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
---
>    if (ferror(;
534,539c534
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    if (ferror(fbzf->writing       = True;
534,539c534
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    if (ferror(f)->writing       = True;
534,539c534
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    if (ferror(f)== writing       = True;
534,539c534
<    if (ferror(f)== NULL)
<       ;
< 
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    if (ferror(f)== NULL= True;
535,539c535
<       ;
< 
<    0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>       True;
(93.5 %, 13391 bytes)
532,534c532
<       bzf->handle        = f;
<    bzf->writing       = True;
<    workFactor = 30;
---
>       = 30;
532,534c532
<       bzf->handle        = f;
<    bzf->writing       = True;
<    workFactor = 30;
---
>       bzf30;
532,534c532
<       bzf->handle        = f;
<    bzf->writing       = True;
<    workFactor = 30;
---
>       bzf->;
532,535c532
<       bzf->handle        = f;
<    bzf->writing       = True;
<    workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>       bzf->handle        ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
532,535c532
<       bzf->handle        = f;
<    bzf->writing       = True;
<    workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>       bzf->handle        = = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
532,535c532
<       bzf->handle        = f;
<    bzf->writing       = True;
<    workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
533,535c533
<    bzf->writing       = True;
<    workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    ( &(bzf->strm), blockSize100k, 
(93.5 %, 13330 bytes)
532,533c532
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        = fBZ2_bzCompressInit );
532,533c532
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        = fBZ2_bzCompressInit ( ;
532,534c532
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &bzf->initialisedOk = True;
532,534c532
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(->initialisedOk = True;
532,534c532
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzfinitialisedOk = True;
532,534c532
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->= True;
532,534c532
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strmTrue;
532,534c532
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm);
532,535c532
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), return bzf;   
532,535c532
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100kbzf;   
533,535c533
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
---
>                               ;   
533,536c533
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
>                               verbosity}
533,541c533
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                               verbosity, void BZ_API(BZ2_bzWrite)
533,541c533
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                               verbosity, workFactor BZ_API(BZ2_bzWrite)
533,541c533
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>                               verbosity, workFactor )(BZ2_bzWrite)
534,541c534
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    BZ2_bzWrite)
534,541c534
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzf)
534,542c534
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->( int*    bzerror, 
534,542c534
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk int*    bzerror, 
534,542c534
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk = *    bzerror, 
534,542c534
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk = Truebzerror, 
535,542c535
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    , 
535,543c535
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    return BZFILE* b, 
535,543c535
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    return bzf* b, 
536,543c536
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> b, 
541,543c541
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> , 
541,544c541
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void void*   buf, 
541,544c541
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API*   buf, 
541,544c541
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(buf, 
541,544c541
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(BZ2_bzWrite, 
542,545c542
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              int     len )
542,545c542
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( len )
542,545c542
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int)
542,546c542
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
---
>              ( int*    {
542,547c542
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>              ( int*    bzerrorInt32   ret;
543,547c543
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                ret;
543,547c543
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                BZFILE;
543,548c543
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* bzFile* bzf = (bzFile*)b;
543,548c543
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* b* bzf = (bzFile*)b;
544,548c544
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                bzf = (bzFile*)b;
544,548c544
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void= (bzFile*)b;
544,548c544
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   (bzFile*)b;
544,548c544
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   bufbzFile*)b;
545,548c545
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                *)b;
545,548c545
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     )b;
545,548c545
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     len b;
546,548c546
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
> ;
547,549d546
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
547,550c547
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    Int32   (ferror(bzf->handle))
547,550c547
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    Int32   retferror(bzf->handle))
548,550c548
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    (bzf->handle))
548,550c548
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    bzFilebzf->handle))
548,550c548
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    bzFile* ->handle))
548,550c548
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    bzFile* bzf handle))
548,550c548
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    bzFile* bzf = ))
548,550c548
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
---
>    bzFile* bzf = ()
548,551c548
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
<       ;
---
>    bzFile* bzf = (bzFile;
548,552c548
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    bzFile* bzf = (bzFile*bzf->strm.next_in  = buf;
548,552c548
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    bzFile* bzf = (bzFile*)->strm.next_in  = buf;
548,552c548
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    bzFile* bzf = (bzFile*)bstrm.next_in  = buf;
550,552c550
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    .next_in  = buf;
550,552c550
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    BZ_SETERRnext_in  = buf;
550,552c550
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    BZ_SETERR(= buf;
550,552c550
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    BZ_SETERR(ferrorbuf;
550,552c550
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
---
>    BZ_SETERR(ferror(;
550,554c550
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
---
>    BZ_SETERR(ferror(bzfwhile (True) 
550,554c550
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
---
>    BZ_SETERR(ferror(bzf->(True) 
550,554c550
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
---
>    BZ_SETERR(ferror(bzf->handleTrue) 
550,554c550
<    BZ_SETERR(ferror(bzf->handle))
<       ;
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
---
>    BZ_SETERR(ferror(bzf->handle)) 
551,554d550
<       ;
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
552,555c552
<    bzf->strm.next_in  = buf;
< 
<    while (True) 
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>    ->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
(93.5 %, 13276 bytes)
550,551c550
<    BZ_SETERR(ferror(bzf->handle)) 
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
551c551
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>       .avail_in == 0)
551c551
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>       bzfavail_in == 0)
551c551
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>       bzf->== 0)
551c551
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>       bzf->strm0)
551c551
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
---
>       bzf->strm.)
551,552c551
<       bzf->strm.avail_out = BZ_MAX_UNUSEDif (ret != bzf->strm.avail_in == 0)
<          ;
---
>       bzf->strm.avail_out ;
(93.6 %, 13216 bytes)
550,558c550
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(ferror(bzf->handle)( int*          bzerror, 
550,558c550
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(ferror(bzf->handle)strmint*          bzerror, 
550,558c550
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(ferror(bzf->handle)strm.*          bzerror, 
550,558c550
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(ferror(bzf->handle)strm.avail_in bzerror, 
550,558c550
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(ferror(bzf->handle)strm.avail_in == , 
550,559c550
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0BZFILE*       b, 
551,559c551
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>          *       b, 
553,559c553
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
557,559c557
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> , 
557,560c557
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void int           abandon,
557,560c557
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIabandon,
557,560c557
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(,
557,561c557
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void BZ_API(BZ2_bzWriteCloseunsigned int* nbytes_in,
558,561c558
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   int* nbytes_in,
558,561c558
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( * nbytes_in,
558,561c558
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( intnbytes_in,
558,561c558
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          ,
558,562c558
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( int*          bzerrorunsigned int* nbytes_out )
559,562c559
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
559,562c559
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE* nbytes_out )
559,562c559
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       nbytes_out )
559,562c559
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       b)
560,563c560
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     {
560,564c560
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     int           BZ2_bzWriteClose64 ;
560,564c560
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     int           abandon;
561,565c561
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
---
>                     }
561,568c561
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned void BZ_API(BZ2_bzWriteClose64)
561,568c561
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned intBZ_API(BZ2_bzWriteClose64)
561,568c561
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* (BZ2_bzWriteClose64)
561,568c561
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* nbytes_inBZ2_bzWriteClose64)
562,568c562
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     )
562,569c562
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned ( int*          bzerror, 
562,569c562
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned intint*          bzerror, 
562,569c562
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* *          bzerror, 
562,569c562
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_out bzerror, 
563,569c563
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> , 
564,570c564
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    BZFILE*       b, 
564,570c564
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    BZ2_bzWriteClose64 *       b, 
565,570c565
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
568,570c568
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> , 
568,571c568
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void int           abandon,
568,571c568
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIabandon,
568,571c568
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(,
568,572c568
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64unsigned int* nbytes_in_lo32,
569,572c569
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   int* nbytes_in_lo32,
569,572c569
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( * nbytes_in_lo32,
569,572c569
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( intnbytes_in_lo32,
569,572c569
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          ,
569,573c569
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          bzerrorunsigned int* nbytes_in_hi32,
570,573c570
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
570,573c570
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE* nbytes_in_hi32,
570,573c570
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       nbytes_in_hi32,
570,573c570
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       b,
571,573d570
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
571,574c571
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           int* nbytes_out_lo32,
571,574c571
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           abandon* nbytes_out_lo32,
572,574c572
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     nbytes_out_lo32,
572,574c572
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned ,
572,575c572
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intunsigned int* nbytes_out_hi32 )
572,575c572
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* int* nbytes_out_hi32 )
572,575c572
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32* nbytes_out_hi32 )
573,575c573
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     nbytes_out_hi32 )
573,575c573
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned )
573,576c573
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int{
573,578c573
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* bzFile* bzf = ((bzf->writing))
573,578c573
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* nbytes_in_hi32* bzf = ((bzf->writing))
574,578c574
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     bzf = ((bzf->writing))
574,578c574
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned = ((bzf->writing))
574,578c574
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int((bzf->writing))
574,578c574
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* (bzf->writing))
574,578c574
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* nbytes_out_lo32bzf->writing))
575,578c575
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     ->writing))
575,578c575
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned writing))
575,578c575
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int))
575,578c575
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* )
575,579c575
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
<       ;
---
>                     unsigned int* nbytes_out_hi32 ;
576,580c576
< {
<    
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
> if (ferror(bzf->handle))
578,580c578
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    (ferror(bzf->handle))
578,580c578
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFileferror(bzf->handle))
578,580c578
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* (bzf->handle))
578,580c578
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf bzf->handle))
578,580c578
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ->handle))
578,580c578
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = (handle))
578,580c578
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = (())
578,580c578
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ((bzf)
578,581c578
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
---
>    bzFile* bzf = ((bzf->;
578,583c578
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>    bzFile* bzf = ((bzf->writingif (nbytes_in_lo32 != NULL) ;
578,583c578
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>    bzFile* bzf = ((bzf->writing)(nbytes_in_lo32 != NULL) ;
579,583c579
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>       nbytes_in_lo32 != NULL) ;
580,583c580
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>    != NULL) ;
580,583c580
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>    if NULL) ;
580,583c580
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>    if () ;
580,583c580
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
---
>    if (ferror;
580,584c580
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>    if (ferror(if (nbytes_out_lo32 != NULL) ;
580,584c580
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>    if (ferror(bzf(nbytes_out_lo32 != NULL) ;
580,584c580
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>    if (ferror(bzf->nbytes_out_lo32 != NULL) ;
580,584c580
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>    if (ferror(bzf->handle!= NULL) ;
580,584c580
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>    if (ferror(bzf->handle)NULL) ;
581,584c581
<       ;
< 
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>       ) ;
583,584c583
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
---
>    ;
583,586c583
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if if ((!abandon) && bzf->lastErr ) 
583,586c583
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if (((!abandon) && bzf->lastErr ) 
583,586c583
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if (nbytes_in_lo32 (!abandon) && bzf->lastErr ) 
583,586c583
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if (nbytes_in_lo32 != !abandon) && bzf->lastErr ) 
583,586c583
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if (nbytes_in_lo32 != NULLabandon) && bzf->lastErr ) 
583,586c583
<    if (nbytes_in_lo32 != NULL) ;
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if (nbytes_in_lo32 != NULL) ) && bzf->lastErr ) 
584,586c584
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    && bzf->lastErr ) 
584,586c584
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if bzf->lastErr ) 
584,586c584
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if (->lastErr ) 
584,586c584
<    if (nbytes_out_lo32 != NULL) ;
< 
<    if ((!abandon) && bzf->lastErr ) 
---
>    if (nbytes_out_lo32 lastErr ) 
(93.6 %, 13154 bytes)
583,587c583
<    ;
< 
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
585,587c585
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
585,587c585
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
---
>    if );
585,587c585
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
---
>    if (;
585,588c585
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
---
>    if ((0;
585,588c585
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
---
>    if ((!;
585,589c585
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
---
>    if ((!abandon0;
585,589c585
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
---
>    if ((!abandon) ;
585,590c585
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
---
>    if ((!abandon) && }
585,594c585
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if ((!abandon) && bzfBZFILE* BZ_API(BZ2_bzReadOpen) 
585,594c585
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if ((!abandon) && bzf->* BZ_API(BZ2_bzReadOpen) 
585,594c585
<    if ((!abandon) && bzf->lastErr ) 
< 
<    BZ_SETERR(BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if ((!abandon) && bzf->lastErr BZ_API(BZ2_bzReadOpen) 
(93.6 %, 13101 bytes)
583,590c583
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    BZ2_bzReadOpen) 
583,590c583
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    () 
583,591c583
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    (BZ_OK( int*  bzerror, 
583,591c583
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    (BZ_OK)int*  bzerror, 
584,591c584
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    *  bzerror, 
584,591c584
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    0bzerror, 
585,591c585
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    , 
585,592c585
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>    0FILE* f, 
586,592c586
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> * f, 
590,592c590
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> f, 
590,592c590
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE, 
590,593c590
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* int   verbosity,
590,593c590
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_APIverbosity,
590,593c590
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(,
590,594c590
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* BZ_API(BZ2_bzReadOpenint   small,
591,594c591
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    small,
591,594c591
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( ,
591,595c591
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( intvoid* unused,
591,595c591
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  * unused,
591,595c591
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  bzerrorunused,
592,595c592
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      ,
592,596c592
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILEint   nUnused )
592,596c592
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* nUnused )
592,596c592
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* f)
593,597c593
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      {
593,598c593
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   bzFile* bzf = NULL;
593,598c593
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   verbosity* bzf = NULL;
594,598c594
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      bzf = NULL;
594,598c594
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   = NULL;
594,598c594
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   smallNULL;
595,598c595
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      ;
595,599c595
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      voidint     ret;
595,599c595
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* ret;
595,599c595
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* unused;
596,601c596
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      BZ_SETERR(BZ_OK);
596,601c596
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   (BZ_OK);
596,601c596
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   nUnused BZ_OK);
597,601c597
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
> );
598,601c598
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    ;
598,603c598
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFileif (f == NULL || 
598,603c598
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* (f == NULL || 
598,603c598
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf f == NULL || 
598,603c598
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = == NULL || 
598,603c598
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = NULLNULL || 
599,603c599
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    || 
599,604c599
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    int     (small != 0 && small != 1) ||
599,604c599
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    int     retsmall != 0 && small != 1) ||
601,604c601
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    != 0 && small != 1) ||
601,604c601
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR0 && small != 1) ||
601,604c601
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(&& small != 1) ||
601,604c601
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OKsmall != 1) ||
601,604c601
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OK)!= 1) ||
603,604c603
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    1) ||
603,604c603
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if ) ||
603,604c603
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if (||
603,605c603
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f (verbosity < 0 || verbosity > 4) ||
603,605c603
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == verbosity < 0 || verbosity > 4) ||
603,605c603
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == NULL < 0 || verbosity > 4) ||
604,605c604
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        0 || verbosity > 4) ||
604,605c604
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (|| verbosity > 4) ||
604,605c604
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small verbosity > 4) ||
604,605c604
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != > 4) ||
604,605c604
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != 0 4) ||
604,605c604
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != 0 && ) ||
604,605c604
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != 0 && small ||
604,606c604
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != (unused == NULL && nUnused != 0) ||
604,606c604
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != 1unused == NULL && nUnused != 0) ||
604,606c604
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != 1) == NULL && nUnused != 0) ||
605,606c605
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        NULL && nUnused != 0) ||
605,606c605
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (&& nUnused != 0) ||
605,606c605
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity nUnused != 0) ||
605,606c605
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < != 0) ||
605,606c605
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < 0 0) ||
605,606c605
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < 0 || ) ||
605,606c605
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < 0 || verbosity ||
605,607c605
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
605,607c605
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > 4unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
605,607c605
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > 4) != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
606,607c606
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
606,607c606
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (&& (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
606,607c606
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
606,607c606
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
606,607c606
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL < 0 || nUnused > BZ_MAX_UNUSED)))
606,607c606
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && 0 || nUnused > BZ_MAX_UNUSED)))
606,607c606
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused || nUnused > BZ_MAX_UNUSED)))
606,607c606
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != nUnused > BZ_MAX_UNUSED)))
606,607c606
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != 0> BZ_MAX_UNUSED)))
606,607c606
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != 0) BZ_MAX_UNUSED)))
607c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        )))
607c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ())
607c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused )
607,608c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
---
>        (unused != ;
607,610c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL if (ferror(f)== NULL) 
607,610c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (ferror(f)== NULL) 
607,610c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (ferror(f)== NULL) 
607,610c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (nUnused (f)== NULL) 
607,610c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (nUnused < f)== NULL) 
607,610c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (nUnused < 0 )== NULL) 
607,610c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (nUnused < 0 || == NULL) 
607,610c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (nUnused < 0 || nUnused NULL) 
607,610c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
---
>        (unused != NULL && (nUnused < 0 || nUnused > ) 
607,611c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
<       ;
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED;
607,613c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)f;
607,613c607
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED));
608,614c608
<       ;
< 
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
---
>       bzf->bufN          = 0;
610,614c610
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
---
>    ->bufN          = 0;
610,614c610
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
---
>    if bufN          = 0;
610,614c610
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
---
>    if (= 0;
610,614c610
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
---
>    if (ferror0;
610,614c610
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
---
>    if (ferror(;
610,615c610
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    if (ferror(fbzf->writing       = False;
610,615c610
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    if (ferror(f)->writing       = False;
610,615c610
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    if (ferror(f)== writing       = False;
610,615c610
<    if (ferror(f)== NULL) 
<       ;
< 
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    if (ferror(f)== NULL= False;
611,615c611
<       ;
< 
<    f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>       False;
(93.6 %, 13054 bytes)
608,611c608
<       bzf->bufN          = 0;
<    bzf->writing       = False;
<    ;
<    if (ret != BZ_OK)
---
>       if (ret != BZ_OK)
608,611c608
<       bzf->bufN          = 0;
<    bzf->writing       = False;
<    ;
<    if (ret != BZ_OK)
---
>       bzf(ret != BZ_OK)
608,611c608
<       bzf->bufN          = 0;
<    bzf->writing       = False;
<    ;
<    if (ret != BZ_OK)
---
>       bzf->ret != BZ_OK)
608,611c608
<       bzf->bufN          = 0;
<    bzf->writing       = False;
<    ;
<    if (ret != BZ_OK)
---
>       bzf->bufN          != BZ_OK)
608,611c608
<       bzf->bufN          = 0;
<    bzf->writing       = False;
<    ;
<    if (ret != BZ_OK)
---
>       bzf->bufN          = BZ_OK)
608,611c608
<       bzf->bufN          = 0;
<    bzf->writing       = False;
<    ;
<    if (ret != BZ_OK)
---
>       bzf->bufN          = 0)
609d608
<    bzf->writing       = False;
611,612d609
<    if (ret != BZ_OK)
<       ;
(93.7 %, 12991 bytes)
608,611c608
<       if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>       bzf->bufN;
608,611c608
<       if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>       if ->bufN;
608,611c608
<       if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>       if (bufN;
608,611c608
<       if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>       if (ret ;
608,612c608
<       if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    ;
---
>       if (ret != ;
608,613c608
<       if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    ;
<    return bzf;   
---
>       if (ret != BZ_OKreturn bzf;   
609,613c609
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    ;
<    return bzf;   
---
>       bzf;   
(93.7 %, 12940 bytes)
608,615c608
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       ) ( int *bzerror, BZFILE *b )
608,615c608
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf( int *bzerror, BZFILE *b )
608,615c608
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf->int *bzerror, BZFILE *b )
608,615c608
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf->bufN*bzerror, BZFILE *b )
609,615c609
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzerror, BZFILE *b )
610,615c610
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    , BZFILE *b )
610,615c610
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return BZFILE *b )
610,615c610
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return bzf*b )
611,615c611
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> b )
615c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> )
615,616c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
---
> void {
615,617c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_APIbzFile* bzf = (bzFile*)0;
615,617c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(* bzf = (bzFile*)0;
615,617c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClosebzf = (bzFile*)0;
615,617c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) = (bzFile*)0;
615,617c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( (bzFile*)0;
615,617c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int bzFile*)0;
615,617c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int **)0;
615,617c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror)0;
615,617c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, 0;
615,617c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE ;
615,618c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
<    0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *0;
615,618c615
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
<    0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b ;
616,618d615
< {
<    bzFile* bzf = (bzFile*)0;
<    0;
617,623c617
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    int BZ_API(BZ2_bzRead) 
617,623c617
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFileBZ_API(BZ2_bzRead) 
617,623c617
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* (BZ2_bzRead) 
617,623c617
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf BZ2_bzRead) 
617,623c617
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = ) 
617,624c617
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (( int*    bzerror, 
617,624c617
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFileint*    bzerror, 
617,624c617
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile**    bzerror, 
617,624c617
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)bzerror, 
617,624c617
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)0, 
618,625c618
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    BZFILE* b, 
618,625c618
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    0* b, 
619,625c619
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> b, 
623,625c623
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> , 
623,626c623
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int void*   buf, 
623,626c623
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API*   buf, 
623,626c623
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(buf, 
623,626c623
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(BZ2_bzRead, 
624,627c624
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            int     len )
624,627c624
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( len )
624,627c624
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int)
624,628c624
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>            ( int*    {
624,630c624
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( int*    bzerrorbzFile* bzf = (bzFile*)b;
625,630c625
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              * bzf = (bzFile*)b;
625,630c625
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILEbzf = (bzFile*)b;
625,630c625
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* = (bzFile*)b;
625,630c625
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* b(bzFile*)b;
626,630c626
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              bzFile*)b;
626,630c626
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*)b;
626,630c626
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   )b;
626,630c626
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   bufb;
627,630c627
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              ;
627,632c627
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
---
>              int     BZ_SETERR()
627,632c627
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
---
>              int     len ()
628,632c628
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
---
> )
630,633c630
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       buf;
---
>    buf;
630,633c630
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       buf;
---
>    bzFile;
(93.7 %, 12892 bytes)
630,639c630
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ2_bzReadGetUnused) 
630,639c630
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    buf) 
632,640c632
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    ( int*    bzerror, 
632,640c632
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while int*    bzerror, 
632,640c632
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (*    bzerror, 
632,640c632
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (Truebzerror, 
634,640c634
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    , 
634,641c634
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return BZFILE* b, 
634,641c634
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return 0* b, 
635,641c635
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> b, 
639,641c639
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> , 
639,642c639
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void void**  unused, 
639,642c639
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API**  unused, 
639,642c639
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(*  unused, 
639,642c639
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnusedunused, 
640,642c640
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      , 
640,643c640
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
640,643c640
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
640,643c640
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
640,643c640
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerror)
641,644c641
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        {
641,645c641
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILEbzFile* bzf = (bzFile*)b;
641,645c641
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILE* * bzf = (bzFile*)b;
641,645c641
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILE* bbzf = (bzFile*)b;
642,645c642
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        = (bzFile*)b;
642,645c642
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void(bzFile*)b;
642,645c642
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void*bzFile*)b;
642,645c642
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void**  *)b;
642,645c642
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void**  unused)b;
643,645c643
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        b;
643,645c643
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        int;
643,646c643
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    ;
---
>                        int*    ;
643,647c643
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    ;
<    ;
---
>                        int*    nUnused ;
644,648c644
< {
<    bzFile* bzf = (bzFile*)b;
<    ;
<    ;
<    *nUnused ;
---
> *nUnused ;
645,648c645
<    bzFile* bzf = (bzFile*)b;
<    ;
<    ;
<    *nUnused ;
---
>    nUnused ;
645,648c645
<    bzFile* bzf = (bzFile*)b;
<    ;
<    ;
<    *nUnused ;
---
>    bzFile;
645,649c645
<    bzFile* bzf = (bzFile*)b;
<    ;
<    ;
<    *nUnused ;
< }
---
>    bzFile* }
(93.7 %, 12852 bytes)
645,656c645
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>    unsigned int* destLen,
645,656c645
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>    nUnused int* destLen,
646,656c646
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> * destLen,
654,656c654
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> destLen,
654,656c654
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int ,
654,657c654
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_APIchar*         source, 
654,657c654
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(*         source, 
654,657c654
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffCompresssource, 
655,657c655
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          , 
655,658c655
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( unsigned int  sourceLen,
655,658c655
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( charint  sourceLen,
655,658c655
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         sourceLen,
655,658c655
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         dest,
656,658d655
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
656,659c656
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned blockSize100k, 
656,659c656
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int, 
656,660c656
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* int           verbosity, 
656,660c656
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* destLenverbosity, 
657,660c657
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            , 
657,661c657
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            charint           workFactor )
657,661c657
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         workFactor )
657,661c657
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         source)
658,662c658
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            {
658,663c658
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned bz_stream strm;
658,663c658
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  strm;
658,663c658
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  sourceLen;
659,664c659
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int ret;
659,664c659
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           ret;
659,664c659
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           blockSize100k;
660,666c660
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            if (dest == NULL || destLen == NULL || 
660,666c660
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           (dest == NULL || destLen == NULL || 
660,666c660
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           verbositydest == NULL || destLen == NULL || 
661,666c661
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            == NULL || destLen == NULL || 
661,666c661
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           NULL || destLen == NULL || 
661,666c661
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           workFactor || destLen == NULL || 
662,666c662
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> destLen == NULL || 
663,666c663
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    == NULL || 
663,666c663
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream NULL || 
663,666c663
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream strm|| 
664,667c664
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    source == NULL ||
664,667c664
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int == NULL ||
664,667c664
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int retNULL ||
666,667c666
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    ||
666,668c666
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if blockSize100k < 1 || blockSize100k > 9 ||
666,668c666
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (< 1 || blockSize100k > 9 ||
666,668c666
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest 1 || blockSize100k > 9 ||
666,668c666
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == || blockSize100k > 9 ||
666,668c666
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL blockSize100k > 9 ||
666,668c666
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL || > 9 ||
666,668c666
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL || destLen 9 ||
666,668c666
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL || destLen == ||
666,669c666
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>    if (dest == NULL || destLen == NULL verbosity < 0 || verbosity > workFactor == 0) ;
667,669c667
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        < 0 || verbosity > workFactor == 0) ;
667,669c667
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        source 0 || verbosity > workFactor == 0) ;
667,669c667
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        source == || verbosity > workFactor == 0) ;
667,669c667
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        source == NULL verbosity > workFactor == 0) ;
668,669c668
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        > workFactor == 0) ;
668,669c668
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        blockSize100k workFactor == 0) ;
668,669c668
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        blockSize100k < == 0) ;
668,669c668
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        blockSize100k < 1 0) ;
668,669c668
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        blockSize100k < 1 || ) ;
668,669c668
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>        blockSize100k < 1 || blockSize100k ;
668,670c668
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
---
>        blockSize100k < 1 || blockSize100k > strm.opaque ;
668,670c668
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
---
>        blockSize100k < 1 || blockSize100k > 9 .opaque ;
669,670c669
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
---
>        opaque ;
669,670c669
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
---
>        verbosity ;
669,672c669
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < strm.next_in = source;
669,672c669
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 .next_in = source;
669,672c669
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 || next_in = source;
669,672c669
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 || verbosity = source;
669,672c669
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 || verbosity > source;
669,672c669
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 || verbosity > workFactor ;
669,673c669
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>        verbosity < 0 || verbosity > workFactor == strm.next_out ;
669,673c669
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>        verbosity < 0 || verbosity > workFactor == 0.next_out ;
669,673c669
<        verbosity < 0 || verbosity > workFactor == 0) ;
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>        verbosity < 0 || verbosity > workFactor == 0) next_out ;
670,673c670
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>    ;
670,675c670
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>    strmret = 0;
670,675c670
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>    strm.= 0;
670,675c670
<    strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>    strm.opaque 0;
672,675c672
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>    ;
(93.8 %, 12794 bytes)
670,677c670
<    ;
< 
<    ret = 0;
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
---
>    :
672,677d671
<    ret = 0;
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
672,678c672
<    ret = 0;
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
---
>    ret ;
(93.8 %, 12713 bytes)
672,679c672
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    *         dest, 
672,679c672
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    0dest, 
673,679c673
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    , 
673,680c673
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    return unsigned int* destLen,
673,680c673
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    return retint* destLen,
674,680c674
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> * destLen,
678,680c678
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> destLen,
678,680c678
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int ,
678,681c678
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_APIchar*         source, 
678,681c678
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(*         source, 
678,681c678
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompresssource, 
679,681c679
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            , 
679,682c679
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( unsigned int  sourceLen,
679,682c679
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( charint  sourceLen,
679,682c679
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         sourceLen,
679,682c679
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         dest,
680,682d679
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
680,683c680
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned small,
680,683c680
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int,
680,684c680
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* int           verbosity )
680,684c680
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* destLenverbosity )
681,684c681
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              )
681,685c681
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
---
>                              char{
681,686c681
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              char*         bz_stream strm;
681,686c681
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              char*         sourcestrm;
682,686c682
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              ;
682,687c682
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int ret;
682,687c682
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  ret;
682,687c682
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  sourceLen;
683,689c683
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              if (dest == NULL || destLen == NULL || 
683,689c683
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           (dest == NULL || destLen == NULL || 
683,689c683
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           smalldest == NULL || destLen == NULL || 
684,689c684
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              == NULL || destLen == NULL || 
684,689c684
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           NULL || destLen == NULL || 
684,689c684
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           verbosity || destLen == NULL || 
685,689c685
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> destLen == NULL || 
686,689c686
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    == NULL || 
686,689c686
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream NULL || 
686,689c686
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream strm|| 
687,690c687
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    source == NULL ||
687,690c687
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int == NULL ||
687,690c687
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int retNULL ||
689,690c689
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    ||
689,691c689
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (small != 0 && small != 1) ||
689,691c689
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (small != 0 && small != 1) ||
689,691c689
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest != 0 && small != 1) ||
689,691c689
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == 0 && small != 1) ||
689,691c689
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL && small != 1) ||
689,691c689
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || small != 1) ||
689,691c689
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen != 1) ||
689,691c689
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == 1) ||
689,691c689
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == NULL ) ||
690,691c690
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>        ||
690,692c690
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source verbosity < 0 || verbosity > 4) 
690,692c690
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source == < 0 || verbosity > 4) 
690,692c690
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source == NULL 0 || verbosity > 4) 
691,692c691
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        || verbosity > 4) 
691,692c691
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (verbosity > 4) 
691,692c691
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (small > 4) 
691,692c691
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (small != 4) 
691,692c691
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (small != 0 ) 
691,693c691
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
---
>        (small != 0 && strm.opaque ;
691,693c691
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
---
>        (small != 0 && small .opaque ;
691,693c691
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
---
>        (small != 0 && small != opaque ;
691,693c691
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
---
>        (small != 0 && small != 1;
691,695c691
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
---
>        (small != 0 && small != 1) strm.next_in = source;
692,695c692
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
---
>        .next_in = source;
692,695c692
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity next_in = source;
692,695c692
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < = source;
692,695c692
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 source;
692,695c692
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
---
>        verbosity < 0 || ;
692,696c692
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>        verbosity < 0 || verbosity strm.next_out ;
692,696c692
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>        verbosity < 0 || verbosity > .next_out ;
692,696c692
<        verbosity < 0 || verbosity > 4) 
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>        verbosity < 0 || verbosity > 4next_out ;
693,696c693
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
---
>           ;
693,698c693
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>           strmret = 0;
693,698c693
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>           strm.= 0;
693,698c693
<           strm.opaque ;
< 
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>           strm.opaque 0;
695,698c695
<    strm.next_in = source;
<    strm.next_out ;
< 
<    ret = 0;
---
>    ;
(93.8 %, 12655 bytes)
693,697c693
<           ;
< 
<    ret = 0;
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
---
>           0) ;
695,697c695
<    ret = 0;
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
---
>    ) ;
695,697c695
<    ret = 0;
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
---
>    ret ;
695,698c695
<    ret = 0;
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
< }
---
>    ret = }
695,703c695
<    ret = 0;
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
---
>    ret = 0static
696,704c696
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    BZFILE * bzopen_or_bzdopen
696,704c696
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    output_overflow_or_eof* bzopen_or_bzdopen
697,704c697
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    bzopen_or_bzdopen
697,705c697
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
>    if ( )      
697,705c697
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
>    if ()      
697,706c697
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
---
>    if (strm;
697,711c697
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    if (strm.BZFILE * BZ_API(BZ2_bzopen)
697,711c697
<    if (strm.avail_out > 0) ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    if (strm.avail_out * BZ_API(BZ2_bzopen)
(93.9 %, 12596 bytes)
695,709c695
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    ret BZ2_bzopen)
696,709c696
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> )
701,710c701
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> ( const char *path,
702,710c702
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> const char *path,
702,710c702
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE char *path,
702,710c702
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * *path,
703,710c703
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                path,
703,710c703
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                ( ,
704,711c704
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> const char *mode )
709,711c709
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> char *mode )
709,711c709
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE *mode )
709,711c709
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * mode )
709,711c709
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API)
709,712c709
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
---
> BZFILE * BZ_API({
709,713c709
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
> BZFILE * BZ_API(BZ2_bzopenreturn 0;
710,713c710
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                0;
710,713c710
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( ;
710,714c710
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
---
>                ( const }
710,718c710
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char BZFILE * BZ_API(BZ2_bzdopen)
710,718c710
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char ** BZ_API(BZ2_bzdopen)
710,718c710
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *pathBZ_API(BZ2_bzdopen)
711,718c711
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  (BZ2_bzdopen)
711,718c711
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const BZ2_bzdopen)
711,718c711
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char )
711,719c711
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char *( int fd,
711,719c711
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char *mode int fd,
712,719c712
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> fd,
713,719c713
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    ,
713,720c713
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    return const char *mode )
713,720c713
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    return 0char *mode )
714,720c714
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> *mode )
718,720c718
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> mode )
718,720c718
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE )
718,721c718
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
---
> BZFILE * {
718,722c718
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_APIreturn bzopen_or_bzdopen(NULL,fd,mode,1);
718,722c718
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(bzopen_or_bzdopen(NULL,fd,mode,1);
718,722c718
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(BZ2_bzdopen(NULL,fd,mode,1);
719,722c719
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                NULL,fd,mode,1);
719,722c719
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( ,fd,mode,1);
719,722c719
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int fd,mode,1);
719,722c719
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int fd,mode,1);
720,722c720
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  mode,1);
720,722c720
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const ,1);
720,722c720
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char 1);
720,722c720
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *);
720,722c720
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *mode ;
721,722d720
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
722,727c722
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
722,727c722
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
722,727c722
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(BZ2_bzread) (BZFILE* b, void* buf, int len )
722,727c722
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(BZ2_bzread) (BZFILE* b, void* buf, int len )
722,727c722
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL) (BZFILE* b, void* buf, int len )
722,727c722
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,(BZFILE* b, void* buf, int len )
722,727c722
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fdBZFILE* b, void* buf, int len )
722,727c722
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,* b, void* buf, int len )
722,727c722
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,modeb, void* buf, int len )
722,727c722
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,, void* buf, int len )
722,727c722
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1void* buf, int len )
722,727c722
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1)* buf, int len )
723,727c723
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> buf, int len )
727c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> , int len )
727c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int int len )
727c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIlen )
727c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API()
727,728c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzread{
727,729c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) int bzerr, nread;
727,729c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (bzerr, nread;
727,729c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE, nread;
727,729c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* nread;
727,729c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b;
727,730c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, 0;
727,730c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void;
727,731c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* nread = 0;
727,731c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf= 0;
727,731c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, 0;
727,731c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int ;
727,732c727
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
<    -1;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len -1;
728,732c728
< {
<    int bzerr, nread;
<    0;
<    nread = 0;
<    -1;
---
> 1;
729,732c729
<    int bzerr, nread;
<    0;
<    nread = 0;
<    -1;
---
>    ;
729,734c729
<    int bzerr, nread;
<    0;
<    nread = 0;
<    -1;
<    
< }
---
>    int }
729,738c729
<    int bzerr, nread;
<    0;
<    nread = 0;
<    -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    int bzerrint BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
729,738c729
<    int bzerr, nread;
<    0;
<    nread = 0;
<    -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    int bzerr, BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
729,738c729
<    int bzerr, nread;
<    0;
<    nread = 0;
<    -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    int bzerr, nread(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
730,738c730
<    0;
<    nread = 0;
<    -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    BZ2_bzwrite) (BZFILE* b, void* buf, int len )
730,738c730
<    0;
<    nread = 0;
<    -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    0) (BZFILE* b, void* buf, int len )
731,738c731
<    nread = 0;
<    -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    (BZFILE* b, void* buf, int len )
731,738c731
<    nread = 0;
<    -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    nread BZFILE* b, void* buf, int len )
731,738c731
<    nread = 0;
<    -1;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    nread = * b, void* buf, int len )
(93.9 %, 12553 bytes)
729,735c729
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    * buf, int len )
731,735c731
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> buf, int len )
735c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> , int len )
735c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int int len )
735c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIlen )
735c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API()
735,736c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzwrite{
735,737c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) int bzerr;
735,737c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (bzerr;
735,737c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (BZFILE;
735,738c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* FILE *fp = ((bzFile *)b)->handle;
735,738c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b*fp = ((bzFile *)b)->handle;
735,738c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, fp = ((bzFile *)b)->handle;
735,738c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void= ((bzFile *)b)->handle;
735,738c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* ((bzFile *)b)->handle;
735,738c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf(bzFile *)b)->handle;
735,738c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, bzFile *)b)->handle;
735,738c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int *)b)->handle;
735,738c735
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )b)->handle;
736,738c736
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> b)->handle;
737,738c737
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    )->handle;
737,738c737
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int ->handle;
737,738c737
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int bzerrhandle;
738c738
<    FILE *fp = ((bzFile *)b)->handle;
---
>    ;
738,740c738
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL!= BZ_OK)
---
>    FILE if (b==NULL!= BZ_OK)
(93.9 %, 12522 bytes)
737,740c737
<    int bzerrhandle;
<    
<    if (b==NULL!= BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>    int bzerrhandleb,1,NULL,NULL);
739,740c739
<    if (b==NULL!= BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>    ,1,NULL,NULL);
739,740c739
<    if (b==NULL!= BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>    if 1,NULL,NULL);
739,740c739
<    if (b==NULL!= BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>    if (,NULL,NULL);
739,740c739
<    if (b==NULL!= BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>    if (bNULL,NULL);
739,740c739
<    if (b==NULL!= BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>    if (b==,NULL);
739,740c739
<    if (b==NULL!= BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>    if (b==NULLNULL);
739,740c739
<    if (b==NULL!= BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>    if (b==NULL!= );
739,740c739
<    if (b==NULL!= BZ_OK)
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>    if (b==NULL!= BZ_OK;
740,742c740
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    ;
---
>          ;
740,744c740
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    ;
<    
< }
---
>          BZ2_bzWriteClose}
740,749c740
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>          BZ2_bzWriteClose(static char *bzerrorstrings[] = {
740,749c740
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>          BZ2_bzWriteClose(NULLchar *bzerrorstrings[] = {
740,749c740
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>          BZ2_bzWriteClose(NULL,*bzerrorstrings[] = {
740,749c740
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>          BZ2_bzWriteClose(NULL,bbzerrorstrings[] = {
740,749c740
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>          BZ2_bzWriteClose(NULL,b,[] = {
740,749c740
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>          BZ2_bzWriteClose(NULL,b,1] = {
740,749c740
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>          BZ2_bzWriteClose(NULL,b,1,= {
740,749c740
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>          BZ2_bzWriteClose(NULL,b,1,NULL{
740,750c740
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       
<    ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
---
>          BZ2_bzWriteClose(NULL,b,1,NULL,"OK"
(93.9 %, 12474 bytes)
740,752c740
<          ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>          const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
742,752c742
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
747,752c747
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
747,752c747
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
747,752c747
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char (BZ2_bzerror) (BZFILE *b, int *errnum)
747,752c747
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *BZ2_bzerror) (BZFILE *b, int *errnum)
747,752c747
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings) (BZFILE *b, int *errnum)
747,752c747
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[(BZFILE *b, int *errnum)
747,752c747
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] BZFILE *b, int *errnum)
747,752c747
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] = *b, int *errnum)
748,752c748
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>        b, int *errnum)
749,752c749
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       , int *errnum)
749,752c749
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       }int *errnum)
752c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> *errnum)
752c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const errnum)
752c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char )
752,753c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
---
> const char * {
752,754c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_APIint err = ((bzFile *)b)->lastErr;
752,754c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(err = ((bzFile *)b)->lastErr;
752,754c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror= ((bzFile *)b)->lastErr;
752,754c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) ((bzFile *)b)->lastErr;
752,754c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) ((bzFile *)b)->lastErr;
752,754c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE bzFile *)b)->lastErr;
752,754c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE **)b)->lastErr;
752,754c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b)b)->lastErr;
752,754c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, b)->lastErr;
752,754c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int )->lastErr;
752,754c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *->lastErr;
752,754c752
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnumlastErr;
753,754c753
< {
<    int err = ((bzFile *)b)->lastErr;
---
> ;
754d753
<    int err = ((bzFile *)b)->lastErr;
754,755c754
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int bzerrorstrings[err*-1];
754,755c754
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err [err*-1];
754,755c754
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = err*-1];
754,755c754
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = (*-1];
754,755c754
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((-1];
754,755c754
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile 1];
754,755c754
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *];
754,755c754
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *);
754,756c754
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
---
>    int err = ((bzFile *)b}
754,785c754
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    int err = ((bzFile *)b)#include <errno.h>
754,785c754
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    int err = ((bzFile *)b)->include <errno.h>
754,785c754
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    int err = ((bzFile *)b)->lastErr<errno.h>
755,785c755
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    errno.h>
755,785c755
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    return .h>
755,785c755
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    return bzerrorstringsh>
755,785c755
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
---
>    return bzerrorstrings[>
755,787c755
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
>    return bzerrorstrings[err#define ERROR_IF_EOF(i)       
755,787c755
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
>    return bzerrorstrings[err*define ERROR_IF_EOF(i)       
755,787c755
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
>    return bzerrorstrings[err*-ERROR_IF_EOF(i)       
755,787c755
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
>    return bzerrorstrings[err*-1(i)       
755,787c755
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
>    return bzerrorstrings[err*-1]i)       
756,787c756
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
> )       
785,787d784
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
785,787d784
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
785,788c785
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> #include ERROR_IF_NOT_ZERO(i)  
(93.9 %, 12423 bytes)
785,792c785
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> if BZ_UNIX
785,792c785
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #BZ_UNIX
785,793c785
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
---
> #define )
785,795c785
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
> #define ERROR_IF_NOT_ZERO#   define SET_BINARY_MODE(fd) 
785,795c785
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
> #define ERROR_IF_NOT_ZERO(define SET_BINARY_MODE(fd) 
785,795c785
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
> #define ERROR_IF_NOT_ZERO(iSET_BINARY_MODE(fd) 
786,795c786
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
> (fd) 
786,795c786
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
> #fd) 
786,795c786
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
> #define ) 
786,797c786
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
---
> #define ERROR_IF_MINUS_ONE#      define NORETURN 
786,797c786
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
---
> #define ERROR_IF_MINUS_ONE(define NORETURN 
786,797c786
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
---
> #define ERROR_IF_MINUS_ONE(iNORETURN 
792,798d791
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
792,798d791
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
792,806c792
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #if #define True  ((Bool)1)
793,806c793
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> define True  ((Bool)1)
795,806c795
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> True  ((Bool)1)
795,806c795
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #   ((Bool)1)
795,806c795
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #   define (Bool)1)
795,806c795
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #   define SET_BINARY_MODEBool)1)
795,806c795
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #   define SET_BINARY_MODE()1)
795,806c795
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> #   define SET_BINARY_MODE(fd1)
797,806c797
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
---
> )
797,807c797
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #      #define False ((Bool)0)
797,807c797
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #      define define False ((Bool)0)
799,807c799
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> False ((Bool)0)
799,807c799
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #((Bool)0)
806,807c806
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> (Bool)0)
806,807c806
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #Bool)0)
806,807c806
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define )0)
806,807c806
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  0)
806,807c806
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  ()
806,810c806
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< 
< typedef int IntNative;
---
> #define True  ((typedef int IntNative;
(94.0 %, 12392 bytes)
806,824c806
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define OM_UNZ           2
< #define OM_TEST          
\ No newline at end of file
---
> #define True  OM_TEST          
\ No newline at end of file
806,824c806
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define OM_UNZ           2
< #define OM_TEST          
\ No newline at end of file
---
> #define True  0
\ No newline at end of file
(94.0 %, 12309 bytes)
806c806
< #define True  OM_TEST          
\ No newline at end of file
---
> #define True  
\ No newline at end of file
(94.0 %, 12292 bytes)
===< pass_clex :: rm-toks-12 >===
9,10c9
< #define BZ_OK                0
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
---
> 1)
9,10c9
< #define BZ_OK                0
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
---
> #)
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> #define #define BZ_PARAM_ERROR       (-6)
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> #define BZ_OK                define BZ_PARAM_ERROR       (-6)
10,11c10
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> BZ_PARAM_ERROR       (-6)
10,11c10
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> #(-6)
10,11c10
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> #define -6)
10,11c10
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> #define BZ_RUN_OK            6)
10,11c10
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
---
> #define BZ_RUN_OK            #)
10,12c10
< #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_RUN_OK            #define #define BZ_UNEXPECTED_EOF    (-7)
(94.0 %, 12227 bytes)
10,12c10
< #define BZ_RUN_OK            6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_RUN_OK            (-8)
10,12c10
< #define BZ_RUN_OK            6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_RUN_OK            6-8)
11,12c11
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> 8)
(94.1 %, 12161 bytes)
10,14c10
< #define BZ_RUN_OK            (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_RUN_OK            struct {
10,14c10
< #define BZ_RUN_OK            (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_RUN_OK            ({
10,15c10
< #define BZ_RUN_OK            (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_RUN_OK            (-char *next_in;
10,15c10
< #define BZ_RUN_OK            (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_RUN_OK            (-8*next_in;
11,15c11
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> next_in;
11,15c11
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #;
11,16c11
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define unsigned int avail_in;
11,16c11
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      int avail_in;
11,16c11
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      (avail_in;
11,16c11
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      (-;
11,17c11
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-9unsigned int total_in_lo32;
13,17c13
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> int total_in_lo32;
14,17c14
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    total_in_lo32;
14,17c14
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    struct ;
15,17d14
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
15,18c15
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char int total_in_hi32;
15,18c15
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char *total_in_hi32;
16,18d15
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
16,19d15
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
16,20c16
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned *next_out;
16,20c16
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned int next_out;
17,20d16
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
17,20d16
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
17,20d16
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
17,20d16
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
18,21d17
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
18,21d17
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
18,21d17
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
18,21d17
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
19,22d18
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
20,22d19
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
20,23c20
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char int total_out_hi32;
20,23c20
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char *total_out_hi32;
21,23d20
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
21,24d20
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
21,25c21
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned *state;
21,25c21
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned int state;
22,25d21
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
22,26d21
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
22,27c22
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned *(*bzalloc)(void *,int,int);
22,27c22
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int (*bzalloc)(void *,int,int);
22,27c22
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_lo32*bzalloc)(void *,int,int);
23,27c23
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       bzalloc)(void *,int,int);
23,27c23
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned )(void *,int,int);
23,27c23
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int (void *,int,int);
23,27c23
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_hi32void *,int,int);
25,27c25
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       *,int,int);
25,27c25
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void ,int,int);
25,27c25
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *int,int);
25,27c25
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *state,int);
27c27
<       void *(*bzalloc)(void *,int,int);
---
>       int);
27c27
<       void *(*bzalloc)(void *,int,int);
---
>       void );
27c27
<       void *(*bzalloc)(void *,int,int);
---
>       void *;
27,28c27
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(void (*bzfree)(void *,void *);
27,28c27
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*(*bzfree)(void *,void *);
27,28c27
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc*bzfree)(void *,void *);
27,28c27
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)bzfree)(void *,void *);
27,28c27
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)()(void *,void *);
27,28c27
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void (void *,void *);
27,28c27
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *void *,void *);
27,28c27
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,*,void *);
27,28c27
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,void *);
27,28c27
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,void *);
27,28c27
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int*);
(94.1 %, 12127 bytes)
27,34c27
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int#include <stdio.h>
27,34c27
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int,include <stdio.h>
27,34c27
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int,void <stdio.h>
27,34c27
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int,void *stdio.h>
27,34c27
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int,void *).h>
28,34c28
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       h>
28,34c28
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void >
28,36c28
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *#   define BZ_API(func) func
28,36c28
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *opaquedefine BZ_API(func) func
29,36c29
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    BZ_API(func) func
30,36c30
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    (func) func
30,36c30
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_streamfunc) func
34,36c34
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> ) func
34,36c34
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #func
34,37c34
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include #   define BZ_EXTERN extern
34,37c34
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <define BZ_EXTERN extern
34,37c34
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdioBZ_EXTERN extern
34,37c34
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.extern
34,42c34
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> #include <stdio.hBZ_EXTERN ;
36,42c36
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> ;
36,48c36
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   #define BZ_MAX_UNUSED 5000
36,48c36
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define define BZ_MAX_UNUSED 5000
36,48c36
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define BZ_APIBZ_MAX_UNUSED 5000
36,48c36
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define BZ_API(5000
36,50c36
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #   define BZ_API(functypedef void BZFILE;
36,50c36
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #   define BZ_API(func) void BZFILE;
37,50c37
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZFILE;
37,50c37
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #   ;
37,52c37
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
37,52c37
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
42,52c42
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API(BZ2_bzReadOpen) ( 
42,52c42
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzReadOpen) ( 
48,52c48
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> (BZ2_bzReadOpen) ( 
48,52c48
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #BZ2_bzReadOpen) ( 
48,52c48
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define ) ( 
48,52c48
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED ( 
50,53c50
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> int*  bzerror,   
50,53c50
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef *  bzerror,   
50,53c50
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void bzerror,   
50,53c50
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void BZFILE,   
52,54c52
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> FILE* f, 
52,54c52
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN * f, 
52,54c52
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILEf, 
52,54c52
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* , 
52,55c52
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIint   verbosity, 
52,55c52
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(verbosity, 
52,55c52
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen, 
52,56c52
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) int   small,
53,56c53
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       small,
53,56c53
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int,
53,57c53
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  void* unused,    
53,57c53
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  bzerror* unused,    
54,57c54
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       unused,    
54,57c54
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE,    
54,58c54
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* int   nUnused 
54,58c54
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* fnUnused 
55,59c55
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       );
55,59c55
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   ;
55,61c55
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
---
>       int   verbosity;
56,63c56
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
56,63c56
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   void BZ_API(BZ2_bzReadGetUnused) ( 
56,63c56
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   smallBZ_API(BZ2_bzReadGetUnused) ( 
57,63c57
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       (BZ2_bzReadGetUnused) ( 
57,63c57
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       voidBZ2_bzReadGetUnused) ( 
57,63c57
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* ) ( 
57,63c57
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* unused( 
58,63d57
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
58,64c58
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       int   *    bzerror, 
59,64c59
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    bzerror, 
59,64c59
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    ), 
61,65c61
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZFILE* b, 
63,65c63
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
63,65c63
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN b, 
63,65c63
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void , 
63,66c63
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_APIvoid**  unused,  
63,66c63
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(**  unused,  
63,66c63
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused*  unused,  
63,66c63
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) unused,  
64,66c64
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       ,  
64,67c64
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       intint*    nUnused 
64,67c64
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    *    nUnused 
64,67c64
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    bzerrornUnused 
65,68c65
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       );
65,68c65
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE;
65,70c65
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILE* BZ_EXTERN int BZ_API(BZ2_bzReadlen 
65,70c65
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILE* bint BZ_API(BZ2_bzReadlen 
66,70c66
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZ_API(BZ2_bzReadlen 
66,70c66
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void(BZ2_bzReadlen 
66,70c66
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void*BZ2_bzReadlen 
66,71c66
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       void**  );
66,71c66
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       void**  unused;
67,73c67
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
67,73c67
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       intBZFILE* BZ_API(BZ2_bzWriteOpen) ( 
67,73c67
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    * BZ_API(BZ2_bzWriteOpen) ( 
68,73c68
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    BZ_API(BZ2_bzWriteOpen) ( 
68,73c68
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )(BZ2_bzWriteOpen) ( 
70,73c70
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ2_bzWriteOpen) ( 
70,73c70
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN ) ( 
70,73c70
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN int ( 
70,74c70
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int BZ_APIint*  bzerror,      
70,74c70
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int BZ_API(*  bzerror,      
71,74c71
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    bzerror,      
71,74c71
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    ),      
73,75c73
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> FILE* f, 
73,75c73
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN * f, 
73,75c73
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILEf, 
73,75c73
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* , 
73,76c73
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_APIint   blockSize100k, 
73,76c73
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(blockSize100k, 
73,76c73
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen, 
73,77c73
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) int   verbosity, 
74,77c74
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       verbosity, 
74,77c74
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int, 
74,78c74
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  int   workFactor 
74,78c74
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  bzerrorworkFactor 
75,79c75
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       );
75,79c75
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE;
75,81c75
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILE* BZ_EXTERN void BZ_API(BZ2_bzWritelen 
75,81c75
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILE* fvoid BZ_API(BZ2_bzWritelen 
76,81c76
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       BZ_API(BZ2_bzWritelen 
76,81c76
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   (BZ2_bzWritelen 
76,81c76
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   blockSize100kBZ2_bzWritelen 
77,82c77
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       );
77,82c77
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       int   ;
77,84c77
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   verbosityBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
78,84c78
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void BZ_API(BZ2_bzWriteClose) ( 
78,84c78
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   BZ_API(BZ2_bzWriteClose) ( 
79,84c79
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    (BZ2_bzWriteClose) ( 
79,84c79
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )BZ2_bzWriteClose) ( 
81,84c81
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> ) ( 
81,84c81
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN ( 
81,85c81
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void int*          bzerror, 
81,85c81
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API*          bzerror, 
81,85c81
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(bzerror, 
82,85c82
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    , 
82,86c82
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )BZFILE*       b, 
84,86c84
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> *       b, 
84,86c84
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN b, 
84,86c84
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void , 
84,87c84
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIint           abandon, 
84,87c84
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(abandon, 
84,87c84
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose, 
84,88c84
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) unsigned int* nbytes_in, 
85,88c85
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int* nbytes_in, 
85,88c85
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int* nbytes_in, 
85,88c85
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          nbytes_in, 
86,88d85
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
86,88d85
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
86,89c86
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILEint* nbytes_out 
86,89c86
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       * nbytes_out 
86,89c86
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       bnbytes_out 
87,90c87
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       );
87,90c87
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       int           ;
87,92c87
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           abandonBZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
88,92c88
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       void BZ_API(BZ2_bzWriteClose64) ( 
88,92c88
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned BZ_API(BZ2_bzWriteClose64) ( 
88,92c88
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int(BZ2_bzWriteClose64) ( 
88,92c88
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* BZ2_bzWriteClose64) ( 
88,92c88
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_in) ( 
89,92c89
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       ( 
89,93c89
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int*          bzerror, 
89,93c89
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int*          bzerror, 
89,93c89
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* bzerror, 
90,93c90
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    , 
90,94c90
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )BZFILE*       b, 
92,94c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> *       b, 
92,94c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN b, 
92,94c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void , 
92,95c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIint           abandon, 
92,95c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(abandon, 
92,95c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64, 
92,96c92
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) unsigned int* nbytes_in_lo32, 
93,96c93
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int* nbytes_in_lo32, 
93,96c93
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int* nbytes_in_lo32, 
93,96c93
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          nbytes_in_lo32, 
94,96d93
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
94,96d93
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
94,97c94
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILEint* nbytes_in_hi32, 
94,97c94
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       * nbytes_in_hi32, 
94,97c94
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       bnbytes_in_hi32, 
95,97c95
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       , 
95,98c95
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           unsigned int* nbytes_out_lo32, 
95,98c95
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           abandonint* nbytes_out_lo32, 
96,98c96
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       * nbytes_out_lo32, 
96,98c96
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned nbytes_out_lo32, 
96,98c96
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int, 
96,99c96
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* unsigned int* nbytes_out_hi32
96,99c96
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_lo32int* nbytes_out_hi32
97,99c97
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       * nbytes_out_hi32
97,99c97
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned nbytes_out_hi32
97,100c97
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int);
97,100c97
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* ;
97,105c97
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_in_hi32BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
98,105c98
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffCompress) ( 
98,105c98
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned BZ_API(BZ2_bzBuffToBuffCompress) ( 
98,105c98
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int(BZ2_bzBuffToBuffCompress) ( 
98,105c98
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ2_bzBuffToBuffCompress) ( 
98,105c98
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32) ( 
99,105c99
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       ( 
99,106c99
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned char*         dest, 
99,106c99
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int*         dest, 
99,106c99
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* dest, 
100,106c100
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    , 
100,107c100
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )unsigned int* destLen,
105,107c105
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> int* destLen,
105,107c105
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN * destLen,
105,107c105
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int destLen,
105,107c105
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API,
105,108c105
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(char*         source, 
105,108c105
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress*         source, 
105,108c105
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) source, 
106,108c106
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       , 
106,109c106
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charunsigned int  sourceLen,
106,109c106
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         int  sourceLen,
106,109c106
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destsourceLen,
107,109c107
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       ,
107,110c107
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int           blockSize100k, 
107,110c107
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned intblockSize100k, 
107,110c107
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* , 
107,111c107
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* destLenint           verbosity, 
108,111c108
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       verbosity, 
108,111c108
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char, 
108,112c108
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         int           workFactor 
108,112c108
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         sourceworkFactor 
109,113c109
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       );
109,113c109
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned ;
109,115c109
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
109,115c109
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  sourceLenint BZ_API(BZ2_bzBuffToBuffDecompress) ( 
110,115c110
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffDecompress) ( 
110,115c110
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           (BZ2_bzBuffToBuffDecompress) ( 
110,115c110
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100kBZ2_bzBuffToBuffDecompress) ( 
111,115c111
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ) ( 
111,115c111
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           ( 
111,116c111
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           verbositychar*         dest, 
112,116c112
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       *         dest, 
112,116c112
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           dest, 
113,116c113
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    , 
113,117c113
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )unsigned int* destLen,
115,117c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> int* destLen,
115,117c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN * destLen,
115,117c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int destLen,
115,117c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API,
115,118c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(char*         source, 
115,118c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress*         source, 
115,118c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) source, 
116,118c116
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       , 
116,119c116
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charunsigned int  sourceLen,
116,119c116
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         int  sourceLen,
116,119c116
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destsourceLen,
117,119c117
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       ,
117,120c117
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int           small, 
117,120c117
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned intsmall, 
117,120c117
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* , 
117,121c117
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int* destLenint           );
118,121c118
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       );
118,121c118
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char;
118,123c118
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       char*         BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
118,123c118
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       char*         sourceBZFILE * BZ_API(BZ2_bzopen) (
119,123c119
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       * BZ_API(BZ2_bzopen) (
119,123c119
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned BZ_API(BZ2_bzopen) (
119,123c119
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  (BZ2_bzopen) (
119,123c119
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  sourceLenBZ2_bzopen) (
120,123c120
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       ) (
120,123c120
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           (
120,124c120
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           smallconst char *path,
121,124c121
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       char *path,
121,124c121
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           *path,
121,124c121
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           )path,
123,124c123
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> ,
123,125c123
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN const char *mode
123,125c123
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE char *mode
123,125c123
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * *mode
123,125c123
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_APImode
123,126c123
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API();
123,126c123
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen;
123,128c123
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (BZ2_bzflush) (
124,128c124
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       BZ2_bzflush) (
124,128c124
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       const ) (
124,128c124
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       const char (
124,129c124
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
---
>       const char *);
124,129c124
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
---
>       const char *path;
125,131c125
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       #define BZ_VERSION  "1.0.2, 30-Dec-2001"
125,131c125
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       const define BZ_VERSION  "1.0.2, 30-Dec-2001"
125,131c125
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       const char BZ_VERSION  "1.0.2, 30-Dec-2001"
125,131c125
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       const char *"1.0.2, 30-Dec-2001"
126,133c126
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
>    typedef char            Char;
126,133c126
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
>    )char            Char;
128,133c128
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> Char;
128,133c128
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> (;
128,134c128
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> (BZ2_bzflushtypedef unsigned char   Bool;
128,134c128
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> (BZ2_bzflush) unsigned char   Bool;
129,134c129
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
>       char   Bool;
129,134c129
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
>       )Bool;
131,134c131
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> ;
131,135c131
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #typedef unsigned char   UChar;
131,135c131
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define unsigned char   UChar;
131,135c131
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define BZ_VERSION  char   UChar;
133,135c133
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> UChar;
133,135c133
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef ;
133,136c133
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            typedef int             Int32;
133,136c133
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            Charint             Int32;
134,136c134
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> Int32;
134,136c134
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef ;
134,137c134
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned typedef unsigned int    UInt32;
134,137c134
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   unsigned int    UInt32;
134,137c134
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   Boolint    UInt32;
135,137c135
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> UInt32;
135,137c135
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef ;
135,138c135
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned typedef short           Int16;
135,138c135
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   short           Int16;
135,138c135
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   UCharInt16;
136,138c136
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> ;
136,139c136
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef typedef unsigned short  UInt16;
136,139c136
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             unsigned short  UInt16;
136,139c136
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             Int32short  UInt16;
137,139c137
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> UInt16;
137,139c137
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef ;
137,141c137
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned #define True  ((Bool)1)
137,141c137
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    define True  ((Bool)1)
137,141c137
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    UInt32True  ((Bool)1)
138,141c138
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> ((Bool)1)
138,141c138
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef (Bool)1)
138,141c138
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           Bool)1)
138,141c138
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           Int16)1)
139,141c139
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> 1)
139,141c139
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef )
139,142c139
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned #define False ((Bool)0)
139,142c139
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  define False ((Bool)0)
139,142c139
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  UInt16False ((Bool)0)
141,142c141
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> ((Bool)0)
141,142c141
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #(Bool)0)
141,142c141
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define Bool)0)
141,142c141
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  )0)
141,142c141
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  (0)
141,142c141
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  (()
141,144c141
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool#define __inline__  
141,144c141
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool)define __inline__  
141,144c141
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool)1__inline__  
142,145d141
< #define False ((Bool)0)
< 
< #define __inline__  
< 
(94.1 %, 12097 bytes)
141,145c141
< #define True  (0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  (;
141,146c141
< #define True  (0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> #define True  (0#define AssertH(cond,errcode) \
143,146c143
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> define AssertH(cond,errcode) \
143,146c143
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> #AssertH(cond,errcode) \
143,146c143
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> #define (cond,errcode) \
145,146c145
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> cond,errcode) \
145,146c145
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> extern ,errcode) \
145,146c145
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> extern void errcode) \
145,146c145
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> extern void BZ2_bz__AssertH__fail ) \
145,146c145
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
---
> extern void BZ2_bz__AssertH__fail ( \
145,148c145
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
---
> extern void BZ2_bz__AssertH__fail ( int #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
145,148c145
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
---
> extern void BZ2_bz__AssertH__fail ( int errcode define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
145,148c145
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
---
> extern void BZ2_bz__AssertH__fail ( int errcode )AssertDstderrzfza3za4define BZ_HDR_0 0x30   
146,148c146
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
---
> BZ_HDR_0 0x30   
146,148c146
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
---
> #0x30   
146,152c146
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define #define BZ_MAX_ALPHA_SIZE 258
146,152c146
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define AssertHdefine BZ_MAX_ALPHA_SIZE 258
146,152c146
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define AssertH(BZ_MAX_ALPHA_SIZE 258
146,152c146
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define AssertH(cond258
146,153c146
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
---
> #define AssertH(cond,#define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
146,153c146
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
---
> #define AssertH(cond,errcodedefine BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
146,153c146
< #define AssertH(cond,errcode) \
<    
< #define AssertDstderrzfza3za4define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
---
> #define AssertH(cond,errcode) BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
(94.1 %, 12017 bytes)
146,155c146
< #define AssertHdefine BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define AssertHdefine #define BZ_RAND_DECLS                          \
146,155c146
< #define AssertHdefine BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define AssertHdefine BZ_MAX_ALPHA_SIZE define BZ_RAND_DECLS                          \
147,155c147
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> BZ_RAND_DECLS                          \
147,155c147
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #\
147,156c147
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define Int32 rNToGo;                               \
147,156c147
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_CODE_LEN    rNToGo;                               \
147,156c147
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_CODE_LEN    + ;                               \
147,156c147
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_CODE_LEN    + (\
147,157c147
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_CODE_LEN    + (900000 Int32 rTPos                                 \
147,157c147
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_CODE_LEN    + (900000 / rTPos                                 \
147,157c147
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE\
147,159c147
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
---
> #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE)#\
155,159c155
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
---
> \
155,161c155
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
---
> ##define BZ_RAND_MASK define BZ_M_IDLE      1
155,161c155
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
---
> #define define BZ_RAND_MASK define BZ_M_IDLE      1
155,161c155
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
---
> #define BZ_RAND_DECLS                          BZ_RAND_MASK define BZ_M_IDLE      1
156,161c156
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
---
>    define BZ_M_IDLE      1
156,161c156
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
---
>    Int32 BZ_M_IDLE      1
156,161c156
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
---
>    Int32 rNToGo1
156,162c156
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
>    Int32 rNToGo;                               #define BZ_M_RUNNING   2
157,162c157
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
>    define BZ_M_RUNNING   2
157,162c157
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
>    Int32 BZ_M_RUNNING   2
157,162c157
<    Int32 rTPos                                 \
< 
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
>    Int32 rTPos                                 2
159,162d158
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
159,162d158
< #\
< 
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
161,163c161
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> BZ_M_FLUSHING  3
161,163c161
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #3
161,164c161
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define #define BZ_M_FINISHING 4
161,164c161
< #define BZ_RAND_MASK define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define BZ_RAND_MASK define BZ_M_FINISHING 4
(94.2 %, 11886 bytes)
157,160d156
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
157,160d156
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
157,160d156
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
157,161c157
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define BZ_M_RUNNING   1
158,161d157
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
(94.2 %, 11810 bytes)
157,161c157
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_M_RUNNING   12
158,161d157
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
158,161d157
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
158,161d157
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
158,162c158
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_S_INPUT     18
160,162d159
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
160,162d159
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
160,162d159
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
160,163c160
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_RADIX (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
161,163c161
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
161,163c161
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #+ BZ_N_QSORT + BZ_N_SHELL + 2)
161,163c161
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT + BZ_N_SHELL + 2)
161,163c161
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT + BZ_N_SHELL + 2)
162,163c162
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> BZ_N_SHELL + 2)
162,163c162
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #+ 2)
162,163c162
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define 2)
162,163c162
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL )
163,169d162
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
163,171c163
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #struct {
163,171c163
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define {
163,173c163
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT bz_stream* strm;
163,173c163
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (* strm;
163,173c163
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX strm;
163,173c163
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + ;
163,177c163
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT Int32    mode;
163,177c163
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + mode;
163,177c163
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL ;
163,178c163
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + Int32    state;
163,178c163
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2state;
170,178c170
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> ;
171,181c171
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
>    UInt32   avail_in_expect;
171,181c171
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
>    struct avail_in_expect;
173,181c173
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
>       ;
173,184c173
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       bz_streamUInt32*  arr1;
173,184c173
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       bz_stream* *  arr1;
173,184c173
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       bz_stream* strmarr1;
177,184c177
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       ;
177,185c177
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       Int32    UInt32*  arr2;
177,185c177
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       Int32    mode*  arr2;
178,185c178
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       arr2;
178,185c178
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       Int32    ;
178,186c178
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    stateUInt32*  ftab;
181,186c181
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       *  ftab;
181,186c181
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32   ftab;
182,186d181
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
184,186d183
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
184,187c184
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32origPtr;
184,187c184
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  ;
184,190c184
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       UInt32*  arr1UInt32*  ptr;
185,190c185
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       *  ptr;
185,190c185
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       UInt32ptr;
185,190c185
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
---
>       UInt32*  ;
185,191c185
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32*  arr2UChar*   block;
186,191c186
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       *   block;
186,191c186
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32block;
186,191c186
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32*  ;
186,192c186
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32*  ftabUInt16*  mtfv;
187,192c187
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       *  mtfv;
187,192c187
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       Int32    mtfv;
188,192d187
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
190,192d189
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
190,193c190
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32*   zbits;
190,193c190
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32*  zbits;
191,193d190
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
191,195d190
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
191,197c191
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
---
>       UCharInt32    nblockMAX;
191,197c191
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
---
>       UChar*   nblockMAX;
192,197d191
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
192,197d191
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
192,198c192
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       UInt16numZ;
192,198c192
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       UInt16*  ;
192,199c192
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       UInt16*  mtfvInt32    state_out_pos;
193,199c193
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       state_out_pos;
193,199c193
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       UChar;
193,202c193
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
---
>       UChar*   Int32    nInUse;
193,202c193
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
---
>       UChar*   zbitsnInUse;
197,202d196
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
197,202d196
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
197,203c197
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    inUse[256];
197,203c197
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    nblockMAX[256];
198,203c198
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       256];
198,203c198
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    ];
199,203d198
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
199,203d198
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
199,204c199
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    unseqToSeq[256];
199,204c199
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    state_out_pos[256];
202,204c202
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       256];
202,204c202
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
---
>       Int32    ];
203,204d202
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
203,206d202
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
203,207c203
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
---
>       Bool     bsBuff;
203,207c203
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
---
>       Bool     inUse;
203,208c203
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       Bool     inUse[Int32    bsLive;
203,208c203
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       Bool     inUse[256bsLive;
204,208d203
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
204,210d203
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
(94.3 %, 11724 bytes)
204,211d203
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
206,211d205
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
206,212c206
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    ;
---
>       UInt32   ;
206,214c206
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    ;
< 
<    }
---
>       UInt32   blockCRC}
207,215c207
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
---
>       EState;
207,215c207
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
---
>       UInt32   ;
209,224d208
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
210,225c210
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
>       ;
210,235c210
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    #define BZ_X_IDLE        1
210,235c210
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    verbositydefine BZ_X_IDLE        1
211,235c211
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       BZ_X_IDLE        1
211,235c211
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    1
211,236c211
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    blockNo#define BZ_X_OUTPUT      2
212,236c212
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       define BZ_X_OUTPUT      2
212,236c212
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    BZ_X_OUTPUT      2
214,236c214
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>    2
215,238c215
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    #define BZ_X_MAGIC_1     10
215,238c215
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    EStatedefine BZ_X_MAGIC_1     10
223,238c223
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
> BZ_X_MAGIC_1     10
225,238c225
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
> 10
235,238d234
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
235,238d234
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
(94.3 %, 11641 bytes)
235,242c235
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> MTFA_SIZE 4096
235,242c235
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #4096
235,243c235
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define #define MTFL_SIZE 16
235,243c235
< #define define define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
---
> #define define define MTFL_SIZE 16
(94.4 %, 11549 bytes)
235,248c235
< #4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #Int32    state;
236,248c236
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> state;
236,248c236
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #;
236,251c236
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #define UChar    state_out_ch;
236,251c236
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> #define MTFL_SIZE state_out_ch;
242,251c242
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
---
> ;
243,252c243
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
>    Int32    state_out_len;
243,252c243
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
>    struct state_out_len;
245,252c245
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
---
>       ;
245,253c245
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>       bz_streamBool     blockRandomised;
245,253c245
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
---
>       bz_stream* blockRandomised;
(94.4 %, 11437 bytes)
245,253d244
<       ;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
246,254c246
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    tt;
---
>       tt;
246,254c246
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    tt;
---
>       Bool     ;
246,257c246
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
---
>       Bool     blockRandomisedUInt16   *ll16;
247,257c247
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
---
>       *ll16;
247,257c247
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
---
>       BZ_RAND_DECLSll16;
250,257c250
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
---
>       ;
250,258c250
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       UInt32   UChar    *ll4;
250,258c250
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       UInt32   bsBuff*ll4;
251,258c251
<       Int32    bsLive;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       ll4;
251,258c251
<       Int32    bsLive;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    ;
251,261c251
<       Int32    bsLive;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
---
>       Int32    bsLiveUInt32   storedBlockCRC;
254,261c254
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
---
>       storedBlockCRC;
254,261c254
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
---
>       Int32    ;
254,262c254
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       Int32    ttUInt32   storedCombinedCRC;
257,262c257
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       storedCombinedCRC;
257,262c257
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       UInt16   ;
257,263c257
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
---
>       UInt16   *UInt32   calculatedBlockCRC;
257,263c257
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
---
>       UInt16   *ll16calculatedBlockCRC;
258,263c258
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
---
>       ;
258,264c258
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       UChar    UInt32   calculatedCombinedCRC;
258,264c258
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       UChar    *calculatedCombinedCRC;
259,264d258
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
261,264d260
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
261,265c261
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
---
>       UInt32   seqToUnseq[256];
261,265c261
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
---
>       UInt32   storedBlockCRC[256];
262,265c262
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
---
>       256];
262,265c262
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
---
>       UInt32   ];
263,265d262
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
263,267d262
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
< 
<       
263,269c263
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
< 
<       
<       ; 
<       ;
---
>       UInt32   ;
263,270c263
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
< 
<       
<       ; 
<       ;
<       Int32*   save_gBase;
---
>       UInt32   calculatedBlockCRCInt32*   save_gBase;
264,270c264
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
< 
<       
<       ; 
<       ;
<       Int32*   save_gBase;
---
>       *   save_gBase;
264,270c264
<       UInt32   calculatedCombinedCRC;
<       UChar    seqToUnseq[256];
< 
<       
<       ; 
<       ;
<       Int32*   save_gBase;
---
>       UInt32   save_gBase;
265,270d264
<       UChar    seqToUnseq[256];
< 
<       
<       ; 
<       ;
<       Int32*   save_gBase;
265,270d264
<       UChar    seqToUnseq[256];
< 
<       
<       ; 
<       ;
<       Int32*   save_gBase;
(94.5 %, 11353 bytes)
264,274c264
<       UInt32   calculatedCombinedCRC;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       UInt32   calculatedCombinedCRCdefine bsNEEDW(nz)                           \
265,274c265
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       bsNEEDW(nz)                           \
265,274c265
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       Int32(nz)                           \
265,274c265
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       Int32*   nz)                           \
265,274c265
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>       Int32*   save_gPerm)                           \
267,274c267
<    }
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
---
>    \
268,295c268
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>    static
268,296c268
<    DState;
< 
< 
< 
< 
< 
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
>    DStatevoid makeMaps_e ( EState* s )
274,296c274
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> makeMaps_e ( EState* s )
274,296c274
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> #( EState* s )
274,296c274
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> #define EState* s )
274,296c274
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> #define tPosc_tPos * s )
274,296c274
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> #define tPosc_tPos #s )
274,296c274
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
---
> #define tPosc_tPos #define )
274,297c274
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
---
> #define tPosc_tPos #define bsNEEDW{
274,298c274
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
---
> #define tPosc_tPos #define bsNEEDW(Int32 i;
274,298c274
< #define tPosc_tPos #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
---
> #define tPosc_tPos #define bsNEEDW(nzi;
(94.5 %, 11254 bytes)
274,277c274
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> nInUse = 0;
274,277c274
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> makeMaps_e = 0;
274,277c274
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> makeMaps_e ( 0;
274,277c274
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
---
> makeMaps_e ( EState;
274,278c274
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    if (s->inUse[i]) 
---
> makeMaps_e ( EState* if (s->inUse[i]) 
274,278c274
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    if (s->inUse[i]) 
---
> makeMaps_e ( EState* s (s->inUse[i]) 
275,278c275
< {
<    Int32 i;
<    s->nInUse = 0;
<    if (s->inUse[i]) 
---
> s->inUse[i]) 
276,278c276
<    Int32 i;
<    s->nInUse = 0;
<    if (s->inUse[i]) 
---
>    ->inUse[i]) 
276,278c276
<    Int32 i;
<    s->nInUse = 0;
<    if (s->inUse[i]) 
---
>    Int32 inUse[i]) 
276,278c276
<    Int32 i;
<    s->nInUse = 0;
<    if (s->inUse[i]) 
---
>    Int32 i[i]) 
277,278c277
<    s->nInUse = 0;
<    if (s->inUse[i]) 
---
>    i]) 
277,278c277
<    s->nInUse = 0;
<    if (s->inUse[i]) 
---
>    s]) 
277,278c277
<    s->nInUse = 0;
<    if (s->inUse[i]) 
---
>    s->) 
277,279c277
<    s->nInUse = 0;
<    if (s->inUse[i]) 
<          ;
---
>    s->nInUse ;
277,281c277
<    s->nInUse = 0;
<    if (s->inUse[i]) 
<          ;
<       
< }
---
>    s->nInUse = }
277,285c277
<    s->nInUse = 0;
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
---
>    s->nInUse = 0static
278,286c278
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    void generateMTFValues ( EState* s )
278,286c278
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    if generateMTFValues ( EState* s )
278,286c278
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    if (( EState* s )
278,286c278
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    if (sEState* s )
278,286c278
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    if (s->* s )
278,286c278
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    if (s->inUses )
278,286c278
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    if (s->inUse[)
278,287c278
<    if (s->inUse[i]) 
<          ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
---
>    if (s->inUse[i{
(94.5 %, 11219 bytes)
277,286c277
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
>    s->nInUse yy[256];
279,286c279
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> [256];
283,286c283
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> 256];
284,286c284
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> ];
284,286c284
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> void ;
284,287c284
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues Int32   i, j;
284,287c284
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues ( i, j;
284,287c284
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues ( EState, j;
284,287c284
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues ( EState* j;
284,287c284
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues ( EState* s ;
285,288c285
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
---
> Int32   zPend;
286,288c286
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
---
>    zPend;
286,288c286
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
---
>    UChar   ;
286,289c286
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    UChar   yyInt32   wr;
286,289c286
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    UChar   yy[wr;
286,289c286
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    UChar   yy[256;
286,290c286
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    UChar   yy[256]Int32   EOB;
287,290c287
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    EOB;
287,290c287
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   ;
287,293c287
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   iUInt32* ptr   = s->ptr;
287,293c287
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i, * ptr   = s->ptr;
287,293c287
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   i, jptr   = s->ptr;
288,293c288
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    = s->ptr;
288,293c288
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   s->ptr;
288,293c288
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   zPend->ptr;
289,293c289
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    ptr;
289,293c289
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
---
>    Int32   ;
289,294c289
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  ;
---
>    Int32   wrUChar* block  ;
290,294c290
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  ;
---
>    * block  ;
290,294c290
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  ;
---
>    Int32   block  ;
291,294d290
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  ;
293,294d292
<    UInt32* ptr   = s->ptr;
<    UChar* block  ;
(94.6 %, 11168 bytes)
290,294c290
<    Int32   EOB;
<    EOB = s->nInUse+1;
< 
<    0;
<    yy[i] = (UChar) i;
---
>    Int32   EOB[i] = (UChar) i;
291,294c291
<    EOB = s->nInUse+1;
< 
<    0;
<    yy[i] = (UChar) i;
---
>    i] = (UChar) i;
291,294c291
<    EOB = s->nInUse+1;
< 
<    0;
<    yy[i] = (UChar) i;
---
>    EOB ] = (UChar) i;
291,294c291
<    EOB = s->nInUse+1;
< 
<    0;
<    yy[i] = (UChar) i;
---
>    EOB = = (UChar) i;
291,294c291
<    EOB = s->nInUse+1;
< 
<    0;
<    yy[i] = (UChar) i;
---
>    EOB = s(UChar) i;
291,294c291
<    EOB = s->nInUse+1;
< 
<    0;
<    yy[i] = (UChar) i;
---
>    EOB = s->UChar) i;
291,294c291
<    EOB = s->nInUse+1;
< 
<    0;
<    yy[i] = (UChar) i;
---
>    EOB = s->nInUse) i;
291,294c291
<    EOB = s->nInUse+1;
< 
<    0;
<    yy[i] = (UChar) i;
---
>    EOB = s->nInUse+i;
293,295d292
<    0;
<    yy[i] = (UChar) i;
< 
(94.6 %, 11139 bytes)
291,295c291
<    EOB = s->nInUse+i;
< 
<    {
<       UChar ll_i;
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>    EOB = s->nInUse+, "generateMTFValues(2a)" );
291,295c291
<    EOB = s->nInUse+i;
< 
<    {
<       UChar ll_i;
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>    EOB = s->nInUse+i"generateMTFValues(2a)" );
293,295c293
<    {
<       UChar ll_i;
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>    );
294,295c294
<       UChar ll_i;
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
---
>       ;
294,297c294
<       UChar ll_i;
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
---
>       UChar if (0) 
294,297c294
<       UChar ll_i;
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
---
>       UChar ll_i(0) 
295,297c295
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
---
>       0) 
295,297c295
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
---
>       ( ) 
295,298c295
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
<          {
---
>       ( ll_i {
295,299c295
<       ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (0) 
<          {
<             register ;
---
>       ( ll_i < register ;
(94.6 %, 11076 bytes)
294,305c294
<       ;
< 
<       if (0) 
<          {
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
---
>       }
296,309c296
<       if (0) 
<          {
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
---
>       ;
296,311c296
<       if (0) 
<          {
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlllstatic
---
>       if #define GET_BITSlllstatic
296,311c296
<       if (0) 
<          {
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlllstatic
---
>       if (define GET_BITSlllstatic
296,311c296
<       if (0) 
<          {
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlllstatic
---
>       if (0GET_BITSlllstatic
297,312c297
<          {
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlllstatic
< void* default_bzalloc ( void* opaque)
---
>          void* default_bzalloc ( void* opaque)
298,312c298
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlllstatic
< void* default_bzalloc ( void* opaque)
---
>             * default_bzalloc ( void* opaque)
298,312c298
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlllstatic
< void* default_bzalloc ( void* opaque)
---
>             register default_bzalloc ( void* opaque)
299,312c299
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlllstatic
< void* default_bzalloc ( void* opaque)
---
>             ( void* opaque)
299,312c299
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlllstatic
< void* default_bzalloc ( void* opaque)
---
>             jvoid* opaque)
300,312c300
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlllstatic
< void* default_bzalloc ( void* opaque)
---
>          * opaque)
303,312c303
<    }
< 
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlllstatic
< void* default_bzalloc ( void* opaque)
---
>    opaque)
305,312c305
<    }
< 
< 
< 
< ;
< 
< #define GET_BITSlllstatic
< void* default_bzalloc ( void* opaque)
---
>    )
311,314d310
< #define GET_BITSlllstatic
< void* default_bzalloc ( void* opaque)
< ;
< 
311,316d310
< #define GET_BITSlllstatic
< void* default_bzalloc ( void* opaque)
< ;
< 
< 
< 
(94.6 %, 11009 bytes)
309,319c309
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> strm, 
313,319c313
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> , 
314,320c314
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int        blockSize100k,
314,320c314
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> void blockSize100k,
318,320c318
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> ,
318,321c318
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int int        verbosity,
318,321c318
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_APIverbosity,
318,321c318
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_API(,
318,322c318
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int BZ_API(BZ2_bzCompressInitint        workFactor )
319,322c319
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     workFactor )
319,322c319
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( )
319,323c319
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
---
>                     ( bz_stream{
319,324c319
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* Int32   n;
319,324c319
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* strmn;
320,324c320
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                      ;
320,325c320
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        EState* s;
320,325c320
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        blockSize100k* s;
321,325c321
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      s;
321,325c321
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        ;
321,326c321
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    ;
---
>                      int        verbosity;
322,327c322
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
---
>                      NULL;
322,327c322
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
---
>                      int        ;
322,328c322
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>                      int        workFactor s->arr2 = NULL;
323,328c323
< {
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
> ->arr2 = NULL;
324,328c324
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    arr2 = NULL;
324,328c324
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    Int32   = NULL;
324,328c324
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    Int32   nNULL;
325d324
<    EState* s;
327,328d325
<    NULL;
<    s->arr2 = NULL;
325,329c325
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EStatesBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
325,329c325
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EState* ( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
325,329c325
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EState* s(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
326,329c326
<    ;
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
327,329c327
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    +BZ_N_OVERSHOOT) * sizeof(UInt32) );
327,329c327
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    NULLBZ_N_OVERSHOOT) * sizeof(UInt32) );
328,329c328
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ) * sizeof(UInt32) );
328,329c328
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s* sizeof(UInt32) );
328,329c328
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->sizeof(UInt32) );
328,329c328
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 (UInt32) );
328,329c328
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = UInt32) );
328,329c328
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = NULL) );
329c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    );
329c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC;
329,330c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
---
>    sBZALLOCBZALLOC( ;
329,332c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
329,332c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n(s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
329,332c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
329,332c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
329,332c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
329,332c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * == NULL || s->arr2 == NULL || s->ftab == NULL) 
329,332c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeofNULL || s->arr2 == NULL || s->ftab == NULL) 
329,332c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(|| s->arr2 == NULL || s->ftab == NULL) 
329,332c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32s->arr2 == NULL || s->ftab == NULL) 
329,332c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ->arr2 == NULL || s->ftab == NULL) 
329,332c329
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) )arr2 == NULL || s->ftab == NULL) 
330,332c330
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    == NULL || s->ftab == NULL) 
332c332
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    NULL || s->ftab == NULL) 
332c332
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if || s->ftab == NULL) 
332c332
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->ftab == NULL) 
332c332
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->ftab == NULL) 
332c332
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->ftab == NULL) 
(94.6 %, 10971 bytes)
332,335c332
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->state             = BZ_S_INPUT;
332,335c332
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->state             = BZ_S_INPUT;
332,335c332
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->state             = BZ_S_INPUT;
332,335c332
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->ftab = BZ_S_INPUT;
332,335c332
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->ftab == BZ_S_INPUT;
332,335c332
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->ftab == NULL;
334,335d333
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
334,335d333
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
(94.7 %, 10904 bytes)
334,335c334
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
---
>    block             = (UChar)s->arr1;
334,335c334
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
---
>    s= (UChar)s->arr1;
334,335c334
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
---
>    s->(UChar)s->arr1;
334,335c334
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
---
>    s->mode              UChar)s->arr1;
334,335c334
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
---
>    s->mode              = )s->arr1;
334,335c334
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
---
>    s->mode              = BZ_M_RUNNINGs->arr1;
335c335
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
---
>    ->arr1;
335c335
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
---
>    sarr1;
335c335
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
---
>    s->;
335,336c335
<    s->combinedCRC       = s->block             = (UChar)s->arr1;
<    s->zbits             = NULL;
---
>    s->combinedCRC       s->zbits             = NULL;
(94.7 %, 10821 bytes)
334,335c334
<    s= (UChar)s->arr1;
<    s->zbits             = NULL;
---
>    sNULL;
334,335c334
<    s= (UChar)s->arr1;
<    s->zbits             = NULL;
---
>    s= ;
334,336c334
<    s= (UChar)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s= (s->ptr               = (UInt32*)s->arr1;
334,336c334
<    s= (UChar)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s= (UChar->ptr               = (UInt32*)s->arr1;
334,336c334
<    s= (UChar)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s= (UChar)ptr               = (UInt32*)s->arr1;
334,336c334
<    s= (UChar)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s= (UChar)s= (UInt32*)s->arr1;
334,336c334
<    s= (UChar)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s= (UChar)s->(UInt32*)s->arr1;
334,336c334
<    s= (UChar)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s= (UChar)s->arr1UInt32*)s->arr1;
335,336c335
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    *)s->arr1;
335,336c335
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s)s->arr1;
335,336c335
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->s->arr1;
335,336c335
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->zbits             ->arr1;
335,336c335
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->zbits             = arr1;
336d335
<    s->ptr               = (UInt32*)s->arr1;
336,337d335
<    s->ptr               = (UInt32*)s->arr1;
< 
(94.7 %, 10777 bytes)
335,351c335
<    s->zbits             = NULL;
< 
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
---
>    s->zbits             = NULL)
337,352c337
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
---
>    ;
337,356c337
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    strmint BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
337,356c337
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    strm->BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
337,356c337
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    strm->state          (BZ2_bzCompress) ( bz_stream *strm, int action )
338,356c338
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    BZ2_bzCompress) ( bz_stream *strm, int action )
338,356c338
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return ) ( bz_stream *strm, int action )
338,356c338
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return BZ_OK( bz_stream *strm, int action )
339,356c339
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> bz_stream *strm, int action )
351,356c351
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> *strm, int action )
351,356c351
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #strm, int action )
351,356c351
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define , int action )
351,356c351
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCKint action )
352,356c352
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> action )
356c356
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> )
356,357c356
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
---
> int {
356,359c356
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_APIEState* s;
356,359c356
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(* s;
356,359c356
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompresss;
356,359c356
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompress) ;
356,360c356
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( if (NULL) BZFREE(s->ftab);
356,360c356
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( bz_stream (NULL) BZFREE(s->ftab);
356,360c356
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *NULL) BZFREE(s->ftab);
356,360c356
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm) BZFREE(s->ftab);
356,360c356
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, BZFREE(s->ftab);
356,360c356
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int (s->ftab);
356,360c356
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action s->ftab);
357,360c357
< {
<    
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
> ->ftab);
359,360c359
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
>    ftab);
359,360c359
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
>    EState);
359,360c359
<    EState* s;
<    if (NULL) BZFREE(s->ftab);
---
>    EState* ;
360,361d359
<    if (NULL) BZFREE(s->ftab);
<    ;
360,362c360
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
---
>    }
360,370c360
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    if int BZ_API(BZ2_bzDecompressInit) 
360,370c360
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    if (BZ_API(BZ2_bzDecompressInit) 
360,370c360
<    if (NULL) BZFREE(s->ftab);
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    if (NULL(BZ2_bzDecompressInit) 
(94.8 %, 10742 bytes)
359,370c359
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>    EState* sint        verbosity,
360,370c360
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> verbosity,
368,370c368
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> ,
368,371c368
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int int        small )
368,371c368
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_APIsmall )
368,371c368
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API()
368,372c368
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
---
> int BZ_API(BZ2_bzDecompressInit{
369,373c369
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      DState* s;
369,373c369
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( * s;
369,373c369
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_streams;
369,373c369
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_stream* ;
369,375c369
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
---
>                      ( bz_stream* strms->bsBuff                = 0;
370,375c370
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
---
>                        ->bsBuff                = 0;
370,375c370
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
---
>                        int        bsBuff                = 0;
370,375c370
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
---
>                        int        verbosity= 0;
371,375c371
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
---
>                        0;
371,375c371
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
---
>                        int        ;
371,376c371
<                        int        small )
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>                        int        small s->calculatedCombinedCRC = 0;
372,376c372
< {
<    DState* s;
< 
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
> ->calculatedCombinedCRC = 0;
373,376c373
<    DState* s;
< 
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    calculatedCombinedCRC = 0;
373,376c373
<    DState* s;
< 
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    DState= 0;
373,376c373
<    DState* s;
< 
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    DState* 0;
374,376d373
< 
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
375,376d374
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
(94.8 %, 10675 bytes)
374,375d373
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
374,375d373
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
(94.8 %, 10609 bytes)
374,375d373
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
374,375d373
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
374,376c374
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    strm->ll16                  = NULL;
374,376c374
<    strm->total_out_lo32     = small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    strm->ll16                  = NULL;
(94.9 %, 10536 bytes)
374,375d373
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
374,376c374
<    s->ll16                  = NULL;
<    s->tt                    = BZ_OK;
< }
---
>    }
(94.9 %, 10463 bytes)
373,383c373
<    DState* s;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    DState* s*strm )
374,383c374
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> strm )
378,383c378
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> )
379,383d378
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
379,385c379
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> void DState* s;
383,385c383
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> * s;
383,385c383
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> int s;
383,385c383
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> int BZ_API;
383,386c383
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(if (s == NULL) ;
383,386c383
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(BZ2_bzDecompress(s == NULL) ;
383,386c383
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(BZ2_bzDecompress) s == NULL) ;
383,386c383
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(BZ2_bzDecompress) ( == NULL) ;
383,386c383
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream NULL) ;
383,386c383
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream *) ;
383,386c383
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream *strm ;
384,387c384
< {
<    DState* s;
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
> BZFREE(s->ll4);
385,387c385
<    DState* s;
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    (s->ll4);
385,387c385
<    DState* s;
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    DStates->ll4);
385,387c385
<    DState* s;
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    DState* ->ll4);
385,387c385
<    DState* s;
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    DState* sll4);
386,387c386
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    );
386,387c386
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    if ;
386,389c386
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
---
>    if (;
386,390c386
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
< }
---
>    if (s }
386,397c386
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    if (s == #define BZ_SETERR(eee)                    \
386,397c386
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    if (s == NULLdefine BZ_SETERR(eee)                    \
386,397c386
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    if (s == NULL) BZ_SETERR(eee)                    \
387,397c387
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    (eee)                    \
387,397c387
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREEeee)                    \
387,397c387
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE()                    \
387,397c387
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(s\
387,400c387
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
---
>    BZFREE(s->typedef 
387,401c387
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
>    BZFREE(s->ll4struct {
387,401c387
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
>    BZFREE(s->ll4){
389,402c389
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    FILE*     handle;
390,402c390
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> *     handle;
397,402c397
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> handle;
397,402c397
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #;
397,403c397
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define Char      buf[BZ_MAX_UNUSED];
397,403c397
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERRbuf[BZ_MAX_UNUSED];
397,403c397
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR([BZ_MAX_UNUSED];
397,403c397
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eeeBZ_MAX_UNUSED];
397,403c397
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eee)                    ];
400,403c400
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> ;
401,404c401
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    Int32     bufN;
401,404c401
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    struct bufN;
402,404c402
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       ;
402,405c402
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILEBool      writing;
402,405c402
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILE*     writing;
403,405d402
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
403,405d402
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
403,406c403
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      strm;
403,406c403
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      buf;
403,407c403
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf[Int32     lastErr;
403,407c403
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf[BZ_MAX_UNUSEDlastErr;
404,407d403
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
404,407d403
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
404,408c404
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     initialisedOk;
405,408d404
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
405,409c405
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       }
405,410c405
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      bzFile;
406,410d405
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
406,418c406
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) 
406,418c406
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream * BZ_API(BZ2_bzWriteOpen) 
406,418c406
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strmBZ_API(BZ2_bzWriteOpen) 
407,418c407
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       (BZ2_bzWriteOpen) 
407,418c407
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     BZ2_bzWriteOpen) 
407,418c407
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     lastErr) 
408,419c408
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       ( int*  bzerror,      
408,419c408
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      int*  bzerror,      
408,419c408
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      initialisedOk*  bzerror,      
409,419c409
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzerror,      
410,419c410
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    ,      
410,420c410
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFileFILE* f, 
418,420c418
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> * f, 
418,420c418
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILEf, 
418,420c418
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* , 
418,421c418
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_APIint   blockSize100k, 
418,421c418
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(blockSize100k, 
418,421c418
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen, 
419,422c419
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     int   verbosity,
419,422c419
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( verbosity,
419,422c419
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int,
419,423c419
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  int   workFactor )
419,423c419
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerrorworkFactor )
420,423c420
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       )
420,424c420
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       FILE{
420,425c420
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* Int32   ret;
420,425c420
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* fret;
421,425c421
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       ;
421,426c421
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   bzFile* bzf = NULL;
421,426c421
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   blockSize100k* bzf = NULL;
422,426c422
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       bzf = NULL;
422,426c422
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   = NULL;
422,426c422
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   verbosityNULL;
423,426c423
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       ;
423,428c423
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   BZ_SETERR(BZ_OK);
423,428c423
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   workFactor (BZ_OK);
424,428c424
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
> BZ_OK);
425,428c425
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    );
425,428c425
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    Int32   ;
425,430c425
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    Int32   retif (f == NULL ||
426,430c426
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    (f == NULL ||
426,430c426
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFilef == NULL ||
426,430c426
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* == NULL ||
426,430c426
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf NULL ||
426,430c426
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf = ||
426,431c426
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    bzFile* bzf = NULL(blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
428,431c428
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
428,431c428
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR< 1 || blockSize100k > 90 || verbosity > 4))
428,431c428
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(1 || blockSize100k > 90 || verbosity > 4))
428,431c428
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(BZ_OK|| blockSize100k > 90 || verbosity > 4))
428,431c428
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(BZ_OK)blockSize100k > 90 || verbosity > 4))
430,431c430
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    > 90 || verbosity > 4))
430,431c430
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if 90 || verbosity > 4))
430,431c430
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (|| verbosity > 4))
430,431c430
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f verbosity > 4))
430,431c430
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f == > 4))
430,431c430
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f == NULL 4))
431c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        ))
431c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        ()
431,432c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
431,432c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < ->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
431,432c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
431,432c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
431,432c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
431,432c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > ( &(bzf->strm), blockSize100k, 
431,432c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > 90 &(bzf->strm), blockSize100k, 
431,432c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > 90 || (bzf->strm), blockSize100k, 
431,432c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity bzf->strm), blockSize100k, 
431,432c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > ->strm), blockSize100k, 
431,432c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4strm), blockSize100k, 
431,432c431
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4)), blockSize100k, 
432c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>       , blockSize100k, 
432c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>       bzfblockSize100k, 
432c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>       bzf->, 
432,433c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        verbosity, workFactor );
432,433c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        = , workFactor );
432,433c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        = fBZ2_bzCompressInit workFactor );
432,433c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        = fBZ2_bzCompressInit ( );
432,433c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>       bzf->handle        = fBZ2_bzCompressInit ( &;
432,434c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->initialisedOk = True;
432,434c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->initialisedOk = True;
432,434c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->initialisedOk = True;
432,434c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm= True;
432,434c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm)True;
432,434c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), ;
432,435c432
<       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    bzf->initialisedOk = True;
<    return bzf;   
---
>       bzf->handle        = fBZ2_bzCompressInit ( &(bzf->strm), blockSize100kreturn bzf;   
(94.9 %, 10381 bytes)
432,440c432
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzf->handle        = fBZ2_bzCompressInit ( void BZ_API(BZ2_bzWrite)
432,440c432
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzf->handle        = fBZ2_bzCompressInit ( )BZ_API(BZ2_bzWrite)
433,440c433
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    (BZ2_bzWrite)
433,440c433
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzfBZ2_bzWrite)
433,440c433
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzf->)
433,441c433
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk ( int*    bzerror, 
433,441c433
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk = int*    bzerror, 
433,441c433
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk = True*    bzerror, 
434,441c434
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzerror, 
434,441c434
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    return , 
434,442c434
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    return bzfBZFILE* b, 
435,442c435
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> * b, 
440,442c440
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> b, 
440,442c440
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void , 
440,443c440
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_APIvoid*   buf, 
440,443c440
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(*   buf, 
440,443c440
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(BZ2_bzWritebuf, 
441,443c441
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              , 
441,444c441
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int     len )
441,444c441
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( intlen )
441,444c441
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    )
441,445c441
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
---
>              ( int*    bzerror{
442,446c442
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                Int32   ret;
442,446c442
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                BZFILEret;
442,446c442
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                BZFILE* ;
442,447c442
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* bbzFile* bzf = (bzFile*)b;
443,447c443
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                * bzf = (bzFile*)b;
443,447c443
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                voidbzf = (bzFile*)b;
443,447c443
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   = (bzFile*)b;
443,447c443
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   buf(bzFile*)b;
444,447c444
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                bzFile*)b;
444,447c444
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     *)b;
444,447c444
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     len )b;
445,447c445
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
> b;
446,447c446
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    ;
446,449c446
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
---
>    Int32   BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
446,449c446
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
---
>    Int32   ret(ferror(bzf->handle)strm.avail_in == 0)
(95.0 %, 10341 bytes)
446,448c446
<    ;
< 
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
---
>    == 0)
448c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
---
>    0)
448c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
---
>    BZ_SETERR)
448,449c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
---
>    BZ_SETERR(;
448,451c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
---
>    BZ_SETERR(ferror}
448,455c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(void BZ_API(BZ2_bzWriteClose)
448,455c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(bzfBZ_API(BZ2_bzWriteClose)
448,455c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(bzf->(BZ2_bzWriteClose)
448,455c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(bzf->handleBZ2_bzWriteClose)
448,455c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(bzf->handle))
448,456c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(ferror(bzf->handle)strm( int*          bzerror, 
448,456c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(ferror(bzf->handle)strm.int*          bzerror, 
448,456c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(ferror(bzf->handle)strm.avail_in *          bzerror, 
448,456c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(ferror(bzf->handle)strm.avail_in == bzerror, 
448,456c448
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0, 
449,457c449
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>          BZFILE*       b, 
451,457c451
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
455,457c455
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
455,457c455
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void , 
455,458c455
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIint           abandon,
455,458c455
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(abandon,
455,458c455
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(BZ2_bzWriteClose,
456,459c456
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   unsigned int* nbytes_in,
456,459c456
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int* nbytes_in,
456,459c456
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int* nbytes_in,
456,459c456
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          nbytes_in,
456,459c456
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerror,
457,459d456
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
457,460c457
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILEint* nbytes_out )
457,460c457
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       * nbytes_out )
457,460c457
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       bnbytes_out )
458,460c458
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     )
458,461c458
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     int           {
458,462c458
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     int           abandonBZ2_bzWriteClose64 ;
459,462c459
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     ;
459,463c459
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
---
>                     unsigned }
459,466c459
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned intvoid BZ_API(BZ2_bzWriteClose64)
459,466c459
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* BZ_API(BZ2_bzWriteClose64)
459,466c459
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* nbytes_in(BZ2_bzWriteClose64)
460,466c460
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     BZ2_bzWriteClose64)
460,466c460
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned )
460,467c460
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int( int*          bzerror, 
460,467c460
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* int*          bzerror, 
460,467c460
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_out *          bzerror, 
461,467c461
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> bzerror, 
462,467c462
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>    , 
462,468c462
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    BZ2_bzWriteClose64 BZFILE*       b, 
463,468c463
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
466,468c466
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
466,468c466
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void , 
466,469c466
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIint           abandon,
466,469c466
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(abandon,
466,469c466
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(BZ2_bzWriteClose64,
467,470c467
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   unsigned int* nbytes_in_lo32,
467,470c467
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int* nbytes_in_lo32,
467,470c467
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int* nbytes_in_lo32,
467,470c467
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          nbytes_in_lo32,
467,470c467
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerror,
468,470d467
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
468,471c468
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILEint* nbytes_in_hi32,
468,471c468
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       * nbytes_in_hi32,
468,471c468
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       bnbytes_in_hi32,
469,471c469
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     ,
469,472c469
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           unsigned int* nbytes_out_lo32,
469,472c469
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           abandonint* nbytes_out_lo32,
470,472c470
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     * nbytes_out_lo32,
470,472c470
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned nbytes_out_lo32,
470,472c470
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int,
470,473c470
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* unsigned int* nbytes_out_hi32 )
470,473c470
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32int* nbytes_out_hi32 )
471,473c471
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     * nbytes_out_hi32 )
471,473c471
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned nbytes_out_hi32 )
471,473c471
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int)
471,474c471
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int* {
471,476c471
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* nbytes_in_hi32bzFile* bzf = ((bzf->writing))
472,476c472
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     * bzf = ((bzf->writing))
472,476c472
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned bzf = ((bzf->writing))
472,476c472
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int= ((bzf->writing))
472,476c472
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* ((bzf->writing))
472,476c472
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* nbytes_out_lo32(bzf->writing))
473,476c473
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     bzf->writing))
473,476c473
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned ->writing))
473,476c473
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned intwriting))
473,476c473
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf->writing))
---
>                     unsigned int* ))
474,476d473
< {
<    
<    bzFile* bzf = ((bzf->writing))
474,477c474
< {
<    
<    bzFile* bzf = ((bzf->writing))
<       ;
---
> ;
476,477d475
<    bzFile* bzf = ((bzf->writing))
<       ;
476,478c476
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile(ferror(bzf->handle))
476,478c476
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* ferror(bzf->handle))
476,478c476
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf (bzf->handle))
476,478c476
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = bzf->handle))
476,478c476
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = (->handle))
476,478c476
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ((handle))
476,478c476
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ((bzf))
476,478c476
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ((bzf->)
476,479c476
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
---
>    bzFile* bzf = ((bzf->writing;
476,481c476
<    bzFile* bzf = ((bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
---
>    bzFile* bzf = ((bzf->writing)(BZ_OK);
477,481c477
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
---
>       BZ_OK);
478,481c478
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
---
>    );
478,481c478
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
---
>    if ;
478,482c478
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
<    0;
---
>    if (0;
478,482c478
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
<    0;
---
>    if (ferror;
478,483c478
<    if (ferror(bzf->handle))
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
---
>    if (ferror(0;
(95.0 %, 10296 bytes)
476,486c476
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    bzFile* bzf = ((bzfBZFILE* BZ_API(BZ2_bzReadOpen) 
476,486c476
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    bzFile* bzf = ((bzf)* BZ_API(BZ2_bzReadOpen) 
477,486c477
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>       BZ_API(BZ2_bzReadOpen) 
479,486c479
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    (BZ2_bzReadOpen) 
479,486c479
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    (BZ2_bzReadOpen) 
479,486c479
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    (BZ_OK) 
479,487c479
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    (BZ_OK)( int*  bzerror, 
480,487c480
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    int*  bzerror, 
480,487c480
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    0*  bzerror, 
481,487c481
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    bzerror, 
481,487c481
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    0, 
482,488c482
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> FILE* f, 
486,488c486
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> * f, 
486,488c486
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILEf, 
486,488c486
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* , 
486,489c486
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_APIint   verbosity,
486,489c486
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(verbosity,
486,489c486
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzReadOpen,
487,490c487
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    int   small,
487,490c487
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( small,
487,490c487
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int,
487,491c487
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  void* unused,
487,491c487
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  bzerror* unused,
488,491c488
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      unused,
488,491c488
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE,
488,492c488
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* int   nUnused )
488,492c488
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* fnUnused )
489,492c489
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      )
489,493c489
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      int   {
489,494c489
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   verbositybzFile* bzf = NULL;
490,494c490
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      * bzf = NULL;
490,494c490
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   bzf = NULL;
490,494c490
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   small= NULL;
491,494c491
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      NULL;
491,494c491
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      void;
491,495c491
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* int     ret;
491,495c491
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* unusedret;
492,495c492
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      ;
492,497c492
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   BZ_SETERR(BZ_OK);
492,497c492
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   nUnused (BZ_OK);
493,497c493
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
> BZ_OK);
494,497c494
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    );
494,497c494
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile;
494,499c494
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* if (f == NULL || 
494,499c494
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf (f == NULL || 
494,499c494
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = f == NULL || 
494,499c494
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = NULL== NULL || 
495,499c495
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    NULL || 
495,499c495
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    int     || 
495,500c495
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    int     ret(small != 0 && small != 1) ||
497,500c497
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    small != 0 && small != 1) ||
497,500c497
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR!= 0 && small != 1) ||
497,500c497
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(0 && small != 1) ||
497,500c497
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OK&& small != 1) ||
497,500c497
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OK)small != 1) ||
499,500c499
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    != 1) ||
499,500c499
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if 1) ||
499,500c499
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if () ||
499,500c499
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if (f ||
499,501c499
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == (verbosity < 0 || verbosity > 4) ||
(95.0 %, 10250 bytes)
499,501c499
<    if (f ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>    if (f unused == NULL && nUnused != 0) ||
500,501c500
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        == NULL && nUnused != 0) ||
500,501c500
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (NULL && nUnused != 0) ||
500,501c500
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity && nUnused != 0) ||
(95.0 %, 10197 bytes)
500,501c500
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
500,501c500
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
500,501c500
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && < 0 || nUnused > BZ_MAX_UNUSED)))
500,501c500
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && nUnused 0 || nUnused > BZ_MAX_UNUSED)))
500,501c500
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && nUnused != || nUnused > BZ_MAX_UNUSED)))
500,501c500
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && nUnused != 0nUnused > BZ_MAX_UNUSED)))
500,501c500
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && nUnused != 0) > BZ_MAX_UNUSED)))
501c501
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        BZ_MAX_UNUSED)))
501c501
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ()))
501c501
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused ))
(95.0 %, 10146 bytes)
500,501c500
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        (->bufN;
500,501c500
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        ((bufN;
500,501c500
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        ((nUnused ;
500,502c500
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
---
>        ((nUnused < ;
500,503c500
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
---
>        ((nUnused < 0 return bzf;   
500,503c500
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
---
>        ((nUnused < 0 || bzf;   
500,503c500
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
---
>        ((nUnused < 0 || nUnused ;   
500,504c500
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
< }
---
>        ((nUnused < 0 || nUnused > }
500,508c500
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSEDvoid BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
500,508c500
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
500,508c500
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED))(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
501,508c501
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
501,508c501
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf) ( int *bzerror, BZFILE *b )
501,508c501
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf->( int *bzerror, BZFILE *b )
501,508c501
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf->bufNint *bzerror, BZFILE *b )
502,508c502
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    *bzerror, BZFILE *b )
503,508c503
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzerror, BZFILE *b )
503,508c503
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return , BZFILE *b )
503,508c503
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return bzfBZFILE *b )
504,508c504
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> *b )
508c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> b )
508c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void )
508,509c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
---
> void BZ_API{
508,510c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(bzFile* bzf = (bzFile*)0;
508,510c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose* bzf = (bzFile*)0;
508,510c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) bzf = (bzFile*)0;
508,510c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( = (bzFile*)0;
508,510c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int (bzFile*)0;
508,510c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzFile*)0;
508,510c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror*)0;
508,510c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, )0;
508,510c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE 0;
508,510c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *;
508,511c508
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)0;
<    0;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b 0;
509,511c509
< {
<    bzFile* bzf = (bzFile*)0;
<    0;
---
> ;
510,512c510
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
---
>    }
510,516c510
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFileint BZ_API(BZ2_bzRead) 
510,516c510
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* BZ_API(BZ2_bzRead) 
510,516c510
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf (BZ2_bzRead) 
510,516c510
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = BZ2_bzRead) 
510,516c510
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = () 
510,517c510
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile( int*    bzerror, 
510,517c510
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*int*    bzerror, 
510,517c510
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)*    bzerror, 
510,517c510
<    bzFile* bzf = (bzFile*)0;
<    0;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)0bzerror, 
(95.1 %, 10114 bytes)
510,516c510
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    * b, 
514,516c514
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> b, 
514,516c514
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int , 
514,517c514
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_APIvoid*   buf, 
514,517c514
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(*   buf, 
514,517c514
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(BZ2_bzReadbuf, 
515,517c515
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            , 
515,518c515
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int     len )
515,518c515
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( intlen )
515,518c515
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    )
515,519c515
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>            ( int*    bzerror{
516,521c516
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
---
>              buf;
516,521c516
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
---
>              BZFILE;
516,523c516
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              BZFILE* while (True) 
516,523c516
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              BZFILE* b(True) 
517,523c517
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              True) 
517,523c517
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              void) 
517,525c517
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
---
>              void*   return 0; 
517,525c517
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
---
>              void*   buf0; 
518,525c518
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
---
>              ; 
518,526c518
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
>              int     }
518,530c518
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>              int     len void BZ_API(BZ2_bzReadGetUnused) 
519,530c519
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
> BZ_API(BZ2_bzReadGetUnused) 
521,530c521
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    (BZ2_bzReadGetUnused) 
521,530c521
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bufBZ2_bzReadGetUnused) 
523,530c523
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    ) 
523,531c523
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while ( int*    bzerror, 
523,531c523
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (int*    bzerror, 
523,531c523
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (True*    bzerror, 
525,531c525
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzerror, 
525,531c525
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    return , 
525,532c525
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    return 0BZFILE* b, 
526,532c526
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> * b, 
530,532c530
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> b, 
530,532c530
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void , 
530,533c530
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_APIvoid**  unused, 
530,533c530
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(**  unused, 
530,533c530
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnused*  unused, 
531,533c531
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      unused, 
531,533c531
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( , 
531,534c531
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( intint*    nUnused )
531,534c531
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    *    nUnused )
531,534c531
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerrornUnused )
532,534c532
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        )
532,535c532
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        BZFILE{
532,536c532
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        BZFILE* nUnused ;
532,536c532
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        BZFILE* b;
533,537c533
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
---
>                        }
533,545c533
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        voidint BZ_API(BZ2_bzBuffToBuffCompress) 
533,545c533
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void*BZ_API(BZ2_bzBuffToBuffCompress) 
533,545c533
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  (BZ2_bzBuffToBuffCompress) 
533,545c533
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  unusedBZ2_bzBuffToBuffCompress) 
534,545c534
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        ) 
534,546c534
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int( char*         dest, 
534,546c534
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    char*         dest, 
534,546c534
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    nUnused *         dest, 
535,546c535
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> dest, 
536,546c536
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    , 
536,547c536
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>    nUnused unsigned int* destLen,
537,547c537
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int* destLen,
545,547c545
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> * destLen,
545,547c545
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int destLen,
545,547c545
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API,
545,548c545
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(char*         source, 
545,548c545
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffCompress*         source, 
546,548c546
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          source, 
546,548c546
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( , 
546,549c546
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( charunsigned int  sourceLen,
546,549c546
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         int  sourceLen,
546,549c546
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         destsourceLen,
547,549c547
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            ,
547,550c547
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int           blockSize100k, 
547,550c547
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned intblockSize100k, 
547,550c547
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* , 
547,551c547
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* destLenint           verbosity, 
548,551c548
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            verbosity, 
548,551c548
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char, 
548,552c548
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         int           workFactor )
548,552c548
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         sourceworkFactor )
549,552c549
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            )
549,553c549
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            unsigned {
549,554c549
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  bz_stream strm;
549,554c549
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  sourceLenstrm;
550,554c550
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            ;
550,555c550
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           int ret;
550,555c550
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           blockSize100kret;
551,555c551
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            ;
551,557c551
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           if (dest == NULL || destLen == NULL || 
551,557c551
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           verbosity(dest == NULL || destLen == NULL || 
552,557c552
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            dest == NULL || destLen == NULL || 
552,557c552
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           == NULL || destLen == NULL || 
552,557c552
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           workFactor NULL || destLen == NULL || 
553,557c553
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> || destLen == NULL || 
554,557c554
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    destLen == NULL || 
554,557c554
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream == NULL || 
554,557c554
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream strmNULL || 
555,557c555
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    || 
555,558c555
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int source == NULL ||
555,558c555
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int ret== NULL ||
557,558c557
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    NULL ||
557,558c557
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    if ||
557,559c557
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (blockSize100k < 1 || blockSize100k > 9 ||
557,559c557
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest < 1 || blockSize100k > 9 ||
557,559c557
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == 1 || blockSize100k > 9 ||
(95.1 %, 10046 bytes)
557,558c557
<    if (blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>    if (verbosity > workFactor == 0) ;
557,558c557
<    if (blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > workFactor == 0) ;
---
>    if (blockSize100k > workFactor == 0) ;
(95.1 %, 9980 bytes)
557,561c557
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
---
>    if (;
557,562c557
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
---
>    if (verbosity }
557,566c557
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > int BZ_API(BZ2_bzBuffToBuffDecompress) 
557,566c557
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > workFactor BZ_API(BZ2_bzBuffToBuffDecompress) 
557,566c557
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > workFactor == (BZ2_bzBuffToBuffDecompress) 
557,566c557
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > workFactor == 0BZ2_bzBuffToBuffDecompress) 
557,566c557
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > workFactor == 0) ) 
558,567c558
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    ( char*         dest, 
560,567c560
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    char*         dest, 
560,567c560
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    0*         dest, 
561,567c561
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    dest, 
561,567c561
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return , 
561,568c561
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    return retunsigned int* destLen,
562,568c562
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int* destLen,
566,568c566
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> * destLen,
566,568c566
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int destLen,
566,568c566
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API,
566,569c566
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(char*         source, 
566,569c566
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompress*         source, 
567,569c567
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            source, 
567,569c567
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( , 
567,570c567
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( charunsigned int  sourceLen,
567,570c567
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         int  sourceLen,
567,570c567
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         destsourceLen,
568,570c568
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              ,
568,571c568
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int           small,
568,571c568
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned intsmall,
568,571c568
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* ,
568,572c568
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* destLenint           verbosity )
569,572c569
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              verbosity )
569,572c569
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char)
569,573c569
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
---
>                              char*         {
569,574c569
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              char*         sourcebz_stream strm;
570,574c570
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              strm;
570,574c570
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              unsigned ;
570,575c570
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  int ret;
570,575c570
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  sourceLenret;
571,575c571
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              ;
571,577c571
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           if (dest == NULL || destLen == NULL || 
571,577c571
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           small(dest == NULL || destLen == NULL || 
572,577c572
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              dest == NULL || destLen == NULL || 
572,577c572
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           == NULL || destLen == NULL || 
572,577c572
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           verbosity NULL || destLen == NULL || 
573,577c573
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> || destLen == NULL || 
574,577c574
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    destLen == NULL || 
574,577c574
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream == NULL || 
574,577c574
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream strmNULL || 
575,577c575
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    || 
575,578c575
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int source == NULL ||
575,578c575
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int ret== NULL ||
577,578c577
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    NULL ||
577,578c577
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    if ||
577,579c577
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if ((small != 0 && small != 1) ||
577,579c577
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest small != 0 && small != 1) ||
577,579c577
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == != 0 && small != 1) ||
577,579c577
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL 0 && small != 1) ||
577,579c577
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || && small != 1) ||
577,579c577
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen small != 1) ||
577,579c577
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == != 1) ||
577,579c577
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == NULL 1) ||
578,579c578
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>        ) ||
578,579c578
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>        source ||
(95.2 %, 9912 bytes)
577,578c577
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if (0 || verbosity > 4) 
577,578c577
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((|| verbosity > 4) 
577,578c577
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((small verbosity > 4) 
577,578c577
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((small != > 4) 
577,578c577
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((small != 0 4) 
577,578c577
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((small != 0 && ) 
577,579c577
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           ;
---
>    if ((small != 0 && small ;
577,581c577
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           ;
< 
<    ret ;
---
>    if ((small != 0 && small != ret ;
577,581c577
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           ;
< 
<    ret ;
---
>    if ((small != 0 && small != 1;
577,582c577
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
---
>    if ((small != 0 && small != 1) }
578,587c578
<        verbosity < 0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
---
>        static
(95.2 %, 9863 bytes)
577,587c577
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    if (* bzopen_or_bzdopen
577,587c577
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    if (0 bzopen_or_bzdopen
577,588c577
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
>    if (0 || ( )      
577,588c577
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
>    if (0 || verbosity )      
577,589c577
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
---
>    if (0 || verbosity > ;
577,594c577
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    if (0 || verbosity > 4BZFILE * BZ_API(BZ2_bzopen)
578,594c578
<           ;
< 
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>           * BZ_API(BZ2_bzopen)
580,594c580
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    BZ_API(BZ2_bzopen)
580,594c580
<    ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    ret (BZ2_bzopen)
581,594c581
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZ2_bzopen)
586,594c586
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> )
587,595c587
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> ( const char *path,
587,595c587
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE const char *path,
587,595c587
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * char *path,
588,595c588
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                *path,
588,595c588
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                ( path,
589,595c589
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> ,
594,596c594
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> const char *mode )
594,596c594
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE char *mode )
594,596c594
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * *mode )
594,596c594
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_APImode )
594,596c594
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API()
594,597c594
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
---
> BZFILE * BZ_API(BZ2_bzopen{
595,598c595
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                return 0;
595,598c595
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( 0;
595,598c595
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( const ;
595,599c595
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
---
>                ( const char }
595,603c595
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *BZFILE * BZ_API(BZ2_bzdopen)
595,603c595
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *path* BZ_API(BZ2_bzdopen)
596,603c596
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  BZ_API(BZ2_bzdopen)
596,603c596
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const (BZ2_bzdopen)
596,603c596
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char BZ2_bzdopen)
596,603c596
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char *)
596,604c596
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char *mode ( int fd,
597,604c597
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> int fd,
598,604c598
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    fd,
598,604c598
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    return ,
598,605c598
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    return 0const char *mode )
599,605c599
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> char *mode )
603,605c603
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> *mode )
603,605c603
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE mode )
603,605c603
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * )
603,606c603
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
---
> BZFILE * BZ_API{
603,607c603
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(return bzopen_or_bzdopen(NULL,fd,mode,1);
603,607c603
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(BZ2_bzdopenbzopen_or_bzdopen(NULL,fd,mode,1);
604,607c604
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                (NULL,fd,mode,1);
604,607c604
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( NULL,fd,mode,1);
604,607c604
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int ,fd,mode,1);
604,607c604
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int fdfd,mode,1);
605,607c605
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  ,mode,1);
605,607c605
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const mode,1);
605,607c605
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char ,1);
605,607c605
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *1);
605,607c605
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *mode );
606,607c606
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> ;
607,608c607
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
>    }
607,612c607
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
607,612c607
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopenBZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
607,612c607
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen((BZ2_bzread) (BZFILE* b, void* buf, int len )
607,612c607
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULLBZ2_bzread) (BZFILE* b, void* buf, int len )
607,612c607
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,) (BZFILE* b, void* buf, int len )
607,612c607
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd(BZFILE* b, void* buf, int len )
607,612c607
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,BZFILE* b, void* buf, int len )
607,612c607
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode* b, void* buf, int len )
607,612c607
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,b, void* buf, int len )
(95.2 %, 9821 bytes)
607,611c607
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    * buf, int len )
611c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> buf, int len )
611c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int , int len )
611c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIint len )
611c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(len )
611c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread)
611,612c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzread) {
611,613c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    ;
---
> int BZ_API(BZ2_bzread) (;
611,615c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    ;
<    
< }
---
> int BZ_API(BZ2_bzread) (BZFILE}
611,619c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
611,619c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* bBZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
611,619c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* b, (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
611,619c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* b, voidBZ2_bzwrite) (BZFILE* b, void* buf, int len )
611,619c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* ) (BZFILE* b, void* buf, int len )
611,619c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf(BZFILE* b, void* buf, int len )
611,619c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, BZFILE* b, void* buf, int len )
611,619c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int * b, void* buf, int len )
611,619c611
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len b, void* buf, int len )
612,619c612
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> , void* buf, int len )
613,619c613
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    void* buf, int len )
615,619c615
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> * buf, int len )
619c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> buf, int len )
619c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int , int len )
619c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIint len )
619c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(len )
619c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite)
619,620c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzwrite) {
619,621c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerrhandle;
---
> int BZ_API(BZ2_bzwrite) (int bzerrhandle;
619,621c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerrhandle;
---
> int BZ_API(BZ2_bzwrite) (BZFILEbzerrhandle;
619,621c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerrhandle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* ;
619,623c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerrhandle;
<    
<    if (b==NULL!= BZ_OK)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* bif (b==NULL!= BZ_OK)
619,623c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerrhandle;
<    
<    if (b==NULL!= BZ_OK)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, (b==NULL!= BZ_OK)
619,623c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerrhandle;
<    
<    if (b==NULL!= BZ_OK)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, voidb==NULL!= BZ_OK)
619,623c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerrhandle;
<    
<    if (b==NULL!= BZ_OK)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* ==NULL!= BZ_OK)
619,623c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerrhandle;
<    
<    if (b==NULL!= BZ_OK)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* bufNULL!= BZ_OK)
619,623c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerrhandle;
<    
<    if (b==NULL!= BZ_OK)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, != BZ_OK)
619,623c619
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerrhandle;
<    
<    if (b==NULL!= BZ_OK)
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int BZ_OK)
620,623d619
< {
<    int bzerrhandle;
<    
<    if (b==NULL!= BZ_OK)
620,624c620
< {
<    int bzerrhandle;
<    
<    if (b==NULL!= BZ_OK)
<          ;
---
> ;
621,626c621
<    int bzerrhandle;
<    
<    if (b==NULL!= BZ_OK)
<          ;
<    
< }
---
>    }
621,631c621
<    int bzerrhandle;
<    
<    if (b==NULL!= BZ_OK)
<          ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    int static char *bzerrorstrings[] = {
621,631c621
<    int bzerrhandle;
<    
<    if (b==NULL!= BZ_OK)
<          ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    int bzerrhandlechar *bzerrorstrings[] = {
623,631c623
<    if (b==NULL!= BZ_OK)
<          ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    *bzerrorstrings[] = {
623,631c623
<    if (b==NULL!= BZ_OK)
<          ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if bzerrorstrings[] = {
623,631c623
<    if (b==NULL!= BZ_OK)
<          ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if ([] = {
623,631c623
<    if (b==NULL!= BZ_OK)
<          ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b] = {
623,631c623
<    if (b==NULL!= BZ_OK)
<          ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b=== {
623,631c623
<    if (b==NULL!= BZ_OK)
<          ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b==NULL{
623,632c623
<    if (b==NULL!= BZ_OK)
<          ;
<    
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
---
>    if (b==NULL!= "OK"
(95.2 %, 9761 bytes)
621,631c621
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>    const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
626,631c626
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
626,631c626
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
626,631c626
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
626,631c626
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *(BZ2_bzerror) (BZFILE *b, int *errnum)
626,631c626
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstringsBZ2_bzerror) (BZFILE *b, int *errnum)
626,631c626
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[) (BZFILE *b, int *errnum)
626,631c626
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] (BZFILE *b, int *errnum)
626,631c626
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] = BZFILE *b, int *errnum)
627,631c627
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>        *b, int *errnum)
628,631c628
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       b, int *errnum)
628,631c628
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       }, int *errnum)
631c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> int *errnum)
631c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const *errnum)
631c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char errnum)
631c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * )
631,632c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
---
> const char * BZ_API{
631,633c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(int err = ((bzFile *)b)->lastErr;
631,633c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerrorerr = ((bzFile *)b)->lastErr;
631,633c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) = ((bzFile *)b)->lastErr;
631,633c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (((bzFile *)b)->lastErr;
631,633c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE (bzFile *)b)->lastErr;
631,633c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *bzFile *)b)->lastErr;
631,633c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b*)b)->lastErr;
631,633c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, )b)->lastErr;
631,633c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int b)->lastErr;
631,633c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *)->lastErr;
631,633c631
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum->lastErr;
632,633c632
< {
<    int err = ((bzFile *)b)->lastErr;
---
> lastErr;
633c633
<    int err = ((bzFile *)b)->lastErr;
---
>    ;
633,634c633
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int return bzerrorstrings[err*-1];
633,634c633
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err bzerrorstrings[err*-1];
633,634c633
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = [err*-1];
633,634c633
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = (err*-1];
633,634c633
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((*-1];
633,634c633
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile -1];
633,634c633
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *1];
633,634c633
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *)];
633,634c633
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *)b;
633,635c633
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
---
>    int err = ((bzFile *)b)}
633,664c633
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ERROR_IF_NOT_ZERO(i)  
---
>    int err = ((bzFile *)b)->#define ERROR_IF_NOT_ZERO(i)  
633,664c633
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ERROR_IF_NOT_ZERO(i)  
---
>    int err = ((bzFile *)b)->lastErrdefine ERROR_IF_NOT_ZERO(i)  
634,664c634
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ERROR_IF_NOT_ZERO(i)  
---
>    ERROR_IF_NOT_ZERO(i)  
634,664c634
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ERROR_IF_NOT_ZERO(i)  
---
>    return (i)  
634,664c634
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ERROR_IF_NOT_ZERO(i)  
---
>    return bzerrorstringsi)  
634,664c634
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ERROR_IF_NOT_ZERO(i)  
---
>    return bzerrorstrings[)  
634,665c634
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
>    return bzerrorstrings[err#define ERROR_IF_MINUS_ONE(i) 
634,665c634
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
>    return bzerrorstrings[err*define ERROR_IF_MINUS_ONE(i) 
634,665c634
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
>    return bzerrorstrings[err*-ERROR_IF_MINUS_ONE(i) 
634,665c634
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
>    return bzerrorstrings[err*-1(i) 
634,665c634
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
>    return bzerrorstrings[err*-1]i) 
635,665c635
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> ) 
664,670d663
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
664,670d663
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
(95.3 %, 9694 bytes)
664,669c664
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
---
> NORETURN 
664,671c664
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
---
> ##endif 
664,671c664
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
---
> #if endif 
665,677d664
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
667,678c667
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
---
> define True  
\ No newline at end of file
667,678c667
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
---
> #   True  
\ No newline at end of file
667,678c667
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
---
> #   define 
\ No newline at end of file
667,678c667
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
---
> #   define SET_BINARY_MODE
\ No newline at end of file
667,678c667
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
---
> #   define SET_BINARY_MODE(
\ No newline at end of file
667,678c667
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
---
> #   define SET_BINARY_MODE(fd
\ No newline at end of file
669,678d668
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
669,678c669
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
---
> #      
\ No newline at end of file
669,678c669
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
---
> #      define 
\ No newline at end of file
671,678d670
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
671,678c671
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  
\ No newline at end of file
---
> #
\ No newline at end of file
678d677
< #define True  
\ No newline at end of file
678c678
< #define True  
\ No newline at end of file
---
> #
\ No newline at end of file
678c678
< #define True  
\ No newline at end of file
---
> #define 
\ No newline at end of file
(95.3 %, 9680 bytes)
===< pass_clex :: rm-toks-11 >===
9,10d8
< #define BZ_OK                0
< #define BZ_RUN_OK            (-8)
9,10d8
< #define BZ_OK                0
< #define BZ_RUN_OK            (-8)
9,10d8
< #define BZ_OK                0
< #define BZ_RUN_OK            (-8)
9,11c9
< #define BZ_OK                0
< #define BZ_RUN_OK            (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OK                (-9)
10,11c10
< #define BZ_RUN_OK            (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> -9)
10,11c10
< #define BZ_RUN_OK            (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #9)
10,11c10
< #define BZ_RUN_OK            (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define )
10,13c10
< #define BZ_RUN_OK            (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #define BZ_RUN_OK            typedef 
10,14c10
< #define BZ_RUN_OK            (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_RUN_OK            (struct {
10,14c10
< #define BZ_RUN_OK            (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_RUN_OK            (-{
10,15c10
< #define BZ_RUN_OK            (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_RUN_OK            (-8char *next_in;
11,15c11
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> *next_in;
(95.3 %, 9615 bytes)
9,14c9
< #define BZ_OK                (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_OK                unsigned int avail_in;
9,14c9
< #define BZ_OK                (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_OK                (int avail_in;
9,14c9
< #define BZ_OK                (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_OK                (-avail_in;
9,14c9
< #define BZ_OK                (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_OK                (-9;
11,15c11
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> unsigned int total_in_lo32;
12,15c12
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    int total_in_lo32;
12,15c12
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    struct total_in_lo32;
13,15c13
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>       ;
13,16c13
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char unsigned int total_in_hi32;
13,16c13
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char *int total_in_hi32;
13,16c13
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char *next_intotal_in_hi32;
(95.3 %, 9539 bytes)
13,17c13
<       ;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       avail_out;
14,17c14
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       ;
14,18c14
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned unsigned int total_out_lo32;
14,18c14
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int int total_out_lo32;
14,18c14
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int total_in_hi32total_out_lo32;
(95.4 %, 9460 bytes)
14,18c14
<       ;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       state;
15,18c15
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       ;
15,20c15
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       unsigned void *(*bzalloc)(void *,int,void *);
15,20c15
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       unsigned int *(*bzalloc)(void *,int,void *);
15,20c15
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       unsigned int total_out_lo32(*bzalloc)(void *,int,void *);
16,20c16
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       *bzalloc)(void *,int,void *);
16,20c16
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       unsigned bzalloc)(void *,int,void *);
16,20c16
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       unsigned int )(void *,int,void *);
16,20c16
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       unsigned int total_out_hi32(void *,int,void *);
18,20c18
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void *,int,void *);
18,20c18
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void *,int,void *);
18,20c18
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void *,int,void *);
18,20c18
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void *stateint,void *);
20c20
<       void *(*bzalloc)(void *,int,void *);
---
>       ,void *);
20c20
<       void *(*bzalloc)(void *,int,void *);
---
>       void void *);
20c20
<       void *(*bzalloc)(void *,int,void *);
---
>       void **);
20c20
<       void *(*bzalloc)(void *,int,void *);
---
>       void *();
20c20
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*;
20,21c20
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
---
>       void *(*bzallocvoid *opaque;
20,21c20
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
---
>       void *(*bzalloc)*opaque;
20,21c20
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
---
>       void *(*bzalloc)(opaque;
20,21c20
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void ;
20,22c20
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
---
>       void *(*bzalloc)(void *} 
20,23c20
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *(*bzalloc)(void *,bz_stream;
20,23c20
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *(*bzalloc)(void *,int;
20,27c20
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int,#include <stdio.h>
20,27c20
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int,void include <stdio.h>
20,27c20
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int,void *<stdio.h>
20,27c20
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,int,void *)stdio.h>
21,27c21
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       .h>
21,27c21
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void h>
21,27c21
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *>
21,29c21
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *opaque#   define BZ_API(func) func
22,29c22
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
23,29c23
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    BZ_API(func) func
23,29c23
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_stream(func) func
27,29c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> func) func
27,29c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #) func
27,29c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include func
27,30c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <#   define BZ_EXTERN extern
27,30c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdiodefine BZ_EXTERN extern
27,30c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.BZ_EXTERN extern
27,30c27
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.hextern
29,34d28
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
29,35c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> #   ;
29,41c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define #define BZ_MAX_UNUSED 5000
29,41c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define BZ_APIdefine BZ_MAX_UNUSED 5000
29,41c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define BZ_API(BZ_MAX_UNUSED 5000
29,41c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define BZ_API(func5000
29,43c29
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #   define BZ_API(func) typedef void BZFILE;
30,43c30
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> void BZFILE;
30,43c30
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #   BZFILE;
30,43c30
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #   define ;
30,45c30
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #   define BZ_EXTERN BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
35,45c35
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzReadOpen) ( 
35,45c35
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
41,45c41
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_API(BZ2_bzReadOpen) ( 
41,45c41
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #(BZ2_bzReadOpen) ( 
41,45c41
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ2_bzReadOpen) ( 
41,45c41
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED ) ( 
43,45c43
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> ( 
43,46c43
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef int*  bzerror,   
43,46c43
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void *  bzerror,   
43,46c43
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void BZFILEbzerror,   
45,46c45
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> ,   
45,47c45
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN FILE* f, 
45,47c45
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* f, 
45,47c45
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* f, 
45,47c45
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API, 
45,48c45
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(int   verbosity, 
45,48c45
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpenverbosity, 
45,48c45
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) , 
46,48d45
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
46,49c46
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       intsmall,
46,49c46
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  ,
46,50c46
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  bzerrorvoid* unused,    
47,50c47
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       * unused,    
47,50c47
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILEunused,    
47,50c47
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* ,    
47,51c47
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* fint   nUnused 
48,51c48
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       nUnused 
48,52c48
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   );
48,52c48
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   verbosity;
49,54c49
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
---
>       ;
49,56c49
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
49,56c49
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   smallvoid BZ_API(BZ2_bzReadGetUnused) ( 
50,56c50
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ_API(BZ2_bzReadGetUnused) ( 
50,56c50
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void(BZ2_bzReadGetUnused) ( 
50,56c50
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* BZ2_bzReadGetUnused) ( 
50,56c50
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* unused) ( 
51,56c51
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       ( 
51,57c51
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       int   int*    bzerror, 
52,57c52
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    *    bzerror, 
52,57c52
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    )bzerror, 
54,57c54
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> , 
56,58c56
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZFILE* b, 
56,58c56
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN * b, 
56,58c56
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void b, 
56,58c56
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API, 
56,59c56
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(void**  unused,  
56,59c56
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused**  unused,  
56,59c56
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) *  unused,  
57,59c57
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       unused,  
57,59c57
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int,  
57,60c57
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    int*    nUnused 
57,60c57
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    bzerror*    nUnused 
58,60c58
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       nUnused 
58,61c58
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE);
58,61c58
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* ;
58,63c58
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       BZFILE* bBZ_EXTERN int BZ_API(BZ2_bzReadlen 
59,63c59
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       int BZ_API(BZ2_bzReadlen 
59,63c59
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       voidBZ_API(BZ2_bzReadlen 
59,63c59
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void*(BZ2_bzReadlen 
59,63c59
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void**  BZ2_bzReadlen 
59,64c59
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       void**  unused);
60,64c60
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>       ;
60,66c60
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       intBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
60,66c60
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
61,66c61
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    * BZ_API(BZ2_bzWriteOpen) ( 
61,66c61
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZ_API(BZ2_bzWriteOpen) ( 
63,66c63
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> (BZ2_bzWriteOpen) ( 
63,66c63
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZ2_bzWriteOpen) ( 
63,66c63
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN int ) ( 
63,66c63
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN int BZ_API( 
63,67c63
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int BZ_API(int*  bzerror,      
64,67c64
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    *  bzerror,      
64,67c64
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    )bzerror,      
66,67c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> ,      
66,68c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN FILE* f, 
66,68c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* f, 
66,68c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* f, 
66,68c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API, 
66,69c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(int   blockSize100k, 
66,69c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenblockSize100k, 
66,69c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) , 
67,69d66
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
67,70c67
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       intverbosity, 
67,70c67
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  , 
67,71c67
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  bzerrorint   workFactor 
68,71c68
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       workFactor 
68,72c68
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE);
68,72c68
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* ;
68,74c68
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       FILE* fBZ_EXTERN void BZ_API(BZ2_bzWritelen 
69,74c69
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       void BZ_API(BZ2_bzWritelen 
69,74c69
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   BZ_API(BZ2_bzWritelen 
69,74c69
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   blockSize100k(BZ2_bzWritelen 
70,74c70
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       BZ2_bzWritelen 
70,75c70
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       int   );
70,75c70
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>       int   verbosity;
71,77c71
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
71,77c71
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int   void BZ_API(BZ2_bzWriteClose) ( 
72,77c72
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    BZ_API(BZ2_bzWriteClose) ( 
72,77c72
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )(BZ2_bzWriteClose) ( 
74,77c74
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ2_bzWriteClose) ( 
74,77c74
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN ) ( 
74,77c74
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void ( 
74,78c74
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_APIint*          bzerror, 
74,78c74
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(*          bzerror, 
75,78c75
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    bzerror, 
75,78c75
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    ), 
77,79c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZFILE*       b, 
77,79c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN *       b, 
77,79c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void b, 
77,79c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API, 
77,80c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(int           abandon, 
77,80c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseabandon, 
77,80c77
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) , 
78,80d77
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
78,81c78
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       intint* nbytes_in, 
78,81c78
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          * nbytes_in, 
78,81c78
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          bzerrornbytes_in, 
79,81c79
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       , 
79,82c79
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILEunsigned int* nbytes_out 
79,82c79
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       int* nbytes_out 
79,82c79
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       b* nbytes_out 
80,82c80
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       nbytes_out 
80,83c80
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       int           );
80,83c80
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       int           abandon;
81,85c81
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
81,85c81
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned void BZ_API(BZ2_bzWriteClose64) ( 
81,85c81
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ_API(BZ2_bzWriteClose64) ( 
81,85c81
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* (BZ2_bzWriteClose64) ( 
81,85c81
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_inBZ2_bzWriteClose64) ( 
82,85c82
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       ) ( 
82,85c82
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned ( 
82,86c82
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned intint*          bzerror, 
82,86c82
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* *          bzerror, 
83,86c83
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    bzerror, 
83,86c83
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    ), 
85,87c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZFILE*       b, 
85,87c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN *       b, 
85,87c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void b, 
85,87c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API, 
85,88c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(int           abandon, 
85,88c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64abandon, 
85,88c85
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) , 
86,88d85
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
86,89c86
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       intint* nbytes_in_lo32, 
86,89c86
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          * nbytes_in_lo32, 
86,89c86
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          bzerrornbytes_in_lo32, 
87,89c87
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       , 
87,90c87
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILEunsigned int* nbytes_in_hi32, 
87,90c87
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       int* nbytes_in_hi32, 
87,90c87
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       b* nbytes_in_hi32, 
88,90c88
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       nbytes_in_hi32, 
88,90c88
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           , 
88,91c88
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           abandonunsigned int* nbytes_out_lo32, 
89,91c89
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int* nbytes_out_lo32, 
89,91c89
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
89,91c89
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intnbytes_out_lo32, 
89,91c89
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* , 
89,92c89
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_lo32unsigned int* nbytes_out_hi32
90,92c90
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       int* nbytes_out_hi32
90,92c90
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
90,92c90
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intnbytes_out_hi32
90,93c90
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* );
90,93c90
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_in_hi32;
91,98c91
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
91,98c91
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int BZ_API(BZ2_bzBuffToBuffCompress) ( 
91,98c91
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ_API(BZ2_bzBuffToBuffCompress) ( 
91,98c91
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* (BZ2_bzBuffToBuffCompress) ( 
91,98c91
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32BZ2_bzBuffToBuffCompress) ( 
92,98c92
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       ) ( 
92,98c92
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned ( 
92,99c92
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned intchar*         dest, 
92,99c92
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* *         dest, 
93,99c93
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    dest, 
93,99c93
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    ), 
98,100c98
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> unsigned int* destLen,
98,100c98
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int* destLen,
98,100c98
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int * destLen,
98,100c98
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIdestLen,
98,100c98
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(,
98,101c98
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompresschar*         source, 
98,101c98
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) *         source, 
99,101c99
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       source, 
99,101c99
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char, 
99,102c99
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         unsigned int  sourceLen,
99,102c99
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destint  sourceLen,
100,102c100
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
100,102c100
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned ,
100,103c100
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned intint           blockSize100k, 
100,103c100
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* blockSize100k, 
100,103c100
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* destLen, 
101,103d100
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
101,104c101
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       charverbosity, 
101,104c101
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         , 
101,105c101
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         sourceint           workFactor 
102,105c102
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       workFactor 
102,106c102
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned );
102,106c102
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned int  ;
102,108c102
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  sourceLenBZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
103,108c103
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
103,108c103
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ_API(BZ2_bzBuffToBuffDecompress) ( 
103,108c103
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100k(BZ2_bzBuffToBuffDecompress) ( 
104,108c104
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ2_bzBuffToBuffDecompress) ( 
104,108c104
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           ) ( 
104,108c104
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosity( 
105,108d104
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
105,109c105
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           *         dest, 
106,109c106
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    dest, 
106,109c106
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    ), 
108,110c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> unsigned int* destLen,
108,110c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int* destLen,
108,110c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int * destLen,
108,110c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIdestLen,
108,110c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(,
108,111c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompresschar*         source, 
108,111c108
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) *         source, 
109,111c109
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       source, 
109,111c109
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char, 
109,112c109
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         unsigned int  sourceLen,
109,112c109
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destint  sourceLen,
110,112c110
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
110,112c110
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned ,
110,113c110
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned intint           small, 
110,113c110
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* small, 
110,113c110
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* destLen, 
111,113d110
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
111,114c111
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char);
111,114c111
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char*         ;
111,116c111
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       char*         sourceBZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
112,116c112
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       BZFILE * BZ_API(BZ2_bzopen) (
112,116c112
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned * BZ_API(BZ2_bzopen) (
112,116c112
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  BZ_API(BZ2_bzopen) (
112,116c112
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  sourceLen(BZ2_bzopen) (
113,116c113
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       BZ2_bzopen) (
113,116c113
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           ) (
113,116c113
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           small(
114,116d113
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
114,117c114
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           char *path,
114,117c114
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           )*path,
116,117c116
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> path,
116,117c116
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN ,
116,118c116
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE const char *mode
116,118c116
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * char *mode
116,118c116
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API*mode
116,118c116
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(mode
116,119c116
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen);
116,119c116
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
117,121c117
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       (BZ2_bzflush) (
117,121c117
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       const BZ2_bzflush) (
117,121c117
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       const char ) (
117,121c117
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
---
>       const char *(
117,122c117
<       const char *path,
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
---
>       const char *path);
118,122c118
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
---
>       ;
118,124c118
<       const char *mode
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       const #define BZ_VERSION  "1.0.2, 30-Dec-2001"
(95.4 %, 9404 bytes)
116,122c116
< BZ_EXTERN BZFILE * BZ_API(mode
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN BZFILE * BZ_API(BZ_VERSION  "1.0.2, 30-Dec-2001"
117,122c117
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    "1.0.2, 30-Dec-2001"
117,124c117
<    );
< 
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
>    )typedef char            Char;
119,124c119
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> char            Char;
119,124c119
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> (Char;
119,124c119
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> (BZ2_bzflush;
119,125c119
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> (BZ2_bzflush) typedef unsigned char   Bool;
120,125c120
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
>       unsigned char   Bool;
120,125c120
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
>       )char   Bool;
122,125c122
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> Bool;
122,125c122
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #;
122,126c122
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define typedef unsigned char   UChar;
122,126c122
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define BZ_VERSION  unsigned char   UChar;
124,126c124
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> char   UChar;
124,126c124
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef UChar;
124,126c124
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            ;
124,127c124
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            Chartypedef int             Int32;
125,127c125
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> int             Int32;
125,127c125
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef Int32;
125,127c125
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned ;
125,128c125
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   typedef unsigned int    UInt32;
125,128c125
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   Boolunsigned int    UInt32;
126,128c126
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> int    UInt32;
126,128c126
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef UInt32;
126,128c126
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned ;
126,129c126
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   typedef short           Int16;
126,129c126
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   UCharshort           Int16;
127,129c127
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> Int16;
127,129c127
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef ;
127,130c127
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             typedef unsigned short  UInt16;
127,130c127
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             Int32unsigned short  UInt16;
128,130c128
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> short  UInt16;
128,130c128
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef UInt16;
128,130c128
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned ;
128,132c128
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (0)
---
> typedef unsigned int    #define True  (0)
128,132c128
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (0)
---
> typedef unsigned int    UInt32define True  (0)
129,132c129
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (0)
---
> True  (0)
129,132c129
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (0)
---
> typedef (0)
129,132c129
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (0)
---
> typedef short           0)
129,132c129
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (0)
---
> typedef short           Int16)
130,133d129
< typedef unsigned short  UInt16;
< 
< #define True  (0)
< 
130,134c130
< typedef unsigned short  UInt16;
< 
< #define True  (0)
< 
< #define __inline__  
---
> typedef define __inline__  
130,134c130
< typedef unsigned short  UInt16;
< 
< #define True  (0)
< 
< #define __inline__  
---
> typedef unsigned __inline__  
130,136c130
< typedef unsigned short  UInt16;
< 
< #define True  (0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> typedef unsigned short  extern void BZ2_bz__AssertH__fail ( int errcode );
130,136c130
< typedef unsigned short  UInt16;
< 
< #define True  (0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> typedef unsigned short  UInt16void BZ2_bz__AssertH__fail ( int errcode );
132,136c132
< #define True  (0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> BZ2_bz__AssertH__fail ( int errcode );
132,136c132
< #define True  (0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #( int errcode );
132,136c132
< #define True  (0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define int errcode );
132,136c132
< #define True  (0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  errcode );
132,136c132
< #define True  (0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  ();
132,136c132
< #define True  (0)
< 
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> #define True  (0;
134,136d133
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
134,136d133
< #define __inline__  
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
(95.4 %, 9331 bytes)
134,135c134
< #define AssertHdefine BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
---
> / BZ_G_SIZE))
134,135c134
< #define AssertHdefine BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
---
> #BZ_G_SIZE))
134,135c134
< #define AssertHdefine BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
---
> #define ))
134,135c134
< #define AssertHdefine BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
---
> #define AssertHdefine )
134,143c134
< #define AssertHdefine BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define AssertHdefine BZ_MAX_ALPHA_SIZE #define BZ_RAND_DECLS                          \
135,143c135
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
135,143c135
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #BZ_RAND_DECLS                          \
135,143c135
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define \
135,144c135
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
---
> #define BZ_MAX_CODE_LEN    Int32 rNToGo1
135,144c135
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
---
> #define BZ_MAX_CODE_LEN    + rNToGo1
135,145c135
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
< #define BZ_M_RUNNING   1
---
> #define BZ_MAX_CODE_LEN    + (#define BZ_M_RUNNING   1
135,145c135
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
< #define BZ_M_RUNNING   1
---
> #define BZ_MAX_CODE_LEN    + (900000 define BZ_M_RUNNING   1
135,145c135
< #define BZ_MAX_CODE_LEN    + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
< #define BZ_M_RUNNING   1
---
> #define BZ_MAX_CODE_LEN    + (900000 / BZ_M_RUNNING   1
(95.5 %, 9260 bytes)
134,145c134
< #define AssertHdefine )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
---
> #define AssertHdefine #define BZ_S_INPUT     2
142,145c142
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
---
> define BZ_S_INPUT     2
142,145c142
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
---
> #BZ_S_INPUT     2
142,145c142
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
---
> #define 2
142,147c142
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define BZ_RAND_DECLS                          #define BZ_N_RADIX 2
143,147c143
<    Int32 rNToGo1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
>    define BZ_N_RADIX 2
143,147c143
<    Int32 rNToGo1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
>    Int32 BZ_N_RADIX 2
144,147c144
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> 2
144,148c144
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> ##define BZ_N_QSORT 12
144,148c144
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define define BZ_N_QSORT 12
144,148c144
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_M_RUNNING   BZ_N_QSORT 12
145,148c145
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> 12
145,149c145
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> ##define BZ_N_SHELL 18
145,149c145
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define define BZ_N_SHELL 18
145,149c145
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_S_INPUT     BZ_N_SHELL 18
147,149c147
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> 18
147,150c147
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> ##define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
147,150c147
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
147,150c147
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_RADIX BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
148,150c148
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
148,150c148
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
148,150c148
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define + BZ_N_QSORT + BZ_N_SHELL + 2)
148,150c148
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT BZ_N_QSORT + BZ_N_SHELL + 2)
149,150c149
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> + BZ_N_SHELL + 2)
149,150c149
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_SHELL + 2)
149,150c149
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define + 2)
149,150c149
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 2)
150c150
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> )
150,157c150
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
---
> #typedef
150,158c150
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define struct {
150,158c150
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define BZ_N_OVERSHOOT {
150,160c150
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (bz_stream* strm;
150,160c150
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX * strm;
150,160c150
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + strm;
150,160c150
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT ;
150,164c150
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + Int32    mode;
150,164c150
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL mode;
150,164c150
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + ;
150,165c150
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2Int32    state;
157,165c157
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> state;
158,165c158
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
>    ;
158,168c158
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
>    struct UInt32   avail_in_expect;
160,168c160
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
>       avail_in_expect;
160,168c160
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
---
>       bz_stream;
160,171c160
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       bz_stream* UInt32*  arr1;
160,171c160
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       bz_stream* strm*  arr1;
164,171c164
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       arr1;
164,171c164
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
---
>       Int32    ;
164,172c164
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       Int32    modeUInt32*  arr2;
165,172c165
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       *  arr2;
165,172c165
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       Int32    arr2;
166,172d165
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
168,172d167
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
(95.5 %, 9156 bytes)
160,165c160
<       bz_stream;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       bz_streamftab;
163,165c163
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       ;
163,166c163
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32Int32    origPtr;
163,166c163
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
---
>       UInt32*  origPtr;
164,166d163
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
164,168d163
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
164,168d163
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
164,168d163
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
165,169d164
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
165,169d164
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
165,170c165
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32*   block;
165,170c165
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32*  block;
166,170d165
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
166,170d165
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
(95.6 %, 9082 bytes)
165,171c165
<       UInt32*  ftab;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
---
>       UInt32*  ftabnblockMAX;
166,169d165
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
171d166
<       Int32    nblockMAX;
166,172c166
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       UInt16Int32    numZ;
166,172c166
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       UInt16*  numZ;
167,172d166
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
167,172d166
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
167,173c167
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       UCharstate_out_pos;
167,173c167
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
---
>       UChar*   ;
167,176c167
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
---
>       UChar*   zbitsInt32    nInUse;
170,176c170
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
---
>       nInUse;
171,176c171
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
---
>       ;
171,177c171
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    Bool     inUse[256];
171,177c171
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    nblockMAXinUse[256];
172,177c172
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       [256];
172,177c172
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    256];
172,177c172
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       Int32    numZ];
173,177c173
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
---
>       ;
173,180c173
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
< 
<       
<       UInt32   blockCRC;
---
>       Int32    UInt32   blockCRC;
173,180c173
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
< 
<       
<       UInt32   blockCRC;
---
>       Int32    state_out_posblockCRC;
176,180c176
<       Int32    nInUse;
<       Bool     inUse[256];
< 
<       
<       UInt32   blockCRC;
---
>       ;
176,181c176
<       Int32    nInUse;
<       Bool     inUse[256];
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       Int32    UInt32   combinedCRC;
176,181c176
<       Int32    nInUse;
<       Bool     inUse[256];
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       Int32    nInUsecombinedCRC;
177,181c177
<       Bool     inUse[256];
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
---
>       ;
177,184c177
<       Bool     inUse[256];
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       Bool     Int32    verbosity;
177,184c177
<       Bool     inUse[256];
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       Bool     inUseverbosity;
(95.6 %, 9002 bytes)
179,186d178
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
< 
180,193c180
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
>       ;
180,181d179
<       Int32    verbosity;
<       Int32    blockNo;
183,195d180
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
180,205c180
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
---
>       Int32    verbosity#4096
181,205c181
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
---
>       4096
181,206c181
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE 16
---
>       Int32    #define MTFL_SIZE 16
181,206c181
<       Int32    blockNo;
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE 16
---
>       Int32    blockNodefine MTFL_SIZE 16
182,206c182
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE 16
---
>       MTFL_SIZE 16
182,206c182
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE 16
---
>       Int32    16
184,212c184
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
---
>    typedef
185,212d184
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
185,213c185
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
>    EState{
194,215d193
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
195,216c195
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       Bool     blockRandomised;
---
> Bool     blockRandomised;
205,216c205
< #4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       Bool     blockRandomised;
---
> blockRandomised;
205,216c205
< #4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       Bool     blockRandomised;
---
> #;
206,217c206
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
---
> BZ_RAND_DECLS;
206,217c206
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
---
> #;
206,220c206
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
> #define UInt32   bsBuff;
206,220c206
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
> #define MTFL_SIZE bsBuff;
212,220c212
< typedef
<    struct {
<       
<       ;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
> ;
213,221c213
<    struct {
<       
<       ;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>    Int32    bsLive;
213,221c213
<    struct {
<       
<       ;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>    struct bsLive;
216,221d215
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
216,223d215
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
(95.7 %, 8895 bytes)
218,224d217
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
218,224d217
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
218,225c218
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
---
>       Int32    storedBlockCRC;
219,225d218
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
221,225d220
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
221,226c221
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       UInt16   storedCombinedCRC;
221,226c221
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
---
>       UInt16   *;
221,227c221
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
---
>       UInt16   *ll16UInt32   calculatedBlockCRC;
222,227c222
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
---
>       calculatedBlockCRC;
222,227c222
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
---
>       UChar    ;
222,228c222
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       UChar    *UInt32   calculatedCombinedCRC;
222,228c222
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       UChar    *ll4calculatedCombinedCRC;
225,228c225
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
---
>       ;
225,229c225
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       Int32*   save_gPerm;
---
>       UInt32   Int32*   save_gPerm;
225,229c225
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       Int32*   save_gPerm;
---
>       UInt32   storedBlockCRC*   save_gPerm;
226,229c226
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       Int32*   save_gPerm;
---
>       save_gPerm;
226,229c226
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
<       Int32*   save_gPerm;
---
>       UInt32   ;
(95.7 %, 8765 bytes)
225,235c225
<       ;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
---
>       * s )
226,235c226
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
---
>       s )
226,235c226
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
---
>       Int32)
226,236c226
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
< {
---
>       Int32*   {
226,237c226
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
< {
<    Int32 i;
---
>       Int32*   save_gPermInt32 i;
228,237c228
<    }
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
< {
<    Int32 i;
---
>    i;
229,237c229
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
< {
<    Int32 i;
---
>    ;
229,238c229
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse ;
---
>    DStates->nInUse ;
235,238c235
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse ;
---
> ->nInUse ;
235,238c235
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse ;
---
> makeMaps_e nInUse ;
235,238c235
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse ;
---
> makeMaps_e ( ;
235,240c235
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse ;
<       
< }
---
> makeMaps_e ( EState}
235,244c235
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
---
> makeMaps_e ( EState* static
235,245c235
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
> makeMaps_e ( EState* s void generateMTFValues ( EState* s )
236,245c236
< {
<    Int32 i;
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
> generateMTFValues ( EState* s )
237,245c237
<    Int32 i;
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    ( EState* s )
237,245c237
<    Int32 i;
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    Int32 EState* s )
237,245c237
<    Int32 i;
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    Int32 i* s )
238,245c238
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    s )
238,245c238
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    s)
238,246c238
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
---
>    s->{
238,247c238
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
>    s->nInUse UChar   yy[256];
240,247c240
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> yy[256];
244,247c244
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> [256];
245,247c245
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> 256];
245,247c245
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> void ];
245,247c245
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> void generateMTFValues ;
245,248c245
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues ( Int32   i, j;
245,248c245
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues ( EStatei, j;
245,248c245
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues ( EState* , j;
245,248c245
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> void generateMTFValues ( EState* s j;
246,248c246
< {
<    UChar   yy[256];
<    Int32   i, j;
---
> ;
247,248d246
<    UChar   yy[256];
<    Int32   i, j;
247,249c247
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
---
>    UChar   zPend;
247,249c247
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
---
>    UChar   yy;
247,250c247
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    UChar   yy[Int32   wr;
247,250c247
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
---
>    UChar   yy[256wr;
248,250d247
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
248,250d247
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
248,250d247
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
248,251c248
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
---
>    Int32   i;
248,252c248
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
<    EOB = s->nInUse+i;
---
>    Int32   i, EOB = s->nInUse+i;
248,252c248
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
<    EOB = s->nInUse+i;
---
>    Int32   i, j= s->nInUse+i;
249,252c249
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
<    EOB = s->nInUse+i;
---
>    s->nInUse+i;
(95.8 %, 8707 bytes)
248,253c248
<    Int32   i, j= s->nInUse+i;
< 
<    {
<       ;
< 
<       if (0) 
---
>    Int32   i, j0) 
248,253c248
<    Int32   i, j= s->nInUse+i;
< 
<    {
<       ;
< 
<       if (0) 
---
>    Int32   i, j= ) 
248,254c248
<    Int32   i, j= s->nInUse+i;
< 
<    {
<       ;
< 
<       if (0) 
<          {
---
>    Int32   i, j= s{
248,255c248
<    Int32   i, j= s->nInUse+i;
< 
<    {
<       ;
< 
<       if (0) 
<          {
<             register ;
---
>    Int32   i, j= s->register ;
248,255c248
<    Int32   i, j= s->nInUse+i;
< 
<    {
<       ;
< 
<       if (0) 
<          {
<             register ;
---
>    Int32   i, j= s->nInUse;
248,256c248
<    Int32   i, j= s->nInUse+i;
< 
<    {
<       ;
< 
<       if (0) 
<          {
<             register ;
<             j;
---
>    Int32   i, j= s->nInUse+j;
249,256d248
< 
<    {
<       ;
< 
<       if (0) 
<          {
<             register ;
<             j;
250,257c250
<    {
<       ;
< 
<       if (0) 
<          {
<             register ;
<             j;
<          }
---
>    }
251,260c251
<       ;
< 
<       if (0) 
<          {
<             register ;
<             j;
<          }
< 
<       
<    }
---
>       }
253,262c253
<       if (0) 
<          {
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
---
>       }
253,266c253
<       if (0) 
<          {
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
---
>       if ;
253,270c253
<       if (0) 
<          {
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
---
>       if (static
253,271c253
<       if (0) 
<          {
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
---
>       if (0void ;
254,271c254
<          {
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
---
>          ;
255,275c255
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>             int BZ_API(BZ2_bzCompressInit) 
255,275c255
<             register ;
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>             register BZ_API(BZ2_bzCompressInit) 
256,275c256
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>             (BZ2_bzCompressInit) 
256,275c256
<             j;
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>             jBZ2_bzCompressInit) 
257,275c257
<          }
< 
<       
<    }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>          ) 
(95.8 %, 8619 bytes)
251,267c251
<       }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>       ( bz_stream* strm, 
253,267c253
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
>    bz_stream* strm, 
257,267c257
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> * strm, 
261,267c261
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> strm, 
262,267c262
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> , 
262,268c262
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> void int        blockSize100k,
266,268c266
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> blockSize100k,
266,268c266
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int ,
266,269c266
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_APIint        verbosity,
266,269c266
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_API(verbosity,
266,269c266
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_API(BZ2_bzCompressInit,
267,270c267
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     int        workFactor )
267,270c267
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( workFactor )
267,270c267
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( bz_stream)
267,271c267
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
---
>                     ( bz_stream* {
267,272c267
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* strmInt32   n;
268,272c268
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                      n;
268,272c268
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        ;
268,273c268
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        blockSize100kEState* s;
269,273c269
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      * s;
269,273c269
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        s;
269,273c269
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        verbosity;
270,274c270
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    ;
---
>                      ;
270,275c270
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
---
>                      int        NULL;
270,275c270
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
---
>                      int        workFactor ;
271,276c271
< {
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
> s->arr2 = NULL;
272,276c272
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    ->arr2 = NULL;
272,276c272
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    Int32   arr2 = NULL;
272,276c272
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    Int32   n= NULL;
273,274d272
<    EState* s;
<    ;
276d273
<    s->arr2 = NULL;
273,276c273
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    EState;
273,277c273
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EState* sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
273,277c273
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EState* s( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
274,277c274
<    ;
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
275,277c275
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
275,277c275
<    NULL;
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    NULL+BZ_N_OVERSHOOT) * sizeof(UInt32) );
276,277c276
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    BZ_N_OVERSHOOT) * sizeof(UInt32) );
276,277c276
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s) * sizeof(UInt32) );
276,277c276
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->* sizeof(UInt32) );
276,277c276
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 sizeof(UInt32) );
276,277c276
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = (UInt32) );
276,277c276
<    s->arr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = NULLUInt32) );
277c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ) );
277c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC);
277c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( ;
277,278c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
---
>    sBZALLOCBZALLOC( (;
277,280c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (nif (s->ftab == NULL) 
277,280c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+(s->ftab == NULL) 
277,280c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOTs->ftab == NULL) 
277,280c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) ->ftab == NULL) 
277,280c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * ftab == NULL) 
277,280c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof== NULL) 
277,280c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(NULL) 
277,280c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) 
277,282c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
< 
<    s= (UChar)s->arr1;
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) s= (UChar)s->arr1;
277,282c277
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
< 
<    s= (UChar)s->arr1;
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) )= (UChar)s->arr1;
278,282c278
<    ;
< 
<    if (s->ftab == NULL) 
< 
<    s= (UChar)s->arr1;
---
>    (UChar)s->arr1;
280,282c280
<    if (s->ftab == NULL) 
< 
<    s= (UChar)s->arr1;
---
>    UChar)s->arr1;
280,282c280
<    if (s->ftab == NULL) 
< 
<    s= (UChar)s->arr1;
---
>    if )s->arr1;
280,282c280
<    if (s->ftab == NULL) 
< 
<    s= (UChar)s->arr1;
---
>    if (s->arr1;
280,282c280
<    if (s->ftab == NULL) 
< 
<    s= (UChar)s->arr1;
---
>    if (s->arr1;
280,282c280
<    if (s->ftab == NULL) 
< 
<    s= (UChar)s->arr1;
---
>    if (s->arr1;
280,282c280
<    if (s->ftab == NULL) 
< 
<    s= (UChar)s->arr1;
---
>    if (s->ftab ;
280,283c280
<    if (s->ftab == NULL) 
< 
<    s= (UChar)s->arr1;
<    s->zbits             = NULL;
---
>    if (s->ftab == s->zbits             = NULL;
280,283c280
<    if (s->ftab == NULL) 
< 
<    s= (UChar)s->arr1;
<    s->zbits             = NULL;
---
>    if (s->ftab == NULL->zbits             = NULL;
(95.8 %, 8584 bytes)
278,279c278
<    (UChar)s->arr1;
<    s->zbits             = NULL;
---
>    NULL;
278,279c278
<    (UChar)s->arr1;
<    s->zbits             = NULL;
---
>    (;
278,281c278
<    (UChar)s->arr1;
<    s->zbits             = NULL;
< 
<    strm->state          ;
---
>    (UCharstrm->state          ;
278,281c278
<    (UChar)s->arr1;
<    s->zbits             = NULL;
< 
<    strm->state          ;
---
>    (UChar)->state          ;
278,281c278
<    (UChar)s->arr1;
<    s->zbits             = NULL;
< 
<    strm->state          ;
---
>    (UChar)sstate          ;
278,281c278
<    (UChar)s->arr1;
<    s->zbits             = NULL;
< 
<    strm->state          ;
---
>    (UChar)s->;
278,282c278
<    (UChar)s->arr1;
<    s->zbits             = NULL;
< 
<    strm->state          ;
<    return BZ_OK;
---
>    (UChar)s->arr1return BZ_OK;
279,282c279
<    s->zbits             = NULL;
< 
<    strm->state          ;
<    return BZ_OK;
---
>    BZ_OK;
(95.8 %, 8542 bytes)
278,294c278
<    NULL;
< 
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
---
>    define ADD_CHAR_TO_BLOCK)
278,294c278
<    NULL;
< 
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
---
>    NULLADD_CHAR_TO_BLOCK)
280,294c280
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
---
>    )
280,295c280
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
---
>    strm;
280,299c280
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    strm->int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
280,299c280
<    strm->state          ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    strm->state          BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
281,299c281
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    (BZ2_bzCompress) ( bz_stream *strm, int action )
281,299c281
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return BZ2_bzCompress) ( bz_stream *strm, int action )
281,299c281
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return BZ_OK) ( bz_stream *strm, int action )
282,299c282
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> ( bz_stream *strm, int action )
294,299c294
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> bz_stream *strm, int action )
294,299c294
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #*strm, int action )
294,299c294
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define strm, int action )
294,299c294
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK, int action )
295,299c295
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int action )
299c299
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> action )
299c299
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int )
299,300c299
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
---
> int BZ_API{
299,302c299
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(EState* s;
299,302c299
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompress* s;
299,302c299
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompress) s;
299,302c299
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompress) ( ;
299,303c299
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
< }
---
> int BZ_API(BZ2_bzCompress) ( bz_stream }
299,311c299
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *int BZ_API(BZ2_bzDecompressInit) 
299,311c299
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strmBZ_API(BZ2_bzDecompressInit) 
299,311c299
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, (BZ2_bzDecompressInit) 
299,311c299
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int BZ2_bzDecompressInit) 
299,311c299
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action ) 
300,312c300
< {
<    
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> ( bz_stream* strm, 
302,312c302
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    bz_stream* strm, 
302,312c302
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    EState* strm, 
302,312c302
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    EState* strm, 
302,312c302
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    EState* s, 
303,313c303
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int        verbosity,
311,313c311
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> verbosity,
311,313c311
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int ,
311,314c311
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_APIint        small )
311,314c311
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API(small )
311,314c311
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API(BZ2_bzDecompressInit)
312,315c312
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
---
>                      {
312,316c312
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( DState* s;
312,316c312
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_stream* s;
312,316c312
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_stream* s;
312,316c312
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_stream* strm;
313,317c313
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< }
---
>                        }
313,321c313
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< }
< 
< 
< 
< static
---
>                        int        static
313,322c313
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< }
< 
< 
< 
< static
< void ;
---
>                        int        verbosityvoid ;
314,322c314
<                        int        small )
< {
<    DState* s;
< }
< 
< 
< 
< static
< void ;
---
>                        ;
314,326c314
<                        int        small )
< {
<    DState* s;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>                        int        int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
314,326c314
<                        int        small )
< {
<    DState* s;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>                        int        small BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
315,326c315
< {
<    DState* s;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> (BZ2_bzDecompress) ( bz_stream *strm )
316,326c316
<    DState* s;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    BZ2_bzDecompress) ( bz_stream *strm )
316,326c316
<    DState* s;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    DState) ( bz_stream *strm )
316,326c316
<    DState* s;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    DState* ( bz_stream *strm )
316,326c316
<    DState* s;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    DState* sbz_stream *strm )
317,326c317
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> *strm )
321,326c321
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> strm )
322,326c322
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> )
322,327c322
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
---
> void {
326,328c326
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> DState* s;
326,328c326
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> int * s;
326,328c326
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> int BZ_APIs;
326,328c326
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> int BZ_API(;
326,329c326
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(BZ2_bzDecompressif (s == NULL) ;
326,329c326
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(BZ2_bzDecompress) (s == NULL) ;
326,329c326
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(BZ2_bzDecompress) ( s == NULL) ;
326,329c326
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream == NULL) ;
326,329c326
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream *NULL) ;
326,329c326
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream *strm ) ;
327,329c327
< {
<    DState* s;
<    if (s == NULL) ;
---
> ;
328,329d327
<    DState* s;
<    if (s == NULL) ;
328,330c328
<    DState* s;
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    DState(s->ll4);
328,330c328
<    DState* s;
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    DState* s->ll4);
328,330c328
<    DState* s;
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    DState* s->ll4);
329,330c329
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    ll4);
329,330c329
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    if );
329,330c329
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    if (;
329,332c329
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
---
>    if (s ;
329,333c329
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
< }
---
>    if (s == }
329,340c329
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    if (s == NULL#define BZ_SETERR(eee)                    \
329,340c329
<    if (s == NULL) ;
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    if (s == NULL) define BZ_SETERR(eee)                    \
330,340c330
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZ_SETERR(eee)                    \
330,340c330
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(eee)                    \
330,340c330
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(eee)                    \
330,340c330
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(s)                    \
330,340c330
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(s->\
330,343c330
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
---
>    BZFREE(s->ll4typedef 
330,344c330
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
>    BZFREE(s->ll4)struct {
332,344c332
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
>    {
333,345c333
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> FILE*     handle;
340,345c340
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> *     handle;
340,345c340
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #handle;
340,345c340
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define ;
340,346c340
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERRChar      buf[BZ_MAX_UNUSED];
340,346c340
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(buf[BZ_MAX_UNUSED];
340,346c340
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eee[BZ_MAX_UNUSED];
340,346c340
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eee)                    BZ_MAX_UNUSED];
343,346c343
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> ];
344,346c344
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>    ;
344,347c344
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    struct Int32     bufN;
345,347c345
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       bufN;
345,347c345
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       FILE;
345,348c345
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILE*     Bool      writing;
345,348c345
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILE*     handlewriting;
346,348c346
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       ;
346,349c346
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      bz_stream strm;
346,349c346
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      bufstrm;
346,349c346
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      buf[;
346,350c346
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf[BZ_MAX_UNUSEDInt32     lastErr;
346,350c346
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf[BZ_MAX_UNUSED]lastErr;
347,350c347
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       ;
347,351c347
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     Bool      initialisedOk;
347,351c347
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     bufNinitialisedOk;
348,351c348
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       ;
348,352c348
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       Bool      }
348,353c348
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      writingbzFile;
349,353c349
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       ;
349,361c349
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream BZFILE* BZ_API(BZ2_bzWriteOpen) 
349,361c349
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strm* BZ_API(BZ2_bzWriteOpen) 
350,361c350
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZ_API(BZ2_bzWriteOpen) 
350,361c350
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     (BZ2_bzWriteOpen) 
350,361c350
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     lastErrBZ2_bzWriteOpen) 
351,361c351
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       ) 
351,362c351
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      ( int*  bzerror,      
351,362c351
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      initialisedOkint*  bzerror,      
352,362c352
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    *  bzerror,      
353,362c353
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzerror,      
353,362c353
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzFile,      
361,363c361
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> FILE* f, 
361,363c361
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* f, 
361,363c361
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* f, 
361,363c361
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API, 
361,364c361
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(int   blockSize100k, 
361,364c361
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenblockSize100k, 
362,364c362
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     , 
362,365c362
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int   verbosity,
362,365c362
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( intverbosity,
362,365c362
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  ,
362,366c362
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerrorint   workFactor )
363,366c363
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       workFactor )
363,366c363
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE)
363,367c363
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       FILE* {
363,368c363
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* fInt32   ret;
364,368c364
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       ret;
364,368c364
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   ;
364,369c364
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   blockSize100kbzFile* bzf = NULL;
365,369c365
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       * bzf = NULL;
365,369c365
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   bzf = NULL;
365,369c365
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   verbosity= NULL;
366,369c366
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       NULL;
366,369c366
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   ;
366,371c366
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   workFactor BZ_SETERR(BZ_OK);
367,371c367
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
> (BZ_OK);
368,371c368
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
368,371c368
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    Int32   );
369,371d368
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
369,372d368
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
369,373c369
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile(f == NULL ||
369,373c369
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* f == NULL ||
369,373c369
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf == NULL ||
369,373c369
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf = NULL ||
369,373c369
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf = NULL||
371,374c371
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
371,374c371
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERRblockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
371,374c371
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(< 1 || blockSize100k > 90 || verbosity > 4))
371,374c371
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(BZ_OK1 || blockSize100k > 90 || verbosity > 4))
371,374c371
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    BZ_SETERR(BZ_OK)|| blockSize100k > 90 || verbosity > 4))
373,374c373
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    blockSize100k > 90 || verbosity > 4))
373,374c373
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if > 90 || verbosity > 4))
373,374c373
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (90 || verbosity > 4))
373,374c373
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f || verbosity > 4))
373,374c373
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f == verbosity > 4))
373,374c373
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f == NULL > 4))
374c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        4))
374c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        ())
374c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        (blockSize100k )
374,375c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
---
>        (blockSize100k < bzf->handle        = fBZ2_bzCompressInit ( );
374,375c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
---
>        (blockSize100k < 1 ->handle        = fBZ2_bzCompressInit ( );
374,375c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
---
>        (blockSize100k < 1 || handle        = fBZ2_bzCompressInit ( );
374,375c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
---
>        (blockSize100k < 1 || blockSize100k = fBZ2_bzCompressInit ( );
374,375c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
---
>        (blockSize100k < 1 || blockSize100k > fBZ2_bzCompressInit ( );
374,375c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
---
>        (blockSize100k < 1 || blockSize100k > 90 ( );
374,375c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
---
>        (blockSize100k < 1 || blockSize100k > 90 || );
374,375c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity ;
374,376c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > bzf->initialisedOk = True;
374,376c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4->initialisedOk = True;
374,376c374
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
---
>        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4)initialisedOk = True;
375,376c375
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
---
>       = True;
375,376c375
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
---
>       bzfTrue;
375,376c375
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
---
>       bzf->;
375,377c375
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
<    return bzf;   
---
>       bzf->handle        return bzf;   
375,377c375
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
<    return bzf;   
---
>       bzf->handle        = bzf;   
375,377c375
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
<    return bzf;   
---
>       bzf->handle        = fBZ2_bzCompressInit ;   
375,378c375
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
>       bzf->handle        = fBZ2_bzCompressInit ( }
375,383c375
<       bzf->handle        = fBZ2_bzCompressInit ( );
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzf->handle        = fBZ2_bzCompressInit ( )void BZ_API(BZ2_bzWrite)
376,383c376
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    BZ_API(BZ2_bzWrite)
376,383c376
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzf(BZ2_bzWrite)
376,383c376
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzf->BZ2_bzWrite)
376,383c376
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzf->initialisedOk )
376,384c376
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf->initialisedOk = ( int*    bzerror, 
(95.9 %, 8477 bytes)
375,382c375
<       bzf->handle        = bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>       bzf->handle        = bzerror, 
375,382c375
<       bzf->handle        = bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>       bzf->handle        = bzf, 
376,383c376
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> BZFILE* b, 
381,383c381
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> * b, 
381,383c381
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void b, 
381,383c381
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API, 
381,384c381
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(void*   buf, 
381,384c381
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(BZ2_bzWrite*   buf, 
382,384c382
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              buf, 
382,384c382
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( , 
382,385c382
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( intint     len )
382,385c382
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    len )
382,385c382
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    bzerror)
(95.9 %, 8388 bytes)
382,386c382
<              ( int*    len )
< {
<    ;
< 
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
---
>              ( int*    )strm.avail_in == 0)
382,386c382
<              ( int*    len )
< {
<    ;
< 
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
---
>              ( int*    len strm.avail_in == 0)
383,386c383
< {
<    ;
< 
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
---
> .avail_in == 0)
384,386c384
<    ;
< 
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
---
>    avail_in == 0)
386c386
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
---
>    == 0)
386c386
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
---
>    BZ_SETERR0)
386c386
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
---
>    BZ_SETERR()
386,387c386
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
---
>    BZ_SETERR(ferror;
386,389c386
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
---
>    BZ_SETERR(ferror(}
386,393c386
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(bzfvoid BZ_API(BZ2_bzWriteClose)
386,393c386
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(bzf->BZ_API(BZ2_bzWriteClose)
386,393c386
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(bzf->handle(BZ2_bzWriteClose)
386,393c386
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(bzf->handle)BZ2_bzWriteClose)
386,393c386
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(ferror(bzf->handle)strm)
386,394c386
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(ferror(bzf->handle)strm.( int*          bzerror, 
386,394c386
<    BZ_SETERR(ferror(bzf->handle)strm.avail_in == 0)
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(ferror(bzf->handle)strm.avail_in int*          bzerror, 
(95.9 %, 8351 bytes)
386,394c386
<    BZ_SETERR()
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>    BZ_SETERR(bzerror, 
387,394c387
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>          , 
389,395c389
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> BZFILE*       b, 
393,395c393
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
393,395c393
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void b, 
393,395c393
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API, 
393,396c393
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(int           abandon,
393,396c393
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(BZ2_bzWriteCloseabandon,
394,396c394
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ,
394,397c394
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( unsigned int* nbytes_in,
394,397c394
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( intint* nbytes_in,
394,397c394
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          * nbytes_in,
394,397c394
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerrornbytes_in,
395,397c395
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     ,
395,398c395
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILEunsigned int* nbytes_out )
395,398c395
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       int* nbytes_out )
395,398c395
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       b* nbytes_out )
396,398c396
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     nbytes_out )
396,398c396
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           )
396,399c396
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     int           abandon{
397,400c397
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     BZ2_bzWriteClose64 ;
397,400c397
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     unsigned ;
397,401c397
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
---
>                     unsigned int}
397,404c397
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* void BZ_API(BZ2_bzWriteClose64)
397,404c397
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* nbytes_inBZ_API(BZ2_bzWriteClose64)
398,404c398
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     (BZ2_bzWriteClose64)
398,404c398
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned BZ2_bzWriteClose64)
398,404c398
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int)
398,405c398
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* ( int*          bzerror, 
398,405c398
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                     unsigned int* nbytes_out int*          bzerror, 
399,405c399
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> *          bzerror, 
400,405c400
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>    bzerror, 
400,405c400
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>    BZ2_bzWriteClose64 , 
401,406c401
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> BZFILE*       b, 
404,406c404
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
404,406c404
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void b, 
404,406c404
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API, 
404,407c404
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(int           abandon,
404,407c404
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(BZ2_bzWriteClose64abandon,
405,407c405
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ,
405,408c405
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( unsigned int* nbytes_in_lo32,
405,408c405
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( intint* nbytes_in_lo32,
405,408c405
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          * nbytes_in_lo32,
405,408c405
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerrornbytes_in_lo32,
406,408c406
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     ,
406,409c406
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILEunsigned int* nbytes_in_hi32,
406,409c406
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       int* nbytes_in_hi32,
406,409c406
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       b* nbytes_in_hi32,
407,409c407
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     nbytes_in_hi32,
407,409c407
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           ,
407,410c407
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           abandonunsigned int* nbytes_out_lo32,
408,410c408
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int* nbytes_out_lo32,
408,410c408
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
408,410c408
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intnbytes_out_lo32,
408,410c408
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* ,
408,411c408
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32unsigned int* nbytes_out_hi32 )
409,411c409
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     int* nbytes_out_hi32 )
409,411c409
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
409,411c409
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intnbytes_out_hi32 )
409,411c409
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* )
409,412c409
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int* nbytes_in_hi32{
410,414c410
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     bzFile* bzf = ((bzf))
410,414c410
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned * bzf = ((bzf))
410,414c410
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned intbzf = ((bzf))
410,414c410
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned int* = ((bzf))
410,414c410
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned int* nbytes_out_lo32((bzf))
411,414c411
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     (bzf))
411,414c411
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned bzf))
411,414c411
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned int))
411,414c411
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned int* )
411,415c411
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
<       ;
---
>                     unsigned int* nbytes_out_hi32 ;
412,417c412
< {
<    
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
---
> (BZ_OK);
414,417c414
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
---
>    BZ_OK);
414,417c414
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
---
>    bzFile);
414,417c414
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
---
>    bzFile* ;
414,418c414
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
<    0;
---
>    bzFile* bzf 0;
414,418c414
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
<    0;
---
>    bzFile* bzf = ;
414,419c414
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
---
>    bzFile* bzf = (0;
414,419c414
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
---
>    bzFile* bzf = ((;
414,420c414
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
< }
---
>    bzFile* bzf = ((bzf}
414,424c414
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    bzFile* bzf = ((bzf)BZFILE* BZ_API(BZ2_bzReadOpen) 
415,424c415
<       ;
< 
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>       * BZ_API(BZ2_bzReadOpen) 
417,424c417
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    BZ_API(BZ2_bzReadOpen) 
417,424c417
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    ((BZ2_bzReadOpen) 
417,424c417
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    (BZ_OKBZ2_bzReadOpen) 
417,424c417
<    (BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    (BZ_OK)) 
418,425c418
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    ( int*  bzerror, 
418,425c418
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    0int*  bzerror, 
419,425c419
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    *  bzerror, 
419,425c419
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    0bzerror, 
420,425c420
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> , 
424,426c424
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> FILE* f, 
424,426c424
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* f, 
424,426c424
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* f, 
424,426c424
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API, 
424,427c424
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(int   verbosity,
424,427c424
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzReadOpenverbosity,
425,427c425
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ,
425,428c425
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int   small,
425,428c425
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( intsmall,
425,428c425
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  ,
425,429c425
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  bzerrorvoid* unused,
426,429c426
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      * unused,
426,429c426
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILEunused,
426,429c426
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* ,
426,430c426
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* fint   nUnused )
427,430c427
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      nUnused )
427,430c427
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   )
427,431c427
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      int   verbosity{
428,432c428
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      bzFile* bzf = NULL;
428,432c428
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   * bzf = NULL;
428,432c428
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   smallbzf = NULL;
429,432c429
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      = NULL;
429,432c429
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      voidNULL;
429,432c429
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      void* ;
429,433c429
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* unusedint     ret;
430,433c430
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      ret;
430,433c430
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      int   ;
430,435c430
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   nUnused BZ_SETERR(BZ_OK);
431,435c431
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
> (BZ_OK);
432,435c432
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
432,435c432
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile);
432,435c432
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* ;
432,437c432
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
---
>    bzFile* bzf if (f ||
432,437c432
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
---
>    bzFile* bzf = (f ||
432,437c432
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
---
>    bzFile* bzf = NULLf ||
433,437c433
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
---
>    ||
433,438c433
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    int     ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
433,438c433
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    int     ret(nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
435,438c435
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
435,438c435
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    BZ_SETERR< 0 || nUnused > BZ_MAX_UNUSED)))
435,438c435
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    BZ_SETERR(0 || nUnused > BZ_MAX_UNUSED)))
435,438c435
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    BZ_SETERR(BZ_OK|| nUnused > BZ_MAX_UNUSED)))
435,438c435
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    BZ_SETERR(BZ_OK)nUnused > BZ_MAX_UNUSED)))
437,438c437
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    > BZ_MAX_UNUSED)))
437,438c437
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if BZ_MAX_UNUSED)))
437,438c437
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if ()))
437,438c437
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if (f ))
438c438
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        )
438,439c438
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        (bzf->bufN;
438,439c438
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        ((->bufN;
438,439c438
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        ((nUnused bufN;
438,439c438
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        ((nUnused < ;
438,440c438
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
---
>        ((nUnused < 0 ;
438,441c438
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
---
>        ((nUnused < 0 || return bzf;   
438,441c438
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
---
>        ((nUnused < 0 || nUnused bzf;   
438,441c438
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
---
>        ((nUnused < 0 || nUnused > ;   
438,442c438
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
< }
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED}
438,446c438
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
438,446c438
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED))BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
439,446c439
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
439,446c439
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzfBZ2_bzReadClose) ( int *bzerror, BZFILE *b )
439,446c439
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf->) ( int *bzerror, BZFILE *b )
439,446c439
<       bzf->bufN;
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf->bufN( int *bzerror, BZFILE *b )
440,446c440
<    ;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    int *bzerror, BZFILE *b )
441,446c441
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    *bzerror, BZFILE *b )
441,446c441
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return bzerror, BZFILE *b )
441,446c441
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return bzf, BZFILE *b )
442,446c442
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZFILE *b )
446c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> *b )
446c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void b )
446c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API)
446,447c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
---
> void BZ_API({
446,448c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
---
> void BZ_API(BZ2_bzReadClose}
446,452c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) int BZ_API(BZ2_bzRead) 
446,452c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( BZ_API(BZ2_bzRead) 
446,452c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int (BZ2_bzRead) 
446,452c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *BZ2_bzRead) 
446,452c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror) 
446,453c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, ( int*    bzerror, 
446,453c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE int*    bzerror, 
446,453c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE **    bzerror, 
446,453c446
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b bzerror, 
447,453c447
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> , 
448,454c448
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>    BZFILE* b, 
452,454c452
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> * b, 
452,454c452
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int b, 
452,454c452
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API, 
452,455c452
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(void*   buf, 
452,455c452
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(BZ2_bzRead*   buf, 
453,455c453
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            buf, 
453,455c453
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( , 
453,456c453
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( intint     len )
453,456c453
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    len )
453,456c453
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    bzerror)
454,457c454
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>              {
454,459c454
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
---
>              BZFILEbuf;
454,459c454
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
---
>              BZFILE* ;
454,461c454
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              BZFILE* bwhile (True) 
455,461c455
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              (True) 
455,461c455
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              voidTrue) 
455,461c455
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              void*   ) 
455,463c455
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
---
>              void*   bufreturn 0; 
456,463c456
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
---
>              0; 
456,463c456
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
---
>              int     ; 
456,464c456
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
---
>              int     len }
457,467d456
< {
<    
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
459,468c459
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ_API(BZ2_bzReadGetUnused) 
459,468c459
<    buf;
< 
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    buf(BZ2_bzReadGetUnused) 
461,468c461
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ2_bzReadGetUnused) 
461,468c461
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    while ) 
461,469c461
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (( int*    bzerror, 
461,469c461
<    while (True) 
< 
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    while (Trueint*    bzerror, 
463,469c463
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    *    bzerror, 
463,469c463
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    return bzerror, 
463,469c463
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    return 0, 
464,470c464
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> BZFILE* b, 
468,470c468
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> * b, 
468,470c468
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void b, 
468,470c468
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API, 
468,471c468
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(void**  unused, 
468,471c468
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnused**  unused, 
469,471c469
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      *  unused, 
469,471c469
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( unused, 
469,471c469
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int, 
469,472c469
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    int*    nUnused )
469,472c469
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerror*    nUnused )
470,472c470
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        nUnused )
470,472c470
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE)
470,473c470
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        BZFILE* {
470,474c470
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        BZFILE* bnUnused ;
471,474c471
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        ;
471,475c471
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
---
>                        void}
471,483c471
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void*int BZ_API(BZ2_bzBuffToBuffCompress) 
471,483c471
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  BZ_API(BZ2_bzBuffToBuffCompress) 
471,483c471
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        void**  unused(BZ2_bzBuffToBuffCompress) 
472,483c472
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        BZ2_bzBuffToBuffCompress) 
472,483c472
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int) 
472,484c472
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    ( char*         dest, 
472,484c472
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>                        int*    nUnused char*         dest, 
473,484c473
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> *         dest, 
474,484c474
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    dest, 
474,484c474
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    nUnused , 
475,485c475
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> unsigned int* destLen,
483,485c483
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int* destLen,
483,485c483
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int * destLen,
483,485c483
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_APIdestLen,
483,485c483
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(,
483,486c483
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffCompresschar*         source, 
484,486c484
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          *         source, 
484,486c484
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( source, 
484,486c484
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char, 
484,487c484
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         unsigned int  sourceLen,
484,487c484
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         destint  sourceLen,
485,487c485
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            sourceLen,
485,487c485
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned ,
485,488c485
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned intint           blockSize100k, 
485,488c485
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* blockSize100k, 
485,488c485
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* destLen, 
486,488d485
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
486,489c486
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            charverbosity, 
486,489c486
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         , 
486,490c486
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         sourceint           workFactor )
487,490c487
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            workFactor )
487,490c487
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned )
487,491c487
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            unsigned int  {
487,492c487
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  sourceLenbz_stream strm;
488,492c488
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            strm;
488,492c488
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           ;
488,493c488
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           blockSize100kint ret;
489,493c489
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            ret;
489,493c489
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           ;
489,495c489
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>                            int           verbosityif (verbosity > workFactor == 0) ;
490,495c490
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>                            (verbosity > workFactor == 0) ;
490,495c490
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>                            int           verbosity > workFactor == 0) ;
490,495c490
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>                            int           workFactor > workFactor == 0) ;
491,495c491
< {
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
> workFactor == 0) ;
492,495c492
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>    == 0) ;
492,495c492
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>    bz_stream 0) ;
492,495c492
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>    bz_stream strm) ;
493,495c493
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
---
>    ;
493,496c493
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
<    ;
---
>    int ;
493,498c493
<    int ret;
< 
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
---
>    int ret0;
495d494
<    if (verbosity > workFactor == 0) ;
497,498d495
< 
<    0;
495,499c495
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
---
>    if return ret;
495,499c495
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
---
>    if (ret;
495,499c495
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
---
>    if (verbosity ;
495,500c495
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
---
>    if (verbosity > }
495,504c495
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > workFactor int BZ_API(BZ2_bzBuffToBuffDecompress) 
495,504c495
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > workFactor == BZ_API(BZ2_bzBuffToBuffDecompress) 
495,504c495
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > workFactor == 0(BZ2_bzBuffToBuffDecompress) 
495,504c495
<    if (verbosity > workFactor == 0) ;
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (verbosity > workFactor == 0) BZ2_bzBuffToBuffDecompress) 
496,504c496
<    ;
< 
<    0;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    ) 
(95.9 %, 8306 bytes)
495,502c495
<    ;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    char*         dest, 
496,502c496
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    *         dest, 
496,502c496
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return dest, 
496,502c496
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return ret, 
497,503c497
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> unsigned int* destLen,
501,503c501
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int* destLen,
501,503c501
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int * destLen,
501,503c501
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_APIdestLen,
501,503c501
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(,
501,504c501
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompresschar*         source, 
502,504c502
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            *         source, 
502,504c502
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( source, 
502,504c502
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char, 
502,505c502
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         unsigned int  sourceLen,
502,505c502
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         destint  sourceLen,
503,505c503
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              sourceLen,
503,505c503
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned ,
503,506c503
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned intint           small,
503,506c503
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* small,
504,506d503
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
504,506d503
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
504,507c504
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              charverbosity )
504,507c504
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         )
504,508c504
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
---
>                              char*         source{
505,509c505
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              bz_stream strm;
505,509c505
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              unsigned strm;
505,509c505
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              unsigned int  ;
505,510c505
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  sourceLenint ret;
506,510c506
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              ret;
506,510c506
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              int           ;
506,512c506
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>                              int           smallif (0 || verbosity > 4) 
507,512c507
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>                              (0 || verbosity > 4) 
507,512c507
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>                              int           0 || verbosity > 4) 
507,512c507
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>                              int           verbosity || verbosity > 4) 
508,512c508
< {
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
> verbosity > 4) 
509,512c509
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>    > 4) 
509,512c509
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>    bz_stream 4) 
509,512c509
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>    bz_stream strm) 
510,513c510
<    int ret;
< 
<    if (0 || verbosity > 4) 
<           ;
---
>    ;
510,515c510
<    int ret;
< 
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
---
>    int ret ;
511,515d510
< 
<    if (0 || verbosity > 4) 
<           ;
< 
<    ret ;
(96.0 %, 8256 bytes)
510,524c510
<    int ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    int * BZ_API(BZ2_bzopen)
510,524c510
<    int ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    int ret BZ_API(BZ2_bzopen)
511,524c511
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> (BZ2_bzopen)
516,524c516
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZ2_bzopen)
517,524c517
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> )
517,525c517
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE ( const char *path,
517,525c517
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * const char *path,
518,525c518
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                char *path,
518,525c518
<                ( )      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                ( *path,
519,525c519
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> path,
524,525c524
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> ,
524,526c524
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE const char *mode )
524,526c524
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * char *mode )
524,526c524
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API*mode )
524,526c524
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API(mode )
525,526d524
<                ( const char *path,
<                  const char *mode )
525,527c525
<                ( const char *path,
<                  const char *mode )
< {
---
>                {
525,528c525
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( return 0;
525,528c525
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( const 0;
525,528c525
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( const char ;
525,529c525
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
---
>                ( const char *}
525,533c525
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *pathBZFILE * BZ_API(BZ2_bzdopen)
526,533c526
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  * BZ_API(BZ2_bzdopen)
526,533c526
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const BZ_API(BZ2_bzdopen)
526,533c526
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char (BZ2_bzdopen)
526,533c526
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char *BZ2_bzdopen)
527,533d526
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
527,534c527
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> ( int fd,
528,534c528
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    int fd,
528,534c528
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    return fd,
528,534c528
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    return 0,
529,535c529
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> const char *mode )
533,535c533
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> char *mode )
533,535c533
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE *mode )
533,535c533
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * mode )
533,535c533
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * BZ_API)
533,536c533
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
---
> BZFILE * BZ_API({
533,537c533
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    }
---
> BZFILE * BZ_API(BZ2_bzdopen}
534,541c534
<                ( int fd,
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
534,541c534
<                ( int fd,
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
534,541c534
<                ( int fd,
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int (BZ2_bzread) (BZFILE* b, void* buf, int len )
534,541c534
<                ( int fd,
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int fdBZ2_bzread) (BZFILE* b, void* buf, int len )
535,541c535
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  ) (BZFILE* b, void* buf, int len )
535,541c535
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const (BZFILE* b, void* buf, int len )
535,541c535
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char BZFILE* b, void* buf, int len )
535,541c535
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char ** b, void* buf, int len )
535,541c535
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char *mode b, void* buf, int len )
536,541c536
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> , void* buf, int len )
537,541c537
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    void* buf, int len )
541c541
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> * buf, int len )
541c541
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int buf, int len )
541c541
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API, int len )
541c541
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(int len )
541c541
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzreadlen )
541c541
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) )
541,542c541
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzread) ({
(96.0 %, 8209 bytes)
535,537c535
<                  const char ** b, void* buf, int len )
< {
<    ;
---
>                  const char *;
535,539c535
<                  const char ** b, void* buf, int len )
< {
<    ;
<    
< }
---
>                  const char ** }
535,543c535
<                  const char ** b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>                  const char ** bint BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
535,543c535
<                  const char ** b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>                  const char ** b, BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
535,543c535
<                  const char ** b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>                  const char ** b, void(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
535,543c535
<                  const char ** b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>                  const char ** b, void* BZ2_bzwrite) (BZFILE* b, void* buf, int len )
535,543c535
<                  const char ** b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>                  const char ** b, void* buf) (BZFILE* b, void* buf, int len )
535,543c535
<                  const char ** b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>                  const char ** b, void* buf, (BZFILE* b, void* buf, int len )
535,543c535
<                  const char ** b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>                  const char ** b, void* buf, int BZFILE* b, void* buf, int len )
535,543c535
<                  const char ** b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>                  const char ** b, void* buf, int len * b, void* buf, int len )
536,543c536
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> b, void* buf, int len )
537,543c537
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    , void* buf, int len )
539,543c539
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> void* buf, int len )
543c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> * buf, int len )
543c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int buf, int len )
543c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API, int len )
543c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(int len )
543c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwritelen )
543c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) )
543,544c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzwrite) ({
543,545c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
---
> int BZ_API(BZ2_bzwrite) (BZFILE}
543,550c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* static char *bzerrorstrings[] = {
543,550c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* bchar *bzerrorstrings[] = {
543,550c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, *bzerrorstrings[] = {
543,550c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, voidbzerrorstrings[] = {
543,550c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* [] = {
543,550c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf] = {
543,550c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, = {
543,550c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int {
543,551c543
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len "OK"
544,552c544
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       };
---
> };
545,552c545
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       };
---
>    ;
550,554d549
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
550,555c550
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
550,555c550
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
550,555c550
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
550,555c550
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings(BZ2_bzerror) (BZFILE *b, int *errnum)
550,555c550
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[BZ2_bzerror) (BZFILE *b, int *errnum)
550,555c550
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] ) (BZFILE *b, int *errnum)
550,555c550
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] = (BZFILE *b, int *errnum)
551,555c551
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>        BZFILE *b, int *errnum)
552,555c552
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       *b, int *errnum)
552,555c552
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       }b, int *errnum)
555c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> , int *errnum)
555c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const int *errnum)
555c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char *errnum)
555c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * errnum)
555c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API)
555,556c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
---
> const char * BZ_API({
555,557c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerrorint err = ((bzFile *)b)->lastErr;
555,557c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) err = ((bzFile *)b)->lastErr;
555,557c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (= ((bzFile *)b)->lastErr;
555,557c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE ((bzFile *)b)->lastErr;
555,557c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *(bzFile *)b)->lastErr;
555,557c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *bbzFile *)b)->lastErr;
555,557c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, *)b)->lastErr;
555,557c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int )b)->lastErr;
555,557c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *b)->lastErr;
555,557c555
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)->lastErr;
556,557c556
< {
<    int err = ((bzFile *)b)->lastErr;
---
> ->lastErr;
557c557
<    int err = ((bzFile *)b)->lastErr;
---
>    lastErr;
557c557
<    int err = ((bzFile *)b)->lastErr;
---
>    int ;
557,558c557
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err return bzerrorstrings[err*-1];
557,558c557
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = bzerrorstrings[err*-1];
557,558c557
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ([err*-1];
557,558c557
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((err*-1];
557,558c557
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *-1];
557,558c557
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *-1];
557,558c557
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *)1];
557,558c557
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *)b];
557,558c557
<    int err = ((bzFile *)b)->lastErr;
<    return bzerrorstrings[err*-1];
---
>    int err = ((bzFile *)b);
(96.0 %, 8175 bytes)
557,587c557
<    int err = bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
>    int err = BZ_UNIX
557,588c557
<    int err = bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
---
>    int err = bzerrorstrings)
557,590c557
<    int err = bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
>    int err = bzerrorstrings[#   define SET_BINARY_MODE(fd) 
557,590c557
<    int err = bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
>    int err = bzerrorstrings[errdefine SET_BINARY_MODE(fd) 
557,590c557
<    int err = bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
>    int err = bzerrorstrings[err*SET_BINARY_MODE(fd) 
557,590c557
<    int err = bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
>    int err = bzerrorstrings[err*-(fd) 
557,590c557
<    int err = bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
>    int err = bzerrorstrings[err*-1fd) 
557,590c557
<    int err = bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
>    int err = bzerrorstrings[err*-1]) 
558,591d557
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
587,592c587
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
---
> define NORETURN 
587,592c587
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
---
> #NORETURN 
587,594c587
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
---
> #if #endif 
588,594c588
< )
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
---
> endif 
590,600d589
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
590,600c590
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #   
\ No newline at end of file
590,600c590
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #   define 
\ No newline at end of file
590,600c590
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #   define SET_BINARY_MODE
\ No newline at end of file
590,600c590
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #   define SET_BINARY_MODE(
\ No newline at end of file
590,600c590
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #   define SET_BINARY_MODE(fd
\ No newline at end of file
592,600d591
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
592,600c592
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #      
\ No newline at end of file
592,600c592
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #      define 
\ No newline at end of file
594,600d593
< #endif 
< 
< 
< 
< 
< 
<                                        
594,600c594
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #
\ No newline at end of file
===< pass_clex :: rm-toks-6 >===
9c9
< #define BZ_OK                (-9)
---
> )
9,11c9
< #define BZ_OK                (-9)
< 
< typedef 
---
> #typedef 
9,12c9
< #define BZ_OK                (-9)
< 
< typedef 
<    struct {
---
> #define struct {
9,12c9
< #define BZ_OK                (-9)
< 
< typedef 
<    struct {
---
> #define BZ_OK                {
9,13c9
< #define BZ_OK                (-9)
< 
< typedef 
<    struct {
<       ;
---
> #define BZ_OK                (;
9,14c9
< #define BZ_OK                (-9)
< 
< typedef 
<    struct {
<       ;
<       ;
---
> #define BZ_OK                (-;
9,15c9
< #define BZ_OK                (-9)
< 
< typedef 
<    struct {
<       ;
<       ;
<       unsigned int total_out_lo32;
---
> #define BZ_OK                (-9unsigned int total_out_lo32;
11,15c11
< typedef 
<    struct {
<       ;
<       ;
<       unsigned int total_out_lo32;
---
> int total_out_lo32;
12,15c12
<    struct {
<       ;
<       ;
<       unsigned int total_out_lo32;
---
>    total_out_lo32;
12,15c12
<    struct {
<       ;
<       ;
<       unsigned int total_out_lo32;
---
>    struct ;
13,15d12
<       ;
<       ;
<       unsigned int total_out_lo32;
14,16c14
<       ;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       int total_out_hi32;
(96.0 %, 8124 bytes)
13,15c13
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       state;
13,15c13
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned ;
13,17c13
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       unsigned int void *(*bzalloc)(void *,int,void *);
13,17c13
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       unsigned int total_out_hi32*(*bzalloc)(void *,int,void *);
15,17c15
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       (*bzalloc)(void *,int,void *);
15,17c15
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void *bzalloc)(void *,int,void *);
15,17c15
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void *bzalloc)(void *,int,void *);
15,17c15
<       void *state;
< 
<       void *(*bzalloc)(void *,int,void *);
---
>       void *state)(void *,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       (void *,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void void *,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void **,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(,int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*int,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzalloc,void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzalloc)void *);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzalloc)(*);
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzalloc)(void );
17c17
<       void *(*bzalloc)(void *,int,void *);
---
>       void *(*bzalloc)(void *;
17,18c17
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,void *opaque;
17,18c17
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,int*opaque;
17,18c17
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,int,opaque;
17,18c17
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,int,void ;
17,19c17
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
---
>       void *(*bzalloc)(void *,int,void *} 
17,20c17
<       void *(*bzalloc)(void *,int,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *(*bzalloc)(void *,int,void *)bz_stream;
18,20c18
<       void *opaque;
<    } 
<    bz_stream;
---
>       ;
18,24c18
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void #include <stdio.h>
18,24c18
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *include <stdio.h>
(96.0 %, 8112 bytes)
17,19c17
<       void *(*bzalloc)(void );
<       void *opaque;
<    } 
---
>       void *(*bzalloc)(void } 
17,20c17
<       void *(*bzalloc)(void );
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *(*bzalloc)(void )bz_stream;
18,20c18
<       void *opaque;
<    } 
<    bz_stream;
---
>       ;
18,24c18
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void #include <stdio.h>
18,24c18
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *include <stdio.h>
18,24c18
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *opaque<stdio.h>
19,24c19
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    stdio.h>
20,24c20
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    .h>
20,24c20
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_streamh>
24c24
< #include <stdio.h>
---
> >
24,26c24
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> ##   define BZ_API(func) func
24,26c24
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include define BZ_API(func) func
24,26c24
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <BZ_API(func) func
24,26c24
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio(func) func
24,26c24
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.func) func
24,26c24
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.h) func
26c26
< #   define BZ_API(func) func
---
> func
26,27c26
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   #   define BZ_EXTERN extern
26,27c26
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define define BZ_EXTERN extern
26,27c26
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_APIBZ_EXTERN extern
26,27c26
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(extern
26,32c26
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> #   define BZ_API(funcBZ_EXTERN ;
26,32c26
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
---
> #   define BZ_API(func) ;
27,37d26
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
27,38c27
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define BZ_MAX_UNUSED 5000
27,38c27
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define BZ_MAX_UNUSED 5000
27,38c27
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define BZ_EXTERN 5000
32,39d31
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
32,40c32
< BZ_EXTERN ;
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN void BZFILE;
38,40c38
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZFILE;
38,40c38
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #;
38,42c38
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
38,42c38
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED BZFILE* BZ_API(BZ2_bzReadOpen) ( 
40,42c40
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API(BZ2_bzReadOpen) ( 
40,42c40
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef BZ_API(BZ2_bzReadOpen) ( 
40,42c40
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void (BZ2_bzReadOpen) ( 
40,42c40
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZFILEBZ2_bzReadOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> ) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN ( 
42,43c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILEint*  bzerror,   
42,43c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* *  bzerror,   
42,43c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_APIbzerror,   
42,43c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_API(,   
42,44c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpenFILE* f, 
42,44c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) * f, 
43,44c43
<       int*  bzerror,   
<       FILE* f, 
---
>       f, 
43,44c43
<       int*  bzerror,   
<       FILE* f, 
---
>       int, 
43,45c43
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  int   verbosity, 
43,45c43
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  bzerrorverbosity, 
44,45c44
<       FILE* f, 
<       int   verbosity, 
---
>       , 
44,46c44
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILEint   small,
44,46c44
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILE* small,
44,46c44
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILE* f,
45,46d44
<       int   verbosity, 
<       int   small,
45,47c45
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   * unused,    
45,47c45
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   verbosityunused,    
46,47c46
<       int   small,
<       void* unused,    
---
>       ,    
46,48c46
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   int   nUnused 
46,48c46
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   smallnUnused 
47,49c47
<       void* unused,    
<       int   nUnused 
<    );
---
>       );
47,49c47
<       void* unused,    
<       int   nUnused 
<    );
---
>       void;
47,51c47
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
---
>       void* ;
47,53c47
<       void* unused,    
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* unusedBZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
48,53c48
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void BZ_API(BZ2_bzReadGetUnused) ( 
48,53c48
<       int   nUnused 
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   BZ_API(BZ2_bzReadGetUnused) ( 
49,53c49
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    (BZ2_bzReadGetUnused) ( 
49,53c49
<    );
< 
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )BZ2_bzReadGetUnused) ( 
51,53c51
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> ) ( 
53c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> ( 
53,54c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int*    bzerror, 
53,54c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void *    bzerror, 
53,54c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
53,54c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(, 
53,55c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedBZFILE* b, 
53,55c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) * b, 
54,55c54
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
54,55c54
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int, 
54,56c54
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    void**  unused,  
54,56c54
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerror**  unused,  
55,56c55
<       BZFILE* b, 
<       void**  unused,  
---
>       *  unused,  
55,56c55
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILEunused,  
55,56c55
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* ,  
55,57c55
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* bint*    nUnused 
56,57c56
<       void**  unused,  
<       int*    nUnused 
---
>       *    nUnused 
56,57c56
<       void**  unused,  
<       int*    nUnused 
---
>       voidnUnused 
56,58c56
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void*);
56,58c56
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void**  ;
56,60c56
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       void**  unusedBZ_EXTERN int BZ_API(BZ2_bzReadlen 
57,60c57
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       int BZ_API(BZ2_bzReadlen 
57,60c57
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       intBZ_API(BZ2_bzReadlen 
57,60c57
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>       int*    (BZ2_bzReadlen 
58,60c58
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
---
>    BZ2_bzReadlen 
58,61c58
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
>    ));
60,61c60
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
---
> ;
60,63c60
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
60,63c60
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN int BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
60,63c60
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN int BZ_API* BZ_API(BZ2_bzWriteOpen) ( 
60,63c60
< BZ_EXTERN int BZ_API(BZ2_bzReadlen 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN int BZ_API(BZ_API(BZ2_bzWriteOpen) ( 
61,63c61
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    (BZ2_bzWriteOpen) ( 
61,63c61
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZ2_bzWriteOpen) ( 
63c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> ) ( 
63c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN ( 
63,64c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILEint*  bzerror,      
63,64c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* *  bzerror,      
(96.1 %, 8072 bytes)
60,62c60
< ;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ2_bzWriteOpen) ( 
62c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> ) ( 
62c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN ( 
62,63c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILEint*  bzerror,      
62,63c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* *  bzerror,      
62,63c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_APIbzerror,      
62,63c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_API(,      
62,64c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenFILE* f, 
62,64c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) * f, 
63,64c63
<       int*  bzerror,      
<       FILE* f, 
---
>       f, 
63,64c63
<       int*  bzerror,      
<       FILE* f, 
---
>       int, 
63,65c63
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  int   blockSize100k, 
63,65c63
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  bzerrorblockSize100k, 
64,65c64
<       FILE* f, 
<       int   blockSize100k, 
---
>       , 
64,66c64
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILEint   verbosity, 
64,66c64
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILE* verbosity, 
65,66d64
<       int   blockSize100k, 
<       int   verbosity, 
65,66d64
<       int   blockSize100k, 
<       int   verbosity, 
65,66d64
<       int   blockSize100k, 
<       int   verbosity, 
65,68c65
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int   blockSize100k);
66,68c66
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
66,70c66
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzWritelen 
66,70c66
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   verbosityvoid BZ_API(BZ2_bzWritelen 
67,70c67
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       BZ_API(BZ2_bzWritelen 
67,70c67
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>       int   (BZ2_bzWritelen 
68,70c68
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
---
>    BZ2_bzWritelen 
68,71c68
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
>    ));
70,71c70
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
---
> ;
70,73c70
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
70,73c70
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void void BZ_API(BZ2_bzWriteClose) ( 
70,73c70
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_APIBZ_API(BZ2_bzWriteClose) ( 
70,73c70
< BZ_EXTERN void BZ_API(BZ2_bzWritelen 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void BZ_API((BZ2_bzWriteClose) ( 
71,73c71
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    BZ2_bzWriteClose) ( 
71,73c71
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )) ( 
73c73
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> ( 
73,74c73
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN int*          bzerror, 
73,74c73
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void *          bzerror, 
73,74c73
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
(96.1 %, 8030 bytes)
70,72c70
< ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> ) ( 
72c72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> ( 
72,73c72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN int*          bzerror, 
72,73c72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void *          bzerror, 
72,73c72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
72,73c72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(, 
72,74c72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseBZFILE*       b, 
72,74c72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) *       b, 
73,74c73
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       b, 
73,74c73
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int, 
73,75c73
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          int           abandon, 
73,75c73
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          bzerrorabandon, 
74,75c74
<       BZFILE*       b, 
<       int           abandon, 
---
>       , 
74,76c74
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILEunsigned int* nbytes_in, 
74,76c74
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       int* nbytes_in, 
74,76c74
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       b* nbytes_in, 
75,76c75
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       nbytes_in, 
75,76c75
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
75,77c75
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           abandonunsigned int* nbytes_out 
76,77c76
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
76,77c76
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_out 
76,77c76
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned intnbytes_out 
76,78c76
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* );
76,78c76
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* nbytes_in;
77,80c77
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
77,80c77
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned void BZ_API(BZ2_bzWriteClose64) ( 
77,80c77
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ_API(BZ2_bzWriteClose64) ( 
77,80c77
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* (BZ2_bzWriteClose64) ( 
78,80c78
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    BZ2_bzWriteClose64) ( 
78,80c78
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    )) ( 
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> ( 
80,81c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN int*          bzerror, 
80,81c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void *          bzerror, 
80,81c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
80,81c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(, 
80,82c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64BZFILE*       b, 
80,82c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) *       b, 
81,82c81
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       b, 
81,82c81
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int, 
81,83c81
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          int           abandon, 
81,83c81
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          bzerrorabandon, 
82,83c82
<       BZFILE*       b, 
<       int           abandon, 
---
>       , 
82,84c82
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILEunsigned int* nbytes_in_lo32, 
82,84c82
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       int* nbytes_in_lo32, 
82,84c82
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       b* nbytes_in_lo32, 
83,84c83
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       nbytes_in_lo32, 
83,84c83
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           , 
83,85c83
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           abandonunsigned int* nbytes_in_hi32, 
84,85c84
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
84,85c84
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32, 
84,85c84
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned intnbytes_in_hi32, 
84,85c84
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned int* , 
84,86c84
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_lo32unsigned int* nbytes_out_lo32, 
85,86c85
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int* nbytes_out_lo32, 
85,86c85
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
85,86c85
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intnbytes_out_lo32, 
85,86c85
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* , 
85,87c85
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_hi32unsigned int* nbytes_out_hi32
86,87c86
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       int* nbytes_out_hi32
86,87c86
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
86,87c86
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intnbytes_out_hi32
86,88c86
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* );
86,88c86
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_out_lo32;
87,93c87
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
87,93c87
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int BZ_API(BZ2_bzBuffToBuffCompress) ( 
87,93c87
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ_API(BZ2_bzBuffToBuffCompress) ( 
87,93c87
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* (BZ2_bzBuffToBuffCompress) ( 
88,93c88
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    BZ2_bzBuffToBuffCompress) ( 
88,93c88
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    )) ( 
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> ( 
93,94c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN char*         dest, 
93,94c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int *         dest, 
93,94c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_APIdest, 
93,94c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(, 
93,95c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompressunsigned int* destLen,
93,95c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) int* destLen,
94,95c94
<       char*         dest, 
<       unsigned int* destLen,
---
>       * destLen,
94,95c94
<       char*         dest, 
<       unsigned int* destLen,
---
>       chardestLen,
94,95c94
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         ,
94,96c94
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destchar*         source, 
95,96c95
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
95,96c95
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned source, 
95,96c95
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int, 
95,97c95
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* unsigned int  sourceLen,
95,97c95
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLenint  sourceLen,
96,97c96
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
96,97c96
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
96,98c96
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         int           blockSize100k, 
96,98c96
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         sourceblockSize100k, 
97,98c97
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       , 
97,99c97
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int           verbosity, 
97,99c97
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  verbosity, 
97,99c97
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  sourceLen, 
98,99d97
<       int           blockSize100k, 
<       int           verbosity, 
98,99d97
<       int           blockSize100k, 
<       int           verbosity, 
98,101c98
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       int           blockSize100k);
99,101c99
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       ;
99,103c99
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
99,103c99
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosityint BZ_API(BZ2_bzBuffToBuffDecompress) ( 
100,103c100
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffDecompress) ( 
100,103c100
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           (BZ2_bzBuffToBuffDecompress) ( 
101,103c101
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    BZ2_bzBuffToBuffDecompress) ( 
101,103c101
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    )) ( 
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> ( 
103,104c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN char*         dest, 
103,104c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int *         dest, 
103,104c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_APIdest, 
103,104c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(, 
103,105c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int* destLen,
103,105c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) int* destLen,
104,105c104
<       char*         dest, 
<       unsigned int* destLen,
---
>       * destLen,
104,105c104
<       char*         dest, 
<       unsigned int* destLen,
---
>       chardestLen,
104,105c104
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         ,
104,106c104
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destchar*         source, 
105,106c105
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
105,106c105
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned source, 
105,106c105
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int, 
105,107c105
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* unsigned int  sourceLen,
105,107c105
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLenint  sourceLen,
106,107c106
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
106,107c106
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
106,108c106
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         int           small, 
106,108c106
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         sourcesmall, 
107,108c107
<       unsigned int  sourceLen,
<       int           small, 
---
>       , 
107,109c107
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int           );
107,109c107
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  );
107,109c107
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  sourceLen;
108,111c108
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(mode
---
>       BZ_EXTERN BZFILE * BZ_API(mode
108,111c108
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(mode
---
>       int           BZFILE * BZ_API(mode
108,111c108
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(mode
---
>       int           small* BZ_API(mode
109,111c109
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(mode
---
>       BZ_API(mode
109,111c109
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(mode
---
>       int           (mode
109,111c109
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(mode
---
>       int           )mode
111,112c111
< BZ_EXTERN BZFILE * BZ_API(mode
<    );
---
> );
111,112c111
< BZ_EXTERN BZFILE * BZ_API(mode
<    );
---
> BZ_EXTERN ;
111,114c111
< BZ_EXTERN BZFILE * BZ_API(mode
<    );
< 
< (BZ2_bzflush) (
---
> BZ_EXTERN BZFILE (BZ2_bzflush) (
(96.1 %, 8005 bytes)
113,115d112
< (BZ2_bzflush) (
<       );
< 
113,115d112
< (BZ2_bzflush) (
<       );
< 
113,116c113
< (BZ2_bzflush) (
<       );
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> (define BZ_VERSION  "1.0.2, 30-Dec-2001"
(96.1 %, 7979 bytes)
111,115c111
< BZ_EXTERN ;
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> BZ_EXTERN char            Char;
113,115c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> Char;
113,115c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #;
113,116c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define typedef unsigned char   Bool;
113,116c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define BZ_VERSION  unsigned char   Bool;
115,116c115
< typedef char            Char;
< typedef unsigned char   Bool;
---
> char   Bool;
115,116c115
< typedef char            Char;
< typedef unsigned char   Bool;
---
> typedef Bool;
115,116c115
< typedef char            Char;
< typedef unsigned char   Bool;
---
> typedef char            ;
115,117c115
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            Chartypedef unsigned char   UChar;
116,117c116
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> unsigned char   UChar;
116,117c116
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char   UChar;
116,117c116
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef unsigned UChar;
116,117c116
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef unsigned char   ;
116,118c116
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   Booltypedef int             Int32;
117,118c117
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> int             Int32;
117,118c117
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef Int32;
117,118c117
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned ;
117,119c117
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   typedef unsigned int    UInt32;
117,119c117
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   UCharunsigned int    UInt32;
118,119c118
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> int    UInt32;
118,119c118
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef UInt32;
118,119c118
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             ;
118,120c118
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef int             Int32typedef short           Int16;
119,120c119
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> short           Int16;
119,120c119
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef Int16;
119,120c119
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned ;
119,121c119
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned int    typedef unsigned short  UInt16;
119,121c119
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned int    UInt32unsigned short  UInt16;
120,121c120
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> short  UInt16;
120,121c120
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef UInt16;
120,121c120
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef short           ;
120,123c120
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  (0)
---
> typedef short           Int16#define True  (0)
121,123c121
< typedef unsigned short  UInt16;
< 
< #define True  (0)
---
> define True  (0)
121,123c121
< typedef unsigned short  UInt16;
< 
< #define True  (0)
---
> typedef True  (0)
121,123c121
< typedef unsigned short  UInt16;
< 
< #define True  (0)
---
> typedef unsigned (0)
121,123c121
< typedef unsigned short  UInt16;
< 
< #define True  (0)
---
> typedef unsigned short  0)
121,123c121
< typedef unsigned short  UInt16;
< 
< #define True  (0)
---
> typedef unsigned short  UInt16)
123,124d122
< #define True  (0)
< 
123,124d122
< #define True  (0)
< 
123,124d122
< #define True  (0)
< 
(96.1 %, 7932 bytes)
120,122c120
< typedef UInt16;
< 
< #define True  (0)
---
> typedef 0)
120,122c120
< typedef UInt16;
< 
< #define True  (0)
---
> typedef UInt16)
122,123d121
< #define True  (0)
< 
122,123d121
< #define True  (0)
< 
122,123d121
< #define True  (0)
< 
122,124c122
< #define True  (0)
< 
< #define AssertHdefine )
---
> #define True  )
122,132c122
< #define True  (0)
< 
< #define AssertHdefine )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define True  (#define BZ_RAND_DECLS                          \
122,132c122
< #define True  (0)
< 
< #define AssertHdefine )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define True  (0define BZ_RAND_DECLS                          \
124,132c124
< #define AssertHdefine )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> BZ_RAND_DECLS                          \
124,132c124
< #define AssertHdefine )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #\
124,133c124
< #define AssertHdefine )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
---
> #define Int32 rNToGo1
124,133c124
< #define AssertHdefine )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
---
> #define AssertHdefine rNToGo1
132,133d131
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
132,133d131
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo1
(96.2 %, 7865 bytes)
124,126c124
< #define AssertHdefine rNToGo1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
---
> #define AssertHdefine define BZ_S_INPUT     2
125,126c125
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
---
> BZ_S_INPUT     2
125,126c125
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
---
> #2
(96.2 %, 7831 bytes)
124,126c124
< #define AssertHdefine define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define AssertHdefine 2
124,127c124
< #define AssertHdefine define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define AssertHdefine define #define BZ_N_QSORT 12
124,127c124
< #define AssertHdefine define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define AssertHdefine define BZ_S_INPUT     define BZ_N_QSORT 12
126,127c126
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> BZ_N_QSORT 12
126,127c126
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #12
126,128c126
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define #define BZ_N_SHELL 18
126,128c126
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_N_RADIX define BZ_N_SHELL 18
127,128c127
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> BZ_N_SHELL 18
127,128c127
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #18
127,129c127
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
127,129c127
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
128,129c128
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
128,129c128
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #(BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
128,129c128
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
128,129c128
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL + BZ_N_QSORT + BZ_N_SHELL + 2)
129c129
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> BZ_N_QSORT + BZ_N_SHELL + 2)
129c129
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #+ BZ_N_SHELL + 2)
129c129
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL + 2)
129c129
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT + 2)
129c129
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (2)
129c129
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX )
(96.2 %, 7792 bytes)
129,139c129
< #define BZ_N_OVERSHOOT (2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream;
---
> #define BZ_N_OVERSHOOT (;
129,142c129
< #define BZ_N_OVERSHOOT (2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream;
< 
<       
<       UInt32*  arr1;
---
> #define BZ_N_OVERSHOOT (2UInt32*  arr1;
136,142c136
< typedef
<    struct {
<       
<       bz_stream;
< 
<       
<       UInt32*  arr1;
---
> *  arr1;
137,142c137
<    struct {
<       
<       bz_stream;
< 
<       
<       UInt32*  arr1;
---
>    arr1;
137,142c137
<    struct {
<       
<       bz_stream;
< 
<       
<       UInt32*  arr1;
---
>    struct ;
139,142d138
<       bz_stream;
< 
<       
<       UInt32*  arr1;
139,143c139
<       bz_stream;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream*  arr2;
(96.2 %, 7746 bytes)
139,140c139
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       ftab;
139,140c139
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       UInt32;
139,141c139
<       UInt32*  arr2;
<       UInt32*  ftab;
<       UInt16*  mtfv;
---
>       UInt32*  UInt16*  mtfv;
139,141c139
<       UInt32*  arr2;
<       UInt32*  ftab;
<       UInt16*  mtfv;
---
>       UInt32*  arr2*  mtfv;
140,141c140
<       UInt32*  ftab;
<       UInt16*  mtfv;
---
>       mtfv;
140,141c140
<       UInt32*  ftab;
<       UInt16*  mtfv;
---
>       UInt32;
140,142c140
<       UInt32*  ftab;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32*  UChar*   zbits;
140,142c140
<       UInt32*  ftab;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32*  ftab*   zbits;
141,142c141
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       zbits;
141,142c141
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt16;
(96.2 %, 7718 bytes)
140,145c140
<       UInt32;
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
---
>       UInt32Int32    nblockMAX;
141,145c141
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
---
>       nblockMAX;
141,145c141
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
---
>       UChar;
141,146c141
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       UChar*   Int32    numZ;
141,146c141
<       UChar*   zbits;
< 
<       
<       ;
<       Int32    nblockMAX;
<       Int32    numZ;
---
>       UChar*   zbitsnumZ;
(96.3 %, 7667 bytes)
142,143d141
<       Int32    numZ;
<       Int32    state_out_pos;
142,145d141
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
(96.3 %, 7616 bytes)
141,148c141
<       UChar;
< 
<       
<       Int32    nInUse;
<       ;
< 
<       
<       Int32    verbosity;
---
>       UCharverbosity;
144d143
<       Int32    nInUse;
146,148d144
< 
<       
<       Int32    verbosity;
144,149c144
<       Int32    nInUse;
<       ;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       Int32    Int32    blockNo;
144,149c144
<       Int32    nInUse;
<       ;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       Int32    nInUseblockNo;
146,149d145
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
148,149d147
<       Int32    verbosity;
<       Int32    blockNo;
(96.3 %, 7558 bytes)
146,157d145
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
146,159c146
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
>       ;
146,169c146
<       Int32    ;
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
---
>       Int32    #4096
148,169c148
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
---
>    4096
149,170c149
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE 16
---
>    #define MTFL_SIZE 16
149,170c149
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE 16
---
>    EStatedefine MTFL_SIZE 16
157,170c157
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE 16
---
> MTFL_SIZE 16
159,170c159
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #4096
< #define MTFL_SIZE 16
---
> 16
169,175d168
< #4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
169,177c169
< #4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #struct {
170,177c170
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> {
170,179c170
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
---
> #;
170,182c170
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       Int32    tt;
---
> #define Int32    tt;
170,182c170
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       Int32    tt;
---
> #define MTFL_SIZE tt;
176,182c176
< typedef
<    struct {
<       
<       ;
< 
<       
<       Int32    tt;
---
> ;
177,185c177
<    struct {
<       
<       ;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
---
>    UInt16   *ll16;
177,185c177
<    struct {
<       
<       ;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
---
>    struct *ll16;
179,185c179
<       ;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
---
>       ll16;
(96.3 %, 7526 bytes)
169,175c169
< typedef
<    struct {
<       
<       ;
< 
<       
<       Int32    tt;
---
> ;
170,178c170
<    struct {
<       
<       ;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
---
>    UInt16   *ll16;
170,178c170
<    struct {
<       
<       ;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
---
>    struct *ll16;
172,178c172
<       ;
< 
<       
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
---
>       ll16;
175,178c175
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
---
>       ;
175,179c175
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    UChar    *ll4;
175,179c175
<       Int32    tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    tt*ll4;
178,179c178
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       ll4;
178,179c178
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       UInt16   ;
178,182c178
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       ;
---
>       UInt16   *;
178,183c178
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       ;
<       Int32*   save_gPerm;
---
>       UInt16   *ll16Int32*   save_gPerm;
179,183c179
<       UChar    *ll4;
< 
<       
<       ;
<       Int32*   save_gPerm;
---
>       *   save_gPerm;
179,183c179
<       UChar    *ll4;
< 
<       
<       ;
<       Int32*   save_gPerm;
---
>       UChar    save_gPerm;
179,183c179
<       UChar    *ll4;
< 
<       
<       ;
<       Int32*   save_gPerm;
---
>       UChar    *;
(96.3 %, 7485 bytes)
175,179d174
<       ;
<       UChar    *ll4;
< 
<       
<       ;
176,180c176
<       UChar    *ll4;
< 
<       
<       ;
<       Int32*   save_gPerm;
---
>       *   save_gPerm;
176,180c176
<       UChar    *ll4;
< 
<       
<       ;
<       Int32*   save_gPerm;
---
>       UChar    save_gPerm;
176,180c176
<       UChar    *ll4;
< 
<       
<       ;
<       Int32*   save_gPerm;
---
>       UChar    *;
176,182c176
<       UChar    *ll4;
< 
<       
<       ;
<       Int32*   save_gPerm;
< 
<    }
---
>       UChar    *ll4}
179,183c179
<       ;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
---
>       DState;
180,183c180
<       Int32*   save_gPerm;
< 
<    }
<    DState;
---
>       ;
180,189c180
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
---
>       Int32makeMaps_e ( EState* s )
180,189c180
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
---
>       Int32*   ( EState* s )
180,189c180
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
---
>       Int32*   save_gPermEState* s )
182,189c182
<    }
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
---
>    * s )
183,189c183
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
---
>    s )
183,189c183
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
---
>    DState)
189d188
< makeMaps_e ( EState* s )
189,191c189
< makeMaps_e ( EState* s )
< {
<    Int32 i;
---
> makeMaps_e Int32 i;
(96.4 %, 7436 bytes)
176,183c176
<       UChar    *ll4}
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
---
>       UChar    *ll4* s )
177,183c177
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
---
>    s )
177,183c177
<    DState;
< 
< 
< 
< 
< 
< makeMaps_e ( EState* s )
---
>    DState)
183d182
< makeMaps_e ( EState* s )
183,185c183
< makeMaps_e ( EState* s )
< {
<    Int32 i;
---
> makeMaps_e Int32 i;
183,185c183
< makeMaps_e ( EState* s )
< {
<    Int32 i;
---
> makeMaps_e ( i;
183,185c183
< makeMaps_e ( EState* s )
< {
<    Int32 i;
---
> makeMaps_e ( EState;
183,186c183
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse ;
---
> makeMaps_e ( EState* s->nInUse ;
183,186c183
< makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse ;
---
> makeMaps_e ( EState* s ->nInUse ;
184,186c184
< {
<    Int32 i;
<    s->nInUse ;
---
> nInUse ;
185,186c185
<    Int32 i;
<    s->nInUse ;
---
>    ;
185,188c185
<    Int32 i;
<    s->nInUse ;
<       
< }
---
>    Int32 }
185,192c185
<    Int32 i;
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
---
>    Int32 istatic
186,193c186
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    void generateMTFValues ( EState* s )
186,193c186
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    sgenerateMTFValues ( EState* s )
186,193c186
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    s->( EState* s )
186,193c186
<    s->nInUse ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    s->nInUse EState* s )
188,193c188
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
> * s )
192,193c192
< static
< void generateMTFValues ( EState* s )
---
> s )
193c193
< void generateMTFValues ( EState* s )
---
> )
193,194c193
< void generateMTFValues ( EState* s )
< {
---
> void {
(96.4 %, 7414 bytes)
185,192c185
<    ;
<       
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
>    EState* s )
187,192c187
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
---
> * s )
191,192c191
< static
< void generateMTFValues ( EState* s )
---
> s )
192c192
< void generateMTFValues ( EState* s )
---
> )
192,193c192
< void generateMTFValues ( EState* s )
< {
---
> void {
192,194c192
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> void generateMTFValues UChar   yy[256];
192,194c192
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> void generateMTFValues ( yy[256];
192,194c192
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> void generateMTFValues ( EState[256];
192,194c192
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> void generateMTFValues ( EState* 256];
192,194c192
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
---
> void generateMTFValues ( EState* s ];
193,194c193
< {
<    UChar   yy[256];
---
> ;
194d193
<    UChar   yy[256];
194,195c194
<    UChar   yy[256];
<    Int32   i, j= s->nInUse+i;
---
>    UChar   i, j= s->nInUse+i;
(96.4 %, 7394 bytes)
194c194
<    Int32   i, j= s->nInUse+i;
---
>    ->nInUse+i;
194c194
<    Int32   i, j= s->nInUse+i;
---
>    Int32   nInUse+i;
194c194
<    Int32   i, j= s->nInUse+i;
---
>    Int32   i+i;
194c194
<    Int32   i, j= s->nInUse+i;
---
>    Int32   i, i;
194c194
<    Int32   i, j= s->nInUse+i;
---
>    Int32   i, j;
194,196c194
<    Int32   i, j= s->nInUse+i;
< 
<    {
---
>    Int32   i, j= {
194,197c194
<    Int32   i, j= s->nInUse+i;
< 
<    {
<       }
---
>    Int32   i, j= s}
194,199c194
<    Int32   i, j= s->nInUse+i;
< 
<    {
<       }
< 
<    }
---
>    Int32   i, j= s->}
194,203c194
<    Int32   i, j= s->nInUse+i;
< 
<    {
<       }
< 
<    }
< 
< 
< 
< ;
---
>    Int32   i, j= s->nInUse;
194,207c194
<    Int32   i, j= s->nInUse+i;
< 
<    {
<       }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
---
>    Int32   i, j= s->nInUse+static
194,208c194
<    Int32   i, j= s->nInUse+i;
< 
<    {
<       }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
---
>    Int32   i, j= s->nInUse+ivoid ;
196,208c196
<    {
<       }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
---
>    ;
197,212c197
<       }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>       int BZ_API(BZ2_bzCompressInit) 
199,212c199
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>    BZ_API(BZ2_bzCompressInit) 
(96.4 %, 7381 bytes)
194,208c194
<    Int32   i, j;
< 
<    {
<       }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
---
>    Int32   i, jvoid ;
196,208c196
<    {
<       }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
---
>    ;
197,212c197
<       }
< 
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>       int BZ_API(BZ2_bzCompressInit) 
199,212c199
<    }
< 
< 
< 
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>    BZ_API(BZ2_bzCompressInit) 
203,212c203
< ;
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit) 
207,212c207
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit) 
208,212c208
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> ) 
208,213c208
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void ( bz_stream* strm, 
212,213c212
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> bz_stream* strm, 
212,213c212
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> int * strm, 
212,213c212
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> int BZ_APIstrm, 
212,213c212
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> int BZ_API(, 
212,214c212
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int BZ_API(BZ2_bzCompressInitint        blockSize100k,
213,214c213
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     blockSize100k,
(96.4 %, 7349 bytes)
203,204c203
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> strm, 
203,204c203
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> (, 
203,205c203
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> (BZ2_bzCompressInitint        blockSize100k,
204,205c204
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     blockSize100k,
204,205c204
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( ,
204,206c204
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( bz_streamint        verbosity,
204,206c204
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( bz_stream* verbosity,
204,206c204
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( bz_stream* strm,
205,206d204
<                      int        blockSize100k,
<                      int        verbosity,
205,206d204
<                      int        blockSize100k,
<                      int        verbosity,
(96.5 %, 7258 bytes)
204,207c204
<                     ( bz_stream* strm,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* strmn;
205,207c205
<                      int        workFactor )
< {
<    Int32   n;
---
>                      ;
205,208c205
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        EState* s;
205,208c205
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        workFactor * s;
206,208c206
< {
<    Int32   n;
<    EState* s;
---
> s;
207,208c207
<    Int32   n;
<    EState* s;
---
>    ;
207,209c207
<    Int32   n;
<    EState* s;
<    ;
---
>    Int32   ;
207,210c207
<    Int32   n;
<    EState* s;
<    ;
<    NULL;
---
>    Int32   nNULL;
208d207
<    EState* s;
210d208
<    NULL;
208,211c208
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    EStates->arr2 = NULL;
208,211c208
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    EState* ->arr2 = NULL;
208,211c208
<    EState* s;
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    EState* sarr2 = NULL;
209,211c209
<    ;
<    NULL;
<    s->arr2 = NULL;
---
>    = NULL;
211d210
<    s->arr2 = NULL;
(96.5 %, 7236 bytes)
208,209c208
<    EState* sarr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EState* sarr2 n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
208,209c208
<    EState* sarr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EState* sarr2 = +BZ_N_OVERSHOOT) * sizeof(UInt32) );
208,209c208
<    EState* sarr2 = NULL;
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EState* sarr2 = NULLBZ_N_OVERSHOOT) * sizeof(UInt32) );
209c209
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ) * sizeof(UInt32) );
209c209
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC* sizeof(UInt32) );
209c209
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( sizeof(UInt32) );
209c209
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( ((UInt32) );
209c209
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (nUInt32) );
209c209
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+) );
209c209
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT);
209c209
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) ;
209,210c209
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    NULL;
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * NULL;
209,210c209
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    NULL;
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof;
209,212c209
<    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    NULL;
< 
<    strm->state          ;
---
>    sBZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(strm->state          ;
(96.5 %, 7215 bytes)
209,210c209
<    sBZALLOCBZALLOC( sizeof(UInt32) );
<    NULL;
---
>    sBZALLOCBZALLOC( NULL;
209,210c209
<    sBZALLOCBZALLOC( sizeof(UInt32) );
<    NULL;
---
>    sBZALLOCBZALLOC( sizeof;
209,212c209
<    sBZALLOCBZALLOC( sizeof(UInt32) );
<    NULL;
< 
<    strm->state          ;
---
>    sBZALLOCBZALLOC( sizeof(strm->state          ;
209,212c209
<    sBZALLOCBZALLOC( sizeof(UInt32) );
<    NULL;
< 
<    strm->state          ;
---
>    sBZALLOCBZALLOC( sizeof(UInt32->state          ;
209,212c209
<    sBZALLOCBZALLOC( sizeof(UInt32) );
<    NULL;
< 
<    strm->state          ;
---
>    sBZALLOCBZALLOC( sizeof(UInt32) state          ;
210,212d209
<    NULL;
< 
<    strm->state          ;
210,212d209
<    NULL;
< 
<    strm->state          ;
210,213c210
<    NULL;
< 
<    strm->state          ;
<    return BZ_OK;
---
>    NULLBZ_OK;
(96.5 %, 7179 bytes)
209,223c209
<    sBZALLOCBZALLOC( sizeof(UInt32) );
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
---
>    sBZALLOCBZALLOC( sizeof(UInt32) )define ADD_CHAR_TO_BLOCK)
210,223c210
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
---
>    ADD_CHAR_TO_BLOCK)
210,223c210
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
---
>    return )
211,224d210
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
211,227d210
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
223,228c223
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
223,228c223
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #(BZ2_bzCompress) ( bz_stream *strm, int action )
223,228c223
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define BZ2_bzCompress) ( bz_stream *strm, int action )
223,228c223
< #define ADD_CHAR_TO_BLOCK)
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK) ( bz_stream *strm, int action )
224,228c224
< ;
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> ( bz_stream *strm, int action )
228c228
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> bz_stream *strm, int action )
228c228
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int *strm, int action )
228c228
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_APIstrm, int action )
228c228
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> int BZ_API(, int action )
(96.5 %, 7143 bytes)
223c223
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> *strm, int action )
223c223
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_APIstrm, int action )
223c223
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(, int action )
223c223
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompressint action )
223c223
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompress) action )
223c223
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompress) ( )
223,224c223
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
---
> BZ_API(BZ2_bzCompress) ( bz_stream {
223,226c223
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> BZ_API(BZ2_bzCompress) ( bz_stream *EState* s;
223,226c223
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm* s;
223,226c223
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm, s;
223,226c223
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm, int ;
223,227c223
< BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
< }
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action }
224,234d223
< {
<    
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
226,235c226
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZ_API(BZ2_bzDecompressInit) 
226,235c226
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    EState(BZ2_bzDecompressInit) 
(96.5 %, 7115 bytes)
223,227c223
< BZ_API(BZ2_bzCompress) ( )
< {
<    
<    EState* s;
< }
---
> BZ_API(BZ2_bzCompress) ( }
224,234d223
< {
<    
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
226,235c226
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZ_API(BZ2_bzDecompressInit) 
226,235c226
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    EState(BZ2_bzDecompressInit) 
226,235c226
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    EState* BZ2_bzDecompressInit) 
226,235c226
<    EState* s;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    EState* s) 
227,236c227
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> ( bz_stream* strm, 
235,236c235
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> bz_stream* strm, 
235,236c235
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> int * strm, 
235,236c235
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> int BZ_APIstrm, 
235,236c235
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> int BZ_API(, 
235,237c235
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int BZ_API(BZ2_bzDecompressInitint        verbosity,
236,237c236
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      verbosity,
236,237c236
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( ,
236,238c236
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_streamint        small )
236,238c236
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_stream* small )
236,238c236
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_stream* strm)
(96.6 %, 7029 bytes)
236,238c236
<                      ( bz_stream* small )
< {
<    DState* s;
---
>                      ( bz_stream* ;
236,239c236
<                      ( bz_stream* small )
< {
<    DState* s;
< }
---
>                      ( bz_stream* small }
237,242d236
< {
<    DState* s;
< }
< 
< 
< 
238,244c238
<    DState* s;
< }
< 
< 
< 
< static
< void ;
---
>    void ;
238,244c238
<    DState* s;
< }
< 
< 
< 
< static
< void ;
---
>    DState;
238,248c238
<    DState* s;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    DState* int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
238,248c238
<    DState* s;
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    DState* sBZ_API(BZ2_bzDecompress) ( bz_stream *strm )
239,248c239
< }
< 
< 
< 
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> (BZ2_bzDecompress) ( bz_stream *strm )
243,248c243
< static
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> BZ2_bzDecompress) ( bz_stream *strm )
244,248c244
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> ) ( bz_stream *strm )
244,248c244
< void ;
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> void ( bz_stream *strm )
248c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> bz_stream *strm )
248c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int *strm )
248c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_APIstrm )
248c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> int BZ_API()
248,249c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
---
> int BZ_API(BZ2_bzDecompress{
248,250c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> int BZ_API(BZ2_bzDecompress) DState* s;
248,250c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> int BZ_API(BZ2_bzDecompress) ( * s;
248,250c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream s;
248,250c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream *;
248,251c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (s == NULL) ;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream *strm if (s == NULL) ;
249,251c249
< {
<    DState* s;
<    if (s == NULL) ;
---
> (s == NULL) ;
250,251c250
<    DState* s;
<    if (s == NULL) ;
---
>    s == NULL) ;
250,251c250
<    DState* s;
<    if (s == NULL) ;
---
>    DState== NULL) ;
250,251c250
<    DState* s;
<    if (s == NULL) ;
---
>    DState* NULL) ;
250,251c250
<    DState* s;
<    if (s == NULL) ;
---
>    DState* s) ;
251c251
<    if (s == NULL) ;
---
>    ;
251,252c251
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    if BZFREE(s->ll4);
251,252c251
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    if ((s->ll4);
251,252c251
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    if (s s->ll4);
251,252c251
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    if (s == ->ll4);
251,252c251
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    if (s == NULLll4);
251,252c251
<    if (s == NULL) ;
<    BZFREE(s->ll4);
---
>    if (s == NULL) );
252c252
<    BZFREE(s->ll4);
---
>    ;
252,254c252
<    BZFREE(s->ll4);
< 
<    ;
---
>    BZFREE;
252,255c252
<    BZFREE(s->ll4);
< 
<    ;
< }
---
>    BZFREE(}
252,262c252
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(s#define BZ_SETERR(eee)                    \
252,262c252
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(s->define BZ_SETERR(eee)                    \
252,262c252
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(s->ll4BZ_SETERR(eee)                    \
252,262c252
<    BZFREE(s->ll4);
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZFREE(s->ll4)(eee)                    \
254,262c254
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    eee)                    \
255,262c255
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> )                    \
(96.6 %, 7015 bytes)
252,262c252
<    ;
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    (eee)                    \
254,262c254
<    ;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    eee)                    \
255,262c255
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> )                    \
262c262
< #define BZ_SETERR(eee)                    \
---
> \
262,265c262
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
---
> #typedef 
262,266c262
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> #define struct {
262,266c262
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> #define BZ_SETERR{
262,267c262
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define BZ_SETERR(FILE*     handle;
262,267c262
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define BZ_SETERR(eee*     handle;
262,267c262
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define BZ_SETERR(eee)                    handle;
265,267c265
< typedef 
<    struct {
<       FILE*     handle;
---
> ;
266,268c266
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>    Char      buf[BZ_MAX_UNUSED];
(96.6 %, 6973 bytes)
262,267c262
< \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> handle;
265,267c265
< typedef 
<    struct {
<       FILE*     handle;
---
> ;
266,268c266
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>    Char      buf[BZ_MAX_UNUSED];
266,268c266
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>    struct buf[BZ_MAX_UNUSED];
267,268c267
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>       [BZ_MAX_UNUSED];
267,268c267
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>       FILEBZ_MAX_UNUSED];
267,268c267
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>       FILE*     ];
268d267
<       Char      buf[BZ_MAX_UNUSED];
268d267
<       Char      buf[BZ_MAX_UNUSED];
(96.6 %, 6937 bytes)
268,269d267
<       Int32     bufN;
<       Bool      writing;
268,269d267
<       Int32     bufN;
<       Bool      writing;
268,270c268
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Int32     strm;
269,270d268
<       Bool      writing;
<       bz_stream strm;
269,270d268
<       Bool      writing;
<       bz_stream strm;
(96.6 %, 6890 bytes)
269,270d268
<       Int32     lastErr;
<       Bool      initialisedOk;
269,271c269
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       }
269,272c269
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Int32     bzFile;
(96.7 %, 6834 bytes)
268,278c268
<       Int32     bufN;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     bufNBZ_API(BZ2_bzWriteOpen) 
269,278c269
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    (BZ2_bzWriteOpen) 
270,278c270
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    BZ2_bzWriteOpen) 
270,278c270
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    bzFile) 
278,279c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> ( int*  bzerror,      
278,279c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILEint*  bzerror,      
278,279c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* *  bzerror,      
278,279c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_APIbzerror,      
278,279c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API(,      
278,280c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenFILE* f, 
279,280c279
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     * f, 
279,280c279
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( f, 
279,280c279
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int, 
279,281c279
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  int   blockSize100k, 
279,281c279
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  bzerrorblockSize100k, 
280,281c280
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       , 
280,282c280
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILEint   verbosity,
280,282c280
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* verbosity,
280,282c280
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* f,
281,282d280
<                       int   blockSize100k, 
<                       int   verbosity,
281,282d280
<                       int   blockSize100k, 
<                       int   verbosity,
281,283c281
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   blockSize100k)
282,284c282
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       {
282,285c282
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   Int32   ret;
282,285c282
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   verbosityret;
283,285c283
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       ;
283,286c283
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   bzFile* bzf = NULL;
283,286c283
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   workFactor * bzf = NULL;
284,286c284
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
> bzf = NULL;
285,286c285
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    = NULL;
285,286c285
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>    Int32   NULL;
286d285
<    bzFile* bzf = NULL;
286,287d285
<    bzFile* bzf = NULL;
< 
286,288c286
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile(BZ_OK);
286,288c286
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* BZ_OK);
286,288c286
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* bzf );
286,288c286
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* bzf = ;
286,290c286
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf = NULLif (f == NULL ||
288,290c288
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    (f == NULL ||
288,290c288
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    BZ_SETERRf == NULL ||
288,290c288
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    BZ_SETERR(== NULL ||
288,290c288
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    BZ_SETERR(BZ_OKNULL ||
288,290c288
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    BZ_SETERR(BZ_OK)||
290,291c290
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
290,291c290
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
290,291c290
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (< 1 || blockSize100k > 90 || verbosity > 4))
290,291c290
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f 1 || blockSize100k > 90 || verbosity > 4))
290,291c290
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f == || blockSize100k > 90 || verbosity > 4))
290,291c290
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>    if (f == NULL blockSize100k > 90 || verbosity > 4))
291c291
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        > 90 || verbosity > 4))
291c291
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        (90 || verbosity > 4))
291c291
<        (blockSize100k < 1 || blockSize100k > 90 || verbosity > 4))
---
>        (blockSize100k || verbosity > 4))
(96.7 %, 6797 bytes)
291c291
<        (90 || verbosity > 4))
---
>        ()
291,292c291
<        (90 || verbosity > 4))
<       bzf->handle        = bzf;   
---
>        (90 bzf->handle        = bzf;   
291,292c291
<        (90 || verbosity > 4))
<       bzf->handle        = bzf;   
---
>        (90 || ->handle        = bzf;   
291,292c291
<        (90 || verbosity > 4))
<       bzf->handle        = bzf;   
---
>        (90 || verbosity handle        = bzf;   
291,292c291
<        (90 || verbosity > 4))
<       bzf->handle        = bzf;   
---
>        (90 || verbosity > = bzf;   
291,292c291
<        (90 || verbosity > 4))
<       bzf->handle        = bzf;   
---
>        (90 || verbosity > 4bzf;   
291,292c291
<        (90 || verbosity > 4))
<       bzf->handle        = bzf;   
---
>        (90 || verbosity > 4);   
292,293c292
<       bzf->handle        = bzf;   
< }
---
>       }
292,298c292
<       bzf->handle        = bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzfvoid BZ_API(BZ2_bzWrite)
292,298c292
<       bzf->handle        = bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzf->BZ_API(BZ2_bzWrite)
292,298c292
<       bzf->handle        = bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzf->handle        (BZ2_bzWrite)
292,298c292
<       bzf->handle        = bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzf->handle        = BZ2_bzWrite)
292,298c292
<       bzf->handle        = bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>       bzf->handle        = bzf)
293,299c293
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    len )
---
> ( int*    len )
298,299c298
< void BZ_API(BZ2_bzWrite)
<              ( int*    len )
---
> int*    len )
298,299c298
< void BZ_API(BZ2_bzWrite)
<              ( int*    len )
---
> void *    len )
298,299c298
< void BZ_API(BZ2_bzWrite)
<              ( int*    len )
---
> void BZ_APIlen )
298,299c298
< void BZ_API(BZ2_bzWrite)
<              ( int*    len )
---
> void BZ_API()
298,300c298
< void BZ_API(BZ2_bzWrite)
<              ( int*    len )
< {
---
> void BZ_API(BZ2_bzWrite{
299,301c299
<              ( int*    len )
< {
<    ;
---
>              ;
299,303c299
<              ( int*    len )
< {
<    ;
< 
<    BZ_SETERR()
---
>              ( BZ_SETERR()
299,303c299
<              ( int*    len )
< {
<    ;
< 
<    BZ_SETERR()
---
>              ( int()
299,303c299
<              ( int*    len )
< {
<    ;
< 
<    BZ_SETERR()
---
>              ( int*    )
299,304c299
<              ( int*    len )
< {
<    ;
< 
<    BZ_SETERR()
<          ;
---
>              ( int*    len ;
300,305d299
< {
<    ;
< 
<    BZ_SETERR()
<          ;
<    
301,310c301
<    ;
< 
<    BZ_SETERR()
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    void BZ_API(BZ2_bzWriteClose)
303,310c303
<    BZ_SETERR()
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_API(BZ2_bzWriteClose)
303,310c303
<    BZ_SETERR()
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(BZ2_bzWriteClose)
303,310c303
<    BZ_SETERR()
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_SETERR(BZ2_bzWriteClose)
304,310c304
<          ;
<    
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>          )
306,311c306
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
310,311c310
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> int*          bzerror, 
310,311c310
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void *          bzerror, 
310,311c310
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_APIbzerror, 
310,311c310
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API(, 
310,312c310
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteCloseBZFILE*       b, 
311,312c311
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   *       b, 
311,312c311
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( b, 
311,312c311
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int, 
311,313c311
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          int           abandon,
311,313c311
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerrorabandon,
312,313c312
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     ,
312,314c312
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILEunsigned int* nbytes_in,
312,314c312
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       int* nbytes_in,
312,314c312
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       b* nbytes_in,
313,314c313
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     nbytes_in,
313,314c313
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
313,315c313
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandonunsigned int* nbytes_out )
314,315c314
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
314,315c314
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out )
314,315c314
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned intnbytes_out )
314,315c314
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned int* )
314,316c314
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     unsigned int* nbytes_in{
315,317c315
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     BZ2_bzWriteClose64 ;
315,317c315
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     unsigned ;
315,318c315
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
---
>                     unsigned int}
315,321c315
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* void BZ_API(BZ2_bzWriteClose64)
315,321c315
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                     unsigned int* nbytes_out BZ_API(BZ2_bzWriteClose64)
316,321c316
< {
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
> (BZ2_bzWriteClose64)
317,321c317
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64)
317,321c317
<    BZ2_bzWriteClose64 ;
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 )
318,322c318
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
321,322c321
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> int*          bzerror, 
321,322c321
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void *          bzerror, 
321,322c321
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_APIbzerror, 
321,322c321
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API(, 
321,323c321
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose64BZFILE*       b, 
322,323c322
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   *       b, 
322,323c322
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( b, 
322,323c322
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int, 
322,324c322
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          int           abandon,
322,324c322
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerrorabandon,
323,324c323
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     ,
323,325c323
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILEunsigned int* nbytes_in_lo32,
323,325c323
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       int* nbytes_in_lo32,
323,325c323
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       b* nbytes_in_lo32,
324,325c324
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     nbytes_in_lo32,
324,325c324
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
324,326c324
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           abandonunsigned int* nbytes_in_hi32,
325,326c325
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
325,326c325
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32,
325,326c325
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned intnbytes_in_hi32,
325,326c325
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned int* ,
325,327c325
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_lo32unsigned int* nbytes_out_lo32,
326,327c326
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int* nbytes_out_lo32,
326,327c326
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
326,327c326
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intnbytes_out_lo32,
326,327c326
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* ,
326,328c326
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32unsigned int* nbytes_out_hi32 )
327,328c327
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     int* nbytes_out_hi32 )
327,328c327
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
327,328c327
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intnbytes_out_hi32 )
327,328c327
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* )
327,329c327
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int* nbytes_out_lo32{
328,331c328
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     bzFile* bzf = ((bzf))
328,331c328
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned * bzf = ((bzf))
328,331c328
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned intbzf = ((bzf))
328,331c328
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned int* = ((bzf))
328,331c328
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = ((bzf))
---
>                     unsigned int* nbytes_out_hi32 ((bzf))
329,331c329
< {
<    
<    bzFile* bzf = ((bzf))
---
> (bzf))
331c331
<    bzFile* bzf = ((bzf))
---
>    bzf))
331c331
<    bzFile* bzf = ((bzf))
---
>    bzFile))
331c331
<    bzFile* bzf = ((bzf))
---
>    bzFile* )
331,332c331
<    bzFile* bzf = ((bzf))
<       ;
---
>    bzFile* bzf ;
331,334c331
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
---
>    bzFile* bzf = (BZ_OK);
331,334c331
<    bzFile* bzf = ((bzf))
<       ;
< 
<    (BZ_OK);
---
>    bzFile* bzf = (BZ_OK);
(96.7 %, 6781 bytes)
332,334d331
< 
<    (BZ_OK);
<    0;
333,334d332
<    (BZ_OK);
<    0;
(96.7 %, 6762 bytes)
331,337c331
<    bzFile* bzf ;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    bzFile* bzf BZ_API(BZ2_bzReadOpen) 
332,337c332
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    (BZ2_bzReadOpen) 
332,337c332
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    0BZ2_bzReadOpen) 
333,337c333
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> ) 
337,338c337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> ( int*  bzerror, 
337,338c337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILEint*  bzerror, 
337,338c337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* *  bzerror, 
337,338c337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_APIbzerror, 
337,338c337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_API(, 
337,339c337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzReadOpenFILE* f, 
338,339c338
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    * f, 
338,339c338
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( f, 
338,339c338
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int, 
338,340c338
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  int   verbosity,
338,340c338
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  bzerrorverbosity,
339,340c339
<                      FILE* f, 
<                      int   verbosity,
---
>                      ,
339,341c339
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILEint   small,
339,341c339
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE* small,
339,341c339
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE* f,
340,341d339
<                      int   verbosity,
<                      int   small,
340,342c340
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   * unused,
340,342c340
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   verbosityunused,
341,342c341
<                      int   small,
<                      void* unused,
---
>                      ,
341,343c341
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   int   nUnused )
341,343c341
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   smallnUnused )
342,343c342
<                      void* unused,
<                      int   nUnused )
---
>                      )
342,344c342
<                      void* unused,
<                      int   nUnused )
< {
---
>                      void{
342,345c342
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      void* bzFile* bzf = NULL;
342,345c342
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      void* unused* bzf = NULL;
343,345c343
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      bzf = NULL;
343,345c343
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   = NULL;
343,345c343
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   nUnused NULL;
344,345c344
< {
<    bzFile* bzf = NULL;
---
> ;
345d344
<    bzFile* bzf = NULL;
345,346c345
<    bzFile* bzf = NULL;
<    int     ret;
---
>    bzFileret;
345,346c345
<    bzFile* bzf = NULL;
<    int     ret;
---
>    bzFile* ;
345,348c345
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* bzf BZ_SETERR(BZ_OK);
345,348c345
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* bzf = (BZ_OK);
345,348c345
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* bzf = NULLBZ_OK);
346,348c346
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    );
346,348c346
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    int     ;
(96.7 %, 6727 bytes)
345,347c345
<    bzFile* bzf = (BZ_OK);
< 
<    if (f ||
---
>    bzFile* bzf = f ||
345,347c345
<    bzFile* bzf = (BZ_OK);
< 
<    if (f ||
---
>    bzFile* bzf = (||
345,348c345
<    bzFile* bzf = (BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf = (BZ_OK((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
345,348c345
<    bzFile* bzf = (BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf = (BZ_OK)(nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
347,348c347
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
347,348c347
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if < 0 || nUnused > BZ_MAX_UNUSED)))
347,348c347
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if (0 || nUnused > BZ_MAX_UNUSED)))
347,348c347
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    if (f || nUnused > BZ_MAX_UNUSED)))
348c348
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        nUnused > BZ_MAX_UNUSED)))
348c348
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (> BZ_MAX_UNUSED)))
348c348
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ((BZ_MAX_UNUSED)))
348c348
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ((nUnused )))
(96.7 %, 6702 bytes)
348,349c348
<        ((BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        ((bufN;
348,349c348
<        ((BZ_MAX_UNUSED)))
<       bzf->bufN;
---
>        ((BZ_MAX_UNUSED;
348,350c348
<        ((BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
---
>        ((BZ_MAX_UNUSED);
348,351c348
<        ((BZ_MAX_UNUSED)))
<       bzf->bufN;
<    ;
<    return bzf;   
---
>        ((BZ_MAX_UNUSED))return bzf;   
349,351c349
<       bzf->bufN;
<    ;
<    return bzf;   
---
>       bzf;   
349,351c349
<       bzf->bufN;
<    ;
<    return bzf;   
---
>       bzf;   
349,352c349
<       bzf->bufN;
<    ;
<    return bzf;   
< }
---
>       bzf->}
(96.7 %, 6676 bytes)
349,354c349
<       bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
349,354c349
<       bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       bzf) ( int *bzerror, BZFILE *b )
350,354c350
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> ( int *bzerror, BZFILE *b )
354c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> int *bzerror, BZFILE *b )
354c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void *bzerror, BZFILE *b )
354c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_APIbzerror, BZFILE *b )
354c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(, BZFILE *b )
354c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadCloseBZFILE *b )
354c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) *b )
354c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) ( b )
354c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) ( int )
354,355c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
---
> void BZ_API(BZ2_bzReadClose) ( int *{
354,356c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror}
354,360c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, int BZ_API(BZ2_bzRead) 
354,360c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE BZ_API(BZ2_bzRead) 
354,360c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *(BZ2_bzRead) 
354,360c354
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b BZ2_bzRead) 
355,360c355
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> ) 
356,361c356
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    ( int*    bzerror, 
(96.8 %, 6654 bytes)
354,360c354
< void BZ_API(BZ2_bzReadClose) ( b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( (BZ2_bzRead) 
354,360c354
< void BZ_API(BZ2_bzReadClose) ( b )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( b BZ2_bzRead) 
355,360c355
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> ) 
356,361c356
<    }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    ( int*    bzerror, 
360,361c360
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int*    bzerror, 
360,361c360
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int *    bzerror, 
360,361c360
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_APIbzerror, 
360,361c360
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API(, 
360,362c360
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(BZ2_bzReadBZFILE* b, 
361,362c361
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            * b, 
361,362c361
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( b, 
361,362c361
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int, 
361,363c361
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    void*   buf, 
361,363c361
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    bzerror*   buf, 
362,363c362
<              BZFILE* b, 
<              void*   buf, 
---
>              buf, 
362,363c362
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE, 
362,364c362
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* int     len )
362,364c362
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* blen )
363,364c363
<              void*   buf, 
<              int     len )
---
>              )
363,365c363
<              void*   buf, 
<              int     len )
< {
---
>              void{
363,367c363
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
---
>              void*   buf;
363,367c363
<              void*   buf, 
<              int     len )
< {
<    
<    buf;
---
>              void*   buf;
364,369c364
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              while (True) 
364,369c364
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              int     (True) 
364,369c364
<              int     len )
< {
<    
<    buf;
< 
<    while (True) 
---
>              int     len True) 
365,369c365
< {
<    
<    buf;
< 
<    while (True) 
---
> ) 
367,370d366
<    buf;
< 
<    while (True) 
< 
367,371c367
<    buf;
< 
<    while (True) 
< 
<    return 0; 
---
>    buf0; 
369,371c369
<    while (True) 
< 
<    return 0; 
---
>    ; 
(96.8 %, 6627 bytes)
367,372c367
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    (BZ2_bzReadGetUnused) 
367,372c367
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    return BZ2_bzReadGetUnused) 
367,372c367
<    return 0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    return 0) 
368,373c368
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> ( int*    bzerror, 
372,373c372
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> int*    bzerror, 
372,373c372
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void *    bzerror, 
372,373c372
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_APIbzerror, 
372,373c372
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(, 
372,374c372
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZ2_bzReadGetUnusedBZFILE* b, 
373,374c373
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      * b, 
373,374c373
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( b, 
373,374c373
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int, 
373,375c373
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    void**  unused, 
373,375c373
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerror**  unused, 
374,375c374
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        *  unused, 
374,375c374
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILEunused, 
374,375c374
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
374,376c374
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* bint*    nUnused )
375,376c375
<                        void**  unused, 
<                        int*    nUnused )
---
>                        *    nUnused )
375,376c375
<                        void**  unused, 
<                        int*    nUnused )
---
>                        voidnUnused )
375,376c375
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*)
375,377c375
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        void**  {
375,378c375
<                        void**  unused, 
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        void**  unusednUnused ;
376,378c376
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        ;
376,379c376
<                        int*    nUnused )
< {
<    nUnused ;
< }
---
>                        int}
376,387c376
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int*    int BZ_API(BZ2_bzBuffToBuffCompress) 
376,387c376
<                        int*    nUnused )
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>                        int*    nUnused BZ_API(BZ2_bzBuffToBuffCompress) 
377,387c377
< {
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> (BZ2_bzBuffToBuffCompress) 
378,387c378
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    BZ2_bzBuffToBuffCompress) 
378,387c378
<    nUnused ;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    nUnused ) 
379,388c379
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> ( char*         dest, 
387,388c387
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> char*         dest, 
387,388c387
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int *         dest, 
387,388c387
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_APIdest, 
387,388c387
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API(, 
387,389c387
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompressunsigned int* destLen,
388,389c388
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          int* destLen,
388,389c388
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( * destLen,
388,389c388
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( chardestLen,
388,389c388
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         ,
388,390c388
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         destchar*         source, 
389,390c389
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            *         source, 
389,390c389
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned source, 
389,390c389
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned int, 
389,391c389
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* unsigned int  sourceLen,
389,391c389
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* destLenint  sourceLen,
390,391c390
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            sourceLen,
390,391c390
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char,
390,392c390
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         int           blockSize100k, 
390,392c390
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         sourceblockSize100k, 
391,392c391
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            , 
391,393c391
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int           verbosity, 
391,393c391
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  verbosity, 
391,393c391
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  sourceLen, 
392,393d391
<                            int           blockSize100k, 
<                            int           verbosity, 
392,393d391
<                            int           blockSize100k, 
<                            int           verbosity, 
392,394c392
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           blockSize100k)
393,395c393
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            {
393,396c393
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           bz_stream strm;
393,396c393
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           verbositystrm;
394,396c394
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            ;
394,397c394
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           int ret;
394,397c394
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           workFactor ret;
395,397c395
< {
<    bz_stream strm;
<    int ret;
---
> ;
396,398d395
<    bz_stream strm;
<    int ret;
< 
396,400c396
<    bz_stream strm;
<    int ret;
< 
<    ;
<    return ret;
---
>    bz_stream return ret;
396,400c396
<    bz_stream strm;
<    int ret;
< 
<    ;
<    return ret;
---
>    bz_stream strmret;
397,398d396
<    int ret;
< 
400d397
<    return ret;
(96.8 %, 6597 bytes)
396,401c396
<    bz_stream strmret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    bz_stream strmret) 
397,402c397
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> ( char*         dest, 
401,402c401
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> char*         dest, 
401,402c401
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int *         dest, 
401,402c401
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_APIdest, 
401,402c401
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API(, 
401,403c401
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int* destLen,
402,403c402
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int* destLen,
402,403c402
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( * destLen,
402,403c402
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( chardestLen,
402,403c402
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         ,
402,404c402
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         destchar*         source, 
403,404c403
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              *         source, 
403,404c403
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned source, 
403,404c403
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int, 
403,405c403
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* unsigned int  sourceLen,
403,405c403
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* destLenint  sourceLen,
404,405c404
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              sourceLen,
404,405c404
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char,
404,406c404
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         int           small,
404,406c404
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         sourcesmall,
405,406c405
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              ,
405,407c405
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int           verbosity )
405,407c405
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int  verbosity )
405,407c405
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int  sourceLen)
406,408c406
<                              int           small,
<                              int           verbosity )
< {
---
>                              {
406,409c406
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              int           bz_stream strm;
406,409c406
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              int           smallstrm;
407,409c407
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              ;
407,410c407
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret ;
---
>                              int           int ret ;
407,410c407
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret ;
---
>                              int           verbosity ret ;
408,410c408
< {
<    bz_stream strm;
<    int ret ;
---
> ;
409,411c409
<    bz_stream strm;
<    int ret ;
< }
---
>    }
409,416c409
<    bz_stream strm;
<    int ret ;
< }
< 
< 
< 
< 
< static
---
>    bz_stream static
409,417c409
<    bz_stream strm;
<    int ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    bz_stream strmBZFILE * bzopen_or_bzdopen
410,417c410
<    int ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    * bzopen_or_bzdopen
410,417c410
<    int ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    int bzopen_or_bzdopen
410,418c410
<    int ret ;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
>    int ret ( )      
411,418c411
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
> )      
416,418d415
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
(96.8 %, 6568 bytes)
409,416c409
<    }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
---
>    )      
414,416d413
< static
< BZFILE * bzopen_or_bzdopen
<                ( )      
415,421d414
< BZFILE * bzopen_or_bzdopen
<                ( )      
< ;
< 
< 
< 
< 
(96.8 %, 6509 bytes)
414,419c414
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> )
419,420c419
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> ( const char *path,
419,420c419
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE const char *path,
419,420c419
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * char *path,
419,420c419
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * BZ_API*path,
419,420c419
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * BZ_API(path,
419,420c419
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * BZ_API(BZ2_bzopen,
420,421c420
<                ( const char *path,
<                  const char *mode )
---
>                const char *mode )
420,421c420
<                ( const char *path,
<                  const char *mode )
---
>                ( char *mode )
420,421c420
<                ( const char *path,
<                  const char *mode )
---
>                ( const *mode )
(96.8 %, 6468 bytes)
420,422c420
<                ( char *mode )
< {
<    return 0;
---
>                ( 0;
420,422c420
<                ( char *mode )
< {
<    return 0;
---
>                ( char ;
420,423c420
<                ( char *mode )
< {
<    return 0;
< }
---
>                ( char *}
420,427c420
<                ( char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( char *mode BZFILE * BZ_API(BZ2_bzdopen)
421,427c421
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> * BZ_API(BZ2_bzdopen)
422,427c422
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    BZ_API(BZ2_bzdopen)
422,427c422
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    return (BZ2_bzdopen)
422,427c422
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    return 0BZ2_bzdopen)
423,427c423
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> )
427,428c427
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> ( int fd,
427,428c427
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE int fd,
427,428c427
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE * fd,
427,428c427
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE * BZ_API,
427,429c427
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char ** b, void* buf, int len )
---
> BZFILE * BZ_API(const char ** b, void* buf, int len )
427,429c427
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char ** b, void* buf, int len )
---
> BZFILE * BZ_API(BZ2_bzdopenchar ** b, void* buf, int len )
428,429c428
<                ( int fd,
<                  const char ** b, void* buf, int len )
---
>                ** b, void* buf, int len )
428,429c428
<                ( int fd,
<                  const char ** b, void* buf, int len )
---
>                ( * b, void* buf, int len )
428,429c428
<                ( int fd,
<                  const char ** b, void* buf, int len )
---
>                ( int b, void* buf, int len )
428,429c428
<                ( int fd,
<                  const char ** b, void* buf, int len )
---
>                ( int fd, void* buf, int len )
429c429
<                  const char ** b, void* buf, int len )
---
>                  void* buf, int len )
(96.9 %, 6433 bytes)
428c428
<                ( int b, void* buf, int len )
---
>                ( int int len )
428c428
<                ( int b, void* buf, int len )
---
>                ( int blen )
428c428
<                ( int b, void* buf, int len )
---
>                ( int b, )
428,429c428
<                ( int b, void* buf, int len )
< {
---
>                ( int b, void{
428,430c428
<                ( int b, void* buf, int len )
< {
<    ;
---
>                ( int b, void* ;
428,432c428
<                ( int b, void* buf, int len )
< {
<    ;
<    
< }
---
>                ( int b, void* buf}
428,436c428
<                ( int b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>                ( int b, void* buf, int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
428,436c428
<                ( int b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>                ( int b, void* buf, int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
428,436c428
<                ( int b, void* buf, int len )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>                ( int b, void* buf, int len (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
429,436c429
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> BZ2_bzwrite) (BZFILE* b, void* buf, int len )
430,436c430
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    ) (BZFILE* b, void* buf, int len )
(96.9 %, 6416 bytes)
428,436c428
<                ( int blen )
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>                ( int blen (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
429,436c429
< {
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> BZ2_bzwrite) (BZFILE* b, void* buf, int len )
430,436c430
<    ;
<    
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    ) (BZFILE* b, void* buf, int len )
432,436c432
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> (BZFILE* b, void* buf, int len )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> BZFILE* b, void* buf, int len )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int * b, void* buf, int len )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIb, void* buf, int len )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(, void* buf, int len )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwritevoid* buf, int len )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) * buf, int len )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (buf, int len )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE, int len )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE* int len )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE* blen )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, )
436,437c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void{
436,438c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* }
436,443c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* bufstatic char *bzerrorstrings[] = {
436,443c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, char *bzerrorstrings[] = {
436,443c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int *bzerrorstrings[] = {
436,443c436
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len bzerrorstrings[] = {
(96.9 %, 6399 bytes)
436,443c436
< int BZ_API(BZ2_bzwrite) (BZFILE* blen )
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* blen bzerrorstrings[] = {
437,443c437
< {
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> [] = {
438,443c438
<    }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    ] = {
443c443
< static char *bzerrorstrings[] = {
---
> = {
443c443
< static char *bzerrorstrings[] = {
---
> static {
443,444c443
< static char *bzerrorstrings[] = {
<        "OK"
---
> static char "OK"
443,445c443
< static char *bzerrorstrings[] = {
<        "OK"
<       };
---
> static char *};
443,445c443
< static char *bzerrorstrings[] = {
<        "OK"
<       };
---
> static char *bzerrorstrings;
443,448c443
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
443,448c443
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
443,448c443
< static char *bzerrorstrings[] = {
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] = * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
444,448c444
<        "OK"
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>        BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
445,448c445
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       (BZ2_bzerror) (BZFILE *b, int *errnum)
445,448c445
<       };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       }BZ2_bzerror) (BZFILE *b, int *errnum)
448c448
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> ) (BZFILE *b, int *errnum)
(96.9 %, 6373 bytes)
443,446c443
< static char *bzerrorstrings;
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstringsBZ2_bzerror) (BZFILE *b, int *errnum)
446c446
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> ) (BZFILE *b, int *errnum)
446c446
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const (BZFILE *b, int *errnum)
446c446
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char BZFILE *b, int *errnum)
446c446
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * *b, int *errnum)
446c446
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_APIb, int *errnum)
446c446
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(, int *errnum)
446c446
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerrorint *errnum)
446c446
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) *errnum)
446c446
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) (errnum)
446c446
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) (BZFILE )
(96.9 %, 6357 bytes)
446,448c446
< const char * BZ_API(BZ2_bzerror) (errnum)
< {
<    int err = bzerrorstrings[err*-1];
---
> const char * BZ_API(BZ2_bzerror) (bzerrorstrings[err*-1];
446,448c446
< const char * BZ_API(BZ2_bzerror) (errnum)
< {
<    int err = bzerrorstrings[err*-1];
---
> const char * BZ_API(BZ2_bzerror) (errnum[err*-1];
447,448c447
< {
<    int err = bzerrorstrings[err*-1];
---
> err*-1];
448c448
<    int err = bzerrorstrings[err*-1];
---
>    *-1];
448c448
<    int err = bzerrorstrings[err*-1];
---
>    int -1];
448c448
<    int err = bzerrorstrings[err*-1];
---
>    int err 1];
448c448
<    int err = bzerrorstrings[err*-1];
---
>    int err = ];
448c448
<    int err = bzerrorstrings[err*-1];
---
>    int err = bzerrorstrings;
448,449c448
<    int err = bzerrorstrings[err*-1];
< }
---
>    int err = bzerrorstrings[}
448,478c448
<    int err = bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
>    int err = bzerrorstrings[err#if BZ_UNIX
448,478c448
<    int err = bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
>    int err = bzerrorstrings[err*if BZ_UNIX
448,478c448
<    int err = bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
>    int err = bzerrorstrings[err*-BZ_UNIX
448,479c448
<    int err = bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
---
>    int err = bzerrorstrings[err*-1)
448,481c448
<    int err = bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
>    int err = bzerrorstrings[err*-1]#   define SET_BINARY_MODE(fd) 
449,481c449
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
> define SET_BINARY_MODE(fd) 
478,481c478
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
> SET_BINARY_MODE(fd) 
(96.9 %, 6349 bytes)
448,481c448
<    int err = bzerrorstrings;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
>    int err = bzerrorstrings#   define SET_BINARY_MODE(fd) 
449,481c449
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
> define SET_BINARY_MODE(fd) 
478,481c478
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
> SET_BINARY_MODE(fd) 
478,481c478
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
> #(fd) 
478,481c478
< #if BZ_UNIX
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
> #if fd) 
479,481c479
< )
< 
< #   define SET_BINARY_MODE(fd) 
---
> ) 
481,482d480
< #   define SET_BINARY_MODE(fd) 
< 
(96.9 %, 6317 bytes)
479,489d478
< ) 
< 
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
481,489d480
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
481,489c481
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #      
\ No newline at end of file
481,489c481
< #      define NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #      define 
\ No newline at end of file
483,489d482
< #endif 
< 
< 
< 
< 
< 
<                                        
483,489c483
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #
\ No newline at end of file
===< pass_clex :: rm-tok-pattern-4 >===
9c9
< #define BZ_OK                (-9)
---
> define BZ_OK                (-9)
9c9
< #define BZ_OK                (-9)
---
>  BZ_OK                (-9)
9c9
< #define BZ_OK                (-9)
---
> define                 (-9)
9c9
< #define BZ_OK                (-9)
---
>                  (-9)
9c9
< #define BZ_OK                (-9)
---
> define BZ_OK                -9)
9c9
< #define BZ_OK                (-9)
---
>  BZ_OK                -9)
9c9
< #define BZ_OK                (-9)
---
> define                 -9)
9c9
< #define BZ_OK                (-9)
---
>                  -9)
9c9
< #define BZ_OK                (-9)
---
> # BZ_OK                (-9)
9c9
< #define BZ_OK                (-9)
---
> #                 (-9)
9c9
< #define BZ_OK                (-9)
---
> # BZ_OK                -9)
9c9
< #define BZ_OK                (-9)
---
> #                 -9)
9c9
< #define BZ_OK                (-9)
---
> # BZ_OK                (9)
9c9
< #define BZ_OK                (-9)
---
> #                 (9)
9c9
< #define BZ_OK                (-9)
---
> # BZ_OK                9)
9c9
< #define BZ_OK                (-9)
---
> #                 9)
9c9
< #define BZ_OK                (-9)
---
> #define                 (-9)
9c9
< #define BZ_OK                (-9)
---
> #define                 -9)
9c9
< #define BZ_OK                (-9)
---
> #define                 (9)
9c9
< #define BZ_OK                (-9)
---
> #define                 9)
9c9
< #define BZ_OK                (-9)
---
> #define                 (-)
9c9
< #define BZ_OK                (-9)
---
> #define                 -)
9c9
< #define BZ_OK                (-9)
---
> #define                 ()
9c9
< #define BZ_OK                (-9)
---
> #define                 )
9c9
< #define BZ_OK                (-9)
---
> #define BZ_OK                -9)
9c9
< #define BZ_OK                (-9)
---
> #define BZ_OK                9)
9c9
< #define BZ_OK                (-9)
---
> #define BZ_OK                -)
9c9
< #define BZ_OK                (-9)
---
> #define BZ_OK                )
9c9
< #define BZ_OK                (-9)
---
> #define BZ_OK                -9
9c9
< #define BZ_OK                (-9)
---
> #define BZ_OK                9
9c9
< #define BZ_OK                (-9)
---
> #define BZ_OK                -
(96.9 %, 6315 bytes)
9c9
< #define BZ_OK                -9
---
> #define BZ_OK                9
12c12
<    struct {
---
>     {
9c9
< #define BZ_OK                -9
---
> #define BZ_OK                
12c12
<    struct {
---
>     {
9c9
< #define BZ_OK                -9
---
> #define BZ_OK                9
11,12c11,12
< typedef 
<    struct {
---
>  
>     {
9c9
< #define BZ_OK                -9
---
> #define BZ_OK                
11,12c11,12
< typedef 
<    struct {
---
>  
>     {
9c9
< #define BZ_OK                -9
---
> #define BZ_OK                -
9c9
< #define BZ_OK                -9
---
> #define BZ_OK                -
11c11
< typedef 
---
>  
9c9
< #define BZ_OK                -9
---
> #define BZ_OK                -
12c12
<    struct {
---
>     {
9c9
< #define BZ_OK                -9
---
> #define BZ_OK                -
11,12c11,12
< typedef 
<    struct {
---
>  
>     {
9c9
< #define BZ_OK                -9
---
> #define BZ_OK                -
12c12
<    struct {
---
>    struct 
9c9
< #define BZ_OK                -9
---
> #define BZ_OK                -
11,12c11,12
< typedef 
<    struct {
---
>  
>    struct 
9c9
< #define BZ_OK                -9
---
> #define BZ_OK                -
12c12
<    struct {
---
>     
9c9
< #define BZ_OK                -9
---
> #define BZ_OK                -
11,12c11,12
< typedef 
<    struct {
---
>  
>     
11c11
< typedef 
---
>  
11,12c11,12
< typedef 
<    struct {
---
>  
>     {
11,12c11,12
< typedef 
<    struct {
---
>  
>    struct 
11,12c11,12
< typedef 
<    struct {
---
>  
>     
11c11
< typedef 
---
>  
13c13
<       unsigned int total_out_hi32;
---
>        int total_out_hi32;
11,13c11,13
< typedef 
<    struct {
<       unsigned int total_out_hi32;
---
>  
>     {
>        int total_out_hi32;
11,13c11,13
< typedef 
<    struct {
<       unsigned int total_out_hi32;
---
>  
>    struct 
>        int total_out_hi32;
11,13c11,13
< typedef 
<    struct {
<       unsigned int total_out_hi32;
---
>  
>     
>        int total_out_hi32;
12c12
<    struct {
---
>     {
12c12
<    struct {
---
>     
12,13c12,13
<    struct {
<       unsigned int total_out_hi32;
---
>     {
>        int total_out_hi32;
12,13c12,13
<    struct {
<       unsigned int total_out_hi32;
---
>     
>        int total_out_hi32;
12,13c12,13
<    struct {
<       unsigned int total_out_hi32;
---
>     {
>       unsigned  total_out_hi32;
12,13c12,13
<    struct {
<       unsigned int total_out_hi32;
---
>     
>       unsigned  total_out_hi32;
12,13c12,13
<    struct {
<       unsigned int total_out_hi32;
---
>     {
>         total_out_hi32;
12,13c12,13
<    struct {
<       unsigned int total_out_hi32;
---
>     
>         total_out_hi32;
12c12
<    struct {
---
>    struct 
12,13c12,13
<    struct {
<       unsigned int total_out_hi32;
---
>    struct 
>        int total_out_hi32;
12,13c12,13
<    struct {
<       unsigned int total_out_hi32;
---
>    struct 
>       unsigned  total_out_hi32;
12,13c12,13
<    struct {
<       unsigned int total_out_hi32;
---
>    struct 
>         total_out_hi32;
12,13c12,13
<    struct {
<       unsigned int total_out_hi32;
---
>    struct 
>       unsigned int ;
12,13c12,13
<    struct {
<       unsigned int total_out_hi32;
---
>    struct 
>        int ;
12,13c12,13
<    struct {
<       unsigned int total_out_hi32;
---
>    struct 
>       unsigned  ;
12,13c12,13
<    struct {
<       unsigned int total_out_hi32;
---
>    struct 
>         ;
13c13
<       unsigned int total_out_hi32;
---
>        int total_out_hi32;
13c13
<       unsigned int total_out_hi32;
---
>         total_out_hi32;
13c13
<       unsigned int total_out_hi32;
---
>        int ;
(96.9 %, 6307 bytes)
13c13
<        int total_out_hi32;
---
>         total_out_hi32;
13c13
<        int total_out_hi32;
---
>         ;
13c13
<        int total_out_hi32;
---
>         total_out_hi32
13c13
<        int total_out_hi32;
---
>         
(96.9 %, 6290 bytes)
13c13
<         ;
---
>         
15c15
<       void *state;
---
>        *state;
13c13
<         ;
---
>         
15c15
<       void *state;
---
>       void state;
13c13
<         ;
---
>         
15c15
<       void *state;
---
>        state;
13c13
<         ;
---
>         
15c15
<       void *state;
---
>       void *;
13c13
<         ;
---
>         
15c15
<       void *state;
---
>        *;
13c13
<         ;
---
>         
15c15
<       void *state;
---
>       void ;
13c13
<         ;
---
>         
15c15
<       void *state;
---
>        ;
(96.9 %, 6283 bytes)
15c15
<       void ;
---
>        ;
17c17
<       void *(*bzalloc)(void );
---
>        (*bzalloc)(void );
15c15
<       void ;
---
>        
17c17
<       void *(*bzalloc)(void );
---
>        (*bzalloc)(void );
15c15
<       void ;
---
>       void 
15c15
<       void ;
---
>       void 
17c17
<       void *(*bzalloc)(void );
---
>        *(*bzalloc)(void );
15c15
<       void ;
---
>       void 
17c17
<       void *(*bzalloc)(void );
---
>       void (*bzalloc)(void );
15c15
<       void ;
---
>       void 
17c17
<       void *(*bzalloc)(void );
---
>        (*bzalloc)(void );
(96.9 %, 6278 bytes)
17c17
<        *(*bzalloc)(void );
---
>        *bzalloc)(void );
17c17
<        *(*bzalloc)(void );
---
>        (bzalloc)(void );
17c17
<        *(*bzalloc)(void );
---
>        bzalloc)(void );
17c17
<        *(*bzalloc)(void );
---
>        (*)(void );
17c17
<        *(*bzalloc)(void );
---
>        *)(void );
17c17
<        *(*bzalloc)(void );
---
>        ()(void );
17c17
<        *(*bzalloc)(void );
---
>        )(void );
17c17
<        *(*bzalloc)(void );
---
>        **bzalloc)(void );
17c17
<        *(*bzalloc)(void );
---
>        *bzalloc)(void );
17c17
<        *(*bzalloc)(void );
---
>        **)(void );
17c17
<        *(*bzalloc)(void );
---
>        *)(void );
17c17
<        *(*bzalloc)(void );
---
>        **bzalloc(void );
17c17
<        *(*bzalloc)(void );
---
>        *bzalloc(void );
17c17
<        *(*bzalloc)(void );
---
>        **(void );
17c17
<        *(*bzalloc)(void );
---
>        *(void );
17c17
<        *(*bzalloc)(void );
---
>        *(bzalloc)(void );
17c17
<        *(*bzalloc)(void );
---
>        *()(void );
17c17
<        *(*bzalloc)(void );
---
>        *(bzalloc(void );
17c17
<        *(*bzalloc)(void );
---
>        *((void );
17c17
<        *(*bzalloc)(void );
---
>        *(bzalloc)void );
17c17
<        *(*bzalloc)(void );
---
>        *()void );
17c17
<        *(*bzalloc)(void );
---
>        *(bzallocvoid );
17c17
<        *(*bzalloc)(void );
---
>        *(void );
17c17
<        *(*bzalloc)(void );
---
>        *(*)(void );
17c17
<        *(*bzalloc)(void );
---
>        *(*(void );
17c17
<        *(*bzalloc)(void );
---
>        *(*)void );
17c17
<        *(*bzalloc)(void );
---
>        *(*void );
17c17
<        *(*bzalloc)(void );
---
>        *(*)( );
17c17
<        *(*bzalloc)(void );
---
>        *(*( );
17c17
<        *(*bzalloc)(void );
---
>        *(*) );
(96.9 %, 6275 bytes)
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *( )
>        *opaque;
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *( 
>        *opaque;
17c17
<        *(bzallocvoid );
---
>        *(bzallocvoid ;
17c17
<        *(bzallocvoid );
---
>        *(bzallocvoid 
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *(bzallocvoid ;
>        *opaque;
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *(bzallocvoid 
>        *opaque;
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *(bzallocvoid ;
>       void opaque;
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *(bzallocvoid 
>       void opaque;
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *(bzallocvoid ;
>        opaque;
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *(bzallocvoid 
>        opaque;
17c17
<        *(bzallocvoid );
---
>        *(bzallocvoid )
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *(bzallocvoid )
>        *opaque;
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *(bzallocvoid )
>       void opaque;
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *(bzallocvoid )
>        opaque;
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *(bzallocvoid )
>       void *;
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *(bzallocvoid )
>        *;
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *(bzallocvoid )
>       void ;
17,18c17,18
<        *(bzallocvoid );
<       void *opaque;
---
>        *(bzallocvoid )
>        ;
18c18
<       void *opaque;
---
>        *opaque;
18c18
<       void *opaque;
---
>        opaque;
18c18
<       void *opaque;
---
>        *;
18c18
<       void *opaque;
---
>        ;
(96.9 %, 6263 bytes)
18,20c18,20
<        ;
<    } 
<    bz_stream;
---
>        
>     
>    
19c19
<    } 
---
>     
19,20c19,20
<    } 
<    bz_stream;
---
>     
>    ;
19,20c19,20
<    } 
<    bz_stream;
---
>     
>    bz_stream
19,20c19,20
<    } 
<    bz_stream;
---
>     
>    
19c19
<    } 
---
>     
24c24
< #include <stdio.h>
---
> include <stdio.h>
19,20c19,20
<    } 
<    bz_stream;
---
>     
>    ;
24c24
< #include <stdio.h>
---
> include <stdio.h>
19,20c19,20
<    } 
<    bz_stream;
---
>     
>    bz_stream
24c24
< #include <stdio.h>
---
> include <stdio.h>
19,20c19,20
<    } 
<    bz_stream;
---
>     
>    
24c24
< #include <stdio.h>
---
> include <stdio.h>
20c20
<    bz_stream;
---
>    ;
20c20
<    bz_stream;
---
>    
20c20
<    bz_stream;
---
>    ;
24c24
< #include <stdio.h>
---
> include <stdio.h>
20c20
<    bz_stream;
---
>    
24c24
< #include <stdio.h>
---
> include <stdio.h>
20c20
<    bz_stream;
---
>    ;
24c24
< #include <stdio.h>
---
> # <stdio.h>
20c20
<    bz_stream;
---
>    
24c24
< #include <stdio.h>
---
> # <stdio.h>
20c20
<    bz_stream;
---
>    ;
24c24
< #include <stdio.h>
---
>  <stdio.h>
20c20
<    bz_stream;
---
>    
24c24
< #include <stdio.h>
---
>  <stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
> include <stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
> # <stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
>  <stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
> #include stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
> include stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
> # stdio.h>
20c20
<    bz_stream;
---
>    bz_stream
24c24
< #include <stdio.h>
---
>  stdio.h>
24c24
< #include <stdio.h>
---
> include <stdio.h>
24c24
< #include <stdio.h>
---
>  <stdio.h>
24c24
< #include <stdio.h>
---
> include stdio.h>
24c24
< #include <stdio.h>
---
>  stdio.h>
24c24
< #include <stdio.h>
---
> include <.h>
24c24
< #include <stdio.h>
---
>  <.h>
24c24
< #include <stdio.h>
---
> include .h>
24c24
< #include <stdio.h>
---
>  .h>
24c24
< #include <stdio.h>
---
> # <stdio.h>
24c24
< #include <stdio.h>
---
> # stdio.h>
24c24
< #include <stdio.h>
---
> # <.h>
24c24
< #include <stdio.h>
---
> # .h>
24c24
< #include <stdio.h>
---
> # <stdioh>
24c24
< #include <stdio.h>
---
> # stdioh>
24c24
< #include <stdio.h>
---
> # <h>
24c24
< #include <stdio.h>
---
> # h>
24c24
< #include <stdio.h>
---
> #include stdio.h>
24c24
< #include <stdio.h>
---
> #include .h>
24c24
< #include <stdio.h>
---
> #include stdioh>
24c24
< #include <stdio.h>
---
> #include h>
24c24
< #include <stdio.h>
---
> #include stdio.>
24c24
< #include <stdio.h>
---
> #include .>
24c24
< #include <stdio.h>
---
> #include stdio>
24c24
< #include <stdio.h>
---
> #include >
24c24
< #include <stdio.h>
---
> #include <.h>
24c24
< #include <stdio.h>
---
> #include <h>
24c24
< #include <stdio.h>
---
> #include <.>
24c24
< #include <stdio.h>
---
> #include <>
24c24
< #include <stdio.h>
---
> #include <.h
24c24
< #include <stdio.h>
---
> #include <h
24c24
< #include <stdio.h>
---
> #include <.
24c24
< #include <stdio.h>
---
> #include <
24c24
< #include <stdio.h>
---
> #include <stdioh>
24c24
< #include <stdio.h>
---
> #include <stdio>
24c24
< #include <stdio.h>
---
> #include <stdioh
24c24
< #include <stdio.h>
---
> #include <stdio
24c24
< #include <stdio.h>
---
> #include <stdioh>
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio>
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdioh
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.>
24c24
< #include <stdio.h>
---
> #include <stdio.
24c24
< #include <stdio.h>
---
> #include <stdio.>
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.>
26c26
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.
26c26
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.>
26c26
< #   define BZ_API(func) func
---
>     BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.
26c26
< #   define BZ_API(func) func
---
>     BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
>     BZ_API(func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
> #   define (func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
>    define (func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
> #    (func) func
24c24
< #include <stdio.h>
---
> #include <stdio.h
26c26
< #   define BZ_API(func) func
---
>     (func) func
26c26
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
26c26
< #   define BZ_API(func) func
---
>     BZ_API(func) func
26c26
< #   define BZ_API(func) func
---
>    define (func) func
26c26
< #   define BZ_API(func) func
---
>     (func) func
26c26
< #   define BZ_API(func) func
---
>    define BZ_APIfunc) func
26c26
< #   define BZ_API(func) func
---
>     BZ_APIfunc) func
26c26
< #   define BZ_API(func) func
---
>    define func) func
26c26
< #   define BZ_API(func) func
---
>     func) func
26c26
< #   define BZ_API(func) func
---
> #    BZ_API(func) func
26c26
< #   define BZ_API(func) func
---
> #    (func) func
26c26
< #   define BZ_API(func) func
---
> #    BZ_APIfunc) func
26c26
< #   define BZ_API(func) func
---
> #    func) func
26c26
< #   define BZ_API(func) func
---
> #    BZ_API() func
26c26
< #   define BZ_API(func) func
---
> #    () func
26c26
< #   define BZ_API(func) func
---
> #    BZ_API) func
26c26
< #   define BZ_API(func) func
---
> #    ) func
26c26
< #   define BZ_API(func) func
---
> #   define (func) func
26c26
< #   define BZ_API(func) func
---
> #   define func) func
26c26
< #   define BZ_API(func) func
---
> #   define () func
26c26
< #   define BZ_API(func) func
---
> #   define ) func
26c26
< #   define BZ_API(func) func
---
> #   define (func func
26c26
< #   define BZ_API(func) func
---
> #   define func func
26c26
< #   define BZ_API(func) func
---
> #   define ( func
26c26
< #   define BZ_API(func) func
---
> #   define  func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc) func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API) func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc) 
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API) 
26c26
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc 
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API 
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API() func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API( func
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API() 
26c26
< #   define BZ_API(func) func
---
> #   define BZ_API( 
26,27c26,27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API() func
>    define BZ_EXTERN extern
26,27c26,27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API( func
>    define BZ_EXTERN extern
26,27c26,27
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API() 
>    define BZ_EXTERN extern
(96.9 %, 6253 bytes)
27c27
< #   define BZ_EXTERN extern
---
>      
27c27
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN extern
27c27
< #   define BZ_EXTERN extern
---
> #     extern
27c27
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN 
27c27
< #   define BZ_EXTERN extern
---
> #     
27c27
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN extern
32c32
< BZ_EXTERN ;
---
>  ;
27c27
< #   define BZ_EXTERN extern
---
> #     extern
32c32
< BZ_EXTERN ;
---
>  ;
27c27
< #   define BZ_EXTERN extern
---
> #    BZ_EXTERN 
32c32
< BZ_EXTERN ;
---
>  ;
27c27
< #   define BZ_EXTERN extern
---
> #     
32c32
< BZ_EXTERN ;
---
>  ;
27c27
< #   define BZ_EXTERN extern
---
> #   define  extern
27c27
< #   define BZ_EXTERN extern
---
> #   define  
27c27
< #   define BZ_EXTERN extern
---
> #   define  extern
32c32
< BZ_EXTERN ;
---
>  ;
27c27
< #   define BZ_EXTERN extern
---
> #   define  
32c32
< BZ_EXTERN ;
---
>  ;
27c27
< #   define BZ_EXTERN extern
---
> #   define  extern
32c32
< BZ_EXTERN ;
---
> BZ_EXTERN 
27c27
< #   define BZ_EXTERN extern
---
> #   define  
32c32
< BZ_EXTERN ;
---
> BZ_EXTERN 
27c27
< #   define BZ_EXTERN extern
---
> #   define  extern
32c32
< BZ_EXTERN ;
---
>  
27c27
< #   define BZ_EXTERN extern
---
> #   define  
32c32
< BZ_EXTERN ;
---
>  
27c27
< #   define BZ_EXTERN extern
---
> #   define BZ_EXTERN 
27c27
< #   define BZ_EXTERN extern
---
> #   define BZ_EXTERN 
32c32
< BZ_EXTERN ;
---
>  ;
27c27
< #   define BZ_EXTERN extern
---
> #   define BZ_EXTERN 
32c32
< BZ_EXTERN ;
---
> BZ_EXTERN 
(97.0 %, 6247 bytes)
32c32
< BZ_EXTERN ;
---
>  ;
32c32
< BZ_EXTERN ;
---
>  
32c32
< BZ_EXTERN ;
---
>  ;
38c38
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
(97.0 %, 6238 bytes)
32c32
<  ;
---
>  
32c32
<  ;
---
>  
38c38
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
32c32
<  ;
---
>  
38c38
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 5000
32c32
<  ;
---
>  
38c38
< #define BZ_MAX_UNUSED 5000
---
>  BZ_MAX_UNUSED 5000
32c32
<  ;
---
>  
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define  5000
32c32
<  ;
---
>  
38c38
< #define BZ_MAX_UNUSED 5000
---
> define  5000
32c32
<  ;
---
>  
38c38
< #define BZ_MAX_UNUSED 5000
---
> #  5000
32c32
<  ;
---
>  
38c38
< #define BZ_MAX_UNUSED 5000
---
>   5000
38c38
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
(97.0 %, 6237 bytes)
38c38
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
38c38
< #define BZ_MAX_UNUSED 5000
---
>  BZ_MAX_UNUSED 5000
38c38
< #define BZ_MAX_UNUSED 5000
---
> define  5000
38c38
< #define BZ_MAX_UNUSED 5000
---
>   5000
38c38
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 
38c38
< #define BZ_MAX_UNUSED 5000
---
>  BZ_MAX_UNUSED 
38c38
< #define BZ_MAX_UNUSED 5000
---
> define  
38c38
< #define BZ_MAX_UNUSED 5000
---
>   
38c38
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 5000
38c38
< #define BZ_MAX_UNUSED 5000
---
> #  5000
38c38
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 
38c38
< #define BZ_MAX_UNUSED 5000
---
> #  
38c38
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 5000
40c40
< typedef void BZFILE;
---
>  void BZFILE;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #  5000
40c40
< typedef void BZFILE;
---
>  void BZFILE;
38c38
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 
40c40
< typedef void BZFILE;
---
>  void BZFILE;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #  
40c40
< typedef void BZFILE;
---
>  void BZFILE;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define  5000
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define  
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define  5000
40c40
< typedef void BZFILE;
---
>  void BZFILE;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define  
40c40
< typedef void BZFILE;
---
>  void BZFILE;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define  5000
40c40
< typedef void BZFILE;
---
> typedef  BZFILE;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define  
40c40
< typedef void BZFILE;
---
> typedef  BZFILE;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define  5000
40c40
< typedef void BZFILE;
---
>   BZFILE;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define  
40c40
< typedef void BZFILE;
---
>   BZFILE;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
40c40
< typedef void BZFILE;
---
>  void BZFILE;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
40c40
< typedef void BZFILE;
---
> typedef  BZFILE;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
40c40
< typedef void BZFILE;
---
>   BZFILE;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
40c40
< typedef void BZFILE;
---
> typedef void ;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
40c40
< typedef void BZFILE;
---
>  void ;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
40c40
< typedef void BZFILE;
---
> typedef  ;
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 
40c40
< typedef void BZFILE;
---
>   ;
40c40
< typedef void BZFILE;
---
>  void BZFILE;
40c40
< typedef void BZFILE;
---
>   BZFILE;
40c40
< typedef void BZFILE;
---
>  void ;
40c40
< typedef void BZFILE;
---
>   ;
40c40
< typedef void BZFILE;
---
>  void BZFILE
40c40
< typedef void BZFILE;
---
>   BZFILE
40c40
< typedef void BZFILE;
---
>  void 
40c40
< typedef void BZFILE;
---
>   
40c40
< typedef void BZFILE;
---
> typedef  BZFILE;
40c40
< typedef void BZFILE;
---
> typedef  ;
40c40
< typedef void BZFILE;
---
> typedef  BZFILE
40c40
< typedef void BZFILE;
---
> typedef  
40c40
< typedef void BZFILE;
---
> typedef  BZFILE;
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
(97.0 %, 6233 bytes)
40c40
< typedef  BZFILE;
---
> typedef  ;
40c40
< typedef  BZFILE;
---
> typedef  
40c40
< typedef  BZFILE;
---
> typedef  ;
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
40c40
< typedef  BZFILE;
---
> typedef  
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
40c40
< typedef  BZFILE;
---
> typedef  ;
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
40c40
< typedef  BZFILE;
---
> typedef  
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
40c40
< typedef  BZFILE;
---
> typedef  ;
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ_API(BZ2_bzReadOpen) ( 
40c40
< typedef  BZFILE;
---
> typedef  
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ_API(BZ2_bzReadOpen) ( 
40c40
< typedef  BZFILE;
---
> typedef  BZFILE
40c40
< typedef  BZFILE;
---
> typedef  BZFILE
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
40c40
< typedef  BZFILE;
---
> typedef  BZFILE
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
40c40
< typedef  BZFILE;
---
> typedef  BZFILE
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ_API(BZ2_bzReadOpen) ( 
40c40
< typedef  BZFILE;
---
> typedef  BZFILE
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE BZ_API(BZ2_bzReadOpen) ( 
40c40
< typedef  BZFILE;
---
> typedef  BZFILE
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  BZFILE BZ_API(BZ2_bzReadOpen) ( 
40c40
< typedef  BZFILE;
---
> typedef  BZFILE
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzReadOpen) ( 
40c40
< typedef  BZFILE;
---
> typedef  BZFILE
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ_API(BZ2_bzReadOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ_API(BZ2_bzReadOpen) ( 
(97.0 %, 6224 bytes)
42c42
<  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ_API(BZ2_bzReadOpen) ( 
42c42
<  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ_API(BZ2_bzReadOpen) ( 
42c42
<  BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>  * (BZ2_bzReadOpen) ( 
(97.0 %, 6218 bytes)
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ_API(BZ2_bzReadOpen) ( 
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   (BZ2_bzReadOpen) ( 
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ_APIBZ2_bzReadOpen) ( 
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ2_bzReadOpen) ( 
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ_API() ( 
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   () ( 
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   BZ_API) ( 
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>   ) ( 
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>  * (BZ2_bzReadOpen) ( 
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ2_bzReadOpen) ( 
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>  * () ( 
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>  * ) ( 
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>  * (BZ2_bzReadOpen ( 
42c42
<  * BZ_API(BZ2_bzReadOpen) ( 
---
>  * BZ2_bzReadOpen ( 
(97.0 %, 6212 bytes)
42c42
<  * (BZ2_bzReadOpen) ( 
---
>  * BZ2_bzReadOpen) ( 
42c42
<  * (BZ2_bzReadOpen) ( 
---
>  * ) ( 
42c42
<  * (BZ2_bzReadOpen) ( 
---
>  * BZ2_bzReadOpen ( 
42c42
<  * (BZ2_bzReadOpen) ( 
---
>  *  ( 
42c42
<  * (BZ2_bzReadOpen) ( 
---
>  * BZ2_bzReadOpen)  
42c42
<  * (BZ2_bzReadOpen) ( 
---
>  * )  
42c42
<  * (BZ2_bzReadOpen) ( 
---
>  * BZ2_bzReadOpen  
42c42
<  * (BZ2_bzReadOpen) ( 
---
>  *   
42c42
<  * (BZ2_bzReadOpen) ( 
---
>  * () ( 
42c42
<  * (BZ2_bzReadOpen) ( 
---
>  * ( ( 
42c42
<  * (BZ2_bzReadOpen) ( 
---
>  * ()  
42c42
<  * (BZ2_bzReadOpen) ( 
---
>  * (  
(97.0 %, 6210 bytes)
42,43c42,43
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *  ( 
>       *  bzerror,   
42,43c42,43
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *   
>       *  bzerror,   
42,43c42,43
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *  ( 
>       int  bzerror,   
42,43c42,43
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *   
>       int  bzerror,   
42,43c42,43
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *  ( 
>         bzerror,   
42,43c42,43
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  *   
>         bzerror,   
42c42
<  * BZ2_bzReadOpen ( 
---
>  * BZ2_bzReadOpen  
42,43c42,43
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>       *  bzerror,   
42,43c42,43
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>       int  bzerror,   
42,43c42,43
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>         bzerror,   
42,43c42,43
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>       int*  ,   
42,43c42,43
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>       *  ,   
42,43c42,43
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>       int  ,   
42,43c42,43
<  * BZ2_bzReadOpen ( 
<       int*  bzerror,   
---
>  * BZ2_bzReadOpen  
>         ,   
43c43
<       int*  bzerror,   
---
>       *  bzerror,   
43c43
<       int*  bzerror,   
---
>         bzerror,   
43c43
<       int*  bzerror,   
---
>       *  ,   
43c43
<       int*  bzerror,   
---
>         ,   
43c43
<       int*  bzerror,   
---
>       *  bzerror   
43c43
<       int*  bzerror,   
---
>         bzerror   
43c43
<       int*  bzerror,   
---
>       *     
43c43
<       int*  bzerror,   
---
>            
43c43
<       int*  bzerror,   
---
>       int  bzerror,   
43c43
<       int*  bzerror,   
---
>       int  ,   
43c43
<       int*  bzerror,   
---
>       int  bzerror   
43c43
<       int*  bzerror,   
---
>       int     
43,44c43,44
<       int*  bzerror,   
<       FILE* f, 
---
>       int  bzerror,   
>       * f, 
43,44c43,44
<       int*  bzerror,   
<       FILE* f, 
---
>       int  ,   
>       * f, 
43,44c43,44
<       int*  bzerror,   
<       FILE* f, 
---
>       int  bzerror   
>       * f, 
43,44c43,44
<       int*  bzerror,   
<       FILE* f, 
---
>       int     
>       * f, 
43c43
<       int*  bzerror,   
---
>       int*  ,   
43c43
<       int*  bzerror,   
---
>       int*     
43,44c43,44
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  ,   
>       * f, 
43,44c43,44
<       int*  bzerror,   
<       FILE* f, 
---
>       int*     
>       * f, 
43,44c43,44
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  ,   
>       FILE f, 
43,44c43,44
<       int*  bzerror,   
<       FILE* f, 
---
>       int*     
>       FILE f, 
43,44c43,44
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  ,   
>        f, 
43,44c43,44
<       int*  bzerror,   
<       FILE* f, 
---
>       int*     
>        f, 
43c43
<       int*  bzerror,   
---
>       int*  bzerror   
43,44c43,44
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerror   
>       * f, 
(97.0 %, 6203 bytes)
43c43
<       int*  ,   
---
>       int*     
43,44c43,44
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       * f, 
43,44c43,44
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       FILE f, 
43,44c43,44
<       int*  ,   
<       FILE* f, 
---
>       int*     
>        f, 
43,44c43,44
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       FILE* , 
43,44c43,44
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       * , 
43,44c43,44
<       int*  ,   
<       FILE* f, 
---
>       int*     
>       FILE , 
43,44c43,44
<       int*  ,   
<       FILE* f, 
---
>       int*     
>        , 
44c44
<       FILE* f, 
---
>       * f, 
44c44
<       FILE* f, 
---
>        f, 
44c44
<       FILE* f, 
---
>       * , 
44c44
<       FILE* f, 
---
>        , 
44c44
<       FILE* f, 
---
>       * f 
44c44
<       FILE* f, 
---
>        f 
44c44
<       FILE* f, 
---
>       *  
44c44
<       FILE* f, 
---
>         
44c44
<       FILE* f, 
---
>       FILE f, 
44c44
<       FILE* f, 
---
>       FILE , 
44c44
<       FILE* f, 
---
>       FILE f 
44c44
<       FILE* f, 
---
>       FILE  
44,45c44,45
<       FILE* f, 
<       int   verbosity, 
---
>       FILE f, 
>          verbosity, 
44,45c44,45
<       FILE* f, 
<       int   verbosity, 
---
>       FILE , 
>          verbosity, 
44,45c44,45
<       FILE* f, 
<       int   verbosity, 
---
>       FILE f 
>          verbosity, 
44,45c44,45
<       FILE* f, 
<       int   verbosity, 
---
>       FILE  
>          verbosity, 
44c44
<       FILE* f, 
---
>       FILE* , 
44c44
<       FILE* f, 
---
>       FILE*  
44,45c44,45
<       FILE* f, 
<       int   verbosity, 
---
>       FILE* , 
>          verbosity, 
44,45c44,45
<       FILE* f, 
<       int   verbosity, 
---
>       FILE*  
>          verbosity, 
44,45c44,45
<       FILE* f, 
<       int   verbosity, 
---
>       FILE* , 
>       int   , 
(97.0 %, 6202 bytes)
44c44
<       FILE* , 
---
>       FILE*  
44,45c44,45
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>          verbosity, 
44,45c44,45
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>       int   , 
44,45c44,45
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>          , 
44,45c44,45
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>       int   verbosity 
44,45c44,45
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>          verbosity 
44,45c44,45
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>       int    
44,45c44,45
<       FILE* , 
<       int   verbosity, 
---
>       FILE*  
>           
45c45
<       int   verbosity, 
---
>          verbosity, 
45c45
<       int   verbosity, 
---
>          , 
45c45
<       int   verbosity, 
---
>          verbosity 
45c45
<       int   verbosity, 
---
>           
45,46c45,46
<       int   verbosity, 
<       int   small,
---
>          verbosity, 
>          small,
45,46c45,46
<       int   verbosity, 
<       int   small,
---
>          , 
>          small,
45,46c45,46
<       int   verbosity, 
<       int   small,
---
>          verbosity 
>          small,
45,46c45,46
<       int   verbosity, 
<       int   small,
---
>           
>          small,
45c45
<       int   verbosity, 
---
>       int   , 
45c45
<       int   verbosity, 
---
>       int    
45,46c45,46
<       int   verbosity, 
<       int   small,
---
>       int   , 
>          small,
45,46c45,46
<       int   verbosity, 
<       int   small,
---
>       int    
>          small,
45,46c45,46
<       int   verbosity, 
<       int   small,
---
>       int   , 
>       int   ,
(97.0 %, 6193 bytes)
45c45
<       int   , 
---
>       int    
45,46c45,46
<       int   , 
<       int   small,
---
>       int    
>          small,
45,46c45,46
<       int   , 
<       int   small,
---
>       int    
>       int   ,
45,46c45,46
<       int   , 
<       int   small,
---
>       int    
>          ,
45,46c45,46
<       int   , 
<       int   small,
---
>       int    
>       int   small
45,46c45,46
<       int   , 
<       int   small,
---
>       int    
>          small
45,46c45,46
<       int   , 
<       int   small,
---
>       int    
>       int   
45,46c45,46
<       int   , 
<       int   small,
---
>       int    
>          
46c46
<       int   small,
---
>          small,
46c46
<       int   small,
---
>          ,
46c46
<       int   small,
---
>          small
46c46
<       int   small,
---
>          
46,47c46,47
<       int   small,
<       void* unused,    
---
>          small,
>       * unused,    
46,47c46,47
<       int   small,
<       void* unused,    
---
>          ,
>       * unused,    
46,47c46,47
<       int   small,
<       void* unused,    
---
>          small
>       * unused,    
46,47c46,47
<       int   small,
<       void* unused,    
---
>          
>       * unused,    
46c46
<       int   small,
---
>       int   ,
46c46
<       int   small,
---
>       int   
46,47c46,47
<       int   small,
<       void* unused,    
---
>       int   ,
>       * unused,    
46,47c46,47
<       int   small,
<       void* unused,    
---
>       int   
>       * unused,    
46,47c46,47
<       int   small,
<       void* unused,    
---
>       int   ,
>       void unused,    
46,47c46,47
<       int   small,
<       void* unused,    
---
>       int   
>       void unused,    
46,47c46,47
<       int   small,
<       void* unused,    
---
>       int   ,
>        unused,    
46,47c46,47
<       int   small,
<       void* unused,    
---
>       int   
>        unused,    
(97.0 %, 6188 bytes)
46c46
<       int   ,
---
>       int   
46,47c46,47
<       int   ,
<       void* unused,    
---
>       int   
>       * unused,    
46,47c46,47
<       int   ,
<       void* unused,    
---
>       int   
>       void unused,    
46,47c46,47
<       int   ,
<       void* unused,    
---
>       int   
>        unused,    
46,47c46,47
<       int   ,
<       void* unused,    
---
>       int   
>       void* ,    
46,47c46,47
<       int   ,
<       void* unused,    
---
>       int   
>       * ,    
46,47c46,47
<       int   ,
<       void* unused,    
---
>       int   
>       void ,    
46,47c46,47
<       int   ,
<       void* unused,    
---
>       int   
>        ,    
47c47
<       void* unused,    
---
>       * unused,    
47c47
<       void* unused,    
---
>        unused,    
47c47
<       void* unused,    
---
>       * ,    
47c47
<       void* unused,    
---
>        ,    
47c47
<       void* unused,    
---
>       * unused    
47c47
<       void* unused,    
---
>        unused    
47c47
<       void* unused,    
---
>       *     
47c47
<       void* unused,    
---
>            
47c47
<       void* unused,    
---
>       void unused,    
47c47
<       void* unused,    
---
>       void ,    
47c47
<       void* unused,    
---
>       void unused    
47c47
<       void* unused,    
---
>       void     
47,48c47,48
<       void* unused,    
<       int   nUnused 
---
>       void unused,    
>          nUnused 
47,48c47,48
<       void* unused,    
<       int   nUnused 
---
>       void ,    
>          nUnused 
47,48c47,48
<       void* unused,    
<       int   nUnused 
---
>       void unused    
>          nUnused 
47,48c47,48
<       void* unused,    
<       int   nUnused 
---
>       void     
>          nUnused 
47c47
<       void* unused,    
---
>       void* ,    
47c47
<       void* unused,    
---
>       void*     
47,48c47,48
<       void* unused,    
<       int   nUnused 
---
>       void* ,    
>          nUnused 
47,48c47,48
<       void* unused,    
<       int   nUnused 
---
>       void*     
>          nUnused 
47,48c47,48
<       void* unused,    
<       int   nUnused 
---
>       void* ,    
>       int    
(97.0 %, 6182 bytes)
47c47
<       void* ,    
---
>       void*     
47,48c47,48
<       void* ,    
<       int   nUnused 
---
>       void*     
>          nUnused 
47,48c47,48
<       void* ,    
<       int   nUnused 
---
>       void*     
>       int    
47,48c47,48
<       void* ,    
<       int   nUnused 
---
>       void*     
>           
47c47
<       void* ,    
---
>       void*     
49c49
<    );
---
>    ;
47,49c47,49
<       void* ,    
<       int   nUnused 
<    );
---
>       void*     
>          nUnused 
>    ;
47,49c47,49
<       void* ,    
<       int   nUnused 
<    );
---
>       void*     
>       int    
>    ;
47,49c47,49
<       void* ,    
<       int   nUnused 
<    );
---
>       void*     
>           
>    ;
48c48
<       int   nUnused 
---
>          nUnused 
48c48
<       int   nUnused 
---
>           
48,49c48,49
<       int   nUnused 
<    );
---
>          nUnused 
>    ;
48,49c48,49
<       int   nUnused 
<    );
---
>           
>    ;
48,49c48,49
<       int   nUnused 
<    );
---
>          nUnused 
>    )
48,49c48,49
<       int   nUnused 
<    );
---
>           
>    )
48,49c48,49
<       int   nUnused 
<    );
---
>          nUnused 
>    
48,49c48,49
<       int   nUnused 
<    );
---
>           
>    
48c48
<       int   nUnused 
---
>       int    
48,49c48,49
<       int   nUnused 
<    );
---
>       int    
>    ;
48,49c48,49
<       int   nUnused 
<    );
---
>       int    
>    )
(97.0 %, 6175 bytes)
49c49
<    );
---
>    ;
49c49
<    );
---
>    
49c49,50
<    );
---
>    ;
> 
51d51
< ;
49c49,50
<    );
---
>    
> 
51d51
< ;
49c49
<    );
---
>    ;
53c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void BZ_API(BZ2_bzReadGetUnused) ( 
49c49
<    );
---
>    
53c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void BZ_API(BZ2_bzReadGetUnused) ( 
49c49
<    );
---
>    ;
51d50
< ;
53c52,53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> 
>  void BZ_API(BZ2_bzReadGetUnused) ( 
49c49
<    );
---
>    
51d50
< ;
53c52,53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> 
>  void BZ_API(BZ2_bzReadGetUnused) ( 
49c49
<    );
---
>    )
49c49,50
<    );
---
>    )
> 
51d51
< ;
49c49
<    );
---
>    )
53c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void BZ_API(BZ2_bzReadGetUnused) ( 
(97.0 %, 6174 bytes)
51c51
< ;
---
> 
51d50
< ;
53c52,53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> 
>  void BZ_API(BZ2_bzReadGetUnused) ( 
51d50
< ;
53c52,53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> 
> BZ_EXTERN  BZ_API(BZ2_bzReadGetUnused) ( 
51d50
< ;
53c52,53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> 
>   BZ_API(BZ2_bzReadGetUnused) ( 
51d50
< ;
53c52,53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> 
> BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
51d50
< ;
53c52,53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> 
>  void (BZ2_bzReadGetUnused) ( 
51d50
< ;
53c52,53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> 
> BZ_EXTERN  (BZ2_bzReadGetUnused) ( 
51d50
< ;
53c52,53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> 
>   (BZ2_bzReadGetUnused) ( 
53c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void BZ_API(BZ2_bzReadGetUnused) ( 
53c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ_API(BZ2_bzReadGetUnused) ( 
53c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void (BZ2_bzReadGetUnused) ( 
(97.0 %, 6165 bytes)
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ_API(BZ2_bzReadGetUnused) ( 
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   (BZ2_bzReadGetUnused) ( 
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ_APIBZ2_bzReadGetUnused) ( 
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ2_bzReadGetUnused) ( 
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ_API() ( 
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   () ( 
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   BZ_API) ( 
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>   ) ( 
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void (BZ2_bzReadGetUnused) ( 
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void BZ2_bzReadGetUnused) ( 
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void () ( 
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void ) ( 
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void (BZ2_bzReadGetUnused ( 
53c53
<  void BZ_API(BZ2_bzReadGetUnused) ( 
---
>  void BZ2_bzReadGetUnused ( 
(97.0 %, 6159 bytes)
53c53
<  void (BZ2_bzReadGetUnused) ( 
---
>  void BZ2_bzReadGetUnused) ( 
53c53
<  void (BZ2_bzReadGetUnused) ( 
---
>  void ) ( 
53c53
<  void (BZ2_bzReadGetUnused) ( 
---
>  void BZ2_bzReadGetUnused ( 
53c53
<  void (BZ2_bzReadGetUnused) ( 
---
>  void  ( 
53c53
<  void (BZ2_bzReadGetUnused) ( 
---
>  void BZ2_bzReadGetUnused)  
53c53
<  void (BZ2_bzReadGetUnused) ( 
---
>  void )  
53c53
<  void (BZ2_bzReadGetUnused) ( 
---
>  void BZ2_bzReadGetUnused  
53c53
<  void (BZ2_bzReadGetUnused) ( 
---
>  void   
53c53
<  void (BZ2_bzReadGetUnused) ( 
---
>  void () ( 
53c53
<  void (BZ2_bzReadGetUnused) ( 
---
>  void ( ( 
53c53
<  void (BZ2_bzReadGetUnused) ( 
---
>  void ()  
53c53
<  void (BZ2_bzReadGetUnused) ( 
---
>  void (  
(97.0 %, 6157 bytes)
53,54c53,54
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void  ( 
>       *    bzerror, 
53,54c53,54
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void   
>       *    bzerror, 
53,54c53,54
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void  ( 
>       int    bzerror, 
53,54c53,54
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void   
>       int    bzerror, 
53,54c53,54
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void  ( 
>           bzerror, 
53,54c53,54
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void   
>           bzerror, 
53c53
<  void BZ2_bzReadGetUnused ( 
---
>  void BZ2_bzReadGetUnused  
53,54c53,54
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>       *    bzerror, 
53,54c53,54
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>       int    bzerror, 
53,54c53,54
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>           bzerror, 
53,54c53,54
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>       int*    , 
53,54c53,54
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>       *    , 
53,54c53,54
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>       int    , 
53,54c53,54
<  void BZ2_bzReadGetUnused ( 
<       int*    bzerror, 
---
>  void BZ2_bzReadGetUnused  
>           , 
54c54
<       int*    bzerror, 
---
>       *    bzerror, 
54c54
<       int*    bzerror, 
---
>           bzerror, 
54c54
<       int*    bzerror, 
---
>       *    , 
54c54
<       int*    bzerror, 
---
>           , 
54c54
<       int*    bzerror, 
---
>       *    bzerror 
54c54
<       int*    bzerror, 
---
>           bzerror 
54c54
<       int*    bzerror, 
---
>       *     
54c54
<       int*    bzerror, 
---
>            
54c54
<       int*    bzerror, 
---
>       int    bzerror, 
54c54
<       int*    bzerror, 
---
>       int    , 
54c54
<       int*    bzerror, 
---
>       int    bzerror 
54c54
<       int*    bzerror, 
---
>       int     
54,55c54,55
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror, 
>       * b, 
54,55c54,55
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    , 
>       * b, 
54,55c54,55
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int    bzerror 
>       * b, 
54,55c54,55
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int     
>       * b, 
54c54
<       int*    bzerror, 
---
>       int*    , 
54c54
<       int*    bzerror, 
---
>       int*     
54,55c54,55
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       * b, 
54,55c54,55
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       * b, 
54,55c54,55
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>       BZFILE b, 
54,55c54,55
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
54,55c54,55
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
>        b, 
54,55c54,55
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*     
>        b, 
54c54
<       int*    bzerror, 
---
>       int*    bzerror 
(97.0 %, 6150 bytes)
54c54
<       int*    , 
---
>       int*     
54,55c54,55
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * b, 
54,55c54,55
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE b, 
54,55c54,55
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        b, 
54,55c54,55
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE* , 
54,55c54,55
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       * , 
54,55c54,55
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>       BZFILE , 
54,55c54,55
<       int*    , 
<       BZFILE* b, 
---
>       int*     
>        , 
55c55
<       BZFILE* b, 
---
>       * b, 
55c55
<       BZFILE* b, 
---
>        b, 
55c55
<       BZFILE* b, 
---
>       * , 
55c55
<       BZFILE* b, 
---
>        , 
55c55
<       BZFILE* b, 
---
>       * b 
55c55
<       BZFILE* b, 
---
>        b 
55c55
<       BZFILE* b, 
---
>       *  
55c55
<       BZFILE* b, 
---
>         
55c55
<       BZFILE* b, 
---
>       BZFILE b, 
55c55
<       BZFILE* b, 
---
>       BZFILE , 
55c55
<       BZFILE* b, 
---
>       BZFILE b 
55c55
<       BZFILE* b, 
---
>       BZFILE  
55,56c55,56
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE b, 
>       **  unused,  
55,56c55,56
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE , 
>       **  unused,  
55,56c55,56
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE b 
>       **  unused,  
55,56c55,56
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE  
>       **  unused,  
55c55
<       BZFILE* b, 
---
>       BZFILE* , 
55c55
<       BZFILE* b, 
---
>       BZFILE*  
55,56c55,56
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* , 
>       **  unused,  
55,56c55,56
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  
>       **  unused,  
55,56c55,56
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* , 
>       void*  unused,  
55,56c55,56
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  
>       void*  unused,  
55,56c55,56
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* , 
>       *  unused,  
55,56c55,56
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  
>       *  unused,  
(97.0 %, 6149 bytes)
55c55
<       BZFILE* , 
---
>       BZFILE*  
55,56c55,56
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       **  unused,  
55,56c55,56
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       void*  unused,  
55,56c55,56
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       *  unused,  
55,56c55,56
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       void*  unused,  
55,56c55,56
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       *  unused,  
55,56c55,56
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>       void  unused,  
55,56c55,56
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE*  
>         unused,  
56c56
<       void**  unused,  
---
>       **  unused,  
56c56
<       void**  unused,  
---
>       *  unused,  
56c56
<       void**  unused,  
---
>       *  unused,  
56c56
<       void**  unused,  
---
>         unused,  
56c56
<       void**  unused,  
---
>       **  ,  
56c56
<       void**  unused,  
---
>       *  ,  
56c56
<       void**  unused,  
---
>       *  ,  
56c56
<       void**  unused,  
---
>         ,  
56c56
<       void**  unused,  
---
>       void*  unused,  
56c56
<       void**  unused,  
---
>       void  unused,  
56c56
<       void**  unused,  
---
>       void*  ,  
56c56
<       void**  unused,  
---
>       void  ,  
56c56
<       void**  unused,  
---
>       void*  unused  
56c56
<       void**  unused,  
---
>       void  unused  
56c56
<       void**  unused,  
---
>       void*    
56c56
<       void**  unused,  
---
>       void    
56c56
<       void**  unused,  
---
>       void*  unused,  
56c56
<       void**  unused,  
---
>       void*  ,  
56c56
<       void**  unused,  
---
>       void*  unused  
56c56
<       void**  unused,  
---
>       void*    
56,57c56,57
<       void**  unused,  
<       int*    nUnused 
---
>       void*  unused,  
>       *    nUnused 
56,57c56,57
<       void**  unused,  
<       int*    nUnused 
---
>       void*  ,  
>       *    nUnused 
56,57c56,57
<       void**  unused,  
<       int*    nUnused 
---
>       void*  unused  
>       *    nUnused 
56,57c56,57
<       void**  unused,  
<       int*    nUnused 
---
>       void*    
>       *    nUnused 
56c56
<       void**  unused,  
---
>       void**  ,  
56c56
<       void**  unused,  
---
>       void**    
56,57c56,57
<       void**  unused,  
<       int*    nUnused 
---
>       void**  ,  
>       *    nUnused 
56,57c56,57
<       void**  unused,  
<       int*    nUnused 
---
>       void**    
>       *    nUnused 
56,57c56,57
<       void**  unused,  
<       int*    nUnused 
---
>       void**  ,  
>       int    nUnused 
56,57c56,57
<       void**  unused,  
<       int*    nUnused 
---
>       void**    
>       int    nUnused 
56,57c56,57
<       void**  unused,  
<       int*    nUnused 
---
>       void**  ,  
>           nUnused 
56,57c56,57
<       void**  unused,  
<       int*    nUnused 
---
>       void**    
>           nUnused 
56c56
<       void**  unused,  
---
>       void**  unused  
(97.0 %, 6143 bytes)
56c56
<       void**  ,  
---
>       void**    
56,57c56,57
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       *    nUnused 
56,57c56,57
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       int    nUnused 
56,57c56,57
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>           nUnused 
56,57c56,57
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       int*     
56,57c56,57
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       *     
56,57c56,57
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>       int     
56,57c56,57
<       void**  ,  
<       int*    nUnused 
---
>       void**    
>            
57c57
<       int*    nUnused 
---
>       *    nUnused 
57c57
<       int*    nUnused 
---
>           nUnused 
57c57
<       int*    nUnused 
---
>       *     
57c57
<       int*    nUnused 
---
>            
57,58c57,58
<       int*    nUnused 
<    );
---
>       *    nUnused 
>    ;
57,58c57,58
<       int*    nUnused 
<    );
---
>           nUnused 
>    ;
57,58c57,58
<       int*    nUnused 
<    );
---
>       *     
>    ;
57,58c57,58
<       int*    nUnused 
<    );
---
>            
>    ;
57c57
<       int*    nUnused 
---
>       int    nUnused 
57c57
<       int*    nUnused 
---
>       int     
57,58c57,58
<       int*    nUnused 
<    );
---
>       int    nUnused 
>    ;
57,58c57,58
<       int*    nUnused 
<    );
---
>       int     
>    ;
57,58c57,58
<       int*    nUnused 
<    );
---
>       int    nUnused 
>    )
57,58c57,58
<       int*    nUnused 
<    );
---
>       int     
>    )
57,58c57,58
<       int*    nUnused 
<    );
---
>       int    nUnused 
>    
57,58c57,58
<       int*    nUnused 
<    );
---
>       int     
>    
57c57
<       int*    nUnused 
---
>       int*     
57,58c57,58
<       int*    nUnused 
<    );
---
>       int*     
>    ;
57,58c57,58
<       int*    nUnused 
<    );
---
>       int*     
>    )
(97.0 %, 6136 bytes)
58c58
<    );
---
>    ;
58c58
<    );
---
>    
58c58,59
<    );
---
>    ;
> 
60d60
< ;
58c58,59
<    );
---
>    
> 
60d60
< ;
58c58
<    );
---
>    ;
62c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
58c58
<    );
---
>    
62c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
58c58
<    );
---
>    ;
60d59
< ;
62c61,62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> 
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
58c58
<    );
---
>    
60d59
< ;
62c61,62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> 
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
58c58
<    );
---
>    )
58c58,59
<    );
---
>    )
> 
60d60
< ;
58c58
<    );
---
>    )
62c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
(97.0 %, 6135 bytes)
60c60
< ;
---
> 
60d59
< ;
62c61,62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> 
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
60d59
< ;
62c61,62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> 
> BZ_EXTERN * BZ_API(BZ2_bzWriteOpen) ( 
60d59
< ;
62c61,62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> 
>  * BZ_API(BZ2_bzWriteOpen) ( 
60d59
< ;
62c61,62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> 
> BZ_EXTERN BZFILE BZ_API(BZ2_bzWriteOpen) ( 
60d59
< ;
62c61,62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> 
>  BZFILE BZ_API(BZ2_bzWriteOpen) ( 
60d59
< ;
62c61,62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> 
> BZ_EXTERN  BZ_API(BZ2_bzWriteOpen) ( 
60d59
< ;
62c61,62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> 
>   BZ_API(BZ2_bzWriteOpen) ( 
62c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
62c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ_API(BZ2_bzWriteOpen) ( 
(97.0 %, 6126 bytes)
62c62
<  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ_API(BZ2_bzWriteOpen) ( 
62c62
<  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_API(BZ2_bzWriteOpen) ( 
62c62
<  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * (BZ2_bzWriteOpen) ( 
62c62
<  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>   (BZ2_bzWriteOpen) ( 
62c62
<  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ_APIBZ2_bzWriteOpen) ( 
62c62
<  BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_APIBZ2_bzWriteOpen) ( 
(97.0 %, 6120 bytes)
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_API(BZ2_bzWriteOpen) ( 
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   (BZ2_bzWriteOpen) ( 
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_APIBZ2_bzWriteOpen) ( 
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ2_bzWriteOpen) ( 
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_API() ( 
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   () ( 
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   BZ_API) ( 
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>   ) ( 
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>  * (BZ2_bzWriteOpen) ( 
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ2_bzWriteOpen) ( 
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>  * () ( 
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>  * ) ( 
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>  * (BZ2_bzWriteOpen ( 
62c62
<  * BZ_API(BZ2_bzWriteOpen) ( 
---
>  * BZ2_bzWriteOpen ( 
(97.0 %, 6114 bytes)
62c62
<  * (BZ2_bzWriteOpen) ( 
---
>  * BZ2_bzWriteOpen) ( 
62c62
<  * (BZ2_bzWriteOpen) ( 
---
>  * ) ( 
62c62
<  * (BZ2_bzWriteOpen) ( 
---
>  * BZ2_bzWriteOpen ( 
62c62
<  * (BZ2_bzWriteOpen) ( 
---
>  *  ( 
62c62
<  * (BZ2_bzWriteOpen) ( 
---
>  * BZ2_bzWriteOpen)  
62c62
<  * (BZ2_bzWriteOpen) ( 
---
>  * )  
62c62
<  * (BZ2_bzWriteOpen) ( 
---
>  * BZ2_bzWriteOpen  
62c62
<  * (BZ2_bzWriteOpen) ( 
---
>  *   
62c62
<  * (BZ2_bzWriteOpen) ( 
---
>  * () ( 
62c62
<  * (BZ2_bzWriteOpen) ( 
---
>  * ( ( 
62c62
<  * (BZ2_bzWriteOpen) ( 
---
>  * ()  
62c62
<  * (BZ2_bzWriteOpen) ( 
---
>  * (  
(97.0 %, 6112 bytes)
62,63c62,63
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *  ( 
>       *  bzerror,      
62,63c62,63
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *   
>       *  bzerror,      
62,63c62,63
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *  ( 
>       int  bzerror,      
62,63c62,63
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *   
>       int  bzerror,      
62,63c62,63
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *  ( 
>         bzerror,      
62,63c62,63
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  *   
>         bzerror,      
62c62
<  * BZ2_bzWriteOpen ( 
---
>  * BZ2_bzWriteOpen  
62,63c62,63
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>       *  bzerror,      
62,63c62,63
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>       int  bzerror,      
62,63c62,63
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>         bzerror,      
62,63c62,63
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>       int*  ,      
62,63c62,63
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>       *  ,      
62,63c62,63
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>       int  ,      
62,63c62,63
<  * BZ2_bzWriteOpen ( 
<       int*  bzerror,      
---
>  * BZ2_bzWriteOpen  
>         ,      
63c63
<       int*  bzerror,      
---
>       *  bzerror,      
63c63
<       int*  bzerror,      
---
>         bzerror,      
63c63
<       int*  bzerror,      
---
>       *  ,      
63c63
<       int*  bzerror,      
---
>         ,      
63c63
<       int*  bzerror,      
---
>       *  bzerror      
63c63
<       int*  bzerror,      
---
>         bzerror      
63c63
<       int*  bzerror,      
---
>       *        
63c63
<       int*  bzerror,      
---
>               
63c63
<       int*  bzerror,      
---
>       int  bzerror,      
63c63
<       int*  bzerror,      
---
>       int  ,      
63c63
<       int*  bzerror,      
---
>       int  bzerror      
63c63
<       int*  bzerror,      
---
>       int        
63,64c63,64
<       int*  bzerror,      
<       FILE* f, 
---
>       int  bzerror,      
>       * f, 
63,64c63,64
<       int*  bzerror,      
<       FILE* f, 
---
>       int  ,      
>       * f, 
63,64c63,64
<       int*  bzerror,      
<       FILE* f, 
---
>       int  bzerror      
>       * f, 
63,64c63,64
<       int*  bzerror,      
<       FILE* f, 
---
>       int        
>       * f, 
63c63
<       int*  bzerror,      
---
>       int*  ,      
63c63
<       int*  bzerror,      
---
>       int*        
63,64c63,64
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>       * f, 
63,64c63,64
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>       * f, 
63,64c63,64
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>       FILE f, 
63,64c63,64
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>       FILE f, 
63,64c63,64
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  ,      
>        f, 
63,64c63,64
<       int*  bzerror,      
<       FILE* f, 
---
>       int*        
>        f, 
63c63
<       int*  bzerror,      
---
>       int*  bzerror      
(97.0 %, 6105 bytes)
63c63
<       int*  ,      
---
>       int*        
63,64c63,64
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       * f, 
63,64c63,64
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE f, 
63,64c63,64
<       int*  ,      
<       FILE* f, 
---
>       int*        
>        f, 
63,64c63,64
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE* , 
63,64c63,64
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       * , 
63,64c63,64
<       int*  ,      
<       FILE* f, 
---
>       int*        
>       FILE , 
63,64c63,64
<       int*  ,      
<       FILE* f, 
---
>       int*        
>        , 
64c64
<       FILE* f, 
---
>       * f, 
64c64
<       FILE* f, 
---
>        f, 
64c64
<       FILE* f, 
---
>       * , 
64c64
<       FILE* f, 
---
>        , 
64c64
<       FILE* f, 
---
>       * f 
64c64
<       FILE* f, 
---
>        f 
64c64
<       FILE* f, 
---
>       *  
64c64
<       FILE* f, 
---
>         
64c64
<       FILE* f, 
---
>       FILE f, 
64c64
<       FILE* f, 
---
>       FILE , 
64c64
<       FILE* f, 
---
>       FILE f 
64c64
<       FILE* f, 
---
>       FILE  
64,65c64,65
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE f, 
>          blockSize100k, 
64,65c64,65
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE , 
>          blockSize100k, 
64,65c64,65
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE f 
>          blockSize100k, 
64,65c64,65
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE  
>          blockSize100k, 
64c64
<       FILE* f, 
---
>       FILE* , 
64c64
<       FILE* f, 
---
>       FILE*  
64,65c64,65
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* , 
>          blockSize100k, 
64,65c64,65
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k, 
64,65c64,65
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* , 
>       int   , 
(97.0 %, 6104 bytes)
64c64
<       FILE* , 
---
>       FILE*  
64,65c64,65
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k, 
64,65c64,65
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int   , 
64,65c64,65
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          , 
64,65c64,65
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int   blockSize100k 
64,65c64,65
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>          blockSize100k 
64,65c64,65
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>       int    
64,65c64,65
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE*  
>           
65c65
<       int   blockSize100k, 
---
>          blockSize100k, 
65c65
<       int   blockSize100k, 
---
>          , 
65c65
<       int   blockSize100k, 
---
>          blockSize100k 
65c65
<       int   blockSize100k, 
---
>           
65,66c65,66
<       int   blockSize100k, 
<       int   verbosity, 
---
>          blockSize100k, 
>          verbosity, 
65,66c65,66
<       int   blockSize100k, 
<       int   verbosity, 
---
>          , 
>          verbosity, 
65,66c65,66
<       int   blockSize100k, 
<       int   verbosity, 
---
>          blockSize100k 
>          verbosity, 
65,66c65,66
<       int   blockSize100k, 
<       int   verbosity, 
---
>           
>          verbosity, 
65c65
<       int   blockSize100k, 
---
>       int   , 
65c65
<       int   blockSize100k, 
---
>       int    
65,66c65,66
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   , 
>          verbosity, 
65,66c65,66
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int    
>          verbosity, 
65,66c65,66
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   , 
>       int   , 
(97.0 %, 6091 bytes)
65c65
<       int   , 
---
>       int    
65,66c65,66
<       int   , 
<       int   verbosity, 
---
>       int    
>          verbosity, 
64a65
>       int    
66d66
<       int   verbosity, 
65,66c65,66
<       int   , 
<       int   verbosity, 
---
>       int    
>          , 
65,66c65,66
<       int   , 
<       int   verbosity, 
---
>       int    
>       int   verbosity 
65,66c65,66
<       int   , 
<       int   verbosity, 
---
>       int    
>          verbosity 
65,66c65,66
<       int   , 
<       int   verbosity, 
---
>       int    
>       int    
65,66c65,66
<       int   , 
<       int   verbosity, 
---
>       int    
>           
66c66
<       int   verbosity, 
---
>          verbosity, 
66c66
<       int   verbosity, 
---
>          , 
66c66
<       int   verbosity, 
---
>          verbosity 
66c66
<       int   verbosity, 
---
>           
66,67c66,67
<       int   verbosity, 
<       int   workFactor 
---
>          verbosity, 
>          workFactor 
66,67c66,67
<       int   verbosity, 
<       int   workFactor 
---
>          , 
>          workFactor 
66,67c66,67
<       int   verbosity, 
<       int   workFactor 
---
>          verbosity 
>          workFactor 
66,67c66,67
<       int   verbosity, 
<       int   workFactor 
---
>           
>          workFactor 
66c66
<       int   verbosity, 
---
>       int   , 
66c66
<       int   verbosity, 
---
>       int    
66,67c66,67
<       int   verbosity, 
<       int   workFactor 
---
>       int   , 
>          workFactor 
66,67c66,67
<       int   verbosity, 
<       int   workFactor 
---
>       int    
>          workFactor 
66,67c66,67
<       int   verbosity, 
<       int   workFactor 
---
>       int   , 
>       int    
(97.0 %, 6082 bytes)
66c66
<       int   , 
---
>       int    
66,67c66,67
<       int   , 
<       int   workFactor 
---
>       int    
>          workFactor 
66,67c66,67
<       int   , 
<       int   workFactor 
---
>       int    
>       int    
66,67c66,67
<       int   , 
<       int   workFactor 
---
>       int    
>           
66c66
<       int   , 
---
>       int    
68c68
<    );
---
>    ;
66,68c66,68
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>          workFactor 
>    ;
66,68c66,68
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>       int    
>    ;
66,68c66,68
<       int   , 
<       int   workFactor 
<    );
---
>       int    
>           
>    ;
67c67
<       int   workFactor 
---
>          workFactor 
67c67
<       int   workFactor 
---
>           
67,68c67,68
<       int   workFactor 
<    );
---
>          workFactor 
>    ;
67,68c67,68
<       int   workFactor 
<    );
---
>           
>    ;
67,68c67,68
<       int   workFactor 
<    );
---
>          workFactor 
>    )
67,68c67,68
<       int   workFactor 
<    );
---
>           
>    )
67,68c67,68
<       int   workFactor 
<    );
---
>          workFactor 
>    
67,68c67,68
<       int   workFactor 
<    );
---
>           
>    
67c67
<       int   workFactor 
---
>       int    
67,68c67,68
<       int   workFactor 
<    );
---
>       int    
>    ;
67,68c67,68
<       int   workFactor 
<    );
---
>       int    
>    )
(97.0 %, 6072 bytes)
68c68
<    );
---
>    ;
68c68
<    );
---
>    
68c68,69
<    );
---
>    ;
> 
70d70
< ;
68c68,69
<    );
---
>    
> 
70d70
< ;
68c68
<    );
---
>    ;
72c72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
68c68
<    );
---
>    
72c72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
68c68
<    );
---
>    ;
70d69
< ;
72c71,72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> 
>  void BZ_API(BZ2_bzWriteClose) ( 
68c68
<    );
---
>    
70d69
< ;
72c71,72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> 
>  void BZ_API(BZ2_bzWriteClose) ( 
68c68
<    );
---
>    )
68c68,69
<    );
---
>    )
> 
70d70
< ;
68c68
<    );
---
>    )
72c72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
(97.0 %, 6071 bytes)
70c70
< ;
---
> 
70d69
< ;
72c71,72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> 
>  void BZ_API(BZ2_bzWriteClose) ( 
70d69
< ;
72c71,72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> 
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose) ( 
70d69
< ;
72c71,72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> 
>   BZ_API(BZ2_bzWriteClose) ( 
70d69
< ;
72c71,72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> 
> BZ_EXTERN void (BZ2_bzWriteClose) ( 
70d69
< ;
72c71,72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> 
>  void (BZ2_bzWriteClose) ( 
70d69
< ;
72c71,72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> 
> BZ_EXTERN  (BZ2_bzWriteClose) ( 
70d69
< ;
72c71,72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> 
>   (BZ2_bzWriteClose) ( 
72c72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ_API(BZ2_bzWriteClose) ( 
72c72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API(BZ2_bzWriteClose) ( 
72c72
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>  void (BZ2_bzWriteClose) ( 
(97.0 %, 6062 bytes)
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API(BZ2_bzWriteClose) ( 
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   (BZ2_bzWriteClose) ( 
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_APIBZ2_bzWriteClose) ( 
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ2_bzWriteClose) ( 
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API() ( 
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   () ( 
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   BZ_API) ( 
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>   ) ( 
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>  void (BZ2_bzWriteClose) ( 
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ2_bzWriteClose) ( 
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>  void () ( 
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>  void ) ( 
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>  void (BZ2_bzWriteClose ( 
72c72
<  void BZ_API(BZ2_bzWriteClose) ( 
---
>  void BZ2_bzWriteClose ( 
(97.0 %, 6056 bytes)
72c72
<  void (BZ2_bzWriteClose) ( 
---
>  void BZ2_bzWriteClose) ( 
72c72
<  void (BZ2_bzWriteClose) ( 
---
>  void ) ( 
72c72
<  void (BZ2_bzWriteClose) ( 
---
>  void BZ2_bzWriteClose ( 
72c72
<  void (BZ2_bzWriteClose) ( 
---
>  void  ( 
72c72
<  void (BZ2_bzWriteClose) ( 
---
>  void BZ2_bzWriteClose)  
72c72
<  void (BZ2_bzWriteClose) ( 
---
>  void )  
72c72
<  void (BZ2_bzWriteClose) ( 
---
>  void BZ2_bzWriteClose  
72c72
<  void (BZ2_bzWriteClose) ( 
---
>  void   
72c72
<  void (BZ2_bzWriteClose) ( 
---
>  void () ( 
72c72
<  void (BZ2_bzWriteClose) ( 
---
>  void ( ( 
72c72
<  void (BZ2_bzWriteClose) ( 
---
>  void ()  
(97.0 %, 6054 bytes)
72,73c72,73
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void  ( 
>       *          bzerror, 
72,73c72,73
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void   
>       *          bzerror, 
72,73c72,73
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void  ( 
>       int          bzerror, 
72,73c72,73
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void   
>       int          bzerror, 
72,73c72,73
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void  ( 
>                 bzerror, 
72,73c72,73
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void   
>                 bzerror, 
72c72
<  void BZ2_bzWriteClose ( 
---
>  void BZ2_bzWriteClose  
72,73c72,73
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>       *          bzerror, 
72,73c72,73
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>       int          bzerror, 
72,73c72,73
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>                 bzerror, 
72,73c72,73
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>       int*          , 
72,73c72,73
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>       *          , 
72,73c72,73
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>       int          , 
72,73c72,73
<  void BZ2_bzWriteClose ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose  
>                 , 
73c73
<       int*          bzerror, 
---
>       *          bzerror, 
73c73
<       int*          bzerror, 
---
>                 bzerror, 
73c73
<       int*          bzerror, 
---
>       *          , 
73c73
<       int*          bzerror, 
---
>                 , 
73c73
<       int*          bzerror, 
---
>       *          bzerror 
73c73
<       int*          bzerror, 
---
>                 bzerror 
73c73
<       int*          bzerror, 
---
>       *           
73c73
<       int*          bzerror, 
---
>                  
73c73
<       int*          bzerror, 
---
>       int          bzerror, 
73c73
<       int*          bzerror, 
---
>       int          , 
73c73
<       int*          bzerror, 
---
>       int          bzerror 
73c73
<       int*          bzerror, 
---
>       int           
73,74c73,74
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror, 
>       *       b, 
73,74c73,74
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          , 
>       *       b, 
73,74c73,74
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror 
>       *       b, 
73,74c73,74
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int           
>       *       b, 
73c73
<       int*          bzerror, 
---
>       int*          , 
73c73
<       int*          bzerror, 
---
>       int*           
73,74c73,74
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       *       b, 
73,74c73,74
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
73,74c73,74
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       BZFILE       b, 
73,74c73,74
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
73,74c73,74
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>              b, 
73,74c73,74
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>              b, 
73c73
<       int*          bzerror, 
---
>       int*          bzerror 
(97.0 %, 6047 bytes)
73c73
<       int*          , 
---
>       int*           
73,74c73,74
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
73,74c73,74
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
73,74c73,74
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              b, 
73,74c73,74
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE*       , 
73,74c73,74
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       , 
73,74c73,74
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       , 
73,74c73,74
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              , 
74c74
<       BZFILE*       b, 
---
>       *       b, 
74c74
<       BZFILE*       b, 
---
>              b, 
74c74
<       BZFILE*       b, 
---
>       *       , 
74c74
<       BZFILE*       b, 
---
>              , 
74c74
<       BZFILE*       b, 
---
>       *       b 
74c74
<       BZFILE*       b, 
---
>              b 
74c74
<       BZFILE*       b, 
---
>       *        
74c74
<       BZFILE*       b, 
---
>               
74c74
<       BZFILE*       b, 
---
>       BZFILE       b, 
74c74
<       BZFILE*       b, 
---
>       BZFILE       , 
74c74
<       BZFILE*       b, 
---
>       BZFILE       b 
74c74
<       BZFILE*       b, 
---
>       BZFILE        
74,75c74,75
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b, 
>                  abandon, 
74,75c74,75
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       , 
>                  abandon, 
74,75c74,75
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b 
>                  abandon, 
74,75c74,75
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE        
>                  abandon, 
74c74
<       BZFILE*       b, 
---
>       BZFILE*       , 
74c74
<       BZFILE*       b, 
---
>       BZFILE*        
74,75c74,75
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>                  abandon, 
74,75c74,75
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
74,75c74,75
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>       int           , 
(97.0 %, 6046 bytes)
74c74
<       BZFILE*       , 
---
>       BZFILE*        
74,75c74,75
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
74,75c74,75
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           , 
74,75c74,75
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  , 
74,75c74,75
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           abandon 
74,75c74,75
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon 
74,75c74,75
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int            
74,75c74,75
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                   
75c75
<       int           abandon, 
---
>                  abandon, 
75c75
<       int           abandon, 
---
>                  , 
75c75
<       int           abandon, 
---
>                  abandon 
75c75
<       int           abandon, 
---
>                   
75,76c75,76
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  abandon, 
>        int* nbytes_in, 
75,76c75,76
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  , 
>        int* nbytes_in, 
75,76c75,76
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                  abandon 
>        int* nbytes_in, 
75,76c75,76
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>                   
>        int* nbytes_in, 
75c75
<       int           abandon, 
---
>       int           , 
75c75
<       int           abandon, 
---
>       int            
75,76c75,76
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
>        int* nbytes_in, 
75,76c75,76
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int            
>        int* nbytes_in, 
75,76c75,76
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
>       unsigned * nbytes_in, 
(97.1 %, 6039 bytes)
75c75
<       int           , 
---
>       int            
75,76c75,76
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        int* nbytes_in, 
75,76c75,76
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned * nbytes_in, 
75,76c75,76
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        * nbytes_in, 
75,76c75,76
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned int nbytes_in, 
75,76c75,76
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>        int nbytes_in, 
75,76c75,76
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>       unsigned  nbytes_in, 
75,76c75,76
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int            
>         nbytes_in, 
76c76
<       unsigned int* nbytes_in, 
---
>        int* nbytes_in, 
76c76
<       unsigned int* nbytes_in, 
---
>        * nbytes_in, 
76c76
<       unsigned int* nbytes_in, 
---
>        int nbytes_in, 
76c76
<       unsigned int* nbytes_in, 
---
>         nbytes_in, 
76c76
<       unsigned int* nbytes_in, 
---
>        int* , 
76c76
<       unsigned int* nbytes_in, 
---
>        * , 
76c76
<       unsigned int* nbytes_in, 
---
>        int , 
76c76
<       unsigned int* nbytes_in, 
---
>         , 
76c76
<       unsigned int* nbytes_in, 
---
>       unsigned * nbytes_in, 
76c76
<       unsigned int* nbytes_in, 
---
>       unsigned  nbytes_in, 
76c76
<       unsigned int* nbytes_in, 
---
>       unsigned * , 
(97.1 %, 6036 bytes)
76c76
<       unsigned * nbytes_in, 
---
>       unsigned  nbytes_in, 
76c76
<       unsigned * nbytes_in, 
---
>       unsigned  , 
76c76
<       unsigned * nbytes_in, 
---
>       unsigned  nbytes_in 
76c76
<       unsigned * nbytes_in, 
---
>       unsigned   
76,77c76,77
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_in, 
>        int* nbytes_out 
76,77c76,77
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  , 
>        int* nbytes_out 
76,77c76,77
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_in 
>        int* nbytes_out 
76,77c76,77
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned   
>        int* nbytes_out 
76c76
<       unsigned * nbytes_in, 
---
>       unsigned * , 
76c76
<       unsigned * nbytes_in, 
---
>       unsigned *  
76,77c76,77
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * , 
>        int* nbytes_out 
76,77c76,77
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int* nbytes_out 
76,77c76,77
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * , 
>       unsigned * nbytes_out 
(97.1 %, 6027 bytes)
76c76
<       unsigned * , 
---
>       unsigned *  
76,77c76,77
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int* nbytes_out 
76,77c76,77
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned * nbytes_out 
76,77c76,77
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        * nbytes_out 
76,77c76,77
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned int nbytes_out 
76,77c76,77
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>        int nbytes_out 
76,77c76,77
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>       unsigned  nbytes_out 
76,77c76,77
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned *  
>         nbytes_out 
77c77
<       unsigned int* nbytes_out 
---
>        int* nbytes_out 
77c77
<       unsigned int* nbytes_out 
---
>        * nbytes_out 
77c77
<       unsigned int* nbytes_out 
---
>        int nbytes_out 
77c77
<       unsigned int* nbytes_out 
---
>         nbytes_out 
77c77
<       unsigned int* nbytes_out 
---
>        int*  
77c77
<       unsigned int* nbytes_out 
---
>        *  
77c77
<       unsigned int* nbytes_out 
---
>        int  
77c77
<       unsigned int* nbytes_out 
---
>          
77c77
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_out 
77c77
<       unsigned int* nbytes_out 
---
>       unsigned  nbytes_out 
77c77
<       unsigned int* nbytes_out 
---
>       unsigned *  
77c77
<       unsigned int* nbytes_out 
---
>       unsigned   
(97.1 %, 6024 bytes)
77c77
<       unsigned * nbytes_out 
---
>       unsigned  nbytes_out 
77c77
<       unsigned * nbytes_out 
---
>       unsigned   
77,78c77,78
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    ;
77,78c77,78
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    ;
77,78c77,78
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    )
77,78c77,78
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    )
77,78c77,78
<       unsigned * nbytes_out 
<    );
---
>       unsigned  nbytes_out 
>    
77,78c77,78
<       unsigned * nbytes_out 
<    );
---
>       unsigned   
>    
77c77
<       unsigned * nbytes_out 
---
>       unsigned *  
77,78c77,78
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    ;
77,78c77,78
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    )
77,78c77,78
<       unsigned * nbytes_out 
<    );
---
>       unsigned *  
>    
77c77
<       unsigned * nbytes_out 
---
>       unsigned *  
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
(97.1 %, 6014 bytes)
78c78
<    );
---
>    ;
78c78
<    );
---
>    
78c78
<    );
---
>    ;
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
78c78
<    );
---
>    
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
78c78
<    );
---
>    ;
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64) ( 
78c78
<    );
---
>    
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64) ( 
78c78
<    );
---
>    ;
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
78c78
<    );
---
>    
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
78c78
<    );
---
>    )
78c78
<    );
---
>    )
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
78c78
<    );
---
>    )
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzWriteClose64) ( 
78c78
<    );
---
>    )
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
78c78
<    );
---
>    )
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose64) ( 
78c78
<    );
---
>    )
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void (BZ2_bzWriteClose64) ( 
78c78
<    );
---
>    )
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN  (BZ2_bzWriteClose64) ( 
78c78
<    );
---
>    )
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   (BZ2_bzWriteClose64) ( 
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ_API(BZ2_bzWriteClose64) ( 
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
80c80
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void (BZ2_bzWriteClose64) ( 
(97.1 %, 6005 bytes)
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API(BZ2_bzWriteClose64) ( 
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   (BZ2_bzWriteClose64) ( 
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_APIBZ2_bzWriteClose64) ( 
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ2_bzWriteClose64) ( 
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API() ( 
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   () ( 
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   BZ_API) ( 
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>   ) ( 
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void (BZ2_bzWriteClose64) ( 
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ2_bzWriteClose64) ( 
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void () ( 
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void ) ( 
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void (BZ2_bzWriteClose64 ( 
80c80
<  void BZ_API(BZ2_bzWriteClose64) ( 
---
>  void BZ2_bzWriteClose64 ( 
(97.1 %, 5999 bytes)
80c80
<  void (BZ2_bzWriteClose64) ( 
---
>  void BZ2_bzWriteClose64) ( 
80c80
<  void (BZ2_bzWriteClose64) ( 
---
>  void ) ( 
80c80
<  void (BZ2_bzWriteClose64) ( 
---
>  void BZ2_bzWriteClose64 ( 
80c80
<  void (BZ2_bzWriteClose64) ( 
---
>  void  ( 
80c80
<  void (BZ2_bzWriteClose64) ( 
---
>  void BZ2_bzWriteClose64)  
80c80
<  void (BZ2_bzWriteClose64) ( 
---
>  void )  
80c80
<  void (BZ2_bzWriteClose64) ( 
---
>  void BZ2_bzWriteClose64  
80c80
<  void (BZ2_bzWriteClose64) ( 
---
>  void   
(97.1 %, 5997 bytes)
80,81c80,81
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void  ( 
>       *          bzerror, 
80,81c80,81
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void   
>       *          bzerror, 
80,81c80,81
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void  ( 
>       int          bzerror, 
80,81c80,81
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void   
>       int          bzerror, 
80,81c80,81
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void  ( 
>                 bzerror, 
80,81c80,81
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void   
>                 bzerror, 
80c80
<  void BZ2_bzWriteClose64 ( 
---
>  void BZ2_bzWriteClose64  
80,81c80,81
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>       *          bzerror, 
80,81c80,81
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>       int          bzerror, 
80,81c80,81
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>                 bzerror, 
80,81c80,81
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>       int*          , 
80,81c80,81
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>       *          , 
80,81c80,81
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>       int          , 
80,81c80,81
<  void BZ2_bzWriteClose64 ( 
<       int*          bzerror, 
---
>  void BZ2_bzWriteClose64  
>                 , 
81c81
<       int*          bzerror, 
---
>       *          bzerror, 
81c81
<       int*          bzerror, 
---
>                 bzerror, 
81c81
<       int*          bzerror, 
---
>       *          , 
81c81
<       int*          bzerror, 
---
>                 , 
81c81
<       int*          bzerror, 
---
>       *          bzerror 
81c81
<       int*          bzerror, 
---
>                 bzerror 
81c81
<       int*          bzerror, 
---
>       *           
81c81
<       int*          bzerror, 
---
>                  
81c81
<       int*          bzerror, 
---
>       int          bzerror, 
81c81
<       int*          bzerror, 
---
>       int          , 
81c81
<       int*          bzerror, 
---
>       int          bzerror 
81c81
<       int*          bzerror, 
---
>       int           
81,82c81,82
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror, 
>       *       b, 
81,82c81,82
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          , 
>       *       b, 
81,82c81,82
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int          bzerror 
>       *       b, 
81,82c81,82
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int           
>       *       b, 
81c81
<       int*          bzerror, 
---
>       int*          , 
81c81
<       int*          bzerror, 
---
>       int*           
81,82c81,82
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       *       b, 
81,82c81,82
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
81,82c81,82
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>       BZFILE       b, 
81,82c81,82
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
81,82c81,82
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
>              b, 
(97.1 %, 5990 bytes)
81c81
<       int*          , 
---
>       int*           
81,82c81,82
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       b, 
81,82c81,82
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       b, 
81,82c81,82
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              b, 
81,82c81,82
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE*       , 
81,82c81,82
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       *       , 
81,82c81,82
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>       BZFILE       , 
81,82c81,82
<       int*          , 
<       BZFILE*       b, 
---
>       int*           
>              , 
82c82
<       BZFILE*       b, 
---
>       *       b, 
82c82
<       BZFILE*       b, 
---
>              b, 
82c82
<       BZFILE*       b, 
---
>       *       , 
82c82
<       BZFILE*       b, 
---
>              , 
82c82
<       BZFILE*       b, 
---
>       *       b 
82c82
<       BZFILE*       b, 
---
>              b 
82c82
<       BZFILE*       b, 
---
>       *        
82c82
<       BZFILE*       b, 
---
>               
82c82
<       BZFILE*       b, 
---
>       BZFILE       b, 
82c82
<       BZFILE*       b, 
---
>       BZFILE       , 
82c82
<       BZFILE*       b, 
---
>       BZFILE       b 
82c82
<       BZFILE*       b, 
---
>       BZFILE        
82,83c82,83
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b, 
>                  abandon, 
82,83c82,83
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       , 
>                  abandon, 
82,83c82,83
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE       b 
>                  abandon, 
82,83c82,83
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE        
>                  abandon, 
82c82
<       BZFILE*       b, 
---
>       BZFILE*       , 
82c82
<       BZFILE*       b, 
---
>       BZFILE*        
82,83c82,83
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>                  abandon, 
82,83c82,83
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
82,83c82,83
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       , 
>       int           , 
(97.1 %, 5989 bytes)
82c82
<       BZFILE*       , 
---
>       BZFILE*        
82,83c82,83
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon, 
82,83c82,83
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           , 
82,83c82,83
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  , 
82,83c82,83
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int           abandon 
82,83c82,83
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                  abandon 
82,83c82,83
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>       int            
82,83c82,83
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*        
>                   
83c83
<       int           abandon, 
---
>                  abandon, 
83c83
<       int           abandon, 
---
>                  , 
83c83
<       int           abandon, 
---
>                  abandon 
83c83
<       int           abandon, 
---
>                   
83,84c83,84
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  abandon, 
>        int* nbytes_in_lo32, 
83,84c83,84
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  , 
>        int* nbytes_in_lo32, 
83,84c83,84
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                  abandon 
>        int* nbytes_in_lo32, 
83,84c83,84
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>                   
>        int* nbytes_in_lo32, 
83c83
<       int           abandon, 
---
>       int           , 
83c83
<       int           abandon, 
---
>       int            
83,84c83,84
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           , 
>        int* nbytes_in_lo32, 
83,84c83,84
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int* nbytes_in_lo32, 
83,84c83,84
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           , 
>       unsigned * nbytes_in_lo32, 
(97.1 %, 5982 bytes)
83c83
<       int           , 
---
>       int            
83,84c83,84
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int* nbytes_in_lo32, 
83,84c83,84
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned * nbytes_in_lo32, 
83,84c83,84
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        * nbytes_in_lo32, 
83,84c83,84
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned int nbytes_in_lo32, 
83,84c83,84
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>        int nbytes_in_lo32, 
83,84c83,84
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>       unsigned  nbytes_in_lo32, 
83,84c83,84
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int            
>         nbytes_in_lo32, 
84c84
<       unsigned int* nbytes_in_lo32, 
---
>        int* nbytes_in_lo32, 
84c84
<       unsigned int* nbytes_in_lo32, 
---
>        * nbytes_in_lo32, 
84c84
<       unsigned int* nbytes_in_lo32, 
---
>        int nbytes_in_lo32, 
84c84
<       unsigned int* nbytes_in_lo32, 
---
>         nbytes_in_lo32, 
84c84
<       unsigned int* nbytes_in_lo32, 
---
>        int* , 
84c84
<       unsigned int* nbytes_in_lo32, 
---
>        * , 
84c84
<       unsigned int* nbytes_in_lo32, 
---
>        int , 
84c84
<       unsigned int* nbytes_in_lo32, 
---
>         , 
84c84
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned * nbytes_in_lo32, 
84c84
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned  nbytes_in_lo32, 
84c84
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned * , 
(97.1 %, 5979 bytes)
84c84
<       unsigned * nbytes_in_lo32, 
---
>       unsigned  nbytes_in_lo32, 
84c84
<       unsigned * nbytes_in_lo32, 
---
>       unsigned  , 
84c84
<       unsigned * nbytes_in_lo32, 
---
>       unsigned  nbytes_in_lo32 
84c84
<       unsigned * nbytes_in_lo32, 
---
>       unsigned   
84,85c84,85
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  nbytes_in_lo32, 
>        int* nbytes_in_hi32, 
84,85c84,85
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  , 
>        int* nbytes_in_hi32, 
84,85c84,85
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  nbytes_in_lo32 
>        int* nbytes_in_hi32, 
84,85c84,85
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned   
>        int* nbytes_in_hi32, 
84c84
<       unsigned * nbytes_in_lo32, 
---
>       unsigned * , 
84c84
<       unsigned * nbytes_in_lo32, 
---
>       unsigned *  
84,85c84,85
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * , 
>        int* nbytes_in_hi32, 
84,85c84,85
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        int* nbytes_in_hi32, 
84,85c84,85
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * , 
>       unsigned * nbytes_in_hi32, 
(97.1 %, 5965 bytes)
84c84
<       unsigned * , 
---
>       unsigned *  
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        int* nbytes_in_hi32, 
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>       unsigned * nbytes_in_hi32, 
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        * nbytes_in_hi32, 
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>       unsigned int nbytes_in_hi32, 
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>        int nbytes_in_hi32, 
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>       unsigned  nbytes_in_hi32, 
84,85c84,85
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned *  
>         nbytes_in_hi32, 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>        int* nbytes_in_hi32, 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>        * nbytes_in_hi32, 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>        int nbytes_in_hi32, 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>         nbytes_in_hi32, 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>        int* , 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>        * , 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>        int , 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>         , 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32, 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  nbytes_in_hi32, 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * , 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  , 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32 
85c85
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned  nbytes_in_hi32 
(97.1 %, 5962 bytes)
85c85
<       unsigned * nbytes_in_hi32, 
---
>       unsigned  nbytes_in_hi32, 
85c85
<       unsigned * nbytes_in_hi32, 
---
>       unsigned  , 
85c85
<       unsigned * nbytes_in_hi32, 
---
>       unsigned  nbytes_in_hi32 
85c85
<       unsigned * nbytes_in_hi32, 
---
>       unsigned   
85,86c85,86
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  nbytes_in_hi32, 
>        int* nbytes_out_lo32, 
85,86c85,86
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  , 
>        int* nbytes_out_lo32, 
85,86c85,86
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  nbytes_in_hi32 
>        int* nbytes_out_lo32, 
85,86c85,86
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned   
>        int* nbytes_out_lo32, 
85c85
<       unsigned * nbytes_in_hi32, 
---
>       unsigned * , 
85c85
<       unsigned * nbytes_in_hi32, 
---
>       unsigned *  
85,86c85,86
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * , 
>        int* nbytes_out_lo32, 
85,86c85,86
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        int* nbytes_out_lo32, 
85,86c85,86
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * , 
>       unsigned * nbytes_out_lo32, 
(97.1 %, 5948 bytes)
85c85
<       unsigned * , 
---
>       unsigned *  
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        int* nbytes_out_lo32, 
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>       unsigned * nbytes_out_lo32, 
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        * nbytes_out_lo32, 
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>       unsigned int nbytes_out_lo32, 
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>        int nbytes_out_lo32, 
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>       unsigned  nbytes_out_lo32, 
85,86c85,86
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned *  
>         nbytes_out_lo32, 
86c86
<       unsigned int* nbytes_out_lo32, 
---
>        int* nbytes_out_lo32, 
86c86
<       unsigned int* nbytes_out_lo32, 
---
>        * nbytes_out_lo32, 
86c86
<       unsigned int* nbytes_out_lo32, 
---
>        int nbytes_out_lo32, 
86c86
<       unsigned int* nbytes_out_lo32, 
---
>         nbytes_out_lo32, 
86c86
<       unsigned int* nbytes_out_lo32, 
---
>        int* , 
86c86
<       unsigned int* nbytes_out_lo32, 
---
>        * , 
86c86
<       unsigned int* nbytes_out_lo32, 
---
>        int , 
86c86
<       unsigned int* nbytes_out_lo32, 
---
>         , 
86c86
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
86c86
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned  nbytes_out_lo32, 
86c86
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * , 
(97.1 %, 5945 bytes)
86c86
<       unsigned * nbytes_out_lo32, 
---
>       unsigned  nbytes_out_lo32, 
86c86
<       unsigned * nbytes_out_lo32, 
---
>       unsigned  , 
86c86
<       unsigned * nbytes_out_lo32, 
---
>       unsigned  nbytes_out_lo32 
86c86
<       unsigned * nbytes_out_lo32, 
---
>       unsigned   
86,87c86,87
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned  nbytes_out_lo32, 
>        int* nbytes_out_hi32
86,87c86,87
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned  , 
>        int* nbytes_out_hi32
86,87c86,87
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned  nbytes_out_lo32 
>        int* nbytes_out_hi32
86,87c86,87
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned   
>        int* nbytes_out_hi32
86c86
<       unsigned * nbytes_out_lo32, 
---
>       unsigned * , 
86c86
<       unsigned * nbytes_out_lo32, 
---
>       unsigned *  
86,87c86,87
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * , 
>        int* nbytes_out_hi32
86,87c86,87
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        int* nbytes_out_hi32
86,87c86,87
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * , 
>       unsigned * nbytes_out_hi32
(97.1 %, 5930 bytes)
86c86
<       unsigned * , 
---
>       unsigned *  
86,87c86,87
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        int* nbytes_out_hi32
86,87c86,87
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>       unsigned * nbytes_out_hi32
86,87c86,87
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        * nbytes_out_hi32
86,87c86,87
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>       unsigned int nbytes_out_hi32
86,87c86,87
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>        int nbytes_out_hi32
86,87c86,87
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>       unsigned  nbytes_out_hi32
86,87c86,87
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned *  
>         nbytes_out_hi32
87c87
<       unsigned int* nbytes_out_hi32
---
>        int* nbytes_out_hi32
87c87
<       unsigned int* nbytes_out_hi32
---
>        * nbytes_out_hi32
87c87
<       unsigned int* nbytes_out_hi32
---
>        int nbytes_out_hi32
87c87
<       unsigned int* nbytes_out_hi32
---
>         nbytes_out_hi32
87c87
<       unsigned int* nbytes_out_hi32
---
>        int* 
87c87
<       unsigned int* nbytes_out_hi32
---
>        * 
87c87
<       unsigned int* nbytes_out_hi32
---
>        int 
87c87
<       unsigned int* nbytes_out_hi32
---
>         
87c87
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
87c87
<       unsigned int* nbytes_out_hi32
---
>       unsigned  nbytes_out_hi32
87c87
<       unsigned int* nbytes_out_hi32
---
>       unsigned * 
(97.1 %, 5927 bytes)
87c87
<       unsigned * nbytes_out_hi32
---
>       unsigned  nbytes_out_hi32
87c87
<       unsigned * nbytes_out_hi32
---
>       unsigned  
87,88c87,88
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  nbytes_out_hi32
>    ;
87,88c87,88
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  
>    ;
87,88c87,88
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  nbytes_out_hi32
>    )
87,88c87,88
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  
>    )
87,88c87,88
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  nbytes_out_hi32
>    
87,88c87,88
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned  
>    
87c87
<       unsigned * nbytes_out_hi32
---
>       unsigned * 
87,88c87,88
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * 
>    ;
87,88c87,88
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * 
>    )
87,88c87,88
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * 
>    
87c87
<       unsigned * nbytes_out_hi32
---
>       unsigned * 
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
(97.1 %, 5912 bytes)
88c88
<    );
---
>    ;
88c88
<    );
---
>    
88c88
<    );
---
>    ;
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
88c88
<    );
---
>    
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
88c88
<    );
---
>    ;
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffCompress) ( 
88c88
<    );
---
>    
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffCompress) ( 
88c88
<    );
---
>    ;
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffCompress) ( 
88c88
<    );
---
>    
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffCompress) ( 
88c88
<    );
---
>    )
88c88
<    );
---
>    )
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
88c88
<    );
---
>    )
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffCompress) ( 
88c88
<    );
---
>    )
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffCompress) ( 
88c88
<    );
---
>    )
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN int (BZ2_bzBuffToBuffCompress) ( 
88c88
<    );
---
>    )
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>  int (BZ2_bzBuffToBuffCompress) ( 
88c88
<    );
---
>    )
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN  (BZ2_bzBuffToBuffCompress) ( 
88c88
<    );
---
>    )
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   (BZ2_bzBuffToBuffCompress) ( 
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
93c93
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffCompress) ( 
(97.1 %, 5903 bytes)
93c93
<  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffCompress) ( 
93c93
<  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   (BZ2_bzBuffToBuffCompress) ( 
93c93
<  int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ_APIBZ2_bzBuffToBuffCompress) ( 
(97.1 %, 5900 bytes)
93c93
<   BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   (BZ2_bzBuffToBuffCompress) ( 
93c93
<   BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ2_bzBuffToBuffCompress) ( 
93c93
<   BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   () ( 
93c93
<   BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   ) ( 
93c93
<   BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   (BZ2_bzBuffToBuffCompress ( 
93c93
<   BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>   BZ2_bzBuffToBuffCompress ( 
(97.1 %, 5894 bytes)
93c93
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   BZ2_bzBuffToBuffCompress) ( 
93c93
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   ) ( 
93c93
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   BZ2_bzBuffToBuffCompress ( 
93c93
<   (BZ2_bzBuffToBuffCompress) ( 
---
>    ( 
93c93
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   BZ2_bzBuffToBuffCompress)  
93c93
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   )  
93c93
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   BZ2_bzBuffToBuffCompress  
93c93
<   (BZ2_bzBuffToBuffCompress) ( 
---
>     
93c93
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   () ( 
93c93
<   (BZ2_bzBuffToBuffCompress) ( 
---
>   ( ( 
(97.1 %, 5892 bytes)
93,94c93,94
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>       *         dest, 
93,94c93,94
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>       *         dest, 
93,94c93,94
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>       char         dest, 
93,94c93,94
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>       char         dest, 
93,94c93,94
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>    ( 
>                dest, 
93,94c93,94
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>     
>                dest, 
93c93
<   BZ2_bzBuffToBuffCompress ( 
---
>   BZ2_bzBuffToBuffCompress  
93,94c93,94
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>       *         dest, 
93,94c93,94
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>       char         dest, 
93,94c93,94
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>                dest, 
93,94c93,94
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>       char*         , 
93,94c93,94
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>       *         , 
93,94c93,94
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>       char         , 
93,94c93,94
<   BZ2_bzBuffToBuffCompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffCompress  
>                , 
94c94
<       char*         dest, 
---
>       *         dest, 
94c94
<       char*         dest, 
---
>                dest, 
94c94
<       char*         dest, 
---
>       *         , 
94c94
<       char*         dest, 
---
>                , 
94c94
<       char*         dest, 
---
>       *         dest 
94c94
<       char*         dest, 
---
>                dest 
94c94
<       char*         dest, 
---
>       *          
94c94
<       char*         dest, 
---
>                 
94c94
<       char*         dest, 
---
>       char         dest, 
94c94
<       char*         dest, 
---
>       char         , 
94c94
<       char*         dest, 
---
>       char         dest 
94c94
<       char*         dest, 
---
>       char          
94,95c94,95
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest, 
>        int* destLen,
94,95c94,95
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         , 
>        int* destLen,
94,95c94,95
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest 
>        int* destLen,
94,95c94,95
<       char*         dest, 
<       unsigned int* destLen,
---
>       char          
>        int* destLen,
94c94
<       char*         dest, 
---
>       char*         , 
94c94
<       char*         dest, 
---
>       char*          
94,95c94,95
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>        int* destLen,
94,95c94,95
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
94,95c94,95
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>       unsigned * destLen,
(97.1 %, 5888 bytes)
94c94
<       char*         , 
---
>       char*          
94,95c94,95
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
94,95c94,95
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned * destLen,
94,95c94,95
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        * destLen,
94,95c94,95
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned int destLen,
94,95c94,95
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int destLen,
94,95c94,95
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned  destLen,
94,95c94,95
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>         destLen,
95c95
<       unsigned int* destLen,
---
>        int* destLen,
95c95
<       unsigned int* destLen,
---
>        * destLen,
95c95
<       unsigned int* destLen,
---
>        int destLen,
95c95
<       unsigned int* destLen,
---
>         destLen,
95c95
<       unsigned int* destLen,
---
>        int* ,
95c95
<       unsigned int* destLen,
---
>        * ,
95c95
<       unsigned int* destLen,
---
>        int ,
95c95
<       unsigned int* destLen,
---
>         ,
95c95
<       unsigned int* destLen,
---
>       unsigned * destLen,
95c95
<       unsigned int* destLen,
---
>       unsigned  destLen,
95c95
<       unsigned int* destLen,
---
>       unsigned * ,
(97.1 %, 5885 bytes)
95c95
<       unsigned * destLen,
---
>       unsigned  destLen,
95c95
<       unsigned * destLen,
---
>       unsigned  ,
95c95
<       unsigned * destLen,
---
>       unsigned  destLen
95c95
<       unsigned * destLen,
---
>       unsigned  
95,96c95,96
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen,
>       *         source, 
95,96c95,96
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  ,
>       *         source, 
95,96c95,96
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen
>       *         source, 
95,96c95,96
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  
>       *         source, 
95c95
<       unsigned * destLen,
---
>       unsigned * ,
95c95
<       unsigned * destLen,
---
>       unsigned * 
95,96c95,96
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       *         source, 
95,96c95,96
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
95,96c95,96
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       char         source, 
95,96c95,96
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
95,96c95,96
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>                source, 
95,96c95,96
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>                source, 
95c95
<       unsigned * destLen,
---
>       unsigned * destLen
(97.1 %, 5878 bytes)
95c95
<       unsigned * ,
---
>       unsigned * 
95,96c95,96
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
95,96c95,96
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
95,96c95,96
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                source, 
95,96c95,96
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char*         , 
95,96c95,96
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         , 
95,96c95,96
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         , 
95,96c95,96
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                , 
96c96
<       char*         source, 
---
>       *         source, 
96c96
<       char*         source, 
---
>                source, 
96c96
<       char*         source, 
---
>       *         , 
96c96
<       char*         source, 
---
>                , 
96c96
<       char*         source, 
---
>       *         source 
96c96
<       char*         source, 
---
>                source 
96c96
<       char*         source, 
---
>       *          
96c96
<       char*         source, 
---
>                 
96c96
<       char*         source, 
---
>       char         source, 
96c96
<       char*         source, 
---
>       char         , 
96c96
<       char*         source, 
---
>       char         source 
96c96
<       char*         source, 
---
>       char          
96,97c96,97
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source, 
>        int  sourceLen,
96,97c96,97
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         , 
>        int  sourceLen,
96,97c96,97
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source 
>        int  sourceLen,
96,97c96,97
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char          
>        int  sourceLen,
96c96
<       char*         source, 
---
>       char*         , 
96c96
<       char*         source, 
---
>       char*          
96,97c96,97
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>        int  sourceLen,
96,97c96,97
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
96,97c96,97
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>       unsigned   sourceLen,
(97.1 %, 5872 bytes)
96c96
<       char*         , 
---
>       char*          
96,97c96,97
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
96,97c96,97
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   sourceLen,
96,97c96,97
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          sourceLen,
96,97c96,97
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned int  ,
96,97c96,97
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  ,
96,97c96,97
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   ,
96,97c96,97
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          ,
97c97
<       unsigned int  sourceLen,
---
>        int  sourceLen,
97c97
<       unsigned int  sourceLen,
---
>          sourceLen,
97c97
<       unsigned int  sourceLen,
---
>        int  ,
97c97
<       unsigned int  sourceLen,
---
>          ,
97c97
<       unsigned int  sourceLen,
---
>        int  sourceLen
97c97
<       unsigned int  sourceLen,
---
>          sourceLen
97c97
<       unsigned int  sourceLen,
---
>        int  
97c97
<       unsigned int  sourceLen,
---
>          
97c97
<       unsigned int  sourceLen,
---
>       unsigned   sourceLen,
97c97
<       unsigned int  sourceLen,
---
>       unsigned   ,
(97.1 %, 5869 bytes)
97c97
<       unsigned   sourceLen,
---
>       unsigned   ,
97c97
<       unsigned   sourceLen,
---
>       unsigned   
97,98c97,98
<       unsigned   sourceLen,
<       int           blockSize100k, 
---
>       unsigned   ,
>                  blockSize100k, 
97,98c97,98
<       unsigned   sourceLen,
<       int           blockSize100k, 
---
>       unsigned   
>                  blockSize100k, 
97,98c97,98
<       unsigned   sourceLen,
<       int           blockSize100k, 
---
>       unsigned   ,
>       int           , 
(97.1 %, 5860 bytes)
97c97
<       unsigned   ,
---
>       unsigned   
97,98c97,98
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                  blockSize100k, 
97,98c97,98
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>       int           , 
97,98c97,98
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                  , 
97,98c97,98
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>       int           blockSize100k 
97,98c97,98
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                  blockSize100k 
97,98c97,98
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>       int            
97,98c97,98
<       unsigned   ,
<       int           blockSize100k, 
---
>       unsigned   
>                   
98c98
<       int           blockSize100k, 
---
>                  blockSize100k, 
98c98
<       int           blockSize100k, 
---
>                  , 
98c98
<       int           blockSize100k, 
---
>                  blockSize100k 
98c98
<       int           blockSize100k, 
---
>                   
98,99c98,99
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  blockSize100k, 
>                  verbosity, 
98,99c98,99
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  , 
>                  verbosity, 
98,99c98,99
<       int           blockSize100k, 
<       int           verbosity, 
---
>                  blockSize100k 
>                  verbosity, 
98,99c98,99
<       int           blockSize100k, 
<       int           verbosity, 
---
>                   
>                  verbosity, 
98c98
<       int           blockSize100k, 
---
>       int           , 
98c98
<       int           blockSize100k, 
---
>       int            
98,99c98,99
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           , 
>                  verbosity, 
98,99c98,99
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int            
>                  verbosity, 
98,99c98,99
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           , 
>       int           , 
(97.1 %, 5847 bytes)
98c98
<       int           , 
---
>       int            
98,99c98,99
<       int           , 
<       int           verbosity, 
---
>       int            
>                  verbosity, 
97a98
>       int            
99d99
<       int           verbosity, 
98,99c98,99
<       int           , 
<       int           verbosity, 
---
>       int            
>                  , 
98,99c98,99
<       int           , 
<       int           verbosity, 
---
>       int            
>       int           verbosity 
98,99c98,99
<       int           , 
<       int           verbosity, 
---
>       int            
>                  verbosity 
98,99c98,99
<       int           , 
<       int           verbosity, 
---
>       int            
>       int            
98,99c98,99
<       int           , 
<       int           verbosity, 
---
>       int            
>                   
99c99
<       int           verbosity, 
---
>                  verbosity, 
99c99
<       int           verbosity, 
---
>                  , 
99c99
<       int           verbosity, 
---
>                  verbosity 
99c99
<       int           verbosity, 
---
>                   
99,100c99,100
<       int           verbosity, 
<       int           workFactor 
---
>                  verbosity, 
>                  workFactor 
99,100c99,100
<       int           verbosity, 
<       int           workFactor 
---
>                  , 
>                  workFactor 
99,100c99,100
<       int           verbosity, 
<       int           workFactor 
---
>                  verbosity 
>                  workFactor 
99,100c99,100
<       int           verbosity, 
<       int           workFactor 
---
>                   
>                  workFactor 
99c99
<       int           verbosity, 
---
>       int           , 
99c99
<       int           verbosity, 
---
>       int            
99,100c99,100
<       int           verbosity, 
<       int           workFactor 
---
>       int           , 
>                  workFactor 
99,100c99,100
<       int           verbosity, 
<       int           workFactor 
---
>       int            
>                  workFactor 
99,100c99,100
<       int           verbosity, 
<       int           workFactor 
---
>       int           , 
>       int            
(97.2 %, 5838 bytes)
99c99
<       int           , 
---
>       int            
99,100c99,100
<       int           , 
<       int           workFactor 
---
>       int            
>                  workFactor 
99,100c99,100
<       int           , 
<       int           workFactor 
---
>       int            
>       int            
99,100c99,100
<       int           , 
<       int           workFactor 
---
>       int            
>                   
99c99
<       int           , 
---
>       int            
101c101
<    );
---
>    ;
99,101c99,101
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>                  workFactor 
>    ;
99,101c99,101
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>       int            
>    ;
99,101c99,101
<       int           , 
<       int           workFactor 
<    );
---
>       int            
>                   
>    ;
100c100
<       int           workFactor 
---
>                  workFactor 
100c100
<       int           workFactor 
---
>                   
100,101c100,101
<       int           workFactor 
<    );
---
>                  workFactor 
>    ;
100,101c100,101
<       int           workFactor 
<    );
---
>                   
>    ;
100,101c100,101
<       int           workFactor 
<    );
---
>                  workFactor 
>    )
100,101c100,101
<       int           workFactor 
<    );
---
>                   
>    )
100,101c100,101
<       int           workFactor 
<    );
---
>                  workFactor 
>    
100,101c100,101
<       int           workFactor 
<    );
---
>                   
>    
100c100
<       int           workFactor 
---
>       int            
100,101c100,101
<       int           workFactor 
<    );
---
>       int            
>    ;
100,101c100,101
<       int           workFactor 
<    );
---
>       int            
>    )
100,101c100,101
<       int           workFactor 
<    );
---
>       int            
>    
100c100
<       int           workFactor 
---
>       int            
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
(97.2 %, 5828 bytes)
101c101
<    );
---
>    ;
101c101
<    );
---
>    
101c101
<    );
---
>    ;
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
101c101
<    );
---
>    
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
101c101
<    );
---
>    ;
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffDecompress) ( 
101c101
<    );
---
>    
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffDecompress) ( 
101c101
<    );
---
>    ;
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
101c101
<    );
---
>    
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
101c101
<    );
---
>    )
101c101
<    );
---
>    )
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
101c101
<    );
---
>    )
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN  BZ_API(BZ2_bzBuffToBuffDecompress) ( 
101c101
<    );
---
>    )
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
101c101
<    );
---
>    )
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int (BZ2_bzBuffToBuffDecompress) ( 
101c101
<    );
---
>    )
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>  int (BZ2_bzBuffToBuffDecompress) ( 
101c101
<    );
---
>    )
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN  (BZ2_bzBuffToBuffDecompress) ( 
101c101
<    );
---
>    )
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   (BZ2_bzBuffToBuffDecompress) ( 
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
(97.2 %, 5819 bytes)
103c103
<  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
103c103
<  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   (BZ2_bzBuffToBuffDecompress) ( 
(97.2 %, 5816 bytes)
103c103
<   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   (BZ2_bzBuffToBuffDecompress) ( 
103c103
<   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ2_bzBuffToBuffDecompress) ( 
103c103
<   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   () ( 
103c103
<   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   ) ( 
103c103
<   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   (BZ2_bzBuffToBuffDecompress ( 
103c103
<   BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ2_bzBuffToBuffDecompress ( 
(97.2 %, 5810 bytes)
103c103
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ2_bzBuffToBuffDecompress) ( 
103c103
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   ) ( 
103c103
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ2_bzBuffToBuffDecompress ( 
103c103
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>    ( 
103c103
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ2_bzBuffToBuffDecompress)  
103c103
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   )  
103c103
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   BZ2_bzBuffToBuffDecompress  
103c103
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>     
103c103
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   () ( 
103c103
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   ( ( 
103c103
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   ()  
103c103
<   (BZ2_bzBuffToBuffDecompress) ( 
---
>   (  
(97.2 %, 5808 bytes)
103,104c103,104
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>       *         dest, 
103,104c103,104
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>       *         dest, 
103,104c103,104
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>       char         dest, 
103,104c103,104
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>       char         dest, 
103,104c103,104
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>    ( 
>                dest, 
103,104c103,104
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>     
>                dest, 
103c103
<   BZ2_bzBuffToBuffDecompress ( 
---
>   BZ2_bzBuffToBuffDecompress  
103,104c103,104
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>       *         dest, 
103,104c103,104
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>       char         dest, 
103,104c103,104
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>                dest, 
103,104c103,104
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>       char*         , 
103,104c103,104
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>       *         , 
103,104c103,104
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>       char         , 
103,104c103,104
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         dest, 
---
>   BZ2_bzBuffToBuffDecompress  
>                , 
104c104
<       char*         dest, 
---
>       *         dest, 
104c104
<       char*         dest, 
---
>                dest, 
104c104
<       char*         dest, 
---
>       *         , 
104c104
<       char*         dest, 
---
>                , 
104c104
<       char*         dest, 
---
>       *         dest 
104c104
<       char*         dest, 
---
>                dest 
104c104
<       char*         dest, 
---
>       *          
104c104
<       char*         dest, 
---
>                 
104c104
<       char*         dest, 
---
>       char         dest, 
104c104
<       char*         dest, 
---
>       char         , 
104c104
<       char*         dest, 
---
>       char         dest 
104c104
<       char*         dest, 
---
>       char          
104,105c104,105
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest, 
>        int* destLen,
104,105c104,105
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         , 
>        int* destLen,
104,105c104,105
<       char*         dest, 
<       unsigned int* destLen,
---
>       char         dest 
>        int* destLen,
104,105c104,105
<       char*         dest, 
<       unsigned int* destLen,
---
>       char          
>        int* destLen,
104c104
<       char*         dest, 
---
>       char*         , 
104c104
<       char*         dest, 
---
>       char*          
104,105c104,105
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>        int* destLen,
104,105c104,105
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
104,105c104,105
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         , 
>       unsigned * destLen,
(97.2 %, 5804 bytes)
104c104
<       char*         , 
---
>       char*          
104,105c104,105
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int* destLen,
104,105c104,105
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned * destLen,
104,105c104,105
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        * destLen,
104,105c104,105
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned int destLen,
104,105c104,105
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>        int destLen,
104,105c104,105
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>       unsigned  destLen,
104,105c104,105
<       char*         , 
<       unsigned int* destLen,
---
>       char*          
>         destLen,
105c105
<       unsigned int* destLen,
---
>        int* destLen,
105c105
<       unsigned int* destLen,
---
>        * destLen,
105c105
<       unsigned int* destLen,
---
>        int destLen,
105c105
<       unsigned int* destLen,
---
>         destLen,
105c105
<       unsigned int* destLen,
---
>        int* ,
105c105
<       unsigned int* destLen,
---
>        * ,
105c105
<       unsigned int* destLen,
---
>        int ,
105c105
<       unsigned int* destLen,
---
>         ,
105c105
<       unsigned int* destLen,
---
>       unsigned * destLen,
105c105
<       unsigned int* destLen,
---
>       unsigned  destLen,
105c105
<       unsigned int* destLen,
---
>       unsigned * ,
(97.2 %, 5801 bytes)
105c105
<       unsigned * destLen,
---
>       unsigned  destLen,
105c105
<       unsigned * destLen,
---
>       unsigned  ,
105c105
<       unsigned * destLen,
---
>       unsigned  destLen
105c105
<       unsigned * destLen,
---
>       unsigned  
105,106c105,106
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen,
>       *         source, 
105,106c105,106
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  ,
>       *         source, 
105,106c105,106
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  destLen
>       *         source, 
105,106c105,106
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned  
>       *         source, 
105c105
<       unsigned * destLen,
---
>       unsigned * ,
105c105
<       unsigned * destLen,
---
>       unsigned * 
105,106c105,106
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       *         source, 
105,106c105,106
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
105,106c105,106
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>       char         source, 
105,106c105,106
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
105,106c105,106
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * ,
>                source, 
105,106c105,106
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * 
>                source, 
105c105
<       unsigned * destLen,
---
>       unsigned * destLen
(97.2 %, 5794 bytes)
105c105
<       unsigned * ,
---
>       unsigned * 
105,106c105,106
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         source, 
105,106c105,106
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         source, 
105,106c105,106
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                source, 
105,106c105,106
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char*         , 
105,106c105,106
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       *         , 
105,106c105,106
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>       char         , 
105,106c105,106
<       unsigned * ,
<       char*         source, 
---
>       unsigned * 
>                , 
106c106
<       char*         source, 
---
>       *         source, 
106c106
<       char*         source, 
---
>                source, 
106c106
<       char*         source, 
---
>       *         , 
106c106
<       char*         source, 
---
>                , 
106c106
<       char*         source, 
---
>       *         source 
106c106
<       char*         source, 
---
>                source 
106c106
<       char*         source, 
---
>       *          
106c106
<       char*         source, 
---
>                 
106c106
<       char*         source, 
---
>       char         source, 
106c106
<       char*         source, 
---
>       char         , 
106c106
<       char*         source, 
---
>       char         source 
106c106
<       char*         source, 
---
>       char          
106,107c106,107
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source, 
>        int  sourceLen,
106,107c106,107
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         , 
>        int  sourceLen,
106,107c106,107
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char         source 
>        int  sourceLen,
106,107c106,107
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char          
>        int  sourceLen,
106c106
<       char*         source, 
---
>       char*         , 
106c106
<       char*         source, 
---
>       char*          
106,107c106,107
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>        int  sourceLen,
106,107c106,107
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
106,107c106,107
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         , 
>       unsigned   sourceLen,
(97.2 %, 5788 bytes)
106c106
<       char*         , 
---
>       char*          
106,107c106,107
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  sourceLen,
106,107c106,107
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   sourceLen,
106,107c106,107
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          sourceLen,
106,107c106,107
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned int  ,
106,107c106,107
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>        int  ,
106,107c106,107
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>       unsigned   ,
106,107c106,107
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*          
>          ,
107c107
<       unsigned int  sourceLen,
---
>        int  sourceLen,
107c107
<       unsigned int  sourceLen,
---
>          sourceLen,
107c107
<       unsigned int  sourceLen,
---
>        int  ,
107c107
<       unsigned int  sourceLen,
---
>          ,
107c107
<       unsigned int  sourceLen,
---
>        int  sourceLen
107c107
<       unsigned int  sourceLen,
---
>          sourceLen
107c107
<       unsigned int  sourceLen,
---
>        int  
107c107
<       unsigned int  sourceLen,
---
>          
107c107
<       unsigned int  sourceLen,
---
>       unsigned   sourceLen,
107c107
<       unsigned int  sourceLen,
---
>       unsigned   ,
107c107
<       unsigned int  sourceLen,
---
>       unsigned   sourceLen
(97.2 %, 5785 bytes)
107c107
<       unsigned   sourceLen,
---
>       unsigned   ,
107c107
<       unsigned   sourceLen,
---
>       unsigned   
107,108c107,108
<       unsigned   sourceLen,
<       int           small, 
---
>       unsigned   ,
>                  small, 
107,108c107,108
<       unsigned   sourceLen,
<       int           small, 
---
>       unsigned   
>                  small, 
107,108c107,108
<       unsigned   sourceLen,
<       int           small, 
---
>       unsigned   ,
>       int           , 
(97.2 %, 5776 bytes)
107c107
<       unsigned   ,
---
>       unsigned   
107,108c107,108
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                  small, 
107,108c107,108
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>       int           , 
107,108c107,108
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                  , 
107,108c107,108
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>       int           small 
107,108c107,108
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                  small 
107,108c107,108
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>       int            
107,108c107,108
<       unsigned   ,
<       int           small, 
---
>       unsigned   
>                   
108c108
<       int           small, 
---
>                  small, 
108c108
<       int           small, 
---
>                  , 
108c108
<       int           small, 
---
>                  small 
108c108
<       int           small, 
---
>                   
108,109c108,109
<       int           small, 
<       int           );
---
>                  small, 
>                  );
108,109c108,109
<       int           small, 
<       int           );
---
>                  , 
>                  );
108,109c108,109
<       int           small, 
<       int           );
---
>                  small 
>                  );
108,109c108,109
<       int           small, 
<       int           );
---
>                   
>                  );
108c108
<       int           small, 
---
>       int           , 
108c108
<       int           small, 
---
>       int            
108,109c108,109
<       int           small, 
<       int           );
---
>       int           , 
>                  );
108,109c108,109
<       int           small, 
<       int           );
---
>       int            
>                  );
108,109c108,109
<       int           small, 
<       int           );
---
>       int           , 
>       int           ;
108,109c108,109
<       int           small, 
<       int           );
---
>       int            
>       int           ;
108,109c108,109
<       int           small, 
<       int           );
---
>       int           , 
>                  ;
108,109c108,109
<       int           small, 
<       int           );
---
>       int            
>                  ;
(97.2 %, 5771 bytes)
108c108
<       int           , 
---
>       int            
108,109c108,109
<       int           , 
<       int           );
---
>       int            
>                  );
108,109c108,109
<       int           , 
<       int           );
---
>       int            
>       int           ;
108,109c108,109
<       int           , 
<       int           );
---
>       int            
>                  ;
108,109c108,109
<       int           , 
<       int           );
---
>       int            
>       int           )
108,109c108,109
<       int           , 
<       int           );
---
>       int            
>                  )
108,109c108,109
<       int           , 
<       int           );
---
>       int            
>       int           
108,109c108,109
<       int           , 
<       int           );
---
>       int            
>                  
109c109
<       int           );
---
>                  );
109c109
<       int           );
---
>                  ;
109c109
<       int           );
---
>                  )
109c109
<       int           );
---
>                  
109c109
<       int           );
---
>                  );
111c111
< BZ_EXTERN ;
---
>  ;
109c109
<       int           );
---
>                  ;
111c111
< BZ_EXTERN ;
---
>  ;
109c109
<       int           );
---
>                  )
111c111
< BZ_EXTERN ;
---
>  ;
109c109
<       int           );
---
>                  
111c111
< BZ_EXTERN ;
---
>  ;
109c109
<       int           );
---
>       int           ;
109c109
<       int           );
---
>       int           
109c109
<       int           );
---
>       int           ;
111c111
< BZ_EXTERN ;
---
>  ;
109c109
<       int           );
---
>       int           
111c111
< BZ_EXTERN ;
---
>  ;
109c109
<       int           );
---
>       int           ;
111c111
< BZ_EXTERN ;
---
> BZ_EXTERN 
109c109
<       int           );
---
>       int           
111c111
< BZ_EXTERN ;
---
> BZ_EXTERN 
109c109
<       int           );
---
>       int           ;
111c111
< BZ_EXTERN ;
---
>  
109c109
<       int           );
---
>       int           
111c111
< BZ_EXTERN ;
---
>  
109c109
<       int           );
---
>       int           )
109c109
<       int           );
---
>       int           )
111c111
< BZ_EXTERN ;
---
>  ;
109c109
<       int           );
---
>       int           )
111c111
< BZ_EXTERN ;
---
> BZ_EXTERN 
(97.2 %, 5770 bytes)
111c111
< BZ_EXTERN ;
---
>  ;
111c111
< BZ_EXTERN ;
---
>  
111c111
< BZ_EXTERN ;
---
>  ;
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
111c111
< BZ_EXTERN ;
---
>  
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
111c111
< BZ_EXTERN ;
---
>  ;
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
111c111
< BZ_EXTERN ;
---
>  
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
111c111
< BZ_EXTERN ;
---
>  ;
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
111c111
< BZ_EXTERN ;
---
>  
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
111c111
< BZ_EXTERN ;
---
> BZ_EXTERN 
(97.2 %, 5761 bytes)
111c111
<  ;
---
>  
111c111
<  ;
---
>  
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
111c111
<  ;
---
>  
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
111c111
<  ;
---
>  
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
111c111
<  ;
---
>  
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define   "1.0.2, 30-Dec-2001"
111c111
<  ;
---
>  
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define   "1.0.2, 30-Dec-2001"
111c111
<  ;
---
>  
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   "1.0.2, 30-Dec-2001"
111c111
<  ;
---
>  
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    "1.0.2, 30-Dec-2001"
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  "1.0.2, 30-Dec-2001"
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define   "1.0.2, 30-Dec-2001"
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    "1.0.2, 30-Dec-2001"
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>  BZ_VERSION  
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define   
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  "1.0.2, 30-Dec-2001"
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   "1.0.2, 30-Dec-2001"
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> # BZ_VERSION  
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #   
(97.2 %, 5724 bytes)
115c115
< typedef char            Char;
---
>              
115c115
< typedef char            Char;
---
> typedef             Char;
(97.2 %, 5708 bytes)
116c116
< typedef unsigned char   Bool;
---
>      ;
116c116
< typedef unsigned char   Bool;
---
> typedef  char   Bool;
116c116
< typedef unsigned char   Bool;
---
> typedef     Bool;
(97.2 %, 5685 bytes)
116,117c116,117
<      ;
< typedef unsigned char   UChar;
---
>      
>      UChar;
117c117
< typedef unsigned char   UChar;
---
>  unsigned char   UChar;
117c117
< typedef unsigned char   UChar;
---
>   char   UChar;
117c117
< typedef unsigned char   UChar;
---
>  unsigned    UChar;
117c117
< typedef unsigned char   UChar;
---
>      UChar;
117c117
< typedef unsigned char   UChar;
---
>  unsigned char   ;
117c117
< typedef unsigned char   UChar;
---
>   char   ;
117c117
< typedef unsigned char   UChar;
---
>  unsigned    ;
117c117
< typedef unsigned char   UChar;
---
>      ;
117c117
< typedef unsigned char   UChar;
---
> typedef  char   UChar;
117c117
< typedef unsigned char   UChar;
---
> typedef     UChar;
(97.2 %, 5677 bytes)
117c117
< typedef  char   UChar;
---
> typedef     UChar;
117c117
< typedef  char   UChar;
---
> typedef     ;
117c117
< typedef  char   UChar;
---
> typedef     UChar
117c117
< typedef  char   UChar;
---
> typedef     
117,118c117,118
< typedef  char   UChar;
< typedef int             Int32;
---
> typedef     UChar;
>  int             Int32;
117,118c117,118
< typedef  char   UChar;
< typedef int             Int32;
---
> typedef     ;
>  int             Int32;
117,118c117,118
< typedef  char   UChar;
< typedef int             Int32;
---
> typedef     UChar
>  int             Int32;
117,118c117,118
< typedef  char   UChar;
< typedef int             Int32;
---
> typedef     
>  int             Int32;
117c117
< typedef  char   UChar;
---
> typedef  char   ;
117c117
< typedef  char   UChar;
---
> typedef  char   
(97.2 %, 5673 bytes)
117c117
< typedef     UChar;
---
> typedef     ;
117c117
< typedef     UChar;
---
> typedef     
117,118c117,118
< typedef     UChar;
< typedef int             Int32;
---
> typedef     ;
>  int             Int32;
117,118c117,118
< typedef     UChar;
< typedef int             Int32;
---
> typedef     
>  int             Int32;
117,118c117,118
< typedef     UChar;
< typedef int             Int32;
---
> typedef     ;
> typedef              Int32;
117,118c117,118
< typedef     UChar;
< typedef int             Int32;
---
> typedef     
> typedef              Int32;
117,118c117,118
< typedef     UChar;
< typedef int             Int32;
---
> typedef     ;
>               Int32;
117,118c117,118
< typedef     UChar;
< typedef int             Int32;
---
> typedef     
>               Int32;
117c117
< typedef     UChar;
---
> typedef     UChar
117,118c117,118
< typedef     UChar;
< typedef int             Int32;
---
> typedef     UChar
>  int             Int32;
117,118c117,118
< typedef     UChar;
< typedef int             Int32;
---
> typedef     UChar
> typedef              Int32;
117,118c117,118
< typedef     UChar;
< typedef int             Int32;
---
> typedef     UChar
>               Int32;
117,118c117,118
< typedef     UChar;
< typedef int             Int32;
---
> typedef     UChar
> typedef int             ;
117,118c117,118
< typedef     UChar;
< typedef int             Int32;
---
> typedef     UChar
>  int             ;
117,118c117,118
< typedef     UChar;
< typedef int             Int32;
---
> typedef     UChar
> typedef              ;
117,118c117,118
< typedef     UChar;
< typedef int             Int32;
---
> typedef     UChar
>               ;
118c118
< typedef int             Int32;
---
>  int             Int32;
118c118
< typedef int             Int32;
---
>               Int32;
118c118
< typedef int             Int32;
---
>  int             ;
118c118
< typedef int             Int32;
---
>               ;
118c118
< typedef int             Int32;
---
>  int             Int32
118c118
< typedef int             Int32;
---
>               Int32
118c118
< typedef int             Int32;
---
>  int             
118c118
< typedef int             Int32;
---
>               
118c118
< typedef int             Int32;
---
> typedef              Int32;
118c118
< typedef int             Int32;
---
> typedef              ;
118c118
< typedef int             Int32;
---
> typedef              Int32
118c118
< typedef int             Int32;
---
> typedef              
118,119c118,119
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32;
>  unsigned int    UInt32;
118,119c118,119
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef              ;
>  unsigned int    UInt32;
118,119c118,119
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>  unsigned int    UInt32;
118,119c118,119
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef              
>  unsigned int    UInt32;
118c118
< typedef int             Int32;
---
> typedef int             ;
(97.2 %, 5670 bytes)
118c118
< typedef              Int32;
---
> typedef              ;
118c118
< typedef              Int32;
---
> typedef              
118,119c118,119
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              ;
>  unsigned int    UInt32;
118,119c118,119
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              
>  unsigned int    UInt32;
118,119c118,119
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              ;
> typedef  int    UInt32;
118,119c118,119
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              
> typedef  int    UInt32;
118,119c118,119
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              ;
>   int    UInt32;
118,119c118,119
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              
>   int    UInt32;
118c118
< typedef              Int32;
---
> typedef              Int32
118,119c118,119
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>  unsigned int    UInt32;
118,119c118,119
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
> typedef  int    UInt32;
118,119c118,119
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>   int    UInt32;
118,119c118,119
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
> typedef unsigned     UInt32;
118,119c118,119
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>  unsigned     UInt32;
118,119c118,119
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
> typedef      UInt32;
118,119c118,119
< typedef              Int32;
< typedef unsigned int    UInt32;
---
> typedef              Int32
>       UInt32;
119c119
< typedef unsigned int    UInt32;
---
>  unsigned int    UInt32;
119c119
< typedef unsigned int    UInt32;
---
>   int    UInt32;
119c119
< typedef unsigned int    UInt32;
---
>  unsigned     UInt32;
119c119
< typedef unsigned int    UInt32;
---
>       UInt32;
119c119
< typedef unsigned int    UInt32;
---
>  unsigned int    ;
119c119
< typedef unsigned int    UInt32;
---
>   int    ;
119c119
< typedef unsigned int    UInt32;
---
>  unsigned     ;
119c119
< typedef unsigned int    UInt32;
---
>       ;
119c119
< typedef unsigned int    UInt32;
---
> typedef  int    UInt32;
119c119
< typedef unsigned int    UInt32;
---
> typedef      UInt32;
119c119
< typedef unsigned int    UInt32;
---
> typedef  int    ;
(97.2 %, 5662 bytes)
119c119
< typedef  int    UInt32;
---
> typedef      UInt32;
119c119
< typedef  int    UInt32;
---
> typedef      ;
119c119
< typedef  int    UInt32;
---
> typedef      UInt32
119c119
< typedef  int    UInt32;
---
> typedef      
119,120c119,120
< typedef  int    UInt32;
< typedef UInt16;
---
> typedef      UInt32;
>  UInt16;
(97.2 %, 5659 bytes)
119c119
< typedef      UInt32;
---
> typedef      ;
119c119
< typedef      UInt32;
---
> typedef      
119,120c119,120
< typedef      UInt32;
< typedef UInt16;
---
> typedef      ;
>  UInt16;
119,120c119,120
< typedef      UInt32;
< typedef UInt16;
---
> typedef      
>  UInt16;
119,120c119,120
< typedef      UInt32;
< typedef UInt16;
---
> typedef      ;
> typedef ;
119,120c119,120
< typedef      UInt32;
< typedef UInt16;
---
> typedef      
> typedef ;
119,120c119,120
< typedef      UInt32;
< typedef UInt16;
---
> typedef      ;
>  ;
119,120c119,120
< typedef      UInt32;
< typedef UInt16;
---
> typedef      
>  ;
119c119
< typedef      UInt32;
---
> typedef      UInt32
119,120c119,120
< typedef      UInt32;
< typedef UInt16;
---
> typedef      UInt32
>  UInt16;
119,120c119,120
< typedef      UInt32;
< typedef UInt16;
---
> typedef      UInt32
> typedef ;
119,120c119,120
< typedef      UInt32;
< typedef UInt16;
---
> typedef      UInt32
>  ;
119,120c119,120
< typedef      UInt32;
< typedef UInt16;
---
> typedef      UInt32
> typedef UInt16
119,120c119,120
< typedef      UInt32;
< typedef UInt16;
---
> typedef      UInt32
>  UInt16
119,120c119,120
< typedef      UInt32;
< typedef UInt16;
---
> typedef      UInt32
> typedef 
119,120c119,120
< typedef      UInt32;
< typedef UInt16;
---
> typedef      UInt32
>  
120c120
< typedef UInt16;
---
>  UInt16;
(97.2 %, 5645 bytes)
120c120
<  ;
---
>  
122c122
< #define True  (0)
---
>  True  (0)
120c120
<  ;
---
>  
122c122
< #define True  (0)
---
> #define   (0)
120c120
<  ;
---
>  
122c122
< #define True  (0)
---
> define   (0)
120c120
<  ;
---
>  
122c122
< #define True  (0)
---
> #   (0)
120c120
<  ;
---
>  
122c122
< #define True  (0)
---
>    (0)
122c122
< #define True  (0)
---
> define True  (0)
122c122
< #define True  (0)
---
>  True  (0)
122c122
< #define True  (0)
---
> define   (0)
122c122
< #define True  (0)
---
>    (0)
122c122
< #define True  (0)
---
> define True  0)
122c122
< #define True  (0)
---
>  True  0)
122c122
< #define True  (0)
---
> define   0)
122c122
< #define True  (0)
---
>    0)
122c122
< #define True  (0)
---
> # True  (0)
122c122
< #define True  (0)
---
> #   (0)
122c122
< #define True  (0)
---
> # True  0)
122c122
< #define True  (0)
---
> #   0)
122c122
< #define True  (0)
---
> # True  ()
122c122
< #define True  (0)
---
> #   ()
122c122
< #define True  (0)
---
> # True  )
122c122
< #define True  (0)
---
> #   )
122c122
< #define True  (0)
---
> #define   (0)
122c122
< #define True  (0)
---
> #define   0)
122c122
< #define True  (0)
---
> #define   ()
122c122
< #define True  (0)
---
> #define   )
122c122
< #define True  (0)
---
> #define   (0
122c122
< #define True  (0)
---
> #define   0
122c122
< #define True  (0)
---
> #define   (
122c122
< #define True  (0)
---
> #define   
122c122
< #define True  (0)
---
> #define True  0)
122c122
< #define True  (0)
---
> #define True  )
(97.2 %, 5644 bytes)
122c122
< #define True  0)
---
> #define True  )
122c122
< #define True  0)
---
> #define True  
(97.2 %, 5643 bytes)
122c122
< #define True  )
---
> #define True  
122c122
< #define True  )
---
> #define True  
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> define AssertHdefine define BZ_S_INPUT     2
122c122
< #define True  )
---
> #define True  
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> # AssertHdefine define BZ_S_INPUT     2
122c122
< #define True  )
---
> #define True  
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
>  AssertHdefine define BZ_S_INPUT     2
122c122
< #define True  )
---
> #define True  
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> #define  define BZ_S_INPUT     2
(97.2 %, 5642 bytes)
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> define AssertHdefine define BZ_S_INPUT     2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
>  AssertHdefine define BZ_S_INPUT     2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> define  define BZ_S_INPUT     2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
>   define BZ_S_INPUT     2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> define AssertHdefine  BZ_S_INPUT     2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
>  AssertHdefine  BZ_S_INPUT     2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> define   BZ_S_INPUT     2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
>    BZ_S_INPUT     2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> # AssertHdefine define BZ_S_INPUT     2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> #  define BZ_S_INPUT     2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> # AssertHdefine  BZ_S_INPUT     2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> #   BZ_S_INPUT     2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> # AssertHdefine define      2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> #  define      2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> # AssertHdefine       2
124c124
< #define AssertHdefine define BZ_S_INPUT     2
---
> #        2
(97.3 %, 5623 bytes)
124c124
< #  define BZ_S_INPUT     2
---
> #        2
124c124
< #  define BZ_S_INPUT     2
---
> #   BZ_S_INPUT     
124c124
< #  define BZ_S_INPUT     2
---
> #        
(97.3 %, 5607 bytes)
124c124
< #        2
---
> #        
126c126
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
124c124
< #        2
---
> #        
126c126
< #define BZ_N_RADIX 2
---
> # BZ_N_RADIX 2
124c124
< #        2
---
> #        
126c126
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
124c124
< #        2
---
> #        
126c126
< #define BZ_N_RADIX 2
---
> #define  2
124c124
< #        2
---
> #        
126c126
< #define BZ_N_RADIX 2
---
> define  2
124c124
< #        2
---
> #        
126c126
< #define BZ_N_RADIX 2
---
> #  2
124c124
< #        2
---
> #        
126c126
< #define BZ_N_RADIX 2
---
>   2
126c126
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
126c126
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 2
126c126
< #define BZ_N_RADIX 2
---
> define  2
126c126
< #define BZ_N_RADIX 2
---
>   2
126c126
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 
126c126
< #define BZ_N_RADIX 2
---
>  BZ_N_RADIX 
126c126
< #define BZ_N_RADIX 2
---
> define  
(97.3 %, 5590 bytes)
126,127c126,127
< #  2
< #define BZ_N_QSORT 12
---
>   2
>  BZ_N_QSORT 12
126,127c126,127
< #  2
< #define BZ_N_QSORT 12
---
>   
>  BZ_N_QSORT 12
126c126
< #  2
---
> #  
126,127c126,127
< #  2
< #define BZ_N_QSORT 12
---
> #  
> define BZ_N_QSORT 12
126,127c126,127
< #  2
< #define BZ_N_QSORT 12
---
> #  
> # BZ_N_QSORT 12
126,127c126,127
< #  2
< #define BZ_N_QSORT 12
---
> #  
>  BZ_N_QSORT 12
126,127c126,127
< #  2
< #define BZ_N_QSORT 12
---
> #  
> #define  12
126,127c126,127
< #  2
< #define BZ_N_QSORT 12
---
> #  
> define  12
126,127c126,127
< #  2
< #define BZ_N_QSORT 12
---
> #  
> #  12
(97.3 %, 5589 bytes)
127c127
< #define BZ_N_QSORT 12
---
> define BZ_N_QSORT 12
127c127
< #define BZ_N_QSORT 12
---
>  BZ_N_QSORT 12
127c127
< #define BZ_N_QSORT 12
---
> define  12
127c127
< #define BZ_N_QSORT 12
---
>   12
127c127
< #define BZ_N_QSORT 12
---
> define BZ_N_QSORT 
127c127
< #define BZ_N_QSORT 12
---
>  BZ_N_QSORT 
127c127
< #define BZ_N_QSORT 12
---
> define  
127c127
< #define BZ_N_QSORT 12
---
>   
127c127
< #define BZ_N_QSORT 12
---
> # BZ_N_QSORT 12
127c127
< #define BZ_N_QSORT 12
---
> #  12
(97.3 %, 5570 bytes)
128c128
< #define BZ_N_SHELL 18
---
>   
128c128
< #define BZ_N_SHELL 18
---
> # BZ_N_SHELL 18
128c128
< #define BZ_N_SHELL 18
---
> #  18
(97.3 %, 5551 bytes)
129c129
< #define BZ_N_OVERSHOOT (2)
---
>   2)
129c129
< #define BZ_N_OVERSHOOT (2)
---
> # BZ_N_OVERSHOOT (2)
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #  (2)
129c129
< #define BZ_N_OVERSHOOT (2)
---
> # BZ_N_OVERSHOOT 2)
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #  2)
129c129
< #define BZ_N_OVERSHOOT (2)
---
> # BZ_N_OVERSHOOT ()
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #  ()
129c129
< #define BZ_N_OVERSHOOT (2)
---
> # BZ_N_OVERSHOOT )
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #  )
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #define  (2)
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #define  2)
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #define  ()
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #define  )
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #define  (2
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #define  2
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #define  (
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #define  
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT 2)
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT )
129c129
< #define BZ_N_OVERSHOOT (2)
---
> #define BZ_N_OVERSHOOT 2
(97.3 %, 5550 bytes)
129c129
< #define BZ_N_OVERSHOOT 2)
---
> #define BZ_N_OVERSHOOT )
129c129
< #define BZ_N_OVERSHOOT 2)
---
> #define BZ_N_OVERSHOOT 
(97.3 %, 5549 bytes)
129c129
< #define BZ_N_OVERSHOOT )
---
> #define BZ_N_OVERSHOOT 
129c129,130
< #define BZ_N_OVERSHOOT )
---
> #define BZ_N_OVERSHOOT 
> 
136d136
< typedef
129c129
< #define BZ_N_OVERSHOOT )
---
> #define BZ_N_OVERSHOOT 
137c137
<    struct {
---
>     {
129c129
< #define BZ_N_OVERSHOOT )
---
> #define BZ_N_OVERSHOOT 
136,137c136,137
< typedef
<    struct {
---
> 
>     {
129c129
< #define BZ_N_OVERSHOOT )
---
> #define BZ_N_OVERSHOOT 
137c137
<    struct {
---
>    struct 
129c129
< #define BZ_N_OVERSHOOT )
---
> #define BZ_N_OVERSHOOT 
136,137c136,137
< typedef
<    struct {
---
> 
>    struct 
(97.3 %, 5548 bytes)
136c136
< typedef
---
> 
136,137c136,137
< typedef
<    struct {
---
> 
>     {
136,137c136,137
< typedef
<    struct {
---
> 
>    struct 
136,137c136,137
< typedef
<    struct {
---
> 
>     
136c136
< typedef
---
> 
139c139
<       UInt32*  arr2;
---
>       *  arr2;
136,137c136,137
< typedef
<    struct {
---
> 
>     {
139c139
<       UInt32*  arr2;
---
>       *  arr2;
136,137c136,137
< typedef
<    struct {
---
> 
>    struct 
139c139
<       UInt32*  arr2;
---
>       *  arr2;
136,137c136,137
< typedef
<    struct {
---
> 
>     
139c139
<       UInt32*  arr2;
---
>       *  arr2;
137c137
<    struct {
---
>     {
137c137
<    struct {
---
>     
137c137
<    struct {
---
>     {
139c139
<       UInt32*  arr2;
---
>       *  arr2;
137c137
<    struct {
---
>     
139c139
<       UInt32*  arr2;
---
>       *  arr2;
137c137
<    struct {
---
>     {
139c139
<       UInt32*  arr2;
---
>       UInt32  arr2;
137c137
<    struct {
---
>     
139c139
<       UInt32*  arr2;
---
>       UInt32  arr2;
137c137
<    struct {
---
>     {
139c139
<       UInt32*  arr2;
---
>         arr2;
137c137
<    struct {
---
>     
139c139
<       UInt32*  arr2;
---
>         arr2;
137c137
<    struct {
---
>    struct 
137c137
<    struct {
---
>    struct 
139c139
<       UInt32*  arr2;
---
>       *  arr2;
137c137
<    struct {
---
>    struct 
139c139
<       UInt32*  arr2;
---
>       UInt32  arr2;
137c137
<    struct {
---
>    struct 
139c139
<       UInt32*  arr2;
---
>         arr2;
137c137
<    struct {
---
>    struct 
139c139
<       UInt32*  arr2;
---
>       UInt32*  ;
137c137
<    struct {
---
>    struct 
139c139
<       UInt32*  arr2;
---
>       *  ;
137c137
<    struct {
---
>    struct 
139c139
<       UInt32*  arr2;
---
>       UInt32  ;
137c137
<    struct {
---
>    struct 
139c139
<       UInt32*  arr2;
---
>         ;
139c139
<       UInt32*  arr2;
---
>       *  arr2;
139c139
<       UInt32*  arr2;
---
>         arr2;
139c139
<       UInt32*  arr2;
---
>       *  ;
139c139
<       UInt32*  arr2;
---
>         ;
139c139
<       UInt32*  arr2;
---
>       *  arr2
139c139
<       UInt32*  arr2;
---
>         arr2
139c139
<       UInt32*  arr2;
---
>       *  
139c139
<       UInt32*  arr2;
---
>         
(97.3 %, 5537 bytes)
139,140c139,140
<         ;
<       UInt32;
---
>         
>       
139c139
<         ;
---
>         
141c141
<       UChar;
---
>       ;
139,141c139,141
<         ;
<       UInt32;
<       UChar;
---
>         
>       ;
>       ;
(97.3 %, 5529 bytes)
141c141
<       UChar;
---
>       
144c144
<       Int32    nInUse;
---
>           nInUse;
141c141
<       UChar;
---
>       ;
144c144
<       Int32    nInUse;
---
>       Int32    ;
141c141
<       UChar;
---
>       
144c144
<       Int32    nInUse;
---
>       Int32    ;
(97.3 %, 5518 bytes)
141c141
<       ;
---
>       
145c145
<       ;
---
>       
141c141
<       ;
---
>       
144,145c144,145
<       Int32    ;
<       ;
---
>           ;
>       
(97.3 %, 5516 bytes)
144c144
<       Int32    ;
---
>           ;
146c146
<       Int32    ;
---
>       Int32    
144c144
<       Int32    ;
---
>           
146c146
<       Int32    ;
---
>       Int32    
144c144
<       Int32    ;
---
>           ;
146c146
<       Int32    ;
---
>           
144c144
<       Int32    ;
---
>           
146c146
<       Int32    ;
---
>           
(97.3 %, 5505 bytes)
144c144
<           ;
---
>           
149c149
<    EState;
---
>    
144c144
<           ;
---
>           
148,149c148,149
<    }
<    EState;
---
>    
>    
148c148
<    }
---
>    
148,149c148,149
<    }
<    EState;
---
>    
>    ;
148,149c148,149
<    }
<    EState;
---
>    
>    EState
148,149c148,149
<    }
<    EState;
---
>    
>    
148c148
<    }
---
>    
157c157
< ;
---
> 
148,149c148,150
<    }
<    EState;
---
>    
>    ;
> 
157d157
< ;
148,149c148,150
<    }
<    EState;
---
>    
>    EState
> 
157d157
< ;
148,149c148,150
<    }
<    EState;
---
>    
>    
> 
157d157
< ;
149c149
<    EState;
---
>    ;
149c149
<    EState;
---
>    
149c149,150
<    EState;
---
>    ;
> 
157d157
< ;
149c149,150
<    EState;
---
>    
> 
157d157
< ;
149c149
<    EState;
---
>    ;
159c159
< ;
---
> 
149c149
<    EState;
---
>    
159c159
< ;
---
> 
149c149,151
<    EState;
---
>    ;
> 
> 
157d158
< ;
159d159
< ;
149c149,151
<    EState;
---
>    
> 
> 
157d158
< ;
159d159
< ;
149c149
<    EState;
---
>    EState
149c149,150
<    EState;
---
>    EState
> 
157d157
< ;
(97.3 %, 5504 bytes)
157c157
< ;
---
> 
157d156
< ;
159c158,159
< ;
---
> 
> 
157c157
< ;
---
> 
169c169
< typedef
---
> 
157d156
< ;
159d157
< ;
169c167,169
< typedef
---
> 
> 
> 
157c157
< ;
---
> 
170c170
<    struct {
---
>     {
157d156
< ;
159c158,159
< ;
---
> 
> 
170c170
<    struct {
---
>     {
157c157
< ;
---
> 
169,170c169,170
< typedef
<    struct {
---
> 
>     {
157d156
< ;
159d157
< ;
169,170c167,170
< typedef
<    struct {
---
> 
> 
> 
>     {
159c159
< ;
---
> 
(97.3 %, 5503 bytes)
159c159
< ;
---
> 
159d158
< ;
169c168,169
< typedef
---
> 
> 
159c159
< ;
---
> 
170c170
<    struct {
---
>     {
159d158
< ;
169,170c168,170
< typedef
<    struct {
---
> 
> 
>     {
159c159
< ;
---
> 
170c170
<    struct {
---
>    struct 
159d158
< ;
169,170c168,170
< typedef
<    struct {
---
> 
> 
>    struct 
159c159
< ;
---
> 
170c170
<    struct {
---
>     
159d158
< ;
169,170c168,170
< typedef
<    struct {
---
> 
> 
>     
169c169
< typedef
---
> 
169,170c169,170
< typedef
<    struct {
---
> 
>     {
169,170c169,170
< typedef
<    struct {
---
> 
>    struct 
169,170c169,170
< typedef
<    struct {
---
> 
>     
169c169
< typedef
---
> 
172c172
<       ;
---
>       
169,170c169,171
< typedef
<    struct {
---
> 
>     {
>       
172d172
<       ;
169,170c169,171
< typedef
<    struct {
---
> 
>    struct 
>       
172d172
<       ;
169,170c169,171
< typedef
<    struct {
---
> 
>     
>       
172d172
<       ;
170c170
<    struct {
---
>     {
170c170
<    struct {
---
>     
170c170,171
<    struct {
---
>     {
>       
172d172
<       ;
170c170,171
<    struct {
---
>     
>       
172d172
<       ;
170c170
<    struct {
---
>     {
175c175
<       ;
---
>       
170c170
<    struct {
---
>     
175c175
<       ;
---
>       
170c170,171
<    struct {
---
>     {
>       
172d172
<       ;
175c175
<       ;
---
>       
170c170,171
<    struct {
---
>     
>       
172d172
<       ;
175c175
<       ;
---
>       
170c170
<    struct {
---
>    struct 
170c170,171
<    struct {
---
>    struct 
>       
172d172
<       ;
170c170
<    struct {
---
>    struct 
175c175
<       ;
---
>       
170c170,171
<    struct {
---
>    struct 
>       
172d172
<       ;
175c175
<       ;
---
>       
170c170
<    struct {
---
>    struct 
176c176
<       UChar    *ll4}
---
>           *ll4}
170c170,171
<    struct {
---
>    struct 
>       
172d172
<       ;
176c176
<       UChar    *ll4}
---
>           *ll4}
170c170
<    struct {
---
>    struct 
175,176c175,176
<       ;
<       UChar    *ll4}
---
>       
>           *ll4}
170c170,171
<    struct {
---
>    struct 
>       
172d172
<       ;
175,176c175,176
<       ;
<       UChar    *ll4}
---
>       
>           *ll4}
172c172
<       ;
---
>       
172c172
<       ;
---
>       
175c175
<       ;
---
>       
(97.3 %, 5502 bytes)
175c175
<       ;
---
>       
175,176c175,176
<       ;
<       UChar    *ll4}
---
>       
>           *ll4}
175,176c175,176
<       ;
<       UChar    *ll4}
---
>       
>       UChar    ll4}
(97.3 %, 5501 bytes)
176c176
<       UChar    *ll4}
---
>           *ll4}
176c176
<       UChar    *ll4}
---
>           ll4}
176c176
<       UChar    *ll4}
---
>           *}
176c176
<       UChar    *ll4}
---
>           }
176c176
<       UChar    *ll4}
---
>           *ll4
176c176
<       UChar    *ll4}
---
>           ll4
176c176
<       UChar    *ll4}
---
>           *
176c176
<       UChar    *ll4}
---
>           
176c176
<       UChar    *ll4}
---
>       UChar    ll4}
(97.3 %, 5492 bytes)
176,177c176,177
<           }
<    DState;
---
>           
>    
176c176
<           }
---
>           
183c183
< makeMaps_e ( EState* s )
---
>  ( EState* s )
176,177c176,177
<           }
<    DState;
---
>           
>    ;
183c183
< makeMaps_e ( EState* s )
---
>  ( EState* s )
176,177c176,177
<           }
<    DState;
---
>           
>    DState
183c183
< makeMaps_e ( EState* s )
---
>  ( EState* s )
176,177c176,177
<           }
<    DState;
---
>           
>    
183c183
< makeMaps_e ( EState* s )
---
>  ( EState* s )
177c177
<    DState;
---
>    ;
177c177
<    DState;
---
>    
177c177
<    DState;
---
>    ;
183c183
< makeMaps_e ( EState* s )
---
>  ( EState* s )
177c177
<    DState;
---
>    
183c183
< makeMaps_e ( EState* s )
---
>  ( EState* s )
177c177
<    DState;
---
>    ;
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e  EState* s )
177c177
<    DState;
---
>    
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e  EState* s )
177c177
<    DState;
---
>    ;
183c183
< makeMaps_e ( EState* s )
---
>   EState* s )
177c177
<    DState;
---
>    
183c183
< makeMaps_e ( EState* s )
---
>   EState* s )
177c177
<    DState;
---
>    DState
177c177
<    DState;
---
>    DState
183c183
< makeMaps_e ( EState* s )
---
>  ( EState* s )
177c177
<    DState;
---
>    DState
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e  EState* s )
177c177
<    DState;
---
>    DState
183c183
< makeMaps_e ( EState* s )
---
>   EState* s )
177c177
<    DState;
---
>    DState
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e ( * s )
177c177
<    DState;
---
>    DState
183c183
< makeMaps_e ( EState* s )
---
>  ( * s )
177c177
<    DState;
---
>    DState
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e  * s )
177c177
<    DState;
---
>    DState
183c183
< makeMaps_e ( EState* s )
---
>   * s )
183c183
< makeMaps_e ( EState* s )
---
>  ( EState* s )
183c183
< makeMaps_e ( EState* s )
---
>   EState* s )
183c183
< makeMaps_e ( EState* s )
---
>  ( * s )
183c183
< makeMaps_e ( EState* s )
---
>   * s )
183c183
< makeMaps_e ( EState* s )
---
>  ( EState s )
183c183
< makeMaps_e ( EState* s )
---
>   EState s )
183c183
< makeMaps_e ( EState* s )
---
>  (  s )
183c183
< makeMaps_e ( EState* s )
---
>    s )
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e  EState* s )
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e  * s )
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e  EState s )
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e   s )
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e  EState*  )
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e  *  )
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e  EState  )
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e    )
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e ( * s )
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e (  s )
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e ( *  )
183c183
< makeMaps_e ( EState* s )
---
> makeMaps_e (   )
(97.3 %, 5485 bytes)
183c183
< makeMaps_e (  s )
---
> makeMaps_e (   
183,184c183,184
< makeMaps_e (  s )
< {
---
> makeMaps_e (   )
> 
183,184c183,184
< makeMaps_e (  s )
< {
---
> makeMaps_e (   
> 
183c183
< makeMaps_e (  s )
---
> makeMaps_e (   )
185c185
<    ;
---
>    
183c183
< makeMaps_e (  s )
---
> makeMaps_e (   
185c185
<    ;
---
>    
183,185c183,185
< makeMaps_e (  s )
< {
<    ;
---
> makeMaps_e (   )
> 
>    
183,185c183,185
< makeMaps_e (  s )
< {
<    ;
---
> makeMaps_e (   
> 
>    
183c183
< makeMaps_e (  s )
---
> makeMaps_e (  s 
183,184c183,184
< makeMaps_e (  s )
< {
---
> makeMaps_e (  s 
> 
183c183
< makeMaps_e (  s )
---
> makeMaps_e (  s 
185c185
<    ;
---
>    
183,185c183,185
< makeMaps_e (  s )
< {
<    ;
---
> makeMaps_e (  s 
> 
>    
183c183
< makeMaps_e (  s )
---
> makeMaps_e (  s 
187c187
< }
---
> 
183,184c183,184
< makeMaps_e (  s )
< {
---
> makeMaps_e (  s 
> 
187c187
< }
---
> 
(97.3 %, 5483 bytes)
183c183
< makeMaps_e (   )
---
> makeMaps_e (   
191c191
< static
---
> 
183,184c183,184
< makeMaps_e (   )
< {
---
> makeMaps_e (   
> 
191c191
< static
---
> 
183c183
< makeMaps_e (   )
---
> makeMaps_e (   
187d186
< }
191c190,191
< static
---
> 
> 
183,184c183,184
< makeMaps_e (   )
< {
---
> makeMaps_e (   
> 
187d186
< }
191c190,191
< static
---
> 
> 
184c184
< {
---
> 
184c184
< {
---
> 
187c187
< }
---
> 
184c184
< {
---
> 
191c191
< static
---
> 
184c184
< {
---
> 
187d186
< }
191c190,191
< static
---
> 
> 
184c184
< {
---
> 
192c192
< void generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState* s )
184c184
< {
---
> 
187c187
< }
---
> 
192c192
< void generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState* s )
184c184
< {
---
> 
191,192c191,192
< static
< void generateMTFValues ( EState* s )
---
> 
>  generateMTFValues ( EState* s )
184c184
< {
---
> 
187d186
< }
191,192c190,192
< static
< void generateMTFValues ( EState* s )
---
> 
> 
>  generateMTFValues ( EState* s )
187c187
< }
---
> 
187d186
< }
191c190,191
< static
---
> 
> 
187c187
< }
---
> 
192c192
< void generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState* s )
187d186
< }
191,192c190,192
< static
< void generateMTFValues ( EState* s )
---
> 
> 
>  generateMTFValues ( EState* s )
187c187
< }
---
> 
192c192
< void generateMTFValues ( EState* s )
---
> void  ( EState* s )
187d186
< }
191,192c190,192
< static
< void generateMTFValues ( EState* s )
---
> 
> 
> void  ( EState* s )
187c187
< }
---
> 
192c192
< void generateMTFValues ( EState* s )
---
>   ( EState* s )
187d186
< }
191,192c190,192
< static
< void generateMTFValues ( EState* s )
---
> 
> 
>   ( EState* s )
191c191
< static
---
> 
191,192c191,192
< static
< void generateMTFValues ( EState* s )
---
> 
>  generateMTFValues ( EState* s )
(97.3 %, 5477 bytes)
192c192
< void generateMTFValues ( EState* s )
---
>  generateMTFValues ( EState* s )
192c192
< void generateMTFValues ( EState* s )
---
>   ( EState* s )
192c192
< void generateMTFValues ( EState* s )
---
>  generateMTFValues  EState* s )
192c192
< void generateMTFValues ( EState* s )
---
>    EState* s )
192c192
< void generateMTFValues ( EState* s )
---
>  generateMTFValues ( * s )
192c192
< void generateMTFValues ( EState* s )
---
>   ( * s )
192c192
< void generateMTFValues ( EState* s )
---
>  generateMTFValues  * s )
(97.3 %, 5473 bytes)
192c192
<  generateMTFValues ( EState* s )
---
>   ( EState* s )
192c192
<  generateMTFValues ( EState* s )
---
>    EState* s )
192c192
<  generateMTFValues ( EState* s )
---
>   ( * s )
192c192
<  generateMTFValues ( EState* s )
---
>    * s )
192c192
<  generateMTFValues ( EState* s )
---
>   ( EState s )
192c192
<  generateMTFValues ( EState* s )
---
>    EState s )
192c192
<  generateMTFValues ( EState* s )
---
>   (  s )
192c192
<  generateMTFValues ( EState* s )
---
>     s )
192c192
<  generateMTFValues ( EState* s )
---
>  generateMTFValues  EState* s )
192c192
<  generateMTFValues ( EState* s )
---
>  generateMTFValues  * s )
192c192
<  generateMTFValues ( EState* s )
---
>  generateMTFValues  EState s )
192c192
<  generateMTFValues ( EState* s )
---
>  generateMTFValues   s )
192c192
<  generateMTFValues ( EState* s )
---
>  generateMTFValues  EState*  )
192c192
<  generateMTFValues ( EState* s )
---
>  generateMTFValues  *  )
192c192
<  generateMTFValues ( EState* s )
---
>  generateMTFValues  EState  )
192c192
<  generateMTFValues ( EState* s )
---
>  generateMTFValues    )
192c192
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( * s )
192c192
<  generateMTFValues ( EState* s )
---
>  generateMTFValues (  s )
192c192
<  generateMTFValues ( EState* s )
---
>  generateMTFValues ( *  )
192c192
<  generateMTFValues ( EState* s )
---
>  generateMTFValues (   )
(97.3 %, 5466 bytes)
192c192
<  generateMTFValues (  s )
---
>  generateMTFValues (   
192,193c192,193
<  generateMTFValues (  s )
< {
---
>  generateMTFValues (   )
> 
192,193c192,193
<  generateMTFValues (  s )
< {
---
>  generateMTFValues (   
> 
192c192
<  generateMTFValues (  s )
---
>  generateMTFValues (   )
194c194
<    Int32   i, j;
---
>       i, j;
192c192
<  generateMTFValues (  s )
---
>  generateMTFValues (   
194c194
<    Int32   i, j;
---
>       i, j;
192,194c192,194
<  generateMTFValues (  s )
< {
<    Int32   i, j;
---
>  generateMTFValues (   )
> 
>       i, j;
192,194c192,194
<  generateMTFValues (  s )
< {
<    Int32   i, j;
---
>  generateMTFValues (   
> 
>       i, j;
192c192
<  generateMTFValues (  s )
---
>  generateMTFValues (  s 
192,193c192,193
<  generateMTFValues (  s )
< {
---
>  generateMTFValues (  s 
> 
192c192
<  generateMTFValues (  s )
---
>  generateMTFValues (  s 
194c194
<    Int32   i, j;
---
>       i, j;
192,194c192,194
<  generateMTFValues (  s )
< {
<    Int32   i, j;
---
>  generateMTFValues (  s 
> 
>       i, j;
192c192
<  generateMTFValues (  s )
---
>  generateMTFValues (  s 
194c194
<    Int32   i, j;
---
>    Int32   , j;
192,194c192,194
<  generateMTFValues (  s )
< {
<    Int32   i, j;
---
>  generateMTFValues (  s 
> 
>    Int32   , j;
192c192
<  generateMTFValues (  s )
---
>  generateMTFValues (  s 
194c194
<    Int32   i, j;
---
>       , j;
192,194c192,194
<  generateMTFValues (  s )
< {
<    Int32   i, j;
---
>  generateMTFValues (  s 
> 
>       , j;
193c193
< {
---
> 
193,194c193,194
< {
<    Int32   i, j;
---
> 
>       i, j;
193,194c193,194
< {
<    Int32   i, j;
---
> 
>    Int32   , j;
193,194c193,194
< {
<    Int32   i, j;
---
> 
>       , j;
193,194c193,194
< {
<    Int32   i, j;
---
> 
>    Int32   i j;
193,194c193,194
< {
<    Int32   i, j;
---
> 
>       i j;
193,194c193,194
< {
<    Int32   i, j;
---
> 
>    Int32    j;
193,194c193,194
< {
<    Int32   i, j;
---
> 
>        j;
194c194
<    Int32   i, j;
---
>       i, j;
194c194
<    Int32   i, j;
---
>       , j;
194c194
<    Int32   i, j;
---
>       i j;
194c194
<    Int32   i, j;
---
>        j;
194c194
<    Int32   i, j;
---
>       i, ;
194c194
<    Int32   i, j;
---
>       , ;
194c194
<    Int32   i, j;
---
>       i ;
194c194
<    Int32   i, j;
---
>        ;
194c194
<    Int32   i, j;
---
>    Int32   , j;
194c194
<    Int32   i, j;
---
>    Int32    j;
(97.3 %, 5458 bytes)
194c194
<        ;
---
>        
196,197c196,197
<    {
<       }
---
>    
>       
199c199
<    }
---
>    
196c196
<    {
---
>    
196,197c196,197
<    {
<       }
---
>    
>       
196c196
<    {
---
>    
199c199
<    }
---
>    
(97.3 %, 5456 bytes)
199c199
<    }
---
>    
203c203
< (BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit) 
199c199
<    }
---
>    
203c203
< (BZ2_bzCompressInit) 
---
> () 
199c199
<    }
---
>    
203c203
< (BZ2_bzCompressInit) 
---
> ) 
199c199
<    }
---
>    
203c203
< (BZ2_bzCompressInit) 
---
> (BZ2_bzCompressInit 
199c199
<    }
---
>    
203c203
< (BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit 
199c199
<    }
---
>    
203c203
< (BZ2_bzCompressInit) 
---
> ( 
199c199
<    }
---
>    
203c203
< (BZ2_bzCompressInit) 
---
>  
203c203
< (BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit) 
203c203
< (BZ2_bzCompressInit) 
---
> ) 
203c203
< (BZ2_bzCompressInit) 
---
> BZ2_bzCompressInit 
203c203
< (BZ2_bzCompressInit) 
---
>  
203,204c203,204
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm,
---
> BZ2_bzCompressInit) 
>                      bz_stream* strm,
203,204c203,204
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm,
---
> ) 
>                      bz_stream* strm,
203,204c203,204
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm,
---
> BZ2_bzCompressInit 
>                      bz_stream* strm,
203,204c203,204
< (BZ2_bzCompressInit) 
<                     ( bz_stream* strm,
---
>  
>                      bz_stream* strm,
203c203
< (BZ2_bzCompressInit) 
---
> () 
203c203
< (BZ2_bzCompressInit) 
---
> ( 
(97.3 %, 5454 bytes)
203,204c203,204
< BZ2_bzCompressInit 
<                     ( bz_stream* strm,
---
>  
>                     ( * strm,
203,204c203,204
< BZ2_bzCompressInit 
<                     ( bz_stream* strm,
---
>  
>                      * strm,
203,204c203,204
< BZ2_bzCompressInit 
<                     ( bz_stream* strm,
---
>  
>                     ( bz_stream strm,
203,204c203,204
< BZ2_bzCompressInit 
<                     ( bz_stream* strm,
---
>  
>                      bz_stream strm,
203,204c203,204
< BZ2_bzCompressInit 
<                     ( bz_stream* strm,
---
>  
>                     (  strm,
203,204c203,204
< BZ2_bzCompressInit 
<                     ( bz_stream* strm,
---
>  
>                       strm,
204c204
<                     ( bz_stream* strm,
---
>                      bz_stream* strm,
204c204
<                     ( bz_stream* strm,
---
>                      * strm,
204c204
<                     ( bz_stream* strm,
---
>                      bz_stream strm,
204c204
<                     ( bz_stream* strm,
---
>                       strm,
204c204
<                     ( bz_stream* strm,
---
>                      bz_stream* ,
204c204
<                     ( bz_stream* strm,
---
>                      * ,
204c204
<                     ( bz_stream* strm,
---
>                      bz_stream ,
204c204
<                     ( bz_stream* strm,
---
>                       ,
204c204
<                     ( bz_stream* strm,
---
>                     ( * strm,
204c204
<                     ( bz_stream* strm,
---
>                     (  strm,
204c204
<                     ( bz_stream* strm,
---
>                     ( * ,
204c204
<                     ( bz_stream* strm,
---
>                     (  ,
204c204
<                     ( bz_stream* strm,
---
>                     ( * strm
204c204
<                     ( bz_stream* strm,
---
>                     (  strm
204c204
<                     ( bz_stream* strm,
---
>                     ( * 
204c204
<                     ( bz_stream* strm,
---
>                     (  
204c204
<                     ( bz_stream* strm,
---
>                     ( bz_stream strm,
(97.3 %, 5439 bytes)
205,206c205,206
<                      int        workFactor )
< {
---
>                               
> 
205c205
<                      int        workFactor )
---
>                      int         )
205c205
<                      int        workFactor )
---
>                      int         
205,206c205,206
<                      int        workFactor )
< {
---
>                      int         )
> 
205,206c205,206
<                      int        workFactor )
< {
---
>                      int         
> 
205c205
<                      int        workFactor )
---
>                      int         )
207c207
<    Int32   n;
---
>       n;
205c205
<                      int        workFactor )
---
>                      int         
207c207
<    Int32   n;
---
>       n;
205,207c205,207
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int         )
> 
>       n;
205,207c205,207
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int         
> 
>       n;
205c205
<                      int        workFactor )
---
>                      int        workFactor 
205,206c205,206
<                      int        workFactor )
< {
---
>                      int        workFactor 
> 
205c205
<                      int        workFactor )
---
>                      int        workFactor 
207c207
<    Int32   n;
---
>       n;
205,207c205,207
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        workFactor 
> 
>       n;
205c205
<                      int        workFactor )
---
>                      int        workFactor 
207c207
<    Int32   n;
---
>    Int32   ;
205,207c205,207
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        workFactor 
> 
>    Int32   ;
205c205
<                      int        workFactor )
---
>                      int        workFactor 
207c207
<    Int32   n;
---
>       ;
205,207c205,207
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        workFactor 
> 
>       ;
206c206
< {
---
> 
206,207c206,207
< {
<    Int32   n;
---
> 
>       n;
206,207c206,207
< {
<    Int32   n;
---
> 
>    Int32   ;
206,207c206,207
< {
<    Int32   n;
---
> 
>       ;
206,207c206,207
< {
<    Int32   n;
---
> 
>    Int32   n
206,207c206,207
< {
<    Int32   n;
---
> 
>       n
206,207c206,207
< {
<    Int32   n;
---
> 
>    Int32   
206,207c206,207
< {
<    Int32   n;
---
> 
>       
207c207
<    Int32   n;
---
>       n;
207c207
<    Int32   n;
---
>       ;
207c207
<    Int32   n;
---
>       n
207c207
<    Int32   n;
---
>       
(97.3 %, 5433 bytes)
207,208c207,208
<       ;
<    EState* sarr2 = NULL;
---
>       
>    * sarr2 = NULL;
207,208c207,208
<       ;
<    EState* sarr2 = NULL;
---
>       
>    EState sarr2 = NULL;
207,208c207,208
<       ;
<    EState* sarr2 = NULL;
---
>       
>     sarr2 = NULL;
207,208c207,208
<       ;
<    EState* sarr2 = NULL;
---
>       
>    EState*  = NULL;
207,208c207,208
<       ;
<    EState* sarr2 = NULL;
---
>       
>    *  = NULL;
207,208c207,208
<       ;
<    EState* sarr2 = NULL;
---
>       
>    EState  = NULL;
207,208c207,208
<       ;
<    EState* sarr2 = NULL;
---
>       
>      = NULL;
208c208
<    EState* sarr2 = NULL;
---
>    * sarr2 = NULL;
208c208
<    EState* sarr2 = NULL;
---
>     sarr2 = NULL;
208c208
<    EState* sarr2 = NULL;
---
>    *  = NULL;
208c208
<    EState* sarr2 = NULL;
---
>      = NULL;
208c208
<    EState* sarr2 = NULL;
---
>    * sarr2  NULL;
208c208
<    EState* sarr2 = NULL;
---
>     sarr2  NULL;
208c208
<    EState* sarr2 = NULL;
---
>    *   NULL;
208c208
<    EState* sarr2 = NULL;
---
>       NULL;
(97.4 %, 5425 bytes)
208,209c208,209
<     sarr2  NULL;
<    sBZALLOCBZALLOC( sizeof(UInt32) );
---
>       ;
>    ( sizeof(UInt32) );
208,209c208,209
<     sarr2  NULL;
<    sBZALLOCBZALLOC( sizeof(UInt32) );
---
>       NULL
>    ( sizeof(UInt32) );
208,209c208,209
<     sarr2  NULL;
<    sBZALLOCBZALLOC( sizeof(UInt32) );
---
>       
>    ( sizeof(UInt32) );
(97.4 %, 5401 bytes)
208,209c208,209
<       ;
<    ( sizeof(UInt32) );
---
>       
>     sizeofUInt32) );
208,209c208,209
<       ;
<    ( sizeof(UInt32) );
---
>       
>    ( UInt32) );
208,209c208,209
<       ;
<    ( sizeof(UInt32) );
---
>       
>     UInt32) );
209c209
<    ( sizeof(UInt32) );
---
>     sizeof(UInt32) );
209c209
<    ( sizeof(UInt32) );
---
>     (UInt32) );
209c209
<    ( sizeof(UInt32) );
---
>     sizeofUInt32) );
209c209
<    ( sizeof(UInt32) );
---
>     UInt32) );
209c209
<    ( sizeof(UInt32) );
---
>     sizeof() );
209c209
<    ( sizeof(UInt32) );
---
>     () );
209c209
<    ( sizeof(UInt32) );
---
>     sizeof) );
209c209
<    ( sizeof(UInt32) );
---
>     ) );
209c209
<    ( sizeof(UInt32) );
---
>    ( (UInt32) );
209c209
<    ( sizeof(UInt32) );
---
>    ( UInt32) );
209c209
<    ( sizeof(UInt32) );
---
>    ( () );
209c209
<    ( sizeof(UInt32) );
---
>    ( ) );
209c209
<    ( sizeof(UInt32) );
---
>    ( (UInt32 );
209c209
<    ( sizeof(UInt32) );
---
>    ( UInt32 );
209c209
<    ( sizeof(UInt32) );
---
>    ( ( );
209c209
<    ( sizeof(UInt32) );
---
>    (  );
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeofUInt32) );
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof) );
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeofUInt32 );
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof );
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeofUInt32) ;
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof) ;
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeofUInt32 ;
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof ;
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof() );
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof( );
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof() ;
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof( ;
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof() )
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof( )
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof() 
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof( 
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof(UInt32 );
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof(UInt32 ;
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof(UInt32 )
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof(UInt32 
209,210c209,210
<    ( sizeof(UInt32) );
<    return BZ_OK;
---
>    ( sizeof(UInt32 );
>     BZ_OK;
209,210c209,210
<    ( sizeof(UInt32) );
<    return BZ_OK;
---
>    ( sizeof(UInt32 ;
>     BZ_OK;
209,210c209,210
<    ( sizeof(UInt32) );
<    return BZ_OK;
---
>    ( sizeof(UInt32 )
>     BZ_OK;
209,210c209,210
<    ( sizeof(UInt32) );
<    return BZ_OK;
---
>    ( sizeof(UInt32 
>     BZ_OK;
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof(UInt32) ;
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof(UInt32) 
209,210c209,210
<    ( sizeof(UInt32) );
<    return BZ_OK;
---
>    ( sizeof(UInt32) ;
>     BZ_OK;
209,210c209,210
<    ( sizeof(UInt32) );
<    return BZ_OK;
---
>    ( sizeof(UInt32) 
>     BZ_OK;
209,210c209,210
<    ( sizeof(UInt32) );
<    return BZ_OK;
---
>    ( sizeof(UInt32) ;
>    return ;
209,210c209,210
<    ( sizeof(UInt32) );
<    return BZ_OK;
---
>    ( sizeof(UInt32) 
>    return ;
209,210c209,210
<    ( sizeof(UInt32) );
<    return BZ_OK;
---
>    ( sizeof(UInt32) ;
>     ;
209,210c209,210
<    ( sizeof(UInt32) );
<    return BZ_OK;
---
>    ( sizeof(UInt32) 
>     ;
209c209
<    ( sizeof(UInt32) );
---
>    ( sizeof(UInt32) )
209,210c209,210
<    ( sizeof(UInt32) );
<    return BZ_OK;
---
>    ( sizeof(UInt32) )
>     BZ_OK;
209,210c209,210
<    ( sizeof(UInt32) );
<    return BZ_OK;
---
>    ( sizeof(UInt32) )
>    return ;
209,210c209,210
<    ( sizeof(UInt32) );
<    return BZ_OK;
---
>    ( sizeof(UInt32) )
>     ;
(97.4 %, 5394 bytes)
210c210
<     BZ_OK;
---
>     
210,211c210,211
<     BZ_OK;
< }
---
>     ;
> 
210,211c210,211
<     BZ_OK;
< }
---
>     
> 
210c210
<     BZ_OK;
---
>     ;
223c223
< BZ_API(BZ2_bzCompress) ( )
---
> (BZ2_bzCompress) ( )
210c210
<     BZ_OK;
---
>     
223c223
< BZ_API(BZ2_bzCompress) ( )
---
> (BZ2_bzCompress) ( )
210,211c210
<     BZ_OK;
< }
---
>     ;
223c222,223
< BZ_API(BZ2_bzCompress) ( )
---
> 
> (BZ2_bzCompress) ( )
210,211c210
<     BZ_OK;
< }
---
>     
223c222,223
< BZ_API(BZ2_bzCompress) ( )
---
> 
> (BZ2_bzCompress) ( )
210c210
<     BZ_OK;
---
>     BZ_OK
210,211c210,211
<     BZ_OK;
< }
---
>     BZ_OK
> 
210c210
<     BZ_OK;
---
>     BZ_OK
223c223
< BZ_API(BZ2_bzCompress) ( )
---
> (BZ2_bzCompress) ( )
210,211c210
<     BZ_OK;
< }
---
>     BZ_OK
223c222,223
< BZ_API(BZ2_bzCompress) ( )
---
> 
> (BZ2_bzCompress) ( )
(97.4 %, 5383 bytes)
210c210
<     ;
---
>     
223c223
< (BZ2_bzCompress) ( )
---
> () ( )
210,211c210
<     ;
< }
---
>     
223c222,223
< (BZ2_bzCompress) ( )
---
> 
> () ( )
210c210
<     ;
---
>     
223c223
< (BZ2_bzCompress) ( )
---
> ) ( )
210,211c210
<     ;
< }
---
>     
223c222,223
< (BZ2_bzCompress) ( )
---
> 
> ) ( )
211c211
< }
---
> 
211d210
< }
223c222,223
< (BZ2_bzCompress) ( )
---
> 
> BZ2_bzCompress) ( )
211d210
< }
223c222,223
< (BZ2_bzCompress) ( )
---
> 
> () ( )
211d210
< }
223c222,223
< (BZ2_bzCompress) ( )
---
> 
> ) ( )
211d210
< }
223c222,223
< (BZ2_bzCompress) ( )
---
> 
> (BZ2_bzCompress ( )
211d210
< }
223c222,223
< (BZ2_bzCompress) ( )
---
> 
> BZ2_bzCompress ( )
211d210
< }
223c222,223
< (BZ2_bzCompress) ( )
---
> 
> ( ( )
211d210
< }
223c222,223
< (BZ2_bzCompress) ( )
---
> 
>  ( )
223c223
< (BZ2_bzCompress) ( )
---
> BZ2_bzCompress) ( )
223c223
< (BZ2_bzCompress) ( )
---
> ) ( )
223c223
< (BZ2_bzCompress) ( )
---
> BZ2_bzCompress ( )
223c223
< (BZ2_bzCompress) ( )
---
>  ( )
223c223
< (BZ2_bzCompress) ( )
---
> BZ2_bzCompress)  )
223c223
< (BZ2_bzCompress) ( )
---
> )  )
223c223
< (BZ2_bzCompress) ( )
---
> BZ2_bzCompress  )
223c223
< (BZ2_bzCompress) ( )
---
>   )
223c223
< (BZ2_bzCompress) ( )
---
> () ( )
223c223
< (BZ2_bzCompress) ( )
---
> ( ( )
223c223
< (BZ2_bzCompress) ( )
---
> ()  )
(97.4 %, 5381 bytes)
223c223
< BZ2_bzCompress ( )
---
>  ( 
223c223
< BZ2_bzCompress ( )
---
>   
223,224c223,224
< BZ2_bzCompress ( )
< {
---
>  ( )
> 
223,224c223,224
< BZ2_bzCompress ( )
< {
---
>   )
> 
223,224c223,224
< BZ2_bzCompress ( )
< {
---
>  ( 
> 
223,224c223,224
< BZ2_bzCompress ( )
< {
---
>   
> 
223c223
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  )
223c223
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  
223,224c223,224
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress  )
> 
223,224c223,224
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress  
> 
223c223
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  )
226c226
<    EState* s;
---
>    * s;
223c223
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  
226c226
<    EState* s;
---
>    * s;
223,224c223,224
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress  )
> 
226c226
<    EState* s;
---
>    * s;
223,224c223,224
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress  
> 
226c226
<    EState* s;
---
>    * s;
223c223
< BZ2_bzCompress ( )
---
> BZ2_bzCompress ( 
223,224c223,224
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress ( 
> 
223c223
< BZ2_bzCompress ( )
---
> BZ2_bzCompress ( 
226c226
<    EState* s;
---
>    * s;
223,224c223,224
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress ( 
> 
226c226
<    EState* s;
---
>    * s;
223c223
< BZ2_bzCompress ( )
---
> BZ2_bzCompress ( 
226c226
<    EState* s;
---
>    EState s;
223,224c223,224
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress ( 
> 
226c226
<    EState* s;
---
>    EState s;
223c223
< BZ2_bzCompress ( )
---
> BZ2_bzCompress ( 
226c226
<    EState* s;
---
>     s;
223,224c223,224
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress ( 
> 
226c226
<    EState* s;
---
>     s;
224c224
< {
---
> 
224c224
< {
---
> 
226c226
<    EState* s;
---
>    * s;
224c224
< {
---
> 
226c226
<    EState* s;
---
>    EState s;
224c224
< {
---
> 
226c226
<    EState* s;
---
>     s;
224c224
< {
---
> 
226c226
<    EState* s;
---
>    EState* ;
224c224
< {
---
> 
226c226
<    EState* s;
---
>    * ;
224c224
< {
---
> 
226c226
<    EState* s;
---
>    EState ;
224c224
< {
---
> 
226c226
<    EState* s;
---
>     ;
226c226
<    EState* s;
---
>    * s;
226c226
<    EState* s;
---
>     s;
226c226
<    EState* s;
---
>    * ;
226c226
<    EState* s;
---
>     ;
226c226
<    EState* s;
---
>    * s
226c226
<    EState* s;
---
>     s
226c226
<    EState* s;
---
>    * 
226c226
<    EState* s;
---
>     
(97.4 %, 5373 bytes)
226,227c226
<     ;
< }
---
>     
235c234,235
< int BZ_API(BZ2_bzDecompressInit) 
---
> 
>  BZ_API(BZ2_bzDecompressInit) 
226c226
<     ;
---
>     
235c235
< int BZ_API(BZ2_bzDecompressInit) 
---
> int (BZ2_bzDecompressInit) 
226,227c226
<     ;
< }
---
>     
235c234,235
< int BZ_API(BZ2_bzDecompressInit) 
---
> 
> int (BZ2_bzDecompressInit) 
226c226
<     ;
---
>     
235c235
< int BZ_API(BZ2_bzDecompressInit) 
---
>  (BZ2_bzDecompressInit) 
(97.4 %, 5366 bytes)
227d226
< }
235c234,235
< int (BZ2_bzDecompressInit) 
---
> 
> int () 
227d226
< }
235c234,235
< int (BZ2_bzDecompressInit) 
---
> 
>  () 
227d226
< }
235c234,235
< int (BZ2_bzDecompressInit) 
---
> 
> int ) 
227d226
< }
235c234,235
< int (BZ2_bzDecompressInit) 
---
> 
>  ) 
235c235
< int (BZ2_bzDecompressInit) 
---
>  (BZ2_bzDecompressInit) 
235c235
< int (BZ2_bzDecompressInit) 
---
>  BZ2_bzDecompressInit) 
235c235
< int (BZ2_bzDecompressInit) 
---
>  () 
235c235
< int (BZ2_bzDecompressInit) 
---
>  ) 
235c235
< int (BZ2_bzDecompressInit) 
---
>  (BZ2_bzDecompressInit 
235c235
< int (BZ2_bzDecompressInit) 
---
>  BZ2_bzDecompressInit 
(97.4 %, 5363 bytes)
235c235
<  (BZ2_bzDecompressInit) 
---
>  BZ2_bzDecompressInit) 
235c235
<  (BZ2_bzDecompressInit) 
---
>  ) 
235c235
<  (BZ2_bzDecompressInit) 
---
>  BZ2_bzDecompressInit 
235c235
<  (BZ2_bzDecompressInit) 
---
>   
235,236c235,236
<  (BZ2_bzDecompressInit) 
<                      ( bz_stream* small )
---
>  BZ2_bzDecompressInit) 
>                       bz_stream* small )
235,236c235,236
<  (BZ2_bzDecompressInit) 
<                      ( bz_stream* small )
---
>  ) 
>                       bz_stream* small )
235,236c235,236
<  (BZ2_bzDecompressInit) 
<                      ( bz_stream* small )
---
>  BZ2_bzDecompressInit 
>                       bz_stream* small )
235,236c235,236
<  (BZ2_bzDecompressInit) 
<                      ( bz_stream* small )
---
>   
>                       bz_stream* small )
235c235
<  (BZ2_bzDecompressInit) 
---
>  () 
235c235
<  (BZ2_bzDecompressInit) 
---
>  ( 
235,236c235,236
<  (BZ2_bzDecompressInit) 
<                      ( bz_stream* small )
---
>  () 
>                       bz_stream* small )
235,236c235,236
<  (BZ2_bzDecompressInit) 
<                      ( bz_stream* small )
---
>  ( 
>                       bz_stream* small )
(97.4 %, 5361 bytes)
235,236c235,236
<  BZ2_bzDecompressInit 
<                      ( bz_stream* small )
---
>   
>                      ( * small )
235,236c235,236
<  BZ2_bzDecompressInit 
<                      ( bz_stream* small )
---
>   
>                       * small )
235,236c235,236
<  BZ2_bzDecompressInit 
<                      ( bz_stream* small )
---
>   
>                      ( bz_stream small )
235,236c235,236
<  BZ2_bzDecompressInit 
<                      ( bz_stream* small )
---
>   
>                       bz_stream small )
235,236c235,236
<  BZ2_bzDecompressInit 
<                      ( bz_stream* small )
---
>   
>                      (  small )
235,236c235,236
<  BZ2_bzDecompressInit 
<                      ( bz_stream* small )
---
>   
>                        small )
236c236
<                      ( bz_stream* small )
---
>                       bz_stream* small )
236c236
<                      ( bz_stream* small )
---
>                       * small )
236c236
<                      ( bz_stream* small )
---
>                       bz_stream small )
236c236
<                      ( bz_stream* small )
---
>                        small )
236c236
<                      ( bz_stream* small )
---
>                       bz_stream*  )
236c236
<                      ( bz_stream* small )
---
>                       *  )
236c236
<                      ( bz_stream* small )
---
>                       bz_stream  )
236c236
<                      ( bz_stream* small )
---
>                         )
236c236
<                      ( bz_stream* small )
---
>                      ( * small )
236c236
<                      ( bz_stream* small )
---
>                      (  small )
236c236
<                      ( bz_stream* small )
---
>                      ( *  )
236c236
<                      ( bz_stream* small )
---
>                      (   )
(97.4 %, 5351 bytes)
236c236
<                      (  small )
---
>                      (   
236,237c236,237
<                      (  small )
< {
---
>                      (   )
> 
236,237c236,237
<                      (  small )
< {
---
>                      (   
> 
236c236
<                      (  small )
---
>                      (   )
238c238
<    DState* s;
---
>    * s;
236c236
<                      (  small )
---
>                      (   
238c238
<    DState* s;
---
>    * s;
236,238c236,238
<                      (  small )
< {
<    DState* s;
---
>                      (   )
> 
>    * s;
236,238c236,238
<                      (  small )
< {
<    DState* s;
---
>                      (   
> 
>    * s;
236c236
<                      (  small )
---
>                      (  small 
236,237c236,237
<                      (  small )
< {
---
>                      (  small 
> 
236c236
<                      (  small )
---
>                      (  small 
238c238
<    DState* s;
---
>    * s;
236,238c236,238
<                      (  small )
< {
<    DState* s;
---
>                      (  small 
> 
>    * s;
236c236
<                      (  small )
---
>                      (  small 
238c238
<    DState* s;
---
>    DState s;
236,238c236,238
<                      (  small )
< {
<    DState* s;
---
>                      (  small 
> 
>    DState s;
236c236
<                      (  small )
---
>                      (  small 
238c238
<    DState* s;
---
>     s;
236,238c236,238
<                      (  small )
< {
<    DState* s;
---
>                      (  small 
> 
>     s;
237c237
< {
---
> 
237,238c237,238
< {
<    DState* s;
---
> 
>    * s;
237,238c237,238
< {
<    DState* s;
---
> 
>    DState s;
237,238c237,238
< {
<    DState* s;
---
> 
>     s;
237,238c237,238
< {
<    DState* s;
---
> 
>    DState* ;
237,238c237,238
< {
<    DState* s;
---
> 
>    * ;
237,238c237,238
< {
<    DState* s;
---
> 
>    DState ;
237,238c237,238
< {
<    DState* s;
---
> 
>     ;
238c238
<    DState* s;
---
>    * s;
238c238
<    DState* s;
---
>     s;
238c238
<    DState* s;
---
>    * ;
238c238
<    DState* s;
---
>     ;
238c238
<    DState* s;
---
>    * s
238c238
<    DState* s;
---
>     s
238c238
<    DState* s;
---
>    * 
238c238
<    DState* s;
---
>     
(97.4 %, 5343 bytes)
238,239c238,240
<     ;
< }
---
>     
> 
> 
243d243
< static
238c238
<     ;
---
>     
244c244
< void ;
---
>  ;
238,239c238,239
<     ;
< }
---
>     
> 
244c244
< void ;
---
>  ;
238c238
<     ;
---
>     
243,244c243,244
< static
< void ;
---
> 
>  ;
(97.4 %, 5338 bytes)
239c239
< }
---
> 
248c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>  BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
239d238
< }
243c242,243
< static
---
> 
> 
248c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>  BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
239c239
< }
---
> 
244c244
<  ;
---
>  
248c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>  BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
239d238
< }
243,244d241
< static
<  ;
246a244
>  
248c246,248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
> 
> 
>  BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
243c243
< static
---
> 
243,244c243,244
< static
<  ;
---
> 
>  
243c243
< static
---
> 
248c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>  BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
(97.4 %, 5332 bytes)
244c244
<  ;
---
>  
244c244
<  ;
---
>  
248c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>  BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
(97.4 %, 5331 bytes)
248c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>  BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
248c248
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>  (BZ2_bzDecompress) ( bz_stream *strm )
(97.4 %, 5328 bytes)
248c248
<  BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>  (BZ2_bzDecompress) ( bz_stream *strm )
248c248
<  BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>  BZ2_bzDecompress) ( bz_stream *strm )
248c248
<  BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>  () ( bz_stream *strm )
248c248
<  BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>  ) ( bz_stream *strm )
248c248
<  BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>  (BZ2_bzDecompress ( bz_stream *strm )
248c248
<  BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>  BZ2_bzDecompress ( bz_stream *strm )
(97.4 %, 5322 bytes)
248c248
<  (BZ2_bzDecompress) ( bz_stream *strm )
---
>  BZ2_bzDecompress) ( bz_stream *strm )
248c248
<  (BZ2_bzDecompress) ( bz_stream *strm )
---
>  ) ( bz_stream *strm )
248c248
<  (BZ2_bzDecompress) ( bz_stream *strm )
---
>  BZ2_bzDecompress ( bz_stream *strm )
248c248
<  (BZ2_bzDecompress) ( bz_stream *strm )
---
>   ( bz_stream *strm )
248c248
<  (BZ2_bzDecompress) ( bz_stream *strm )
---
>  BZ2_bzDecompress)  bz_stream *strm )
248c248
<  (BZ2_bzDecompress) ( bz_stream *strm )
---
>  )  bz_stream *strm )
248c248
<  (BZ2_bzDecompress) ( bz_stream *strm )
---
>  BZ2_bzDecompress  bz_stream *strm )
248c248
<  (BZ2_bzDecompress) ( bz_stream *strm )
---
>    bz_stream *strm )
248c248
<  (BZ2_bzDecompress) ( bz_stream *strm )
---
>  () ( bz_stream *strm )
248c248
<  (BZ2_bzDecompress) ( bz_stream *strm )
---
>  ( ( bz_stream *strm )
248c248
<  (BZ2_bzDecompress) ( bz_stream *strm )
---
>  ()  bz_stream *strm )
(97.4 %, 5320 bytes)
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>   (  *strm )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>     *strm )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>   ( bz_stream strm )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>    bz_stream strm )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>   (  strm )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>     strm )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>  BZ2_bzDecompress  bz_stream *strm )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>  BZ2_bzDecompress   *strm )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>  BZ2_bzDecompress  bz_stream strm )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>  BZ2_bzDecompress   strm )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>  BZ2_bzDecompress  bz_stream * )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>  BZ2_bzDecompress   * )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>  BZ2_bzDecompress  bz_stream  )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>  BZ2_bzDecompress    )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>  BZ2_bzDecompress (  *strm )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>  BZ2_bzDecompress (  strm )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>  BZ2_bzDecompress (  * )
248c248
<  BZ2_bzDecompress ( bz_stream *strm )
---
>  BZ2_bzDecompress (   )
(97.4 %, 5310 bytes)
248c248
<  BZ2_bzDecompress (  strm )
---
>  BZ2_bzDecompress (   
248,249c248,249
<  BZ2_bzDecompress (  strm )
< {
---
>  BZ2_bzDecompress (   )
> 
248,249c248,249
<  BZ2_bzDecompress (  strm )
< {
---
>  BZ2_bzDecompress (   
> 
248c248
<  BZ2_bzDecompress (  strm )
---
>  BZ2_bzDecompress (   )
250c250
<    DState* s;
---
>    * s;
248c248
<  BZ2_bzDecompress (  strm )
---
>  BZ2_bzDecompress (   
250c250
<    DState* s;
---
>    * s;
248,250c248,250
<  BZ2_bzDecompress (  strm )
< {
<    DState* s;
---
>  BZ2_bzDecompress (   )
> 
>    * s;
248,250c248,250
<  BZ2_bzDecompress (  strm )
< {
<    DState* s;
---
>  BZ2_bzDecompress (   
> 
>    * s;
248c248
<  BZ2_bzDecompress (  strm )
---
>  BZ2_bzDecompress (  strm 
248,249c248,249
<  BZ2_bzDecompress (  strm )
< {
---
>  BZ2_bzDecompress (  strm 
> 
248c248
<  BZ2_bzDecompress (  strm )
---
>  BZ2_bzDecompress (  strm 
250c250
<    DState* s;
---
>    * s;
248,250c248,250
<  BZ2_bzDecompress (  strm )
< {
<    DState* s;
---
>  BZ2_bzDecompress (  strm 
> 
>    * s;
248c248
<  BZ2_bzDecompress (  strm )
---
>  BZ2_bzDecompress (  strm 
250c250
<    DState* s;
---
>    DState s;
248,250c248,250
<  BZ2_bzDecompress (  strm )
< {
<    DState* s;
---
>  BZ2_bzDecompress (  strm 
> 
>    DState s;
248c248
<  BZ2_bzDecompress (  strm )
---
>  BZ2_bzDecompress (  strm 
250c250
<    DState* s;
---
>     s;
248,250c248,250
<  BZ2_bzDecompress (  strm )
< {
<    DState* s;
---
>  BZ2_bzDecompress (  strm 
> 
>     s;
249c249
< {
---
> 
249,250c249,250
< {
<    DState* s;
---
> 
>    * s;
249,250c249,250
< {
<    DState* s;
---
> 
>    DState s;
249,250c249,250
< {
<    DState* s;
---
> 
>     s;
249,250c249,250
< {
<    DState* s;
---
> 
>    DState* ;
249,250c249,250
< {
<    DState* s;
---
> 
>    * ;
249,250c249,250
< {
<    DState* s;
---
> 
>    DState ;
249,250c249,250
< {
<    DState* s;
---
> 
>     ;
250c250
<    DState* s;
---
>    * s;
250c250
<    DState* s;
---
>     s;
250c250
<    DState* s;
---
>    * ;
250c250
<    DState* s;
---
>     ;
250c250
<    DState* s;
---
>    * s
250c250
<    DState* s;
---
>     s
250c250
<    DState* s;
---
>    * 
250c250
<    DState* s;
---
>     
250c250
<    DState* s;
---
>    DState s;
250c250
<    DState* s;
---
>    DState ;
250c250
<    DState* s;
---
>    DState s
250c250
<    DState* s;
---
>    DState 
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState s;
>     (s == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState ;
>     (s == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState s
>     (s == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState 
>     (s == NULL) ;
250c250
<    DState* s;
---
>    DState* ;
250c250
<    DState* s;
---
>    DState* 
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState* ;
>     (s == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState* 
>     (s == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState* ;
>    if s == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState* 
>    if s == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState* ;
>     s == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState* 
>     s == NULL) ;
250c250
<    DState* s;
---
>    DState* s
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState* s
>     (s == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState* s
>    if s == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState* s
>     s == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState* s
>    if ( == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState* s
>     ( == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState* s
>    if  == NULL) ;
250,251c250,251
<    DState* s;
<    if (s == NULL) ;
---
>    DState* s
>      == NULL) ;
251c251
<    if (s == NULL) ;
---
>     (s == NULL) ;
251c251
<    if (s == NULL) ;
---
>     s == NULL) ;
251c251
<    if (s == NULL) ;
---
>     ( == NULL) ;
251c251
<    if (s == NULL) ;
---
>      == NULL) ;
251c251
<    if (s == NULL) ;
---
>     (s  NULL) ;
251c251
<    if (s == NULL) ;
---
>     s  NULL) ;
251c251
<    if (s == NULL) ;
---
>     (  NULL) ;
(97.4 %, 5308 bytes)
251c251
<     (s == NULL) ;
---
>     s == NULL) ;
251c251
<     (s == NULL) ;
---
>      == NULL) ;
251c251
<     (s == NULL) ;
---
>     s  NULL) ;
251c251
<     (s == NULL) ;
---
>       NULL) ;
251c251
<     (s == NULL) ;
---
>     s == ) ;
251c251
<     (s == NULL) ;
---
>      == ) ;
251c251
<     (s == NULL) ;
---
>     s  ) ;
251c251
<     (s == NULL) ;
---
>       ) ;
251c251
<     (s == NULL) ;
---
>     ( == NULL) ;
251c251
<     (s == NULL) ;
---
>     (  NULL) ;
251c251
<     (s == NULL) ;
---
>     ( == ) ;
251c251
<     (s == NULL) ;
---
>     (  ) ;
251c251
<     (s == NULL) ;
---
>     ( == NULL ;
251c251
<     (s == NULL) ;
---
>     (  NULL ;
251c251
<     (s == NULL) ;
---
>     ( ==  ;
251c251
<     (s == NULL) ;
---
>     (   ;
251c251
<     (s == NULL) ;
---
>     (s  NULL) ;
251c251
<     (s == NULL) ;
---
>     (s  ) ;
251c251
<     (s == NULL) ;
---
>     (s  NULL ;
251c251
<     (s == NULL) ;
---
>     (s   ;
251c251
<     (s == NULL) ;
---
>     (s  NULL) 
251c251
<     (s == NULL) ;
---
>     (s  ) 
251c251
<     (s == NULL) ;
---
>     (s  NULL 
251c251
<     (s == NULL) ;
---
>     (s   
251c251
<     (s == NULL) ;
---
>     (s == ) ;
251c251
<     (s == NULL) ;
---
>     (s ==  ;
251c251
<     (s == NULL) ;
---
>     (s == ) 
251c251
<     (s == NULL) ;
---
>     (s ==  
251,252c251,252
<     (s == NULL) ;
<    ;
---
>     (s == ) ;
>    
251,252c251,252
<     (s == NULL) ;
<    ;
---
>     (s ==  ;
>    
251,252c251,252
<     (s == NULL) ;
<    ;
---
>     (s == ) 
>    
251,252c251,252
<     (s == NULL) ;
<    ;
---
>     (s ==  
>    
251c251
<     (s == NULL) ;
---
>     (s == NULL ;
251c251
<     (s == NULL) ;
---
>     (s == NULL 
251,252c251,252
<     (s == NULL) ;
<    ;
---
>     (s == NULL ;
>    
251,252c251,252
<     (s == NULL) ;
<    ;
---
>     (s == NULL 
>    
251c251
<     (s == NULL) ;
---
>     (s == NULL ;
254c254
<    ;
---
>    
251c251
<     (s == NULL) ;
---
>     (s == NULL 
254c254
<    ;
---
>    
251,252c251,252
<     (s == NULL) ;
<    ;
---
>     (s == NULL ;
>    
254c254
<    ;
---
>    
251,252c251,252
<     (s == NULL) ;
<    ;
---
>     (s == NULL 
>    
254c254
<    ;
---
>    
251c251
<     (s == NULL) ;
---
>     (s == NULL) 
251,252c251,252
<     (s == NULL) ;
<    ;
---
>     (s == NULL) 
>    
(97.4 %, 5307 bytes)
252c252
<    ;
---
>    
252c252
<    ;
---
>    
254c254
<    ;
---
>    
252c252
<    ;
---
>    
255c255
< }
---
> 
252c252,254
<    ;
---
>    
> 
>    
254,255d255
<    ;
< }
252c252
<    ;
---
>    
262c262
< \
---
> 
(97.4 %, 5306 bytes)
254c254
<    ;
---
>    
254,255c254,255
<    ;
< }
---
>    
> 
254c254
<    ;
---
>    
262c262
< \
---
> 
254,255c254,256
<    ;
< }
---
>    
> 
> 
262d262
< \
254c254
<    ;
---
>    
265c265
< typedef 
---
>  
254,255c254,255
<    ;
< }
---
>    
> 
265c265
< typedef 
---
>  
254c254
<    ;
---
>    
262d261
< \
265c264,265
< typedef 
---
> 
>  
254,255c254
<    ;
< }
---
>    
262d260
< \
265c263,265
< typedef 
---
> 
> 
>  
255c255
< }
---
> 
255d254
< }
262c261,262
< \
---
> 
> 
255c255
< }
---
> 
265c265
< typedef 
---
>  
255d254
< }
262d260
< \
265c263,265
< typedef 
---
> 
> 
>  
255c255
< }
---
> 
266c266
<    struct {
---
>     {
255d254
< }
262c261,262
< \
---
> 
> 
266c266
<    struct {
---
>     {
255c255
< }
---
> 
265,266c265,266
< typedef 
<    struct {
---
>  
>     {
255d254
< }
262d260
< \
265,266c263,266
< typedef 
<    struct {
---
> 
> 
>  
>     {
262c262
< \
---
> 
262d261
< \
265c264,265
< typedef 
---
> 
>  
262c262
< \
---
> 
266c266
<    struct {
---
>     {
262d261
< \
265,266c264,266
< typedef 
<    struct {
---
> 
>  
>     {
262c262
< \
---
> 
266c266
<    struct {
---
>    struct 
262d261
< \
265,266c264,266
< typedef 
<    struct {
---
> 
>  
>    struct 
262c262
< \
---
> 
266c266
<    struct {
---
>     
262d261
< \
265,266c264,266
< typedef 
<    struct {
---
> 
>  
>     
265c265
< typedef 
---
>  
(97.4 %, 5305 bytes)
265c265
< typedef 
---
>  
265,266c265,266
< typedef 
<    struct {
---
>  
>     {
265,266c265,266
< typedef 
<    struct {
---
>  
>    struct 
265,266c265,266
< typedef 
<    struct {
---
>  
>     
265c265
< typedef 
---
>  
267c267
<       FILE*     handle;
---
>       *     handle;
265,267c265,267
< typedef 
<    struct {
<       FILE*     handle;
---
>  
>     {
>       *     handle;
265,267c265,267
< typedef 
<    struct {
<       FILE*     handle;
---
>  
>    struct 
>       *     handle;
265,267c265,267
< typedef 
<    struct {
<       FILE*     handle;
---
>  
>     
>       *     handle;
266c266
<    struct {
---
>     {
266c266
<    struct {
---
>     
266,267c266,267
<    struct {
<       FILE*     handle;
---
>     {
>       *     handle;
266,267c266,267
<    struct {
<       FILE*     handle;
---
>     
>       *     handle;
266,267c266,267
<    struct {
<       FILE*     handle;
---
>     {
>       FILE     handle;
266,267c266,267
<    struct {
<       FILE*     handle;
---
>     
>       FILE     handle;
266,267c266,267
<    struct {
<       FILE*     handle;
---
>     {
>            handle;
266,267c266,267
<    struct {
<       FILE*     handle;
---
>     
>            handle;
266c266
<    struct {
---
>    struct 
266,267c266,267
<    struct {
<       FILE*     handle;
---
>    struct 
>       *     handle;
266,267c266,267
<    struct {
<       FILE*     handle;
---
>    struct 
>       FILE     handle;
266,267c266,267
<    struct {
<       FILE*     handle;
---
>    struct 
>            handle;
266,267c266,267
<    struct {
<       FILE*     handle;
---
>    struct 
>       FILE*     ;
266,267c266,267
<    struct {
<       FILE*     handle;
---
>    struct 
>       *     ;
266,267c266,267
<    struct {
<       FILE*     handle;
---
>    struct 
>       FILE     ;
266,267c266,267
<    struct {
<       FILE*     handle;
---
>    struct 
>            ;
267c267
<       FILE*     handle;
---
>       *     handle;
267c267
<       FILE*     handle;
---
>            handle;
267c267
<       FILE*     handle;
---
>       *     ;
267c267
<       FILE*     handle;
---
>            ;
267c267
<       FILE*     handle;
---
>       *     handle
267c267
<       FILE*     handle;
---
>            handle
267c267
<       FILE*     handle;
---
>       *     
267c267
<       FILE*     handle;
---
>            
267c267
<       FILE*     handle;
---
>       FILE     handle;
267c267
<       FILE*     handle;
---
>       FILE     ;
267c267
<       FILE*     handle;
---
>       FILE     handle
267c267
<       FILE*     handle;
---
>       FILE     
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE     handle;
>            bufN;
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE     ;
>            bufN;
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE     handle
>            bufN;
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE     
>            bufN;
267c267
<       FILE*     handle;
---
>       FILE*     ;
267c267
<       FILE*     handle;
---
>       FILE*     
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE*     ;
>            bufN;
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE*     
>            bufN;
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE*     ;
>       Int32     ;
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE*     
>       Int32     ;
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE*     ;
>            ;
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE*     
>            ;
267c267
<       FILE*     handle;
---
>       FILE*     handle
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE*     handle
>            bufN;
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE*     handle
>       Int32     ;
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE*     handle
>            ;
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE*     handle
>       Int32     bufN
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE*     handle
>            bufN
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE*     handle
>       Int32     
267,268c267,268
<       FILE*     handle;
<       Int32     bufN;
---
>       FILE*     handle
>            
(97.4 %, 5295 bytes)
268,270c268,270
<            ;
<    }
<    bzFile;
---
>            
>    
>    ;
268c268
<            ;
---
>            
270c270
<    bzFile;
---
>    bzFile
268,270c268,270
<            ;
<    }
<    bzFile;
---
>            
>    
>    bzFile
268c268
<            ;
---
>            
270c270
<    bzFile;
---
>    
268,270c268,270
<            ;
<    }
<    bzFile;
---
>            
>    
>    
269c269
<    }
---
>    
269,270c269,270
<    }
<    bzFile;
---
>    
>    ;
269,270c269,270
<    }
<    bzFile;
---
>    
>    bzFile
269,270c269,270
<    }
<    bzFile;
---
>    
>    
269c269
<    }
---
>    
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
269,270c269,270
<    }
<    bzFile;
---
>    
>    ;
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
269,270c269,270
<    }
<    bzFile;
---
>    
>    bzFile
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
269,270c269,270
<    }
<    bzFile;
---
>    
>    
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
270c270
<    bzFile;
---
>    ;
270c270
<    bzFile;
---
>    
270c270
<    bzFile;
---
>    ;
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
270c270
<    bzFile;
---
>    
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
270c270
<    bzFile;
---
>    ;
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_API(BZ2_bzWriteOpen) 
270c270
<    bzFile;
---
>    
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_API(BZ2_bzWriteOpen) 
270c270
<    bzFile;
---
>    ;
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  BZ_API(BZ2_bzWriteOpen) 
270c270
<    bzFile;
---
>    
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  BZ_API(BZ2_bzWriteOpen) 
270c270
<    bzFile;
---
>    bzFile
270c270
<    bzFile;
---
>    bzFile
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
270c270
<    bzFile;
---
>    bzFile
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE BZ_API(BZ2_bzWriteOpen) 
270c270
<    bzFile;
---
>    bzFile
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  BZ_API(BZ2_bzWriteOpen) 
270c270
<    bzFile;
---
>    bzFile
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* (BZ2_bzWriteOpen) 
270c270
<    bzFile;
---
>    bzFile
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * (BZ2_bzWriteOpen) 
270c270
<    bzFile;
---
>    bzFile
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE (BZ2_bzWriteOpen) 
270c270
<    bzFile;
---
>    bzFile
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  (BZ2_bzWriteOpen) 
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>  BZ_API(BZ2_bzWriteOpen) 
278c278
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * (BZ2_bzWriteOpen) 
(97.4 %, 5289 bytes)
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
>  BZ_API(BZ2_bzWriteOpen) 
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
>  (BZ2_bzWriteOpen) 
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
>  BZ_APIBZ2_bzWriteOpen) 
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
>  BZ2_bzWriteOpen) 
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
>  BZ_API() 
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
>  () 
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
>  BZ_API) 
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
>  ) 
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
> * (BZ2_bzWriteOpen) 
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
> * BZ2_bzWriteOpen) 
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
> * () 
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
> * ) 
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
> * (BZ2_bzWriteOpen 
278c278
< * BZ_API(BZ2_bzWriteOpen) 
---
> * BZ2_bzWriteOpen 
(97.4 %, 5283 bytes)
278c278
< * (BZ2_bzWriteOpen) 
---
> * BZ2_bzWriteOpen) 
278c278
< * (BZ2_bzWriteOpen) 
---
> * ) 
278c278
< * (BZ2_bzWriteOpen) 
---
> * BZ2_bzWriteOpen 
278c278
< * (BZ2_bzWriteOpen) 
---
> *  
278,279c278,279
< * (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> * BZ2_bzWriteOpen) 
>                      int*  bzerror,      
278,279c278,279
< * (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> * ) 
>                      int*  bzerror,      
278,279c278,279
< * (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> * BZ2_bzWriteOpen 
>                      int*  bzerror,      
278,279c278,279
< * (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> *  
>                      int*  bzerror,      
278c278
< * (BZ2_bzWriteOpen) 
---
> * () 
278c278
< * (BZ2_bzWriteOpen) 
---
> * ( 
278,279c278,279
< * (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> * () 
>                      int*  bzerror,      
(97.4 %, 5281 bytes)
278,279c278,279
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                     ( *  bzerror,      
278,279c278,279
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                      *  bzerror,      
278,279c278,279
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                     ( int  bzerror,      
278,279c278,279
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                      int  bzerror,      
278,279c278,279
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                     (   bzerror,      
278,279c278,279
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                        bzerror,      
279c279
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
279c279
<                     ( int*  bzerror,      
---
>                      *  bzerror,      
279c279
<                     ( int*  bzerror,      
---
>                      int  bzerror,      
279c279
<                     ( int*  bzerror,      
---
>                        bzerror,      
279c279
<                     ( int*  bzerror,      
---
>                      int*  ,      
279c279
<                     ( int*  bzerror,      
---
>                      *  ,      
279c279
<                     ( int*  bzerror,      
---
>                      int  ,      
279c279
<                     ( int*  bzerror,      
---
>                        ,      
279c279
<                     ( int*  bzerror,      
---
>                     ( *  bzerror,      
279c279
<                     ( int*  bzerror,      
---
>                     (   bzerror,      
279c279
<                     ( int*  bzerror,      
---
>                     ( *  ,      
279c279
<                     ( int*  bzerror,      
---
>                     (   ,      
279c279
<                     ( int*  bzerror,      
---
>                     ( *  bzerror      
279c279
<                     ( int*  bzerror,      
---
>                     (   bzerror      
279c279
<                     ( int*  bzerror,      
---
>                     ( *        
279c279
<                     ( int*  bzerror,      
---
>                     (         
279c279
<                     ( int*  bzerror,      
---
>                     ( int  bzerror,      
279c279
<                     ( int*  bzerror,      
---
>                     ( int  ,      
279c279
<                     ( int*  bzerror,      
---
>                     ( int  bzerror      
279c279
<                     ( int*  bzerror,      
---
>                     ( int        
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  bzerror,      
>                       * f, 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  ,      
>                       * f, 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  bzerror      
>                       * f, 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int        
>                       * f, 
279c279
<                     ( int*  bzerror,      
---
>                     ( int*  ,      
279c279
<                     ( int*  bzerror,      
---
>                     ( int*        
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                       * f, 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                       * f, 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                       FILE f, 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                       FILE f, 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                        f, 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                        f, 
279c279
<                     ( int*  bzerror,      
---
>                     ( int*  bzerror      
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       * f, 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       FILE f, 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                        f, 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       FILE* , 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       * , 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       FILE , 
279,280c279,280
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                        , 
280c280
<                       FILE* f, 
---
>                       * f, 
280c280
<                       FILE* f, 
---
>                        f, 
280c280
<                       FILE* f, 
---
>                       * , 
280c280
<                       FILE* f, 
---
>                        , 
280c280
<                       FILE* f, 
---
>                       * f 
280c280
<                       FILE* f, 
---
>                        f 
280c280
<                       FILE* f, 
---
>                       *  
280c280
<                       FILE* f, 
---
>                         
280c280
<                       FILE* f, 
---
>                       FILE f, 
280c280
<                       FILE* f, 
---
>                       FILE , 
280c280
<                       FILE* f, 
---
>                       FILE f 
280c280
<                       FILE* f, 
---
>                       FILE  
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE f, 
>                          blockSize100k, 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE , 
>                          blockSize100k, 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE f 
>                          blockSize100k, 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE  
>                          blockSize100k, 
280c280
<                       FILE* f, 
---
>                       FILE* , 
280c280
<                       FILE* f, 
---
>                       FILE*  
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                          blockSize100k, 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          blockSize100k, 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                       int   , 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                       int   , 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                          , 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          , 
280c280
<                       FILE* f, 
---
>                       FILE* f 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                          blockSize100k, 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                       int   , 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                          , 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                       int   blockSize100k 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                          blockSize100k 
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                       int    
280,281c280,281
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                           
281c281
<                       int   blockSize100k, 
---
>                          blockSize100k, 
281c281
<                       int   blockSize100k, 
---
>                          , 
281c281
<                       int   blockSize100k, 
---
>                          blockSize100k 
281c281
<                       int   blockSize100k, 
---
>                           
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          blockSize100k, 
>                          verbosity,
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          , 
>                          verbosity,
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          blockSize100k 
>                          verbosity,
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                           
>                          verbosity,
281c281
<                       int   blockSize100k, 
---
>                       int   , 
281c281
<                       int   blockSize100k, 
---
>                       int    
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                          verbosity,
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                          verbosity,
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                       int   ,
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                       int   ,
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                          ,
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                          ,
281c281
<                       int   blockSize100k, 
---
>                       int   blockSize100k 
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          verbosity,
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                       int   ,
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          ,
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                       int   verbosity
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          verbosity
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                       int   
281,282c281,282
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          
282c282
<                       int   verbosity,
---
>                          verbosity,
282c282
<                       int   verbosity,
---
>                          ,
282c282
<                       int   verbosity,
---
>                          verbosity
282c282
<                       int   verbosity,
---
>                          
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                          verbosity,
>                          workFactor )
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                          ,
>                          workFactor )
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                          verbosity
>                          workFactor )
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                          
>                          workFactor )
282c282
<                       int   verbosity,
---
>                       int   ,
282c282
<                       int   verbosity,
---
>                       int   
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                          workFactor )
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                          workFactor )
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                       int    )
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                       int    )
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                           )
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                           )
282c282
<                       int   verbosity,
---
>                       int   verbosity
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                          workFactor )
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                       int    )
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                           )
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                       int   workFactor 
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                          workFactor 
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                       int    
282,283c282,283
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                           
283c283
<                       int   workFactor )
---
>                          workFactor )
283c283
<                       int   workFactor )
---
>                           )
283c283
<                       int   workFactor )
---
>                          workFactor 
283c283
<                       int   workFactor )
---
>                           
283,284c283,284
<                       int   workFactor )
< {
---
>                          workFactor )
> 
283,284c283,284
<                       int   workFactor )
< {
---
>                           )
> 
283,284c283,284
<                       int   workFactor )
< {
---
>                          workFactor 
> 
283,284c283,284
<                       int   workFactor )
< {
---
>                           
> 
283c283
<                       int   workFactor )
---
>                       int    )
283c283
<                       int   workFactor )
---
>                       int    
283,284c283,284
<                       int   workFactor )
< {
---
>                       int    )
> 
283,284c283,284
<                       int   workFactor )
< {
---
>                       int    
> 
283c283
<                       int   workFactor )
---
>                       int    )
285c285
<    Int32   ret;
---
>       ret;
283c283
<                       int   workFactor )
---
>                       int    
285c285
<    Int32   ret;
---
>       ret;
283,285c283,285
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int    )
> 
>       ret;
283,285c283,285
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int    
> 
>       ret;
283c283
<                       int   workFactor )
---
>                       int   workFactor 
283,284c283,284
<                       int   workFactor )
< {
---
>                       int   workFactor 
> 
283c283
<                       int   workFactor )
---
>                       int   workFactor 
285c285
<    Int32   ret;
---
>       ret;
283,285c283,285
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   workFactor 
> 
>       ret;
283c283
<                       int   workFactor )
---
>                       int   workFactor 
285c285
<    Int32   ret;
---
>    Int32   ;
283,285c283,285
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   workFactor 
> 
>    Int32   ;
283c283
<                       int   workFactor )
---
>                       int   workFactor 
285c285
<    Int32   ret;
---
>       ;
283,285c283,285
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   workFactor 
> 
>       ;
284c284
< {
---
> 
284,285c284,285
< {
<    Int32   ret;
---
> 
>       ret;
284,285c284,285
< {
<    Int32   ret;
---
> 
>    Int32   ;
284,285c284,285
< {
<    Int32   ret;
---
> 
>       ;
284,285c284,285
< {
<    Int32   ret;
---
> 
>    Int32   ret
284,285c284,285
< {
<    Int32   ret;
---
> 
>       ret
284,285c284,285
< {
<    Int32   ret;
---
> 
>    Int32   
284,285c284,285
< {
<    Int32   ret;
---
> 
>       
285c285
<    Int32   ret;
---
>       ret;
285c285
<    Int32   ret;
---
>       ;
285c285
<    Int32   ret;
---
>       ret
285c285
<    Int32   ret;
---
>       
(97.4 %, 5273 bytes)
285,286c285,286
<       ;
<    bzFile* bzf = NULL;
---
>       
>    * bzf = NULL;
285,286c285,286
<       ;
<    bzFile* bzf = NULL;
---
>       
>    bzFile bzf = NULL;
285,286c285,286
<       ;
<    bzFile* bzf = NULL;
---
>       
>     bzf = NULL;
285,286c285,286
<       ;
<    bzFile* bzf = NULL;
---
>       
>    bzFile*  = NULL;
285,286c285,286
<       ;
<    bzFile* bzf = NULL;
---
>       
>    *  = NULL;
285,286c285,286
<       ;
<    bzFile* bzf = NULL;
---
>       
>    bzFile  = NULL;
285,286c285,286
<       ;
<    bzFile* bzf = NULL;
---
>       
>      = NULL;
286c286
<    bzFile* bzf = NULL;
---
>    * bzf = NULL;
286c286
<    bzFile* bzf = NULL;
---
>     bzf = NULL;
286c286
<    bzFile* bzf = NULL;
---
>    *  = NULL;
286c286
<    bzFile* bzf = NULL;
---
>      = NULL;
286c286
<    bzFile* bzf = NULL;
---
>    * bzf  NULL;
286c286
<    bzFile* bzf = NULL;
---
>     bzf  NULL;
286c286
<    bzFile* bzf = NULL;
---
>    *   NULL;
286c286
<    bzFile* bzf = NULL;
---
>       NULL;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile bzf = NULL;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile  = NULL;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile bzf  NULL;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile   NULL;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile bzf = ;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile  = ;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile bzf  ;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile   ;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile*  = NULL;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile*   NULL;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile*  = ;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile*   ;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile*  = NULL
286c286
<    bzFile* bzf = NULL;
---
>    bzFile*   NULL
286c286
<    bzFile* bzf = NULL;
---
>    bzFile*  = 
286c286
<    bzFile* bzf = NULL;
---
>    bzFile*   
286c286
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  NULL;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  ;
286c286
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  NULL
286c286
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  
286c286
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  NULL;
288c288
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
286c286
<    bzFile* bzf = NULL;
---
>    bzFile* bzf  ;
288c288
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
(97.4 %, 5268 bytes)
286c286
<    bzFile* bzf  ;
---
>    bzFile* bzf  
288c288
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
286c286
<    bzFile* bzf  ;
---
>    bzFile* bzf  
288c288
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERRBZ_OK);
286c286
<    bzFile* bzf  ;
---
>    bzFile* bzf  
288c288
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
286c286
<    bzFile* bzf  ;
---
>    bzFile* bzf  
288c288
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR();
286c286
<    bzFile* bzf  ;
---
>    bzFile* bzf  
288c288
<    BZ_SETERR(BZ_OK);
---
>    ();
286c286
<    bzFile* bzf  ;
---
>    bzFile* bzf  
288c288
<    BZ_SETERR(BZ_OK);
---
>    BZ_SETERR);
286c286
<    bzFile* bzf  ;
---
>    bzFile* bzf  
288c288
<    BZ_SETERR(BZ_OK);
---
>    );
288c288
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK);
288c288
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
288c288
<    BZ_SETERR(BZ_OK);
---
>    ();
288c288
<    BZ_SETERR(BZ_OK);
---
>    );
288c288
<    BZ_SETERR(BZ_OK);
---
>    (BZ_OK;
288c288
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK;
(97.4 %, 5259 bytes)
288c288
<    (BZ_OK);
---
>    BZ_OK);
288c288
<    (BZ_OK);
---
>    );
288c288
<    (BZ_OK);
---
>    BZ_OK;
288c288
<    (BZ_OK);
---
>    ;
(97.4 %, 5257 bytes)
288c288
<    BZ_OK;
---
>    ;
290c290
<    if (f == NULL ||
---
>     (f == NULL ||
288c288
<    BZ_OK;
---
>    
290c290
<    if (f == NULL ||
---
>     (f == NULL ||
288c288
<    BZ_OK;
---
>    ;
290c290
<    if (f == NULL ||
---
>    if f == NULL ||
288c288
<    BZ_OK;
---
>    
290c290
<    if (f == NULL ||
---
>    if f == NULL ||
288c288
<    BZ_OK;
---
>    ;
290c290
<    if (f == NULL ||
---
>     f == NULL ||
288c288
<    BZ_OK;
---
>    
290c290
<    if (f == NULL ||
---
>     f == NULL ||
288c288
<    BZ_OK;
---
>    BZ_OK
288c288
<    BZ_OK;
---
>    BZ_OK
290c290
<    if (f == NULL ||
---
>     (f == NULL ||
288c288
<    BZ_OK;
---
>    BZ_OK
290c290
<    if (f == NULL ||
---
>    if f == NULL ||
288c288
<    BZ_OK;
---
>    BZ_OK
290c290
<    if (f == NULL ||
---
>     f == NULL ||
288c288
<    BZ_OK;
---
>    BZ_OK
290c290
<    if (f == NULL ||
---
>    if ( == NULL ||
288c288
<    BZ_OK;
---
>    BZ_OK
290c290
<    if (f == NULL ||
---
>     ( == NULL ||
288c288
<    BZ_OK;
---
>    BZ_OK
290c290
<    if (f == NULL ||
---
>    if  == NULL ||
288c288
<    BZ_OK;
---
>    BZ_OK
290c290
<    if (f == NULL ||
---
>      == NULL ||
290c290
<    if (f == NULL ||
---
>     (f == NULL ||
290c290
<    if (f == NULL ||
---
>     f == NULL ||
290c290
<    if (f == NULL ||
---
>     ( == NULL ||
290c290
<    if (f == NULL ||
---
>      == NULL ||
290c290
<    if (f == NULL ||
---
>     (f  NULL ||
290c290
<    if (f == NULL ||
---
>     f  NULL ||
290c290
<    if (f == NULL ||
---
>     (  NULL ||
290c290
<    if (f == NULL ||
---
>       NULL ||
290c290
<    if (f == NULL ||
---
>    if f == NULL ||
290c290
<    if (f == NULL ||
---
>    if  == NULL ||
290c290
<    if (f == NULL ||
---
>    if f  NULL ||
290c290
<    if (f == NULL ||
---
>    if   NULL ||
290c290
<    if (f == NULL ||
---
>    if f ==  ||
290c290
<    if (f == NULL ||
---
>    if  ==  ||
290c290
<    if (f == NULL ||
---
>    if f   ||
290c290
<    if (f == NULL ||
---
>    if    ||
290c290
<    if (f == NULL ||
---
>    if ( == NULL ||
290c290
<    if (f == NULL ||
---
>    if (  NULL ||
290c290
<    if (f == NULL ||
---
>    if ( ==  ||
290c290
<    if (f == NULL ||
---
>    if (   ||
290c290
<    if (f == NULL ||
---
>    if ( == NULL 
290c290
<    if (f == NULL ||
---
>    if (  NULL 
290c290
<    if (f == NULL ||
---
>    if ( ==  
290c290
<    if (f == NULL ||
---
>    if (   
(97.4 %, 5254 bytes)
290c290
<    if (  NULL ||
---
>    if (   
290,291c290,291
<    if (  NULL ||
<        (90 || verbosity > 4))
---
>    if (   ||
>        90 || verbosity > 4))
290,291c290,291
<    if (  NULL ||
<        (90 || verbosity > 4))
---
>    if (   
>        90 || verbosity > 4))
290,291c290,291
<    if (  NULL ||
<        (90 || verbosity > 4))
---
>    if (   ||
>        ( || verbosity > 4))
290,291c290,291
<    if (  NULL ||
<        (90 || verbosity > 4))
---
>    if (   
>        ( || verbosity > 4))
290,291c290,291
<    if (  NULL ||
<        (90 || verbosity > 4))
---
>    if (   ||
>         || verbosity > 4))
290,291c290,291
<    if (  NULL ||
<        (90 || verbosity > 4))
---
>    if (   
>         || verbosity > 4))
290c290
<    if (  NULL ||
---
>    if (  NULL 
290,291c290,291
<    if (  NULL ||
<        (90 || verbosity > 4))
---
>    if (  NULL 
>        90 || verbosity > 4))
(97.4 %, 5248 bytes)
291c291
<        (90 || verbosity > 4))
---
>         || verbosity > 4))
291c291
<        (90 || verbosity > 4))
---
>        90  verbosity > 4))
291c291
<        (90 || verbosity > 4))
---
>          verbosity > 4))
291c291
<        (90 || verbosity > 4))
---
>        90 ||  > 4))
291c291
<        (90 || verbosity > 4))
---
>         ||  > 4))
291c291
<        (90 || verbosity > 4))
---
>        90   > 4))
291c291
<        (90 || verbosity > 4))
---
>           > 4))
291c291
<        (90 || verbosity > 4))
---
>        ( || verbosity > 4))
291c291
<        (90 || verbosity > 4))
---
>        (  verbosity > 4))
291c291
<        (90 || verbosity > 4))
---
>        ( ||  > 4))
291c291
<        (90 || verbosity > 4))
---
>        (   > 4))
291c291
<        (90 || verbosity > 4))
---
>        ( || verbosity  4))
291c291
<        (90 || verbosity > 4))
---
>        (  verbosity  4))
291c291
<        (90 || verbosity > 4))
---
>        ( ||   4))
291c291
<        (90 || verbosity > 4))
---
>        (    4))
(97.4 %, 5244 bytes)
291c291
<        (  verbosity > 4))
---
>        (    4))
291c291
<        (  verbosity > 4))
---
>        (   > ))
291c291
<        (  verbosity > 4))
---
>        (    ))
291c291
<        (  verbosity > 4))
---
>        (   > 4)
291c291
<        (  verbosity > 4))
---
>        (    4)
291c291
<        (  verbosity > 4))
---
>        (   > )
291c291
<        (  verbosity > 4))
---
>        (    )
291c291
<        (  verbosity > 4))
---
>        (  verbosity  4))
(97.4 %, 5234 bytes)
291c291
<        (    4))
---
>        (    )
291c291
<        (    4))
---
>        (    )
291c291
<        (    4))
---
>        (    
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    ))
>       ->handle        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    )
>       ->handle        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    )
>       ->handle        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    
>       ->handle        = bzf;   
291c291
<        (    4))
---
>        (    4)
291c291
<        (    4))
---
>        (    4
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    4)
>       ->handle        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    4
>       ->handle        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    4)
>       bzfhandle        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    4
>       bzfhandle        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    4)
>       handle        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    4
>       handle        = bzf;   
291c291
<        (    4))
---
>        (    4)
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    4)
>       ->handle        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    4)
>       bzfhandle        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    4)
>       handle        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    4)
>       bzf->        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    4)
>       ->        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    4)
>       bzf        = bzf;   
291,292c291,292
<        (    4))
<       bzf->handle        = bzf;   
---
>        (    4)
>               = bzf;   
292c292
<       bzf->handle        = bzf;   
---
>       ->handle        = bzf;   
292c292
<       bzf->handle        = bzf;   
---
>       handle        = bzf;   
292c292
<       bzf->handle        = bzf;   
---
>       ->        = bzf;   
292c292
<       bzf->handle        = bzf;   
---
>               = bzf;   
292c292
<       bzf->handle        = bzf;   
---
>       ->handle         bzf;   
292c292
<       bzf->handle        = bzf;   
---
>       handle         bzf;   
292c292
<       bzf->handle        = bzf;   
---
>       ->         bzf;   
292c292
<       bzf->handle        = bzf;   
---
>                bzf;   
292c292
<       bzf->handle        = bzf;   
---
>       bzfhandle        = bzf;   
292c292
<       bzf->handle        = bzf;   
---
>       bzf        = bzf;   
(97.5 %, 5222 bytes)
292,293c292
<                bzf;   
< }
---
>                   
298c297,298
< void BZ_API(BZ2_bzWrite)
---
> 
>  BZ_API(BZ2_bzWrite)
292c292
<                bzf;   
---
>                bzf   
292,293c292,293
<                bzf;   
< }
---
>                bzf   
> 
292c292
<                bzf;   
---
>                bzf   
298c298
< void BZ_API(BZ2_bzWrite)
---
>  BZ_API(BZ2_bzWrite)
292,293c292
<                bzf;   
< }
---
>                bzf   
298c297,298
< void BZ_API(BZ2_bzWrite)
---
> 
>  BZ_API(BZ2_bzWrite)
292c292
<                bzf;   
---
>                bzf   
298c298
< void BZ_API(BZ2_bzWrite)
---
> void (BZ2_bzWrite)
292,293c292
<                bzf;   
< }
---
>                bzf   
298c297,298
< void BZ_API(BZ2_bzWrite)
---
> 
> void (BZ2_bzWrite)
292c292
<                bzf;   
---
>                bzf   
298c298
< void BZ_API(BZ2_bzWrite)
---
>  (BZ2_bzWrite)
292,293c292
<                bzf;   
< }
---
>                bzf   
298c297,298
< void BZ_API(BZ2_bzWrite)
---
> 
>  (BZ2_bzWrite)
293c293
< }
---
> 
293d292
< }
298c297,298
< void BZ_API(BZ2_bzWrite)
---
> 
>  BZ_API(BZ2_bzWrite)
293d292
< }
298c297,298
< void BZ_API(BZ2_bzWrite)
---
> 
> void (BZ2_bzWrite)
293d292
< }
298c297,298
< void BZ_API(BZ2_bzWrite)
---
> 
>  (BZ2_bzWrite)
293d292
< }
298c297,298
< void BZ_API(BZ2_bzWrite)
---
> 
> void BZ_APIBZ2_bzWrite)
293d292
< }
298c297,298
< void BZ_API(BZ2_bzWrite)
---
> 
>  BZ_APIBZ2_bzWrite)
293d292
< }
298c297,298
< void BZ_API(BZ2_bzWrite)
---
> 
> void BZ2_bzWrite)
293d292
< }
298c297,298
< void BZ_API(BZ2_bzWrite)
---
> 
>  BZ2_bzWrite)
298c298
< void BZ_API(BZ2_bzWrite)
---
>  BZ_API(BZ2_bzWrite)
298c298
< void BZ_API(BZ2_bzWrite)
---
>  (BZ2_bzWrite)
(97.5 %, 5218 bytes)
298c298
<  BZ_API(BZ2_bzWrite)
---
>  (BZ2_bzWrite)
298c298
<  BZ_API(BZ2_bzWrite)
---
>  BZ2_bzWrite)
298c298
<  BZ_API(BZ2_bzWrite)
---
>  ()
298c298
<  BZ_API(BZ2_bzWrite)
---
>  )
298c298
<  BZ_API(BZ2_bzWrite)
---
>  (BZ2_bzWrite
298c298
<  BZ_API(BZ2_bzWrite)
---
>  BZ2_bzWrite
(97.5 %, 5212 bytes)
298c298
<  (BZ2_bzWrite)
---
>  BZ2_bzWrite)
298c298
<  (BZ2_bzWrite)
---
>  )
298c298
<  (BZ2_bzWrite)
---
>  BZ2_bzWrite
298c298
<  (BZ2_bzWrite)
---
>  
298,299c298,299
<  (BZ2_bzWrite)
<              ( int*    len )
---
>  BZ2_bzWrite)
>               int*    len )
298,299c298,299
<  (BZ2_bzWrite)
<              ( int*    len )
---
>  )
>               int*    len )
298,299c298,299
<  (BZ2_bzWrite)
<              ( int*    len )
---
>  BZ2_bzWrite
>               int*    len )
298,299c298,299
<  (BZ2_bzWrite)
<              ( int*    len )
---
>  
>               int*    len )
298c298
<  (BZ2_bzWrite)
---
>  ()
298c298
<  (BZ2_bzWrite)
---
>  (
(97.5 %, 5210 bytes)
298,299c298,299
<  BZ2_bzWrite
<              ( int*    len )
---
>  
>              ( *    len )
298,299c298,299
<  BZ2_bzWrite
<              ( int*    len )
---
>  
>               *    len )
298,299c298,299
<  BZ2_bzWrite
<              ( int*    len )
---
>  
>              ( int    len )
298,299c298,299
<  BZ2_bzWrite
<              ( int*    len )
---
>  
>               int    len )
298,299c298,299
<  BZ2_bzWrite
<              ( int*    len )
---
>  
>              (     len )
298,299c298,299
<  BZ2_bzWrite
<              ( int*    len )
---
>  
>                   len )
299c299
<              ( int*    len )
---
>               int*    len )
299c299
<              ( int*    len )
---
>               *    len )
299c299
<              ( int*    len )
---
>               int    len )
299c299
<              ( int*    len )
---
>                   len )
299c299
<              ( int*    len )
---
>               int*     )
299c299
<              ( int*    len )
---
>               *     )
299c299
<              ( int*    len )
---
>               int     )
299c299
<              ( int*    len )
---
>                    )
299c299
<              ( int*    len )
---
>              ( *    len )
299c299
<              ( int*    len )
---
>              (     len )
299c299
<              ( int*    len )
---
>              ( *     )
299c299
<              ( int*    len )
---
>              (      )
(97.5 %, 5206 bytes)
299c299
<              (     len )
---
>              (      
299,300c299,300
<              (     len )
< {
---
>              (      )
> 
299,300c299,300
<              (     len )
< {
---
>              (      
> 
299c299
<              (     len )
---
>              (      )
301c301
<    ;
---
>    
299c299
<              (     len )
---
>              (      
301c301
<    ;
---
>    
299,301c299,301
<              (     len )
< {
<    ;
---
>              (      )
> 
>    
299,301c299,301
<              (     len )
< {
<    ;
---
>              (      
> 
>    
299c299
<              (     len )
---
>              (     len 
299,300c299,300
<              (     len )
< {
---
>              (     len 
> 
299c299
<              (     len )
---
>              (     len 
301c301
<    ;
---
>    
299,301c299,301
<              (     len )
< {
<    ;
---
>              (     len 
> 
>    
299c299
<              (     len )
---
>              (     len 
303c303
<    BZ_SETERR()
---
>    ()
(97.5 %, 5202 bytes)
299c299
<              (      )
---
>              (      
303c303
<    BZ_SETERR()
---
>    BZ_SETERR)
299,300c299,300
<              (      )
< {
---
>              (      
> 
303c303
<    BZ_SETERR()
---
>    BZ_SETERR)
299c299
<              (      )
---
>              (      
303c303
<    BZ_SETERR()
---
>    )
299,300c299,300
<              (      )
< {
---
>              (      
> 
303c303
<    BZ_SETERR()
---
>    )
300c300
< {
---
> 
300c300
< {
---
> 
303c303
<    BZ_SETERR()
---
>    ()
300c300
< {
---
> 
303c303
<    BZ_SETERR()
---
>    BZ_SETERR)
300c300
< {
---
> 
303c303
<    BZ_SETERR()
---
>    )
300c300
< {
---
> 
303c303
<    BZ_SETERR()
---
>    BZ_SETERR(
300c300
< {
---
> 
303c303
<    BZ_SETERR()
---
>    (
300c300
< {
---
> 
303c303
<    BZ_SETERR()
---
>    BZ_SETERR
300c300
< {
---
> 
303c303
<    BZ_SETERR()
---
>    
303c303
<    BZ_SETERR()
---
>    ()
303c303
<    BZ_SETERR()
---
>    )
303c303
<    BZ_SETERR()
---
>    (
303c303
<    BZ_SETERR()
---
>    
303,304c303,304
<    BZ_SETERR()
<          ;
---
>    ()
>          
303,304c303,304
<    BZ_SETERR()
<          ;
---
>    )
>          
303,304c303,304
<    BZ_SETERR()
<          ;
---
>    (
>          
303,304c303,304
<    BZ_SETERR()
<          ;
---
>    
>          
(97.5 %, 5191 bytes)
304c304
<          ;
---
>          
306d305
< }
310c309,310
< void BZ_API(BZ2_bzWriteClose)
---
> 
>  BZ_API(BZ2_bzWriteClose)
304c304
<          ;
---
>          
310c310
< void BZ_API(BZ2_bzWriteClose)
---
> void (BZ2_bzWriteClose)
304c304
<          ;
---
>          
306d305
< }
310c309,310
< void BZ_API(BZ2_bzWriteClose)
---
> 
> void (BZ2_bzWriteClose)
304c304
<          ;
---
>          
310c310
< void BZ_API(BZ2_bzWriteClose)
---
>  (BZ2_bzWriteClose)
(97.5 %, 5184 bytes)
306d305
< }
310c309,310
< void (BZ2_bzWriteClose)
---
> 
> void ()
306d305
< }
310c309,310
< void (BZ2_bzWriteClose)
---
> 
>  ()
306d305
< }
310c309,310
< void (BZ2_bzWriteClose)
---
> 
> void )
306d305
< }
310c309,310
< void (BZ2_bzWriteClose)
---
> 
>  )
310c310
< void (BZ2_bzWriteClose)
---
>  (BZ2_bzWriteClose)
310c310
< void (BZ2_bzWriteClose)
---
>  BZ2_bzWriteClose)
310c310
< void (BZ2_bzWriteClose)
---
>  ()
310c310
< void (BZ2_bzWriteClose)
---
>  )
310c310
< void (BZ2_bzWriteClose)
---
>  (BZ2_bzWriteClose
310c310
< void (BZ2_bzWriteClose)
---
>  BZ2_bzWriteClose
310c310
< void (BZ2_bzWriteClose)
---
>  (
310c310
< void (BZ2_bzWriteClose)
---
>  
310c310
< void (BZ2_bzWriteClose)
---
> void BZ2_bzWriteClose)
310c310
< void (BZ2_bzWriteClose)
---
> void )
310c310
< void (BZ2_bzWriteClose)
---
> void BZ2_bzWriteClose
310c310
< void (BZ2_bzWriteClose)
---
> void 
310,311c310,311
< void (BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ2_bzWriteClose)
>                    int*          bzerror, 
310,311c310,311
< void (BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void )
>                    int*          bzerror, 
310,311c310,311
< void (BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ2_bzWriteClose
>                    int*          bzerror, 
310,311c310,311
< void (BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void 
>                    int*          bzerror, 
310c310
< void (BZ2_bzWriteClose)
---
> void ()
310c310
< void (BZ2_bzWriteClose)
---
> void (
(97.5 %, 5182 bytes)
310,311c310,311
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   ( *          bzerror, 
310,311c310,311
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                    *          bzerror, 
310,311c310,311
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   ( int          bzerror, 
310,311c310,311
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                    int          bzerror, 
310,311c310,311
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   (           bzerror, 
310,311c310,311
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                              bzerror, 
311c311
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
311c311
<                   ( int*          bzerror, 
---
>                    *          bzerror, 
311c311
<                   ( int*          bzerror, 
---
>                    int          bzerror, 
311c311
<                   ( int*          bzerror, 
---
>                              bzerror, 
311c311
<                   ( int*          bzerror, 
---
>                    int*          , 
311c311
<                   ( int*          bzerror, 
---
>                    *          , 
311c311
<                   ( int*          bzerror, 
---
>                    int          , 
311c311
<                   ( int*          bzerror, 
---
>                              , 
311c311
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
311c311
<                   ( int*          bzerror, 
---
>                   (           bzerror, 
311c311
<                   ( int*          bzerror, 
---
>                   ( *          , 
311c311
<                   ( int*          bzerror, 
---
>                   (           , 
311c311
<                   ( int*          bzerror, 
---
>                   ( *          bzerror 
311c311
<                   ( int*          bzerror, 
---
>                   (           bzerror 
311c311
<                   ( int*          bzerror, 
---
>                   ( *           
311c311
<                   ( int*          bzerror, 
---
>                   (            
311c311
<                   ( int*          bzerror, 
---
>                   ( int          bzerror, 
311c311
<                   ( int*          bzerror, 
---
>                   ( int          , 
311c311
<                   ( int*          bzerror, 
---
>                   ( int          bzerror 
311c311
<                   ( int*          bzerror, 
---
>                   ( int           
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror, 
>                     *       b, 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          , 
>                     *       b, 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror 
>                     *       b, 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int           
>                     *       b, 
311c311
<                   ( int*          bzerror, 
---
>                   ( int*          , 
311c311
<                   ( int*          bzerror, 
---
>                   ( int*           
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     *       b, 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     *       b, 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     BZFILE       b, 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE       b, 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                            b, 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                            b, 
311c311
<                   ( int*          bzerror, 
---
>                   ( int*          bzerror 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       b, 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       b, 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            b, 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE*       , 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       , 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       , 
311,312c311,312
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            , 
312c312
<                     BZFILE*       b, 
---
>                     *       b, 
312c312
<                     BZFILE*       b, 
---
>                            b, 
312c312
<                     BZFILE*       b, 
---
>                     *       , 
312c312
<                     BZFILE*       b, 
---
>                            , 
312c312
<                     BZFILE*       b, 
---
>                     *       b 
312c312
<                     BZFILE*       b, 
---
>                            b 
312c312
<                     BZFILE*       b, 
---
>                     *        
312c312
<                     BZFILE*       b, 
---
>                             
312c312
<                     BZFILE*       b, 
---
>                     BZFILE       b, 
312c312
<                     BZFILE*       b, 
---
>                     BZFILE       , 
312c312
<                     BZFILE*       b, 
---
>                     BZFILE       b 
312c312
<                     BZFILE*       b, 
---
>                     BZFILE        
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b, 
>                                abandon,
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                abandon,
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon,
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                abandon,
312c312
<                     BZFILE*       b, 
---
>                     BZFILE*       , 
312c312
<                     BZFILE*       b, 
---
>                     BZFILE*        
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       , 
>                                abandon,
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*        
>                                abandon,
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       , 
>                     int           ,
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*        
>                     int           ,
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       , 
>                                ,
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*        
>                                ,
312c312
<                     BZFILE*       b, 
---
>                     BZFILE*       b 
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                                abandon,
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                     int           ,
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                                ,
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                     int           abandon
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                                abandon
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                     int           
312,313c312,313
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                                
313c313
<                     int           abandon,
---
>                                abandon,
313c313
<                     int           abandon,
---
>                                ,
313c313
<                     int           abandon,
---
>                                abandon
313c313
<                     int           abandon,
---
>                                
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                abandon,
>                      int* nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                ,
>                      int* nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                abandon
>                      int* nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                                
>                      int* nbytes_in,
313c313
<                     int           abandon,
---
>                     int           ,
313c313
<                     int           abandon,
---
>                     int           
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
>                      int* nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           
>                      int* nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
>                     unsigned * nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           
>                     unsigned * nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
>                      * nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           
>                      * nbytes_in,
313c313
<                     int           abandon,
---
>                     int           abandon
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                      int* nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                     unsigned * nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                      * nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                     unsigned int nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                      int nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                     unsigned  nbytes_in,
313,314c313,314
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandon
>                       nbytes_in,
314c314
<                     unsigned int* nbytes_in,
---
>                      int* nbytes_in,
314c314
<                     unsigned int* nbytes_in,
---
>                      * nbytes_in,
314c314
<                     unsigned int* nbytes_in,
---
>                      int nbytes_in,
314c314
<                     unsigned int* nbytes_in,
---
>                       nbytes_in,
314c314
<                     unsigned int* nbytes_in,
---
>                      int* ,
314c314
<                     unsigned int* nbytes_in,
---
>                      * ,
314c314
<                     unsigned int* nbytes_in,
---
>                      int ,
314c314
<                     unsigned int* nbytes_in,
---
>                       ,
314c314
<                     unsigned int* nbytes_in,
---
>                     unsigned * nbytes_in,
314c314
<                     unsigned int* nbytes_in,
---
>                     unsigned  nbytes_in,
314c314
<                     unsigned int* nbytes_in,
---
>                     unsigned * ,
314c314
<                     unsigned int* nbytes_in,
---
>                     unsigned  ,
314c314
<                     unsigned int* nbytes_in,
---
>                     unsigned * nbytes_in
314c314
<                     unsigned int* nbytes_in,
---
>                     unsigned  nbytes_in
314c314
<                     unsigned int* nbytes_in,
---
>                     unsigned * 
314c314
<                     unsigned int* nbytes_in,
---
>                     unsigned  
314c314
<                     unsigned int* nbytes_in,
---
>                     unsigned int nbytes_in,
(97.5 %, 5179 bytes)
314c314
<                     unsigned * nbytes_in,
---
>                     unsigned  nbytes_in,
314c314
<                     unsigned * nbytes_in,
---
>                     unsigned  ,
314c314
<                     unsigned * nbytes_in,
---
>                     unsigned  nbytes_in
314c314
<                     unsigned * nbytes_in,
---
>                     unsigned  
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_in,
>                      int* nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  ,
>                      int* nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_in
>                      int* nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned  
>                      int* nbytes_out )
314c314
<                     unsigned * nbytes_in,
---
>                     unsigned * ,
314c314
<                     unsigned * nbytes_in,
---
>                     unsigned * 
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * ,
>                      int* nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                      int* nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * ,
>                     unsigned * nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                     unsigned * nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * ,
>                      * nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * 
>                      * nbytes_out )
314c314
<                     unsigned * nbytes_in,
---
>                     unsigned * nbytes_in
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                      int* nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                     unsigned * nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                      * nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                     unsigned int nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                      int nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                     unsigned  nbytes_out )
314,315c314,315
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_in
>                       nbytes_out )
315c315
<                     unsigned int* nbytes_out )
---
>                      int* nbytes_out )
315c315
<                     unsigned int* nbytes_out )
---
>                      * nbytes_out )
315c315
<                     unsigned int* nbytes_out )
---
>                      int nbytes_out )
315c315
<                     unsigned int* nbytes_out )
---
>                       nbytes_out )
315c315
<                     unsigned int* nbytes_out )
---
>                      int*  )
315c315
<                     unsigned int* nbytes_out )
---
>                      *  )
315c315
<                     unsigned int* nbytes_out )
---
>                      int  )
315c315
<                     unsigned int* nbytes_out )
---
>                        )
315c315
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out )
315c315
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_out )
315c315
<                     unsigned int* nbytes_out )
---
>                     unsigned *  )
315c315
<                     unsigned int* nbytes_out )
---
>                     unsigned   )
315c315
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out 
315c315
<                     unsigned int* nbytes_out )
---
>                     unsigned  nbytes_out 
315c315
<                     unsigned int* nbytes_out )
---
>                     unsigned *  
315c315
<                     unsigned int* nbytes_out )
---
>                     unsigned   
315c315
<                     unsigned int* nbytes_out )
---
>                     unsigned int nbytes_out )
(97.5 %, 5176 bytes)
315c315
<                     unsigned * nbytes_out )
---
>                     unsigned  nbytes_out )
315c315
<                     unsigned * nbytes_out )
---
>                     unsigned   )
315c315
<                     unsigned * nbytes_out )
---
>                     unsigned  nbytes_out 
315c315
<                     unsigned * nbytes_out )
---
>                     unsigned   
315,316c315,316
<                     unsigned * nbytes_out )
< {
---
>                     unsigned  nbytes_out )
> 
315,316c315,316
<                     unsigned * nbytes_out )
< {
---
>                     unsigned   )
> 
315,316c315,316
<                     unsigned * nbytes_out )
< {
---
>                     unsigned  nbytes_out 
> 
315,316c315,316
<                     unsigned * nbytes_out )
< {
---
>                     unsigned   
> 
315c315
<                     unsigned * nbytes_out )
---
>                     unsigned *  )
315c315
<                     unsigned * nbytes_out )
---
>                     unsigned *  
315,316c315,316
<                     unsigned * nbytes_out )
< {
---
>                     unsigned *  )
> 
315,316c315,316
<                     unsigned * nbytes_out )
< {
---
>                     unsigned *  
> 
315c315
<                     unsigned * nbytes_out )
---
>                     unsigned *  )
317c317
<    BZ2_bzWriteClose64 ;
---
>     ;
315c315
<                     unsigned * nbytes_out )
---
>                     unsigned *  
317c317
<    BZ2_bzWriteClose64 ;
---
>     ;
315,317c315,317
<                     unsigned * nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     unsigned *  )
> 
>     ;
315,317c315,317
<                     unsigned * nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     unsigned *  
> 
>     ;
315c315
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
315,316c315,316
<                     unsigned * nbytes_out )
< {
---
>                     unsigned * nbytes_out 
> 
315c315
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
317c317
<    BZ2_bzWriteClose64 ;
---
>     ;
315,317c315,317
<                     unsigned * nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     unsigned * nbytes_out 
> 
>     ;
315c315
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
317c317
<    BZ2_bzWriteClose64 ;
---
>    BZ2_bzWriteClose64 
315,317c315,317
<                     unsigned * nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     unsigned * nbytes_out 
> 
>    BZ2_bzWriteClose64 
315c315
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
317c317
<    BZ2_bzWriteClose64 ;
---
>     
315,317c315,317
<                     unsigned * nbytes_out )
< {
<    BZ2_bzWriteClose64 ;
---
>                     unsigned * nbytes_out 
> 
>     
316c316
< {
---
> 
316,317c316,317
< {
<    BZ2_bzWriteClose64 ;
---
> 
>     ;
316,317c316,317
< {
<    BZ2_bzWriteClose64 ;
---
> 
>    BZ2_bzWriteClose64 
316,317c316,317
< {
<    BZ2_bzWriteClose64 ;
---
> 
>     
316c316
< {
---
> 
318c318
< }
---
> 
316,318c316,318
< {
<    BZ2_bzWriteClose64 ;
< }
---
> 
>     ;
> 
316,318c316,318
< {
<    BZ2_bzWriteClose64 ;
< }
---
> 
>    BZ2_bzWriteClose64 
> 
316,318c316,318
< {
<    BZ2_bzWriteClose64 ;
< }
---
> 
>     
> 
317c317
<    BZ2_bzWriteClose64 ;
---
>     ;
(97.5 %, 5156 bytes)
317c317
<     ;
---
>     
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_APIBZ2_bzWriteClose64)
317c317
<     ;
---
>     
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64)
317c317
<     ;
---
>     
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ2_bzWriteClose64)
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_API(BZ2_bzWriteClose64)
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
>  (BZ2_bzWriteClose64)
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_APIBZ2_bzWriteClose64)
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ2_bzWriteClose64)
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_API()
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
>  ()
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
>  BZ_API)
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
>  )
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
> void (BZ2_bzWriteClose64)
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64)
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
> void ()
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
> void )
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
> void (BZ2_bzWriteClose64
321c321
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64
(97.5 %, 5150 bytes)
321c321
< void (BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64)
321c321
< void (BZ2_bzWriteClose64)
---
> void )
321c321
< void (BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64
321c321
< void (BZ2_bzWriteClose64)
---
> void 
321,322c321,322
< void (BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ2_bzWriteClose64)
>                    int*          bzerror, 
321,322c321,322
< void (BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void )
>                    int*          bzerror, 
321,322c321,322
< void (BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ2_bzWriteClose64
>                    int*          bzerror, 
321,322c321,322
< void (BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void 
>                    int*          bzerror, 
321c321
< void (BZ2_bzWriteClose64)
---
> void ()
321c321
< void (BZ2_bzWriteClose64)
---
> void (
321,322c321,322
< void (BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void ()
>                    int*          bzerror, 
(97.5 %, 5148 bytes)
321,322c321,322
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                   ( *          bzerror, 
321,322c321,322
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                    *          bzerror, 
321,322c321,322
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                   ( int          bzerror, 
321,322c321,322
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                    int          bzerror, 
321,322c321,322
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                   (           bzerror, 
321,322c321,322
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                              bzerror, 
322c322
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
322c322
<                   ( int*          bzerror, 
---
>                    *          bzerror, 
322c322
<                   ( int*          bzerror, 
---
>                    int          bzerror, 
322c322
<                   ( int*          bzerror, 
---
>                              bzerror, 
322c322
<                   ( int*          bzerror, 
---
>                    int*          , 
322c322
<                   ( int*          bzerror, 
---
>                    *          , 
322c322
<                   ( int*          bzerror, 
---
>                    int          , 
322c322
<                   ( int*          bzerror, 
---
>                              , 
322c322
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
322c322
<                   ( int*          bzerror, 
---
>                   (           bzerror, 
322c322
<                   ( int*          bzerror, 
---
>                   ( *          , 
322c322
<                   ( int*          bzerror, 
---
>                   (           , 
322c322
<                   ( int*          bzerror, 
---
>                   ( *          bzerror 
322c322
<                   ( int*          bzerror, 
---
>                   (           bzerror 
322c322
<                   ( int*          bzerror, 
---
>                   ( *           
322c322
<                   ( int*          bzerror, 
---
>                   (            
322c322
<                   ( int*          bzerror, 
---
>                   ( int          bzerror, 
322c322
<                   ( int*          bzerror, 
---
>                   ( int          , 
322c322
<                   ( int*          bzerror, 
---
>                   ( int          bzerror 
322c322
<                   ( int*          bzerror, 
---
>                   ( int           
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror, 
>                     *       b, 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          , 
>                     *       b, 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror 
>                     *       b, 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int           
>                     *       b, 
322c322
<                   ( int*          bzerror, 
---
>                   ( int*          , 
322c322
<                   ( int*          bzerror, 
---
>                   ( int*           
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     *       b, 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     *       b, 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     BZFILE       b, 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE       b, 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                            b, 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                            b, 
322c322
<                   ( int*          bzerror, 
---
>                   ( int*          bzerror 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       b, 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       b, 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            b, 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE*       , 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       , 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       , 
322,323c322,323
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            , 
323c323
<                     BZFILE*       b, 
---
>                     *       b, 
323c323
<                     BZFILE*       b, 
---
>                            b, 
323c323
<                     BZFILE*       b, 
---
>                     *       , 
323c323
<                     BZFILE*       b, 
---
>                            , 
323c323
<                     BZFILE*       b, 
---
>                     *       b 
323c323
<                     BZFILE*       b, 
---
>                            b 
323c323
<                     BZFILE*       b, 
---
>                     *        
323c323
<                     BZFILE*       b, 
---
>                             
323c323
<                     BZFILE*       b, 
---
>                     BZFILE       b, 
323c323
<                     BZFILE*       b, 
---
>                     BZFILE       , 
323c323
<                     BZFILE*       b, 
---
>                     BZFILE       b 
323c323
<                     BZFILE*       b, 
---
>                     BZFILE        
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b, 
>                                abandon,
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                abandon,
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon,
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                abandon,
323c323
<                     BZFILE*       b, 
---
>                     BZFILE*       , 
323c323
<                     BZFILE*       b, 
---
>                     BZFILE*        
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       , 
>                                abandon,
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*        
>                                abandon,
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       , 
>                     int           ,
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*        
>                     int           ,
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       , 
>                                ,
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*        
>                                ,
323c323
<                     BZFILE*       b, 
---
>                     BZFILE*       b 
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                                abandon,
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                     int           ,
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                                ,
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                     int           abandon
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                                abandon
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                     int           
323,324c323,324
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       b 
>                                
324c324
<                     int           abandon,
---
>                                abandon,
324c324
<                     int           abandon,
---
>                                ,
324c324
<                     int           abandon,
---
>                                abandon
324c324
<                     int           abandon,
---
>                                
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                                abandon,
>                      int* nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                                ,
>                      int* nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                                abandon
>                      int* nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                                
>                      int* nbytes_in_lo32,
324c324
<                     int           abandon,
---
>                     int           ,
324c324
<                     int           abandon,
---
>                     int           
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
>                      int* nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                      int* nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
>                     unsigned * nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                     unsigned * nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
>                      * nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           
>                      * nbytes_in_lo32,
324c324
<                     int           abandon,
---
>                     int           abandon
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                      int* nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                     unsigned * nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                      * nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                     unsigned int nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                      int nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                     unsigned  nbytes_in_lo32,
324,325c324,325
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandon
>                       nbytes_in_lo32,
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                      int* nbytes_in_lo32,
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                      * nbytes_in_lo32,
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                      int nbytes_in_lo32,
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                       nbytes_in_lo32,
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                      int* ,
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                      * ,
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                      int ,
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                       ,
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32,
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned  nbytes_in_lo32,
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * ,
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned  ,
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned  nbytes_in_lo32
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * 
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned  
325c325
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned int nbytes_in_lo32,
(97.5 %, 5145 bytes)
325c325
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  nbytes_in_lo32,
325c325
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  ,
325c325
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  nbytes_in_lo32
325c325
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  nbytes_in_lo32,
>                      int* nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  ,
>                      int* nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  nbytes_in_lo32
>                      int* nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  
>                      int* nbytes_in_hi32,
325c325
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * ,
325c325
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * 
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * ,
>                      int* nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                      int* nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * ,
>                     unsigned * nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                     unsigned * nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * ,
>                      * nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
>                      * nbytes_in_hi32,
325c325
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                      int* nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                     unsigned * nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                      * nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                     unsigned int nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                      int nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                     unsigned  nbytes_in_hi32,
325,326c325,326
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                       nbytes_in_hi32,
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                      int* nbytes_in_hi32,
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                      * nbytes_in_hi32,
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                      int nbytes_in_hi32,
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                       nbytes_in_hi32,
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                      int* ,
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                      * ,
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                      int ,
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                       ,
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32,
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  nbytes_in_hi32,
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * ,
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  ,
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  nbytes_in_hi32
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * 
326c326
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned  
(97.5 %, 5142 bytes)
326c326
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  nbytes_in_hi32,
326c326
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  ,
326c326
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  nbytes_in_hi32
326c326
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  nbytes_in_hi32,
>                      int* nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  ,
>                      int* nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  nbytes_in_hi32
>                      int* nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  
>                      int* nbytes_out_lo32,
326c326
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * ,
326c326
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * 
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * ,
>                      int* nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                      int* nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * ,
>                     unsigned * nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                     unsigned * nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * ,
>                      * nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
>                      * nbytes_out_lo32,
326c326
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                      int* nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                     unsigned * nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                      * nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                     unsigned int nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                      int nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                     unsigned  nbytes_out_lo32,
326,327c326,327
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                       nbytes_out_lo32,
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                      int* nbytes_out_lo32,
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                      * nbytes_out_lo32,
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                      int nbytes_out_lo32,
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                       nbytes_out_lo32,
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                      int* ,
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                      * ,
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                      int ,
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                       ,
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  nbytes_out_lo32,
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * ,
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  ,
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  nbytes_out_lo32
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * 
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned  
327c327
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int nbytes_out_lo32,
(97.5 %, 5139 bytes)
327c327
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  nbytes_out_lo32,
327c327
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  ,
327c327
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  nbytes_out_lo32
327c327
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_lo32,
>                      int* nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  ,
>                      int* nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_lo32
>                      int* nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  
>                      int* nbytes_out_hi32 )
327c327
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * ,
327c327
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * 
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * ,
>                      int* nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                      int* nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * ,
>                     unsigned * nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                     unsigned * nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * ,
>                      * nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * 
>                      * nbytes_out_hi32 )
327c327
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                      int* nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                     unsigned * nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                      * nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                     unsigned int nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                      int nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                     unsigned  nbytes_out_hi32 )
327,328c327,328
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                       nbytes_out_hi32 )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                      int* nbytes_out_hi32 )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                      * nbytes_out_hi32 )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                      int nbytes_out_hi32 )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                       nbytes_out_hi32 )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                      int*  )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                      *  )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                      int  )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                        )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_hi32 )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned *  )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned   )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_hi32 
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned *  
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned   
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int nbytes_out_hi32 )
328c328
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int  )
(97.5 %, 5136 bytes)
328c328
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_hi32 )
328c328
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned   )
328c328
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_hi32 
328c328
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned   
328,329c328,329
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned  nbytes_out_hi32 )
> 
328,329c328,329
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned   )
> 
328,329c328,329
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned  nbytes_out_hi32 
> 
328,329c328,329
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned   
> 
328c328
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  )
328c328
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  
328,329c328,329
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned *  )
> 
328,329c328,329
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned *  
> 
328c328
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  )
331c331
<    bzFile* bzf ;
---
>    * bzf ;
328c328
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  
331c331
<    bzFile* bzf ;
---
>    * bzf ;
328,329c328,329
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned *  )
> 
331c331
<    bzFile* bzf ;
---
>    * bzf ;
328,329c328,329
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned *  
> 
331c331
<    bzFile* bzf ;
---
>    * bzf ;
328c328
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
328,329c328,329
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_out_hi32 
> 
328c328
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
331c331
<    bzFile* bzf ;
---
>    * bzf ;
328,329c328,329
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_out_hi32 
> 
331c331
<    bzFile* bzf ;
---
>    * bzf ;
328c328
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
331c331
<    bzFile* bzf ;
---
>    bzFile bzf ;
328,329c328,329
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_out_hi32 
> 
331c331
<    bzFile* bzf ;
---
>    bzFile bzf ;
328c328
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
331c331
<    bzFile* bzf ;
---
>     bzf ;
328,329c328,329
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_out_hi32 
> 
331c331
<    bzFile* bzf ;
---
>     bzf ;
329c329
< {
---
> 
329c329
< {
---
> 
331c331
<    bzFile* bzf ;
---
>    * bzf ;
329c329
< {
---
> 
331c331
<    bzFile* bzf ;
---
>    bzFile bzf ;
329c329
< {
---
> 
331c331
<    bzFile* bzf ;
---
>     bzf ;
329c329
< {
---
> 
331c331
<    bzFile* bzf ;
---
>    bzFile*  ;
329c329
< {
---
> 
331c331
<    bzFile* bzf ;
---
>    *  ;
329c329
< {
---
> 
331c331
<    bzFile* bzf ;
---
>    bzFile  ;
329c329
< {
---
> 
331c331
<    bzFile* bzf ;
---
>      ;
331c331
<    bzFile* bzf ;
---
>    * bzf ;
331c331
<    bzFile* bzf ;
---
>     bzf ;
331c331
<    bzFile* bzf ;
---
>    *  ;
331c331
<    bzFile* bzf ;
---
>      ;
331c331
<    bzFile* bzf ;
---
>    * bzf 
331c331
<    bzFile* bzf ;
---
>     bzf 
331c331
<    bzFile* bzf ;
---
>    *  
331c331
<    bzFile* bzf ;
---
>      
(97.5 %, 5126 bytes)
331,332c331,332
<      ;
<    0;
---
>      
>    
331c331
<      ;
---
>      
333c333
< }
---
> 
331,333c331,333
<      ;
<    0;
< }
---
>      
>    ;
> 
331,333c331,333
<      ;
<    0;
< }
---
>      
>    0
> 
331,333c331,333
<      ;
<    0;
< }
---
>      
>    
> 
332c332
<    0;
---
>    ;
(97.5 %, 5123 bytes)
333d332
< }
337c336,337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> 
>  BZ_API(BZ2_bzReadOpen) 
333d332
< }
337c336,337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> 
> BZFILE* (BZ2_bzReadOpen) 
333d332
< }
337c336,337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> 
> * (BZ2_bzReadOpen) 
333d332
< }
337c336,337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> 
> BZFILE (BZ2_bzReadOpen) 
333d332
< }
337c336,337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> 
>  (BZ2_bzReadOpen) 
337c337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> * BZ_API(BZ2_bzReadOpen) 
337c337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>  BZ_API(BZ2_bzReadOpen) 
337c337
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> * (BZ2_bzReadOpen) 
(97.5 %, 5117 bytes)
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
>  BZ_API(BZ2_bzReadOpen) 
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
>  (BZ2_bzReadOpen) 
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
>  BZ_APIBZ2_bzReadOpen) 
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
>  BZ2_bzReadOpen) 
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
>  BZ_API() 
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
>  () 
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
>  BZ_API) 
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
>  ) 
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
> * (BZ2_bzReadOpen) 
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
> * BZ2_bzReadOpen) 
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
> * () 
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
> * ) 
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
> * (BZ2_bzReadOpen 
337c337
< * BZ_API(BZ2_bzReadOpen) 
---
> * BZ2_bzReadOpen 
(97.5 %, 5111 bytes)
337c337
< * (BZ2_bzReadOpen) 
---
> * BZ2_bzReadOpen) 
337c337
< * (BZ2_bzReadOpen) 
---
> * ) 
337c337
< * (BZ2_bzReadOpen) 
---
> * BZ2_bzReadOpen 
337c337
< * (BZ2_bzReadOpen) 
---
> *  
337,338c337,338
< * (BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> * BZ2_bzReadOpen) 
>                     int*  bzerror, 
337,338c337,338
< * (BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> * ) 
>                     int*  bzerror, 
337,338c337,338
< * (BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> * BZ2_bzReadOpen 
>                     int*  bzerror, 
337,338c337,338
< * (BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> *  
>                     int*  bzerror, 
337c337
< * (BZ2_bzReadOpen) 
---
> * () 
337c337
< * (BZ2_bzReadOpen) 
---
> * ( 
(97.5 %, 5109 bytes)
337,338c337,338
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                    ( *  bzerror, 
337,338c337,338
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                     *  bzerror, 
337,338c337,338
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                    ( int  bzerror, 
337,338c337,338
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                     int  bzerror, 
337,338c337,338
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                    (   bzerror, 
337,338c337,338
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
> *  
>                       bzerror, 
338c338
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
338c338
<                    ( int*  bzerror, 
---
>                     *  bzerror, 
338c338
<                    ( int*  bzerror, 
---
>                     int  bzerror, 
338c338
<                    ( int*  bzerror, 
---
>                       bzerror, 
338c338
<                    ( int*  bzerror, 
---
>                     int*  , 
338c338
<                    ( int*  bzerror, 
---
>                     *  , 
338c338
<                    ( int*  bzerror, 
---
>                     int  , 
338c338
<                    ( int*  bzerror, 
---
>                       , 
338c338
<                    ( int*  bzerror, 
---
>                    ( *  bzerror, 
338c338
<                    ( int*  bzerror, 
---
>                    (   bzerror, 
338c338
<                    ( int*  bzerror, 
---
>                    ( *  , 
338c338
<                    ( int*  bzerror, 
---
>                    (   , 
338c338
<                    ( int*  bzerror, 
---
>                    ( *  bzerror 
338c338
<                    ( int*  bzerror, 
---
>                    (   bzerror 
338c338
<                    ( int*  bzerror, 
---
>                    ( *   
338c338
<                    ( int*  bzerror, 
---
>                    (    
338c338
<                    ( int*  bzerror, 
---
>                    ( int  bzerror, 
338c338
<                    ( int*  bzerror, 
---
>                    ( int  , 
338c338
<                    ( int*  bzerror, 
---
>                    ( int  bzerror 
338c338
<                    ( int*  bzerror, 
---
>                    ( int   
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int  bzerror, 
>                      * f, 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int  , 
>                      * f, 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int  bzerror 
>                      * f, 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int   
>                      * f, 
338c338
<                    ( int*  bzerror, 
---
>                    ( int*  , 
338c338
<                    ( int*  bzerror, 
---
>                    ( int*   
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  , 
>                      * f, 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*   
>                      * f, 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  , 
>                      FILE f, 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*   
>                      FILE f, 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  , 
>                       f, 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*   
>                       f, 
338c338
<                    ( int*  bzerror, 
---
>                    ( int*  bzerror 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                      * f, 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                      FILE f, 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                       f, 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                      FILE* , 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                      * , 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                      FILE , 
338,339c338,339
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerror 
>                       , 
339c339
<                      FILE* f, 
---
>                      * f, 
339c339
<                      FILE* f, 
---
>                       f, 
339c339
<                      FILE* f, 
---
>                      * , 
339c339
<                      FILE* f, 
---
>                       , 
339c339
<                      FILE* f, 
---
>                      * f 
339c339
<                      FILE* f, 
---
>                       f 
339c339
<                      FILE* f, 
---
>                      *  
339c339
<                      FILE* f, 
---
>                        
339c339
<                      FILE* f, 
---
>                      FILE f, 
339c339
<                      FILE* f, 
---
>                      FILE , 
339c339
<                      FILE* f, 
---
>                      FILE f 
339c339
<                      FILE* f, 
---
>                      FILE  
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE f, 
>                         verbosity,
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE , 
>                         verbosity,
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE f 
>                         verbosity,
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE  
>                         verbosity,
339c339
<                      FILE* f, 
---
>                      FILE* , 
339c339
<                      FILE* f, 
---
>                      FILE*  
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* , 
>                         verbosity,
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE*  
>                         verbosity,
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* , 
>                      int   ,
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE*  
>                      int   ,
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* , 
>                         ,
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE*  
>                         ,
339c339
<                      FILE* f, 
---
>                      FILE* f 
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                         verbosity,
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                      int   ,
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                         ,
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                      int   verbosity
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                         verbosity
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                      int   
339,340c339,340
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* f 
>                         
340c340
<                      int   verbosity,
---
>                         verbosity,
340c340
<                      int   verbosity,
---
>                         ,
340c340
<                      int   verbosity,
---
>                         verbosity
340c340
<                      int   verbosity,
---
>                         
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                         verbosity,
>                         small,
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                         ,
>                         small,
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                         verbosity
>                         small,
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                         
>                         small,
340c340
<                      int   verbosity,
---
>                      int   ,
340c340
<                      int   verbosity,
---
>                      int   
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                      int   ,
>                         small,
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                      int   
>                         small,
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                      int   ,
>                      int   ,
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                      int   
>                      int   ,
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                      int   ,
>                         ,
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                      int   
>                         ,
340c340
<                      int   verbosity,
---
>                      int   verbosity
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                         small,
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                      int   ,
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                         ,
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                      int   small
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                         small
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                      int   
340,341c340,341
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                         
341c341
<                      int   small,
---
>                         small,
341c341
<                      int   small,
---
>                         ,
341c341
<                      int   small,
---
>                         small
341c341
<                      int   small,
---
>                         
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                         small,
>                      * unused,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                         ,
>                      * unused,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                         small
>                      * unused,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                         
>                      * unused,
341c341
<                      int   small,
---
>                      int   ,
341c341
<                      int   small,
---
>                      int   
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                      int   ,
>                      * unused,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                      int   
>                      * unused,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                      int   ,
>                      void unused,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                      int   
>                      void unused,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                      int   ,
>                       unused,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                      int   
>                       unused,
341c341
<                      int   small,
---
>                      int   small
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                      int   small
>                      * unused,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                      int   small
>                      void unused,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                      int   small
>                       unused,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                      int   small
>                      void* ,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                      int   small
>                      * ,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                      int   small
>                      void ,
341,342c341,342
<                      int   small,
<                      void* unused,
---
>                      int   small
>                       ,
342c342
<                      void* unused,
---
>                      * unused,
342c342
<                      void* unused,
---
>                       unused,
342c342
<                      void* unused,
---
>                      * ,
342c342
<                      void* unused,
---
>                       ,
342c342
<                      void* unused,
---
>                      * unused
342c342
<                      void* unused,
---
>                       unused
342c342
<                      void* unused,
---
>                      * 
342c342
<                      void* unused,
---
>                       
342c342
<                      void* unused,
---
>                      void unused,
342c342
<                      void* unused,
---
>                      void ,
342c342
<                      void* unused,
---
>                      void unused
342c342
<                      void* unused,
---
>                      void 
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void unused,
>                         nUnused )
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void ,
>                         nUnused )
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void unused
>                         nUnused )
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void 
>                         nUnused )
342c342
<                      void* unused,
---
>                      void* ,
342c342
<                      void* unused,
---
>                      void* 
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void* ,
>                         nUnused )
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void* 
>                         nUnused )
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void* ,
>                      int    )
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void* 
>                      int    )
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void* ,
>                          )
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void* 
>                          )
342c342
<                      void* unused,
---
>                      void* unused
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                         nUnused )
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                      int    )
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                          )
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                      int   nUnused 
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                         nUnused 
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                      int    
342,343c342,343
<                      void* unused,
<                      int   nUnused )
---
>                      void* unused
>                          
343c343
<                      int   nUnused )
---
>                         nUnused )
343c343
<                      int   nUnused )
---
>                          )
343c343
<                      int   nUnused )
---
>                         nUnused 
343c343
<                      int   nUnused )
---
>                          
343,344c343,344
<                      int   nUnused )
< {
---
>                         nUnused )
> 
343,344c343,344
<                      int   nUnused )
< {
---
>                          )
> 
343,344c343,344
<                      int   nUnused )
< {
---
>                         nUnused 
> 
343,344c343,344
<                      int   nUnused )
< {
---
>                          
> 
343c343
<                      int   nUnused )
---
>                      int    )
343c343
<                      int   nUnused )
---
>                      int    
343,344c343,344
<                      int   nUnused )
< {
---
>                      int    )
> 
343,344c343,344
<                      int   nUnused )
< {
---
>                      int    
> 
343c343
<                      int   nUnused )
---
>                      int    )
345c345
<    bzFile* bzf = (BZ_OK);
---
>    * bzf = (BZ_OK);
343c343
<                      int   nUnused )
---
>                      int    
345c345
<    bzFile* bzf = (BZ_OK);
---
>    * bzf = (BZ_OK);
343,345c343,345
<                      int   nUnused )
< {
<    bzFile* bzf = (BZ_OK);
---
>                      int    )
> 
>    * bzf = (BZ_OK);
343,345c343,345
<                      int   nUnused )
< {
<    bzFile* bzf = (BZ_OK);
---
>                      int    
> 
>    * bzf = (BZ_OK);
343c343
<                      int   nUnused )
---
>                      int   nUnused 
343,344c343,344
<                      int   nUnused )
< {
---
>                      int   nUnused 
> 
343c343
<                      int   nUnused )
---
>                      int   nUnused 
345c345
<    bzFile* bzf = (BZ_OK);
---
>    * bzf = (BZ_OK);
343,345c343,345
<                      int   nUnused )
< {
<    bzFile* bzf = (BZ_OK);
---
>                      int   nUnused 
> 
>    * bzf = (BZ_OK);
343c343
<                      int   nUnused )
---
>                      int   nUnused 
345c345
<    bzFile* bzf = (BZ_OK);
---
>    bzFile bzf = (BZ_OK);
343,345c343,345
<                      int   nUnused )
< {
<    bzFile* bzf = (BZ_OK);
---
>                      int   nUnused 
> 
>    bzFile bzf = (BZ_OK);
343c343
<                      int   nUnused )
---
>                      int   nUnused 
345c345
<    bzFile* bzf = (BZ_OK);
---
>     bzf = (BZ_OK);
343,345c343,345
<                      int   nUnused )
< {
<    bzFile* bzf = (BZ_OK);
---
>                      int   nUnused 
> 
>     bzf = (BZ_OK);
344c344
< {
---
> 
344,345c344,345
< {
<    bzFile* bzf = (BZ_OK);
---
> 
>    * bzf = (BZ_OK);
344,345c344,345
< {
<    bzFile* bzf = (BZ_OK);
---
> 
>    bzFile bzf = (BZ_OK);
344,345c344,345
< {
<    bzFile* bzf = (BZ_OK);
---
> 
>     bzf = (BZ_OK);
344,345c344,345
< {
<    bzFile* bzf = (BZ_OK);
---
> 
>    bzFile*  = (BZ_OK);
344,345c344,345
< {
<    bzFile* bzf = (BZ_OK);
---
> 
>    *  = (BZ_OK);
344,345c344,345
< {
<    bzFile* bzf = (BZ_OK);
---
> 
>    bzFile  = (BZ_OK);
344,345c344,345
< {
<    bzFile* bzf = (BZ_OK);
---
> 
>      = (BZ_OK);
345c345
<    bzFile* bzf = (BZ_OK);
---
>    * bzf = (BZ_OK);
345c345
<    bzFile* bzf = (BZ_OK);
---
>     bzf = (BZ_OK);
345c345
<    bzFile* bzf = (BZ_OK);
---
>    *  = (BZ_OK);
345c345
<    bzFile* bzf = (BZ_OK);
---
>      = (BZ_OK);
345c345
<    bzFile* bzf = (BZ_OK);
---
>    * bzf  (BZ_OK);
345c345
<    bzFile* bzf = (BZ_OK);
---
>     bzf  (BZ_OK);
345c345
<    bzFile* bzf = (BZ_OK);
---
>    *   (BZ_OK);
345c345
<    bzFile* bzf = (BZ_OK);
---
>       (BZ_OK);
345c345
<    bzFile* bzf = (BZ_OK);
---
>    bzFile bzf = (BZ_OK);
345c345
<    bzFile* bzf = (BZ_OK);
---
>    bzFile  = (BZ_OK);
345c345
<    bzFile* bzf = (BZ_OK);
---
>    bzFile bzf  (BZ_OK);
345c345
<    bzFile* bzf = (BZ_OK);
---
>    bzFile   (BZ_OK);
345c345
<    bzFile* bzf = (BZ_OK);
---
>    bzFile bzf = BZ_OK);
(97.5 %, 5101 bytes)
345c345
<     bzf  (BZ_OK);
---
>       BZ_OK;
345c345
<     bzf  (BZ_OK);
---
>       (;
345c345
<     bzf  (BZ_OK);
---
>       ;
345c345
<     bzf  (BZ_OK);
---
>     bzf  BZ_OK);
345c345
<     bzf  (BZ_OK);
---
>     bzf  );
345c345
<     bzf  (BZ_OK);
---
>     bzf  BZ_OK;
345c345
<     bzf  (BZ_OK);
---
>     bzf  ;
345c345
<     bzf  (BZ_OK);
---
>     bzf  BZ_OK)
345c345
<     bzf  (BZ_OK);
---
>     bzf  )
345c345
<     bzf  (BZ_OK);
---
>     bzf  BZ_OK
345c345
<     bzf  (BZ_OK);
---
>     bzf  
345c345
<     bzf  (BZ_OK);
---
>     bzf  ();
345c345
<     bzf  (BZ_OK);
---
>     bzf  (;
345c345
<     bzf  (BZ_OK);
---
>     bzf  ()
345c345
<     bzf  (BZ_OK);
---
>     bzf  (
345c345
<     bzf  (BZ_OK);
---
>     bzf  ();
347c347
<    if (f ||
---
>     (f ||
345c345
<     bzf  (BZ_OK);
---
>     bzf  (;
347c347
<    if (f ||
---
>     (f ||
345c345
<     bzf  (BZ_OK);
---
>     bzf  ()
347c347
<    if (f ||
---
>     (f ||
345c345
<     bzf  (BZ_OK);
---
>     bzf  (
347c347
<    if (f ||
---
>     (f ||
345c345
<     bzf  (BZ_OK);
---
>     bzf  (BZ_OK;
(97.5 %, 5096 bytes)
345c345
<     bzf  ();
---
>     bzf  (;
345c345
<     bzf  ();
---
>     bzf  (
345c345
<     bzf  ();
---
>     bzf  (;
347c347
<    if (f ||
---
>     (f ||
345c345
<     bzf  ();
---
>     bzf  (
347c347
<    if (f ||
---
>     (f ||
345c345
<     bzf  ();
---
>     bzf  (;
347c347
<    if (f ||
---
>    if f ||
345c345
<     bzf  ();
---
>     bzf  (
347c347
<    if (f ||
---
>    if f ||
345c345
<     bzf  ();
---
>     bzf  (;
347c347
<    if (f ||
---
>     f ||
345c345
<     bzf  ();
---
>     bzf  (
347c347
<    if (f ||
---
>     f ||
345c345
<     bzf  ();
---
>     bzf  ()
345c345
<     bzf  ();
---
>     bzf  ()
347c347
<    if (f ||
---
>     (f ||
345c345
<     bzf  ();
---
>     bzf  ()
347c347
<    if (f ||
---
>    if f ||
345c345
<     bzf  ();
---
>     bzf  ()
347c347
<    if (f ||
---
>     f ||
345c345
<     bzf  ();
---
>     bzf  ()
347c347
<    if (f ||
---
>    if ( ||
345c345
<     bzf  ();
---
>     bzf  ()
347c347
<    if (f ||
---
>     ( ||
345c345
<     bzf  ();
---
>     bzf  ()
347c347
<    if (f ||
---
>    if  ||
345c345
<     bzf  ();
---
>     bzf  ()
347c347
<    if (f ||
---
>      ||
347c347
<    if (f ||
---
>     (f ||
347c347
<    if (f ||
---
>     f ||
347c347
<    if (f ||
---
>     ( ||
347c347
<    if (f ||
---
>      ||
347c347
<    if (f ||
---
>     (f 
347c347
<    if (f ||
---
>     f 
347c347
<    if (f ||
---
>     ( 
347c347
<    if (f ||
---
>      
347c347
<    if (f ||
---
>    if f ||
347c347
<    if (f ||
---
>    if  ||
347c347
<    if (f ||
---
>    if f 
347c347
<    if (f ||
---
>    if  
347,348c347,348
<    if (f ||
<        ((BZ_MAX_UNUSED)))
---
>    if f ||
>        (BZ_MAX_UNUSED)))
347,348c347,348
<    if (f ||
<        ((BZ_MAX_UNUSED)))
---
>    if  ||
>        (BZ_MAX_UNUSED)))
347,348c347,348
<    if (f ||
<        ((BZ_MAX_UNUSED)))
---
>    if f 
>        (BZ_MAX_UNUSED)))
347,348c347,348
<    if (f ||
<        ((BZ_MAX_UNUSED)))
---
>    if  
>        (BZ_MAX_UNUSED)))
347c347
<    if (f ||
---
>    if ( ||
347c347
<    if (f ||
---
>    if ( 
347,348c347,348
<    if (f ||
<        ((BZ_MAX_UNUSED)))
---
>    if ( ||
>        (BZ_MAX_UNUSED)))
347,348c347,348
<    if (f ||
<        ((BZ_MAX_UNUSED)))
---
>    if ( 
>        (BZ_MAX_UNUSED)))
347,348c347,348
<    if (f ||
<        ((BZ_MAX_UNUSED)))
---
>    if ( ||
>        (BZ_MAX_UNUSED)))
347,348c347,348
<    if (f ||
<        ((BZ_MAX_UNUSED)))
---
>    if ( 
>        (BZ_MAX_UNUSED)))
347,348c347,348
<    if (f ||
<        ((BZ_MAX_UNUSED)))
---
>    if ( ||
>        BZ_MAX_UNUSED)))
347,348c347,348
<    if (f ||
<        ((BZ_MAX_UNUSED)))
---
>    if ( 
>        BZ_MAX_UNUSED)))
347c347
<    if (f ||
---
>    if (f 
347,348c347,348
<    if (f ||
<        ((BZ_MAX_UNUSED)))
---
>    if (f 
>        (BZ_MAX_UNUSED)))
(97.5 %, 5093 bytes)
348c348
<        ((BZ_MAX_UNUSED)))
---
>        BZ_MAX_UNUSED)))
348c348
<        ((BZ_MAX_UNUSED)))
---
>        ()))
348c348
<        ((BZ_MAX_UNUSED)))
---
>        )))
348c348
<        ((BZ_MAX_UNUSED)))
---
>        (BZ_MAX_UNUSED))
348c348
<        ((BZ_MAX_UNUSED)))
---
>        BZ_MAX_UNUSED))
348c348
<        ((BZ_MAX_UNUSED)))
---
>        ())
348c348
<        ((BZ_MAX_UNUSED)))
---
>        ))
348c348
<        ((BZ_MAX_UNUSED)))
---
>        (BZ_MAX_UNUSED)))
348c348
<        ((BZ_MAX_UNUSED)))
---
>        ()))
348c348
<        ((BZ_MAX_UNUSED)))
---
>        (BZ_MAX_UNUSED))
(97.5 %, 5091 bytes)
348c348
<        (BZ_MAX_UNUSED))
---
>        BZ_MAX_UNUSED)
348c348
<        (BZ_MAX_UNUSED))
---
>        )
348c348
<        (BZ_MAX_UNUSED))
---
>        BZ_MAX_UNUSED
348c348
<        (BZ_MAX_UNUSED))
---
>        
348c348
<        (BZ_MAX_UNUSED))
---
>        ())
348c348
<        (BZ_MAX_UNUSED))
---
>        ()
348c348
<        (BZ_MAX_UNUSED))
---
>        ()
348c348
<        (BZ_MAX_UNUSED))
---
>        (
348,349c348,349
<        (BZ_MAX_UNUSED))
<       bzf;   
---
>        ())
>       ;   
(97.5 %, 5089 bytes)
348,349c348,349
<        BZ_MAX_UNUSED)
<       bzf;   
---
>        )
>       bzf   
348,349c348,349
<        BZ_MAX_UNUSED)
<       bzf;   
---
>        
>       bzf   
348,349c348,349
<        BZ_MAX_UNUSED)
<       bzf;   
---
>        )
>          
348,349c348,349
<        BZ_MAX_UNUSED)
<       bzf;   
---
>        
>          
348c348
<        BZ_MAX_UNUSED)
---
>        BZ_MAX_UNUSED
348,349c348,349
<        BZ_MAX_UNUSED)
<       bzf;   
---
>        BZ_MAX_UNUSED
>       ;   
348,349c348,349
<        BZ_MAX_UNUSED)
<       bzf;   
---
>        BZ_MAX_UNUSED
>       bzf   
348,349c348,349
<        BZ_MAX_UNUSED)
<       bzf;   
---
>        BZ_MAX_UNUSED
>          
348c348
<        BZ_MAX_UNUSED)
---
>        BZ_MAX_UNUSED
350c350
< }
---
> 
348,350c348,350
<        BZ_MAX_UNUSED)
<       bzf;   
< }
---
>        BZ_MAX_UNUSED
>       ;   
> 
348,350c348,350
<        BZ_MAX_UNUSED)
<       bzf;   
< }
---
>        BZ_MAX_UNUSED
>       bzf   
> 
348,350c348,350
<        BZ_MAX_UNUSED)
<       bzf;   
< }
---
>        BZ_MAX_UNUSED
>          
> 
349c349
<       bzf;   
---
>       ;   
349c349
<       bzf;   
---
>          
349,350c349,350
<       bzf;   
< }
---
>       ;   
> 
349,350c349,350
<       bzf;   
< }
---
>          
> 
349c349
<       bzf;   
---
>       ;   
354c354
< void BZ_API(BZ2_bzReadClose) ( b )
---
>  BZ_API(BZ2_bzReadClose) ( b )
(97.5 %, 5086 bytes)
349c349
<       ;   
---
>          
349,350c349,350
<       ;   
< }
---
>          
> 
349c349
<       ;   
---
>          
354c354
< void BZ_API(BZ2_bzReadClose) ( b )
---
>  BZ_API(BZ2_bzReadClose) ( b )
349,350c349
<       ;   
< }
---
>          
354c353,354
< void BZ_API(BZ2_bzReadClose) ( b )
---
> 
>  BZ_API(BZ2_bzReadClose) ( b )
349c349
<       ;   
---
>          
354c354
< void BZ_API(BZ2_bzReadClose) ( b )
---
> void (BZ2_bzReadClose) ( b )
349,350c349
<       ;   
< }
---
>          
354c353,354
< void BZ_API(BZ2_bzReadClose) ( b )
---
> 
> void (BZ2_bzReadClose) ( b )
349c349
<       ;   
---
>          
354c354
< void BZ_API(BZ2_bzReadClose) ( b )
---
>  (BZ2_bzReadClose) ( b )
349,350c349
<       ;   
< }
---
>          
354c353,354
< void BZ_API(BZ2_bzReadClose) ( b )
---
> 
>  (BZ2_bzReadClose) ( b )
350c350
< }
---
> 
350d349
< }
354c353,354
< void BZ_API(BZ2_bzReadClose) ( b )
---
> 
>  BZ_API(BZ2_bzReadClose) ( b )
350d349
< }
354c353,354
< void BZ_API(BZ2_bzReadClose) ( b )
---
> 
> void (BZ2_bzReadClose) ( b )
350d349
< }
354c353,354
< void BZ_API(BZ2_bzReadClose) ( b )
---
> 
>  (BZ2_bzReadClose) ( b )
350d349
< }
354c353,354
< void BZ_API(BZ2_bzReadClose) ( b )
---
> 
> void BZ_APIBZ2_bzReadClose) ( b )
350d349
< }
354c353,354
< void BZ_API(BZ2_bzReadClose) ( b )
---
> 
>  BZ_APIBZ2_bzReadClose) ( b )
350d349
< }
354c353,354
< void BZ_API(BZ2_bzReadClose) ( b )
---
> 
> void BZ2_bzReadClose) ( b )
350d349
< }
354c353,354
< void BZ_API(BZ2_bzReadClose) ( b )
---
> 
>  BZ2_bzReadClose) ( b )
354c354
< void BZ_API(BZ2_bzReadClose) ( b )
---
>  BZ_API(BZ2_bzReadClose) ( b )
354c354
< void BZ_API(BZ2_bzReadClose) ( b )
---
>  (BZ2_bzReadClose) ( b )
(97.5 %, 5082 bytes)
354c354
<  BZ_API(BZ2_bzReadClose) ( b )
---
>  (BZ2_bzReadClose) ( b )
354c354
<  BZ_API(BZ2_bzReadClose) ( b )
---
>  BZ2_bzReadClose) ( b )
354c354
<  BZ_API(BZ2_bzReadClose) ( b )
---
>  () ( b )
354c354
<  BZ_API(BZ2_bzReadClose) ( b )
---
>  ) ( b )
354c354
<  BZ_API(BZ2_bzReadClose) ( b )
---
>  (BZ2_bzReadClose ( b )
354c354
<  BZ_API(BZ2_bzReadClose) ( b )
---
>  BZ2_bzReadClose ( b )
(97.5 %, 5076 bytes)
354c354
<  (BZ2_bzReadClose) ( b )
---
>  BZ2_bzReadClose) ( b )
354c354
<  (BZ2_bzReadClose) ( b )
---
>  ) ( b )
354c354
<  (BZ2_bzReadClose) ( b )
---
>  BZ2_bzReadClose ( b )
354c354
<  (BZ2_bzReadClose) ( b )
---
>   ( b )
354c354
<  (BZ2_bzReadClose) ( b )
---
>  BZ2_bzReadClose)  b )
354c354
<  (BZ2_bzReadClose) ( b )
---
>  )  b )
354c354
<  (BZ2_bzReadClose) ( b )
---
>  BZ2_bzReadClose  b )
354c354
<  (BZ2_bzReadClose) ( b )
---
>    b )
354c354
<  (BZ2_bzReadClose) ( b )
---
>  () ( b )
354c354
<  (BZ2_bzReadClose) ( b )
---
>  ( ( b )
354c354
<  (BZ2_bzReadClose) ( b )
---
>  ()  b )
(97.5 %, 5074 bytes)
354c354
<  BZ2_bzReadClose ( b )
---
>   (  )
354c354
<  BZ2_bzReadClose ( b )
---
>     )
354c354
<  BZ2_bzReadClose ( b )
---
>   ( b 
354c354
<  BZ2_bzReadClose ( b )
---
>    b 
354c354
<  BZ2_bzReadClose ( b )
---
>   (  
354c354
<  BZ2_bzReadClose ( b )
---
>     
354c354
<  BZ2_bzReadClose ( b )
---
>  BZ2_bzReadClose  b )
354c354
<  BZ2_bzReadClose ( b )
---
>  BZ2_bzReadClose   )
354c354
<  BZ2_bzReadClose ( b )
---
>  BZ2_bzReadClose  b 
354c354
<  BZ2_bzReadClose ( b )
---
>  BZ2_bzReadClose   
354,355c354,355
<  BZ2_bzReadClose ( b )
< {
---
>  BZ2_bzReadClose  b )
> 
354,355c354,355
<  BZ2_bzReadClose ( b )
< {
---
>  BZ2_bzReadClose   )
> 
354,355c354,355
<  BZ2_bzReadClose ( b )
< {
---
>  BZ2_bzReadClose  b 
> 
354,355c354,355
<  BZ2_bzReadClose ( b )
< {
---
>  BZ2_bzReadClose   
> 
354c354
<  BZ2_bzReadClose ( b )
---
>  BZ2_bzReadClose (  )
354c354
<  BZ2_bzReadClose ( b )
---
>  BZ2_bzReadClose (  
354,355c354,355
<  BZ2_bzReadClose ( b )
< {
---
>  BZ2_bzReadClose (  )
> 
354,355c354,355
<  BZ2_bzReadClose ( b )
< {
---
>  BZ2_bzReadClose (  
> 
354c354
<  BZ2_bzReadClose ( b )
---
>  BZ2_bzReadClose (  )
356c356
<    }
---
>    
354c354
<  BZ2_bzReadClose ( b )
---
>  BZ2_bzReadClose (  
356c356
<    }
---
>    
354,356c354,356
<  BZ2_bzReadClose ( b )
< {
<    }
---
>  BZ2_bzReadClose (  )
> 
>    
354,356c354,356
<  BZ2_bzReadClose ( b )
< {
<    }
---
>  BZ2_bzReadClose (  
> 
>    
354c354
<  BZ2_bzReadClose ( b )
---
>  BZ2_bzReadClose ( b 
354,355c354,355
<  BZ2_bzReadClose ( b )
< {
---
>  BZ2_bzReadClose ( b 
> 
(97.5 %, 5073 bytes)
354c354
<  BZ2_bzReadClose (  )
---
>  BZ2_bzReadClose (  
354,355c354,355
<  BZ2_bzReadClose (  )
< {
---
>  BZ2_bzReadClose (  
> 
354c354
<  BZ2_bzReadClose (  )
---
>  BZ2_bzReadClose (  
356c356
<    }
---
>    
354,356c354,356
<  BZ2_bzReadClose (  )
< {
<    }
---
>  BZ2_bzReadClose (  
> 
>    
354c354
<  BZ2_bzReadClose (  )
---
>  BZ2_bzReadClose (  
360c360
< int BZ_API(BZ2_bzRead) 
---
>  BZ_API(BZ2_bzRead) 
354,355c354,355
<  BZ2_bzReadClose (  )
< {
---
>  BZ2_bzReadClose (  
> 
360c360
< int BZ_API(BZ2_bzRead) 
---
>  BZ_API(BZ2_bzRead) 
354c354
<  BZ2_bzReadClose (  )
---
>  BZ2_bzReadClose (  
356c356
<    }
---
>    
360c360
< int BZ_API(BZ2_bzRead) 
---
>  BZ_API(BZ2_bzRead) 
354,356c354
<  BZ2_bzReadClose (  )
< {
<    }
---
>  BZ2_bzReadClose (  
357a356
>    
360c359,360
< int BZ_API(BZ2_bzRead) 
---
> 
>  BZ_API(BZ2_bzRead) 
355c355
< {
---
> 
355,356c355,356
< {
<    }
---
> 
>    
355c355
< {
---
> 
360c360
< int BZ_API(BZ2_bzRead) 
---
>  BZ_API(BZ2_bzRead) 
355,356d354
< {
<    }
357a356
>    
360c359,360
< int BZ_API(BZ2_bzRead) 
---
> 
>  BZ_API(BZ2_bzRead) 
355c355
< {
---
> 
360c360
< int BZ_API(BZ2_bzRead) 
---
> int (BZ2_bzRead) 
355,356d354
< {
<    }
357a356
>    
360c359,360
< int BZ_API(BZ2_bzRead) 
---
> 
> int (BZ2_bzRead) 
355c355
< {
---
> 
360c360
< int BZ_API(BZ2_bzRead) 
---
>  (BZ2_bzRead) 
355,356d354
< {
<    }
357a356
>    
360c359,360
< int BZ_API(BZ2_bzRead) 
---
> 
>  (BZ2_bzRead) 
356c356
<    }
---
>    
356c356
<    }
---
>    
360c360
< int BZ_API(BZ2_bzRead) 
---
>  BZ_API(BZ2_bzRead) 
356c356
<    }
---
>    
360c360
< int BZ_API(BZ2_bzRead) 
---
> int (BZ2_bzRead) 
356c356
<    }
---
>    
360c360
< int BZ_API(BZ2_bzRead) 
---
>  (BZ2_bzRead) 
356c356
<    }
---
>    
360c360
< int BZ_API(BZ2_bzRead) 
---
> int BZ_APIBZ2_bzRead) 
356c356
<    }
---
>    
360c360
< int BZ_API(BZ2_bzRead) 
---
>  BZ_APIBZ2_bzRead) 
356c356
<    }
---
>    
360c360
< int BZ_API(BZ2_bzRead) 
---
> int BZ2_bzRead) 
356c356
<    }
---
>    
360c360
< int BZ_API(BZ2_bzRead) 
---
>  BZ2_bzRead) 
360c360
< int BZ_API(BZ2_bzRead) 
---
>  BZ_API(BZ2_bzRead) 
360c360
< int BZ_API(BZ2_bzRead) 
---
>  (BZ2_bzRead) 
(97.5 %, 5070 bytes)
360c360
<  BZ_API(BZ2_bzRead) 
---
>  (BZ2_bzRead) 
360c360
<  BZ_API(BZ2_bzRead) 
---
>  BZ2_bzRead) 
360c360
<  BZ_API(BZ2_bzRead) 
---
>  () 
360c360
<  BZ_API(BZ2_bzRead) 
---
>  ) 
360c360
<  BZ_API(BZ2_bzRead) 
---
>  (BZ2_bzRead 
360c360
<  BZ_API(BZ2_bzRead) 
---
>  BZ2_bzRead 
(97.5 %, 5064 bytes)
360c360
<  (BZ2_bzRead) 
---
>  BZ2_bzRead) 
360c360
<  (BZ2_bzRead) 
---
>  ) 
360c360
<  (BZ2_bzRead) 
---
>  BZ2_bzRead 
360c360
<  (BZ2_bzRead) 
---
>   
360,361c360,361
<  (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>  BZ2_bzRead) 
>             int*    bzerror, 
360,361c360,361
<  (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>  ) 
>             int*    bzerror, 
360,361c360,361
<  (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>  BZ2_bzRead 
>             int*    bzerror, 
360,361c360,361
<  (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>   
>             int*    bzerror, 
360c360
<  (BZ2_bzRead) 
---
>  () 
360c360
<  (BZ2_bzRead) 
---
>  ( 
360,361c360,361
<  (BZ2_bzRead) 
<            ( int*    bzerror, 
---
>  () 
>             int*    bzerror, 
(97.5 %, 5062 bytes)
360,361c360,361
<  BZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>            ( *    bzerror, 
360,361c360,361
<  BZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>             *    bzerror, 
360,361c360,361
<  BZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>            ( int    bzerror, 
360,361c360,361
<  BZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>             int    bzerror, 
360,361c360,361
<  BZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>            (     bzerror, 
360,361c360,361
<  BZ2_bzRead 
<            ( int*    bzerror, 
---
>   
>                 bzerror, 
361c361
<            ( int*    bzerror, 
---
>             int*    bzerror, 
361c361
<            ( int*    bzerror, 
---
>             *    bzerror, 
361c361
<            ( int*    bzerror, 
---
>             int    bzerror, 
361c361
<            ( int*    bzerror, 
---
>                 bzerror, 
361c361
<            ( int*    bzerror, 
---
>             int*    , 
361c361
<            ( int*    bzerror, 
---
>             *    , 
361c361
<            ( int*    bzerror, 
---
>             int    , 
361c361
<            ( int*    bzerror, 
---
>                 , 
361c361
<            ( int*    bzerror, 
---
>            ( *    bzerror, 
361c361
<            ( int*    bzerror, 
---
>            (     bzerror, 
361c361
<            ( int*    bzerror, 
---
>            ( *    , 
361c361
<            ( int*    bzerror, 
---
>            (     , 
361c361
<            ( int*    bzerror, 
---
>            ( *    bzerror 
361c361
<            ( int*    bzerror, 
---
>            (     bzerror 
361c361
<            ( int*    bzerror, 
---
>            ( *     
361c361
<            ( int*    bzerror, 
---
>            (      
361c361
<            ( int*    bzerror, 
---
>            ( int    bzerror, 
361c361
<            ( int*    bzerror, 
---
>            ( int    , 
(97.5 %, 5050 bytes)
362c362
<              BZFILE* b, 
---
>                
362c362
<              BZFILE* b, 
---
>              BZFILE b, 
362c362
<              BZFILE* b, 
---
>              BZFILE , 
(97.5 %, 5041 bytes)
363c363
<              void*   buf, 
---
>                  
363c363
<              void*   buf, 
---
>              void   buf, 
363c363
<              void*   buf, 
---
>              void   , 
363c363
<              void*   buf, 
---
>              void   buf 
363c363
<              void*   buf, 
---
>              void    
363,364c363,364
<              void*   buf, 
<              int     len )
---
>              void   buf, 
>                   len )
363,364c363,364
<              void*   buf, 
<              int     len )
---
>              void   , 
>                   len )
363,364c363,364
<              void*   buf, 
<              int     len )
---
>              void   buf 
>                   len )
363,364c363,364
<              void*   buf, 
<              int     len )
---
>              void    
>                   len )
(97.5 %, 5032 bytes)
364,365c364,365
<              int     len )
< {
---
>                    
> 
364c364
<              int     len )
---
>              int      )
364c364
<              int     len )
---
>              int      
364,365c364,365
<              int     len )
< {
---
>              int      )
> 
364,365c364,365
<              int     len )
< {
---
>              int      
> 
364c364
<              int     len )
---
>              int      )
367c367
<    return 0; 
---
>     0; 
364c364
<              int     len )
---
>              int      
367c367
<    return 0; 
---
>     0; 
364,365c364,365
<              int     len )
< {
---
>              int      )
> 
367c367
<    return 0; 
---
>     0; 
364,365c364,365
<              int     len )
< {
---
>              int      
> 
367c367
<    return 0; 
---
>     0; 
364c364
<              int     len )
---
>              int     len 
364,365c364,365
<              int     len )
< {
---
>              int     len 
> 
364c364
<              int     len )
---
>              int     len 
367c367
<    return 0; 
---
>     0; 
364,365c364,365
<              int     len )
< {
---
>              int     len 
> 
367c367
<    return 0; 
---
>     0; 
364c364
<              int     len )
---
>              int     len 
367c367
<    return 0; 
---
>    return ; 
364,365c364,365
<              int     len )
< {
---
>              int     len 
> 
367c367
<    return 0; 
---
>    return ; 
364c364
<              int     len )
---
>              int     len 
367c367
<    return 0; 
---
>     ; 
364,365c364,365
<              int     len )
< {
---
>              int     len 
> 
367c367
<    return 0; 
---
>     ; 
365c365
< {
---
> 
365c365
< {
---
> 
367c367
<    return 0; 
---
>     0; 
365c365
< {
---
> 
367c367
<    return 0; 
---
>    return ; 
365c365
< {
---
> 
367c367
<    return 0; 
---
>     ; 
365c365
< {
---
> 
367c367
<    return 0; 
---
>    return 0 
365c365
< {
---
> 
367c367
<    return 0; 
---
>     0 
365c365
< {
---
> 
367c367
<    return 0; 
---
>    return  
365c365
< {
---
> 
367c367
<    return 0; 
---
>      
367c367
<    return 0; 
---
>     0; 
367c367
<    return 0; 
---
>     ; 
(97.5 %, 5026 bytes)
367c367
<     0; 
---
>     ; 
367c367
<     0; 
---
>      
(97.5 %, 5025 bytes)
367c367
<     ; 
---
>      
367,368c367,368
<     ; 
< }
---
>      
> 
367c367
<     ; 
---
>      
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_API(BZ2_bzReadGetUnused) 
(97.5 %, 5024 bytes)
368c368
< }
---
> 
368d367
< }
372c371,372
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
>  BZ_API(BZ2_bzReadGetUnused) 
368d367
< }
372c371,372
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
> void (BZ2_bzReadGetUnused) 
368d367
< }
372c371,372
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
>  (BZ2_bzReadGetUnused) 
368d367
< }
372c371,372
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
> void BZ_APIBZ2_bzReadGetUnused) 
368d367
< }
372c371,372
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
>  BZ_APIBZ2_bzReadGetUnused) 
368d367
< }
372c371,372
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
> void BZ2_bzReadGetUnused) 
368d367
< }
372c371,372
< void BZ_API(BZ2_bzReadGetUnused) 
---
> 
>  BZ2_bzReadGetUnused) 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_API(BZ2_bzReadGetUnused) 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  (BZ2_bzReadGetUnused) 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_APIBZ2_bzReadGetUnused) 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ2_bzReadGetUnused) 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_API() 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  () 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  BZ_API) 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
>  ) 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void (BZ2_bzReadGetUnused) 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused) 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void () 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void ) 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void (BZ2_bzReadGetUnused 
372c372
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused 
(97.6 %, 5018 bytes)
372c372
< void (BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused) 
372c372
< void (BZ2_bzReadGetUnused) 
---
> void ) 
372c372
< void (BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused 
372c372
< void (BZ2_bzReadGetUnused) 
---
> void  
372,373c372,373
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ2_bzReadGetUnused) 
>                       int*    bzerror, 
372,373c372,373
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void ) 
>                       int*    bzerror, 
372,373c372,373
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ2_bzReadGetUnused 
>                       int*    bzerror, 
372,373c372,373
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void  
>                       int*    bzerror, 
372c372
< void (BZ2_bzReadGetUnused) 
---
> void () 
372c372
< void (BZ2_bzReadGetUnused) 
---
> void ( 
372,373c372,373
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void () 
>                       int*    bzerror, 
372,373c372,373
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void ( 
>                       int*    bzerror, 
(97.6 %, 5016 bytes)
372,373c372,373
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      ( *    bzerror, 
372,373c372,373
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       *    bzerror, 
372,373c372,373
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      ( int    bzerror, 
372,373c372,373
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       int    bzerror, 
372,373c372,373
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      (     bzerror, 
372,373c372,373
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                           bzerror, 
373c373
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
373c373
<                      ( int*    bzerror, 
---
>                       *    bzerror, 
373c373
<                      ( int*    bzerror, 
---
>                       int    bzerror, 
373c373
<                      ( int*    bzerror, 
---
>                           bzerror, 
373c373
<                      ( int*    bzerror, 
---
>                       int*    , 
373c373
<                      ( int*    bzerror, 
---
>                       *    , 
373c373
<                      ( int*    bzerror, 
---
>                       int    , 
373c373
<                      ( int*    bzerror, 
---
>                           , 
373c373
<                      ( int*    bzerror, 
---
>                      ( *    bzerror, 
373c373
<                      ( int*    bzerror, 
---
>                      (     bzerror, 
373c373
<                      ( int*    bzerror, 
---
>                      ( *    , 
373c373
<                      ( int*    bzerror, 
---
>                      (     , 
373c373
<                      ( int*    bzerror, 
---
>                      ( *    bzerror 
373c373
<                      ( int*    bzerror, 
---
>                      (     bzerror 
373c373
<                      ( int*    bzerror, 
---
>                      ( *     
373c373
<                      ( int*    bzerror, 
---
>                      (      
373c373
<                      ( int*    bzerror, 
---
>                      ( int    bzerror, 
373c373
<                      ( int*    bzerror, 
---
>                      ( int    , 
373c373
<                      ( int*    bzerror, 
---
>                      ( int    bzerror 
373c373
<                      ( int*    bzerror, 
---
>                      ( int     
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    bzerror, 
>                        * b, 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    , 
>                        * b, 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    bzerror 
>                        * b, 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int     
>                        * b, 
373c373
<                      ( int*    bzerror, 
---
>                      ( int*    , 
373c373
<                      ( int*    bzerror, 
---
>                      ( int*     
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                        * b, 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                        * b, 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                        BZFILE b, 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                        BZFILE b, 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                         b, 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                         b, 
373c373
<                      ( int*    bzerror, 
---
>                      ( int*    bzerror 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        * b, 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        BZFILE b, 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                         b, 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        BZFILE* , 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        * , 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        BZFILE , 
373,374c373,374
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                         , 
374c374
<                        BZFILE* b, 
---
>                        * b, 
374c374
<                        BZFILE* b, 
---
>                         b, 
374c374
<                        BZFILE* b, 
---
>                        * , 
374c374
<                        BZFILE* b, 
---
>                         , 
374c374
<                        BZFILE* b, 
---
>                        * b 
374c374
<                        BZFILE* b, 
---
>                         b 
374c374
<                        BZFILE* b, 
---
>                        *  
374c374
<                        BZFILE* b, 
---
>                          
374c374
<                        BZFILE* b, 
---
>                        BZFILE b, 
374c374
<                        BZFILE* b, 
---
>                        BZFILE , 
374c374
<                        BZFILE* b, 
---
>                        BZFILE b 
374c374
<                        BZFILE* b, 
---
>                        BZFILE  
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE b, 
>                        **  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE , 
>                        **  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        **  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE  
>                        **  unused, 
374c374
<                        BZFILE* b, 
---
>                        BZFILE* , 
374c374
<                        BZFILE* b, 
---
>                        BZFILE*  
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
>                        **  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE*  
>                        **  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
>                        void*  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE*  
>                        void*  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
>                        *  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE*  
>                        *  unused, 
374c374
<                        BZFILE* b, 
---
>                        BZFILE* b 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                        **  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                        void*  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                        *  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                        void*  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                        *  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                        void  unused, 
374,375c374,375
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* b 
>                          unused, 
375c375
<                        void**  unused, 
---
>                        **  unused, 
375c375
<                        void**  unused, 
---
>                        *  unused, 
375c375
<                        void**  unused, 
---
>                        *  unused, 
375c375
<                        void**  unused, 
---
>                          unused, 
375c375
<                        void**  unused, 
---
>                        **  , 
375c375
<                        void**  unused, 
---
>                        *  , 
375c375
<                        void**  unused, 
---
>                        *  , 
375c375
<                        void**  unused, 
---
>                          , 
375c375
<                        void**  unused, 
---
>                        void*  unused, 
375c375
<                        void**  unused, 
---
>                        void  unused, 
375c375
<                        void**  unused, 
---
>                        void*  , 
375c375
<                        void**  unused, 
---
>                        void  , 
375c375
<                        void**  unused, 
---
>                        void*  unused 
375c375
<                        void**  unused, 
---
>                        void  unused 
375c375
<                        void**  unused, 
---
>                        void*   
375c375
<                        void**  unused, 
---
>                        void   
375c375
<                        void**  unused, 
---
>                        void*  unused, 
375c375
<                        void**  unused, 
---
>                        void*  , 
375c375
<                        void**  unused, 
---
>                        void*  unused 
375c375
<                        void**  unused, 
---
>                        void*   
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  unused, 
>                        *    nUnused )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  , 
>                        *    nUnused )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  unused 
>                        *    nUnused )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*   
>                        *    nUnused )
375c375
<                        void**  unused, 
---
>                        void**  , 
375c375
<                        void**  unused, 
---
>                        void**   
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                        *    nUnused )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                        *    nUnused )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                        int    nUnused )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                        int    nUnused )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                            nUnused )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                            nUnused )
375c375
<                        void**  unused, 
---
>                        void**  unused 
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        *    nUnused )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        int    nUnused )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                            nUnused )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        int*     )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        *     )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        int     )
375,376c375,376
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                             )
376c376
<                        int*    nUnused )
---
>                        *    nUnused )
376c376
<                        int*    nUnused )
---
>                            nUnused )
376c376
<                        int*    nUnused )
---
>                        *     )
376c376
<                        int*    nUnused )
---
>                             )
376c376
<                        int*    nUnused )
---
>                        *    nUnused 
376c376
<                        int*    nUnused )
---
>                            nUnused 
376c376
<                        int*    nUnused )
---
>                        *     
376c376
<                        int*    nUnused )
---
>                             
376c376
<                        int*    nUnused )
---
>                        int    nUnused )
376c376
<                        int*    nUnused )
---
>                        int     )
376c376
<                        int*    nUnused )
---
>                        int    nUnused 
376c376
<                        int*    nUnused )
---
>                        int     
376,377c376,377
<                        int*    nUnused )
< {
---
>                        int    nUnused )
> 
376,377c376,377
<                        int*    nUnused )
< {
---
>                        int     )
> 
376,377c376,377
<                        int*    nUnused )
< {
---
>                        int    nUnused 
> 
376,377c376,377
<                        int*    nUnused )
< {
---
>                        int     
> 
376c376
<                        int*    nUnused )
---
>                        int*     )
376c376
<                        int*    nUnused )
---
>                        int*     
376,377c376,377
<                        int*    nUnused )
< {
---
>                        int*     )
> 
376,377c376,377
<                        int*    nUnused )
< {
---
>                        int*     
> 
376c376
<                        int*    nUnused )
---
>                        int*     )
378c378
<    nUnused ;
---
>     ;
376c376
<                        int*    nUnused )
---
>                        int*     
378c378
<    nUnused ;
---
>     ;
376,378c376,378
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        int*     )
> 
>     ;
376,378c376,378
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        int*     
> 
>     ;
376c376
<                        int*    nUnused )
---
>                        int*    nUnused 
376,377c376,377
<                        int*    nUnused )
< {
---
>                        int*    nUnused 
> 
376c376
<                        int*    nUnused )
---
>                        int*    nUnused 
378c378
<    nUnused ;
---
>     ;
376,378c376,378
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        int*    nUnused 
> 
>     ;
376c376
<                        int*    nUnused )
---
>                        int*    nUnused 
378c378
<    nUnused ;
---
>    nUnused 
376,378c376,378
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        int*    nUnused 
> 
>    nUnused 
376c376
<                        int*    nUnused )
---
>                        int*    nUnused 
378c378
<    nUnused ;
---
>     
376,378c376,378
<                        int*    nUnused )
< {
<    nUnused ;
---
>                        int*    nUnused 
> 
>     
377c377
< {
---
> 
377,378c377,378
< {
<    nUnused ;
---
> 
>     ;
377,378c377,378
< {
<    nUnused ;
---
> 
>    nUnused 
377,378c377,378
< {
<    nUnused ;
---
> 
>     
377c377
< {
---
> 
379c379
< }
---
> 
377,379c377,379
< {
<    nUnused ;
< }
---
> 
>     ;
> 
377,379c377,379
< {
<    nUnused ;
< }
---
> 
>    nUnused 
> 
377,379c377,379
< {
<    nUnused ;
< }
---
> 
>     
> 
378c378
<    nUnused ;
---
>     ;
(97.6 %, 5007 bytes)
378c378
<     ;
---
>     
387c387
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>  BZ_APIBZ2_bzBuffToBuffCompress) 
378c378
<     ;
---
>     
387c387
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int BZ2_bzBuffToBuffCompress) 
378c378
<     ;
---
>     
387c387
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>  BZ2_bzBuffToBuffCompress) 
387c387
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>  BZ_API(BZ2_bzBuffToBuffCompress) 
387c387
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>  (BZ2_bzBuffToBuffCompress) 
(97.6 %, 5004 bytes)
387c387
<  BZ_API(BZ2_bzBuffToBuffCompress) 
---
>  (BZ2_bzBuffToBuffCompress) 
387c387
<  BZ_API(BZ2_bzBuffToBuffCompress) 
---
>  BZ2_bzBuffToBuffCompress) 
387c387
<  BZ_API(BZ2_bzBuffToBuffCompress) 
---
>  () 
387c387
<  BZ_API(BZ2_bzBuffToBuffCompress) 
---
>  ) 
387c387
<  BZ_API(BZ2_bzBuffToBuffCompress) 
---
>  (BZ2_bzBuffToBuffCompress 
387c387
<  BZ_API(BZ2_bzBuffToBuffCompress) 
---
>  BZ2_bzBuffToBuffCompress 
(97.6 %, 4998 bytes)
387c387
<  (BZ2_bzBuffToBuffCompress) 
---
>  BZ2_bzBuffToBuffCompress) 
387c387
<  (BZ2_bzBuffToBuffCompress) 
---
>  ) 
387c387
<  (BZ2_bzBuffToBuffCompress) 
---
>  BZ2_bzBuffToBuffCompress 
387c387
<  (BZ2_bzBuffToBuffCompress) 
---
>   
387,388c387,388
<  (BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>  BZ2_bzBuffToBuffCompress) 
>                           char*         dest, 
387,388c387,388
<  (BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>  ) 
>                           char*         dest, 
387,388c387,388
<  (BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>  BZ2_bzBuffToBuffCompress 
>                           char*         dest, 
387,388c387,388
<  (BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>   
>                           char*         dest, 
387c387
<  (BZ2_bzBuffToBuffCompress) 
---
>  () 
387c387
<  (BZ2_bzBuffToBuffCompress) 
---
>  ( 
(97.6 %, 4996 bytes)
387,388c387,388
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                          ( *         dest, 
387,388c387,388
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                           *         dest, 
387,388c387,388
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                          ( char         dest, 
387,388c387,388
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                           char         dest, 
387,388c387,388
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                          (          dest, 
387,388c387,388
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>   
>                                    dest, 
388c388
<                          ( char*         dest, 
---
>                           char*         dest, 
388c388
<                          ( char*         dest, 
---
>                           *         dest, 
388c388
<                          ( char*         dest, 
---
>                           char         dest, 
388c388
<                          ( char*         dest, 
---
>                                    dest, 
388c388
<                          ( char*         dest, 
---
>                           char*         , 
388c388
<                          ( char*         dest, 
---
>                           *         , 
388c388
<                          ( char*         dest, 
---
>                           char         , 
388c388
<                          ( char*         dest, 
---
>                                    , 
388c388
<                          ( char*         dest, 
---
>                          ( *         dest, 
388c388
<                          ( char*         dest, 
---
>                          (          dest, 
388c388
<                          ( char*         dest, 
---
>                          ( *         , 
388c388
<                          ( char*         dest, 
---
>                          (          , 
388c388
<                          ( char*         dest, 
---
>                          ( *         dest 
388c388
<                          ( char*         dest, 
---
>                          (          dest 
388c388
<                          ( char*         dest, 
---
>                          ( *          
388c388
<                          ( char*         dest, 
---
>                          (           
388c388
<                          ( char*         dest, 
---
>                          ( char         dest, 
388c388
<                          ( char*         dest, 
---
>                          ( char         , 
388c388
<                          ( char*         dest, 
---
>                          ( char         dest 
388c388
<                          ( char*         dest, 
---
>                          ( char          
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char         dest, 
>                             int* destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char         , 
>                             int* destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char         dest 
>                             int* destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char          
>                             int* destLen,
388c388
<                          ( char*         dest, 
---
>                          ( char*         , 
388c388
<                          ( char*         dest, 
---
>                          ( char*          
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         , 
>                             int* destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*          
>                             int* destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         , 
>                            unsigned * destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*          
>                            unsigned * destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         , 
>                             * destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*          
>                             * destLen,
388c388
<                          ( char*         dest, 
---
>                          ( char*         dest 
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                             int* destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                            unsigned * destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                             * destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                            unsigned int destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                             int destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                            unsigned  destLen,
388,389c388,389
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest 
>                              destLen,
389c389
<                            unsigned int* destLen,
---
>                             int* destLen,
389c389
<                            unsigned int* destLen,
---
>                             * destLen,
389c389
<                            unsigned int* destLen,
---
>                             int destLen,
389c389
<                            unsigned int* destLen,
---
>                              destLen,
389c389
<                            unsigned int* destLen,
---
>                             int* ,
389c389
<                            unsigned int* destLen,
---
>                             * ,
389c389
<                            unsigned int* destLen,
---
>                             int ,
389c389
<                            unsigned int* destLen,
---
>                              ,
389c389
<                            unsigned int* destLen,
---
>                            unsigned * destLen,
389c389
<                            unsigned int* destLen,
---
>                            unsigned  destLen,
389c389
<                            unsigned int* destLen,
---
>                            unsigned * ,
389c389
<                            unsigned int* destLen,
---
>                            unsigned  ,
389c389
<                            unsigned int* destLen,
---
>                            unsigned * destLen
389c389
<                            unsigned int* destLen,
---
>                            unsigned  destLen
389c389
<                            unsigned int* destLen,
---
>                            unsigned * 
389c389
<                            unsigned int* destLen,
---
>                            unsigned  
389c389
<                            unsigned int* destLen,
---
>                            unsigned int destLen,
(97.6 %, 4993 bytes)
389c389
<                            unsigned * destLen,
---
>                            unsigned  destLen,
389c389
<                            unsigned * destLen,
---
>                            unsigned  ,
389c389
<                            unsigned * destLen,
---
>                            unsigned  destLen
389c389
<                            unsigned * destLen,
---
>                            unsigned  
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  destLen,
>                            *         source, 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  ,
>                            *         source, 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  destLen
>                            *         source, 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  
>                            *         source, 
389c389
<                            unsigned * destLen,
---
>                            unsigned * ,
389c389
<                            unsigned * destLen,
---
>                            unsigned * 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                            *         source, 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                            *         source, 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                            char         source, 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                            char         source, 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                                     source, 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                                     source, 
389c389
<                            unsigned * destLen,
---
>                            unsigned * destLen
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            *         source, 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            char         source, 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                                     source, 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            char*         , 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            *         , 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            char         , 
389,390c389,390
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                                     , 
390c390
<                            char*         source, 
---
>                            *         source, 
390c390
<                            char*         source, 
---
>                                     source, 
390c390
<                            char*         source, 
---
>                            *         , 
390c390
<                            char*         source, 
---
>                                     , 
390c390
<                            char*         source, 
---
>                            *         source 
390c390
<                            char*         source, 
---
>                                     source 
390c390
<                            char*         source, 
---
>                            *          
390c390
<                            char*         source, 
---
>                                      
390c390
<                            char*         source, 
---
>                            char         source, 
390c390
<                            char*         source, 
---
>                            char         , 
390c390
<                            char*         source, 
---
>                            char         source 
390c390
<                            char*         source, 
---
>                            char          
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char         source, 
>                             int  sourceLen,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char         , 
>                             int  sourceLen,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char         source 
>                             int  sourceLen,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char          
>                             int  sourceLen,
390c390
<                            char*         source, 
---
>                            char*         , 
390c390
<                            char*         source, 
---
>                            char*          
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         , 
>                             int  sourceLen,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*          
>                             int  sourceLen,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         , 
>                            unsigned   sourceLen,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*          
>                            unsigned   sourceLen,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         , 
>                               sourceLen,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*          
>                               sourceLen,
390c390
<                            char*         source, 
---
>                            char*         source 
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                             int  sourceLen,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                            unsigned   sourceLen,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                               sourceLen,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                            unsigned int  ,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                             int  ,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                            unsigned   ,
390,391c390,391
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         source 
>                               ,
391c391
<                            unsigned int  sourceLen,
---
>                             int  sourceLen,
391c391
<                            unsigned int  sourceLen,
---
>                               sourceLen,
391c391
<                            unsigned int  sourceLen,
---
>                             int  ,
391c391
<                            unsigned int  sourceLen,
---
>                               ,
391c391
<                            unsigned int  sourceLen,
---
>                             int  sourceLen
391c391
<                            unsigned int  sourceLen,
---
>                               sourceLen
391c391
<                            unsigned int  sourceLen,
---
>                             int  
391c391
<                            unsigned int  sourceLen,
---
>                               
391c391
<                            unsigned int  sourceLen,
---
>                            unsigned   sourceLen,
391c391
<                            unsigned int  sourceLen,
---
>                            unsigned   ,
391c391
<                            unsigned int  sourceLen,
---
>                            unsigned   sourceLen
391c391
<                            unsigned int  sourceLen,
---
>                            unsigned   
391,392c391,392
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen,
>                                       blockSize100k, 
391,392c391,392
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                                       blockSize100k, 
391,392c391,392
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                       blockSize100k, 
391,392c391,392
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                       blockSize100k, 
(97.6 %, 4990 bytes)
391c391
<                            unsigned   sourceLen,
---
>                            unsigned   ,
391c391
<                            unsigned   sourceLen,
---
>                            unsigned   
391,392c391,392
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                                       blockSize100k, 
391,392c391,392
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                       blockSize100k, 
391,392c391,392
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                            int           , 
391,392c391,392
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   
>                            int           , 
391,392c391,392
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   ,
>                                       , 
391,392c391,392
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   
>                                       , 
391c391
<                            unsigned   sourceLen,
---
>                            unsigned   sourceLen
391,392c391,392
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                       blockSize100k, 
391,392c391,392
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                            int           , 
391,392c391,392
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                       , 
391,392c391,392
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                            int           blockSize100k 
391,392c391,392
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                       blockSize100k 
391,392c391,392
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                            int            
391,392c391,392
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned   sourceLen
>                                        
392c392
<                            int           blockSize100k, 
---
>                                       blockSize100k, 
392c392
<                            int           blockSize100k, 
---
>                                       , 
392c392
<                            int           blockSize100k, 
---
>                                       blockSize100k 
392c392
<                            int           blockSize100k, 
---
>                                        
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       blockSize100k, 
>                                       verbosity, 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       , 
>                                       verbosity, 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       blockSize100k 
>                                       verbosity, 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                        
>                                       verbosity, 
392c392
<                            int           blockSize100k, 
---
>                            int           , 
392c392
<                            int           blockSize100k, 
---
>                            int            
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                                       verbosity, 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int            
>                                       verbosity, 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                            int           , 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int            
>                            int           , 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                                       , 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int            
>                                       , 
392c392
<                            int           blockSize100k, 
---
>                            int           blockSize100k 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                       verbosity, 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                            int           , 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                       , 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                            int           verbosity 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                       verbosity 
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                            int            
392,393c392,393
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                        
393c393
<                            int           verbosity, 
---
>                                       verbosity, 
393c393
<                            int           verbosity, 
---
>                                       , 
393c393
<                            int           verbosity, 
---
>                                       verbosity 
393c393
<                            int           verbosity, 
---
>                                        
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       verbosity, 
>                                       workFactor )
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       , 
>                                       workFactor )
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       verbosity 
>                                       workFactor )
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                                        
>                                       workFactor )
393c393
<                            int           verbosity, 
---
>                            int           , 
393c393
<                            int           verbosity, 
---
>                            int            
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                                       workFactor )
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int            
>                                       workFactor )
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                            int            )
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int            
>                            int            )
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                                        )
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int            
>                                        )
393c393
<                            int           verbosity, 
---
>                            int           verbosity 
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                       workFactor )
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                            int            )
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                        )
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                            int           workFactor 
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                       workFactor 
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                            int            
393,394c393,394
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                        
394c394
<                            int           workFactor )
---
>                                       workFactor )
394c394
<                            int           workFactor )
---
>                                        )
394c394
<                            int           workFactor )
---
>                                       workFactor 
394c394
<                            int           workFactor )
---
>                                        
394,395c394,395
<                            int           workFactor )
< {
---
>                                       workFactor )
> 
394,395c394,395
<                            int           workFactor )
< {
---
>                                        )
> 
394,395c394,395
<                            int           workFactor )
< {
---
>                                       workFactor 
> 
394,395c394,395
<                            int           workFactor )
< {
---
>                                        
> 
394c394
<                            int           workFactor )
---
>                            int            )
394c394
<                            int           workFactor )
---
>                            int            
394,395c394,395
<                            int           workFactor )
< {
---
>                            int            )
> 
394,395c394,395
<                            int           workFactor )
< {
---
>                            int            
> 
394c394
<                            int           workFactor )
---
>                            int            )
396c396
<    bz_stream strmret;
---
>     strmret;
394c394
<                            int           workFactor )
---
>                            int            
396c396
<    bz_stream strmret;
---
>     strmret;
394,396c394,396
<                            int           workFactor )
< {
<    bz_stream strmret;
---
>                            int            )
> 
>     strmret;
394,396c394,396
<                            int           workFactor )
< {
<    bz_stream strmret;
---
>                            int            
> 
>     strmret;
394c394
<                            int           workFactor )
---
>                            int           workFactor 
394,395c394,395
<                            int           workFactor )
< {
---
>                            int           workFactor 
> 
394c394
<                            int           workFactor )
---
>                            int           workFactor 
396c396
<    bz_stream strmret;
---
>     strmret;
394,396c394,396
<                            int           workFactor )
< {
<    bz_stream strmret;
---
>                            int           workFactor 
> 
>     strmret;
394c394
<                            int           workFactor )
---
>                            int           workFactor 
396c396
<    bz_stream strmret;
---
>    bz_stream ;
394,396c394,396
<                            int           workFactor )
< {
<    bz_stream strmret;
---
>                            int           workFactor 
> 
>    bz_stream ;
394c394
<                            int           workFactor )
---
>                            int           workFactor 
396c396
<    bz_stream strmret;
---
>     ;
394,396c394,396
<                            int           workFactor )
< {
<    bz_stream strmret;
---
>                            int           workFactor 
> 
>     ;
395c395
< {
---
> 
395,396c395,396
< {
<    bz_stream strmret;
---
> 
>     strmret;
395,396c395,396
< {
<    bz_stream strmret;
---
> 
>    bz_stream ;
395,396c395,396
< {
<    bz_stream strmret;
---
> 
>     ;
395,396c395,396
< {
<    bz_stream strmret;
---
> 
>    bz_stream strmret
395,396c395,396
< {
<    bz_stream strmret;
---
> 
>     strmret
395,396c395,396
< {
<    bz_stream strmret;
---
> 
>    bz_stream 
395,396c395,396
< {
<    bz_stream strmret;
---
> 
>     
396c396
<    bz_stream strmret;
---
>     strmret;
396c396
<    bz_stream strmret;
---
>     ;
396c396
<    bz_stream strmret;
---
>     strmret
396c396
<    bz_stream strmret;
---
>     
(97.6 %, 4974 bytes)
396,397c396,397
<     ;
< }
---
>     
> 
396c396
<     ;
---
>     
401c401
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>  BZ_API(BZ2_bzBuffToBuffDecompress) 
396,397c396
<     ;
< }
---
>     
401c400,401
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> 
>  BZ_API(BZ2_bzBuffToBuffDecompress) 
396c396
<     ;
---
>     
401c401
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int (BZ2_bzBuffToBuffDecompress) 
(97.6 %, 4970 bytes)
397d396
< }
401c400,401
<  BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> 
>  BZ_APIBZ2_bzBuffToBuffDecompress) 
397d396
< }
401c400,401
<  BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> 
>  BZ2_bzBuffToBuffDecompress) 
397d396
< }
401c400,401
<  BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> 
>  BZ_API() 
397d396
< }
401c400,401
<  BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> 
>  () 
397d396
< }
401c400,401
<  BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> 
>  BZ_API) 
397d396
< }
401c400,401
<  BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> 
>  ) 
401c401
<  BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>  (BZ2_bzBuffToBuffDecompress) 
401c401
<  BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>  BZ2_bzBuffToBuffDecompress) 
401c401
<  BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>  () 
401c401
<  BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>  ) 
401c401
<  BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>  (BZ2_bzBuffToBuffDecompress 
401c401
<  BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>  BZ2_bzBuffToBuffDecompress 
(97.6 %, 4964 bytes)
401c401
<  (BZ2_bzBuffToBuffDecompress) 
---
>  BZ2_bzBuffToBuffDecompress) 
401c401
<  (BZ2_bzBuffToBuffDecompress) 
---
>  ) 
401c401
<  (BZ2_bzBuffToBuffDecompress) 
---
>  BZ2_bzBuffToBuffDecompress 
401c401
<  (BZ2_bzBuffToBuffDecompress) 
---
>   
401,402c401,402
<  (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>  BZ2_bzBuffToBuffDecompress) 
>                             char*         dest, 
401,402c401,402
<  (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>  ) 
>                             char*         dest, 
401,402c401,402
<  (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>  BZ2_bzBuffToBuffDecompress 
>                             char*         dest, 
401,402c401,402
<  (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>   
>                             char*         dest, 
401c401
<  (BZ2_bzBuffToBuffDecompress) 
---
>  () 
(97.6 %, 4962 bytes)
401,402c401,402
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                            ( *         dest, 
401,402c401,402
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                             *         dest, 
401,402c401,402
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                            ( char         dest, 
401,402c401,402
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                             char         dest, 
401,402c401,402
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                            (          dest, 
401,402c401,402
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>   
>                                      dest, 
402c402
<                            ( char*         dest, 
---
>                             char*         dest, 
402c402
<                            ( char*         dest, 
---
>                             *         dest, 
402c402
<                            ( char*         dest, 
---
>                             char         dest, 
402c402
<                            ( char*         dest, 
---
>                                      dest, 
402c402
<                            ( char*         dest, 
---
>                             char*         , 
402c402
<                            ( char*         dest, 
---
>                             *         , 
402c402
<                            ( char*         dest, 
---
>                             char         , 
402c402
<                            ( char*         dest, 
---
>                                      , 
402c402
<                            ( char*         dest, 
---
>                            ( *         dest, 
402c402
<                            ( char*         dest, 
---
>                            (          dest, 
402c402
<                            ( char*         dest, 
---
>                            ( *         , 
402c402
<                            ( char*         dest, 
---
>                            (          , 
402c402
<                            ( char*         dest, 
---
>                            ( *         dest 
402c402
<                            ( char*         dest, 
---
>                            (          dest 
402c402
<                            ( char*         dest, 
---
>                            ( *          
402c402
<                            ( char*         dest, 
---
>                            (           
402c402
<                            ( char*         dest, 
---
>                            ( char         dest, 
402c402
<                            ( char*         dest, 
---
>                            ( char         , 
402c402
<                            ( char*         dest, 
---
>                            ( char         dest 
402c402
<                            ( char*         dest, 
---
>                            ( char          
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         dest, 
>                               int* destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         , 
>                               int* destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char         dest 
>                               int* destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char          
>                               int* destLen,
402c402
<                            ( char*         dest, 
---
>                            ( char*         , 
402c402
<                            ( char*         dest, 
---
>                            ( char*          
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         , 
>                               int* destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               int* destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         , 
>                              unsigned * destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*          
>                              unsigned * destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         , 
>                               * destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*          
>                               * destLen,
402c402
<                            ( char*         dest, 
---
>                            ( char*         dest 
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                               int* destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                              unsigned * destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                               * destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                              unsigned int destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                               int destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                              unsigned  destLen,
402,403c402,403
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest 
>                                destLen,
403c403
<                              unsigned int* destLen,
---
>                               int* destLen,
403c403
<                              unsigned int* destLen,
---
>                               * destLen,
403c403
<                              unsigned int* destLen,
---
>                               int destLen,
403c403
<                              unsigned int* destLen,
---
>                                destLen,
403c403
<                              unsigned int* destLen,
---
>                               int* ,
403c403
<                              unsigned int* destLen,
---
>                               * ,
403c403
<                              unsigned int* destLen,
---
>                               int ,
403c403
<                              unsigned int* destLen,
---
>                                ,
403c403
<                              unsigned int* destLen,
---
>                              unsigned * destLen,
403c403
<                              unsigned int* destLen,
---
>                              unsigned  destLen,
403c403
<                              unsigned int* destLen,
---
>                              unsigned * ,
403c403
<                              unsigned int* destLen,
---
>                              unsigned  ,
403c403
<                              unsigned int* destLen,
---
>                              unsigned * destLen
403c403
<                              unsigned int* destLen,
---
>                              unsigned  destLen
403c403
<                              unsigned int* destLen,
---
>                              unsigned * 
403c403
<                              unsigned int* destLen,
---
>                              unsigned  
(97.6 %, 4959 bytes)
403c403
<                              unsigned * destLen,
---
>                              unsigned  destLen,
403c403
<                              unsigned * destLen,
---
>                              unsigned  ,
403c403
<                              unsigned * destLen,
---
>                              unsigned  destLen
403c403
<                              unsigned * destLen,
---
>                              unsigned  
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  destLen,
>                              *         source, 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  ,
>                              *         source, 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  destLen
>                              *         source, 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  
>                              *         source, 
403c403
<                              unsigned * destLen,
---
>                              unsigned * ,
403c403
<                              unsigned * destLen,
---
>                              unsigned * 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                              *         source, 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                              *         source, 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                              char         source, 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                              char         source, 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                                       source, 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                                       source, 
403c403
<                              unsigned * destLen,
---
>                              unsigned * destLen
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              *         source, 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              char         source, 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                                       source, 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              char*         , 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              *         , 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              char         , 
403,404c403,404
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                                       , 
404c404
<                              char*         source, 
---
>                              *         source, 
404c404
<                              char*         source, 
---
>                                       source, 
404c404
<                              char*         source, 
---
>                              *         , 
404c404
<                              char*         source, 
---
>                                       , 
404c404
<                              char*         source, 
---
>                              *         source 
404c404
<                              char*         source, 
---
>                                       source 
404c404
<                              char*         source, 
---
>                              *          
404c404
<                              char*         source, 
---
>                                        
404c404
<                              char*         source, 
---
>                              char         source, 
404c404
<                              char*         source, 
---
>                              char         , 
404c404
<                              char*         source, 
---
>                              char         source 
404c404
<                              char*         source, 
---
>                              char          
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char         source, 
>                               int  sourceLen,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char         , 
>                               int  sourceLen,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char         source 
>                               int  sourceLen,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char          
>                               int  sourceLen,
404c404
<                              char*         source, 
---
>                              char*         , 
404c404
<                              char*         source, 
---
>                              char*          
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         , 
>                               int  sourceLen,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*          
>                               int  sourceLen,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         , 
>                              unsigned   sourceLen,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*          
>                              unsigned   sourceLen,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         , 
>                                 sourceLen,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*          
>                                 sourceLen,
404c404
<                              char*         source, 
---
>                              char*         source 
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                               int  sourceLen,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                              unsigned   sourceLen,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                                 sourceLen,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                              unsigned int  ,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                               int  ,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                              unsigned   ,
404,405c404,405
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         source 
>                                 ,
405c405
<                              unsigned int  sourceLen,
---
>                               int  sourceLen,
405c405
<                              unsigned int  sourceLen,
---
>                                 sourceLen,
405c405
<                              unsigned int  sourceLen,
---
>                               int  ,
405c405
<                              unsigned int  sourceLen,
---
>                                 ,
405c405
<                              unsigned int  sourceLen,
---
>                               int  sourceLen
405c405
<                              unsigned int  sourceLen,
---
>                                 sourceLen
405c405
<                              unsigned int  sourceLen,
---
>                               int  
405c405
<                              unsigned int  sourceLen,
---
>                                 
405c405
<                              unsigned int  sourceLen,
---
>                              unsigned   sourceLen,
405c405
<                              unsigned int  sourceLen,
---
>                              unsigned   ,
405c405
<                              unsigned int  sourceLen,
---
>                              unsigned   sourceLen
405c405
<                              unsigned int  sourceLen,
---
>                              unsigned   
405,406c405,406
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen,
>                                         small,
405,406c405,406
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                                         small,
405,406c405,406
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         small,
405,406c405,406
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned   
>                                         small,
405c405
<                              unsigned int  sourceLen,
---
>                              unsigned int  ,
(97.6 %, 4956 bytes)
405c405
<                              unsigned   sourceLen,
---
>                              unsigned   ,
405c405
<                              unsigned   sourceLen,
---
>                              unsigned   
405,406c405,406
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                                         small,
405,406c405,406
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   
>                                         small,
405,406c405,406
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                              int           ,
405,406c405,406
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   
>                              int           ,
405,406c405,406
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   ,
>                                         ,
405,406c405,406
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   
>                                         ,
405c405
<                              unsigned   sourceLen,
---
>                              unsigned   sourceLen
405,406c405,406
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         small,
405,406c405,406
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                              int           ,
405,406c405,406
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         ,
405,406c405,406
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                              int           small
405,406c405,406
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         small
405,406c405,406
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                              int           
405,406c405,406
<                              unsigned   sourceLen,
<                              int           small,
---
>                              unsigned   sourceLen
>                                         
406c406
<                              int           small,
---
>                                         small,
406c406
<                              int           small,
---
>                                         ,
406c406
<                              int           small,
---
>                                         small
406c406
<                              int           small,
---
>                                         
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                                         small,
>                                         verbosity )
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                                         ,
>                                         verbosity )
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                                         small
>                                         verbosity )
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                                         
>                                         verbosity )
406c406
<                              int           small,
---
>                              int           ,
406c406
<                              int           small,
---
>                              int           
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                                         verbosity )
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                                         verbosity )
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                              int            )
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                              int            )
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                                          )
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                                          )
406c406
<                              int           small,
---
>                              int           small
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                         verbosity )
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                              int            )
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                          )
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                              int           verbosity 
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                         verbosity 
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                              int            
406,407c406,407
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                          
407c407
<                              int           verbosity )
---
>                                         verbosity )
407c407
<                              int           verbosity )
---
>                                          )
407c407
<                              int           verbosity )
---
>                                         verbosity 
407c407
<                              int           verbosity )
---
>                                          
407,408c407,408
<                              int           verbosity )
< {
---
>                                         verbosity )
> 
407,408c407,408
<                              int           verbosity )
< {
---
>                                          )
> 
407,408c407,408
<                              int           verbosity )
< {
---
>                                         verbosity 
> 
407,408c407,408
<                              int           verbosity )
< {
---
>                                          
> 
407c407
<                              int           verbosity )
---
>                              int            )
407c407
<                              int           verbosity )
---
>                              int            
407,408c407,408
<                              int           verbosity )
< {
---
>                              int            )
> 
407,408c407,408
<                              int           verbosity )
< {
---
>                              int            
> 
407c407
<                              int           verbosity )
---
>                              int            )
409c409
<    }
---
>    
407c407
<                              int           verbosity )
---
>                              int            
409c409
<    }
---
>    
407,409c407,409
<                              int           verbosity )
< {
<    }
---
>                              int            )
> 
>    
407,409c407,409
<                              int           verbosity )
< {
<    }
---
>                              int            
> 
>    
407c407
<                              int           verbosity )
---
>                              int           verbosity 
407,408c407,408
<                              int           verbosity )
< {
---
>                              int           verbosity 
> 
407c407
<                              int           verbosity )
---
>                              int           verbosity 
409c409
<    }
---
>    
407,409c407,409
<                              int           verbosity )
< {
<    }
---
>                              int           verbosity 
> 
>    
407c407
<                              int           verbosity )
---
>                              int           verbosity 
414c414
< ;
---
> 
407,408c407,408
<                              int           verbosity )
< {
---
>                              int           verbosity 
> 
414c414
< ;
---
> 
(97.6 %, 4945 bytes)
407c407
<                              int            )
---
>                              int            
419c419
< BZFILE * BZ_API(BZ2_bzopen)
---
>   BZ_API(BZ2_bzopen)
407c407
<                              int            )
---
>                              int            
414d413
< ;
419c418,419
< BZFILE * BZ_API(BZ2_bzopen)
---
> 
>   BZ_API(BZ2_bzopen)
414c414
< ;
---
> 
414d413
< ;
419c418,419
< BZFILE * BZ_API(BZ2_bzopen)
---
> 
>  * BZ_API(BZ2_bzopen)
414d413
< ;
419c418,419
< BZFILE * BZ_API(BZ2_bzopen)
---
> 
> BZFILE  BZ_API(BZ2_bzopen)
414d413
< ;
419c418,419
< BZFILE * BZ_API(BZ2_bzopen)
---
> 
>   BZ_API(BZ2_bzopen)
414d413
< ;
419c418,419
< BZFILE * BZ_API(BZ2_bzopen)
---
> 
> BZFILE * (BZ2_bzopen)
414d413
< ;
419c418,419
< BZFILE * BZ_API(BZ2_bzopen)
---
> 
>  * (BZ2_bzopen)
414d413
< ;
419c418,419
< BZFILE * BZ_API(BZ2_bzopen)
---
> 
> BZFILE  (BZ2_bzopen)
414d413
< ;
419c418,419
< BZFILE * BZ_API(BZ2_bzopen)
---
> 
>   (BZ2_bzopen)
419c419
< BZFILE * BZ_API(BZ2_bzopen)
---
>  * BZ_API(BZ2_bzopen)
419c419
< BZFILE * BZ_API(BZ2_bzopen)
---
>   BZ_API(BZ2_bzopen)
(97.6 %, 4939 bytes)
419c419
<  * BZ_API(BZ2_bzopen)
---
>   BZ_API(BZ2_bzopen)
419c419
<  * BZ_API(BZ2_bzopen)
---
>   (BZ2_bzopen)
(97.6 %, 4938 bytes)
419c419
<   BZ_API(BZ2_bzopen)
---
>   (BZ2_bzopen)
419c419
<   BZ_API(BZ2_bzopen)
---
>   BZ2_bzopen)
419c419
<   BZ_API(BZ2_bzopen)
---
>   ()
419c419
<   BZ_API(BZ2_bzopen)
---
>   )
419c419
<   BZ_API(BZ2_bzopen)
---
>   (BZ2_bzopen
419c419
<   BZ_API(BZ2_bzopen)
---
>   BZ2_bzopen
(97.6 %, 4932 bytes)
419c419
<   (BZ2_bzopen)
---
>   BZ2_bzopen)
419c419
<   (BZ2_bzopen)
---
>   )
419c419
<   (BZ2_bzopen)
---
>   BZ2_bzopen
419c419
<   (BZ2_bzopen)
---
>   
419,420c419,420
<   (BZ2_bzopen)
<                ( char *mode )
---
>   BZ2_bzopen)
>                 char *mode )
419,420c419,420
<   (BZ2_bzopen)
<                ( char *mode )
---
>   )
>                 char *mode )
419,420c419,420
<   (BZ2_bzopen)
<                ( char *mode )
---
>   BZ2_bzopen
>                 char *mode )
419,420c419,420
<   (BZ2_bzopen)
<                ( char *mode )
---
>   
>                 char *mode )
419c419
<   (BZ2_bzopen)
---
>   ()
419c419
<   (BZ2_bzopen)
---
>   (
419,420c419,420
<   (BZ2_bzopen)
<                ( char *mode )
---
>   ()
>                 char *mode )
(97.6 %, 4930 bytes)
419,420c419,420
<   BZ2_bzopen
<                ( char *mode )
---
>   
>                (  *mode )
419,420c419,420
<   BZ2_bzopen
<                ( char *mode )
---
>   
>                  *mode )
419,420c419,420
<   BZ2_bzopen
<                ( char *mode )
---
>   
>                ( char mode )
419,420c419,420
<   BZ2_bzopen
<                ( char *mode )
---
>   
>                 char mode )
419,420c419,420
<   BZ2_bzopen
<                ( char *mode )
---
>   
>                (  mode )
419,420c419,420
<   BZ2_bzopen
<                ( char *mode )
---
>   
>                  mode )
420c420
<                ( char *mode )
---
>                 char *mode )
420c420
<                ( char *mode )
---
>                  *mode )
420c420
<                ( char *mode )
---
>                 char mode )
420c420
<                ( char *mode )
---
>                  mode )
420c420
<                ( char *mode )
---
>                 char * )
420c420
<                ( char *mode )
---
>                  * )
420c420
<                ( char *mode )
---
>                 char  )
420c420
<                ( char *mode )
---
>                   )
420c420
<                ( char *mode )
---
>                (  *mode )
420c420
<                ( char *mode )
---
>                (  mode )
420c420
<                ( char *mode )
---
>                (  * )
420c420
<                ( char *mode )
---
>                (   )
(97.6 %, 4925 bytes)
420c420
<                (  mode )
---
>                (   
420,421c420,421
<                (  mode )
< {
---
>                (   )
> 
420,421c420,421
<                (  mode )
< {
---
>                (   
> 
420c420
<                (  mode )
---
>                (   )
422c422
<    return 0;
---
>     0;
420c420
<                (  mode )
---
>                (   
422c422
<    return 0;
---
>     0;
420,422c420,422
<                (  mode )
< {
<    return 0;
---
>                (   )
> 
>     0;
420,422c420,422
<                (  mode )
< {
<    return 0;
---
>                (   
> 
>     0;
420c420
<                (  mode )
---
>                (  mode 
420,421c420,421
<                (  mode )
< {
---
>                (  mode 
> 
420c420
<                (  mode )
---
>                (  mode 
422c422
<    return 0;
---
>     0;
420,422c420,422
<                (  mode )
< {
<    return 0;
---
>                (  mode 
> 
>     0;
(97.6 %, 4915 bytes)
420c420
<                (   )
---
>                (   
422c422
<     0;
---
>     0
420,422c420,422
<                (   )
< {
<     0;
---
>                (   
> 
>     0
420c420
<                (   )
---
>                (   
422c422
<     0;
---
>     
420,422c420,422
<                (   )
< {
<     0;
---
>                (   
> 
>     
421c421
< {
---
> 
421,422c421,422
< {
<     0;
---
> 
>     ;
421,422c421,422
< {
<     0;
---
> 
>     0
421,422c421,422
< {
<     0;
---
> 
>     
421c421
< {
---
> 
423c423
< }
---
> 
421,423c421,423
< {
<     0;
< }
---
> 
>     ;
> 
421,423c421,423
< {
<     0;
< }
---
> 
>     0
> 
421,423c421,423
< {
<     0;
< }
---
> 
>     
> 
422c422
<     0;
---
>     ;
(97.6 %, 4912 bytes)
422c422
<     ;
---
>     
427c427
< BZFILE * BZ_API(BZ2_bzdopen)
---
>  * (BZ2_bzdopen)
422c422
<     ;
---
>     
427c427
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE  (BZ2_bzdopen)
422c422
<     ;
---
>     
427c427
< BZFILE * BZ_API(BZ2_bzdopen)
---
>   (BZ2_bzdopen)
427c427
< BZFILE * BZ_API(BZ2_bzdopen)
---
>  * BZ_API(BZ2_bzdopen)
427c427
< BZFILE * BZ_API(BZ2_bzdopen)
---
>   BZ_API(BZ2_bzdopen)
(97.6 %, 4906 bytes)
427c427
<  * BZ_API(BZ2_bzdopen)
---
>   BZ_API(BZ2_bzdopen)
427c427
<  * BZ_API(BZ2_bzdopen)
---
>   (BZ2_bzdopen)
(97.6 %, 4905 bytes)
427c427
<   BZ_API(BZ2_bzdopen)
---
>   (BZ2_bzdopen)
427c427
<   BZ_API(BZ2_bzdopen)
---
>   BZ2_bzdopen)
427c427
<   BZ_API(BZ2_bzdopen)
---
>   ()
427c427
<   BZ_API(BZ2_bzdopen)
---
>   )
427c427
<   BZ_API(BZ2_bzdopen)
---
>   (BZ2_bzdopen
427c427
<   BZ_API(BZ2_bzdopen)
---
>   BZ2_bzdopen
(97.6 %, 4899 bytes)
427c427
<   (BZ2_bzdopen)
---
>   BZ2_bzdopen)
427c427
<   (BZ2_bzdopen)
---
>   )
427c427
<   (BZ2_bzdopen)
---
>   BZ2_bzdopen
427c427
<   (BZ2_bzdopen)
---
>   
427,428c427,428
<   (BZ2_bzdopen)
<                ( int blen )
---
>   BZ2_bzdopen)
>                 int blen )
427,428c427,428
<   (BZ2_bzdopen)
<                ( int blen )
---
>   )
>                 int blen )
427,428c427,428
<   (BZ2_bzdopen)
<                ( int blen )
---
>   BZ2_bzdopen
>                 int blen )
427,428c427,428
<   (BZ2_bzdopen)
<                ( int blen )
---
>   
>                 int blen )
427c427
<   (BZ2_bzdopen)
---
>   ()
427c427
<   (BZ2_bzdopen)
---
>   (
427,428c427,428
<   (BZ2_bzdopen)
<                ( int blen )
---
>   ()
>                 int blen )
(97.6 %, 4897 bytes)
427,428c427,428
<   BZ2_bzdopen
<                ( int blen )
---
>   
>                (  blen )
427,428c427,428
<   BZ2_bzdopen
<                ( int blen )
---
>   
>                  blen )
427,428c427,428
<   BZ2_bzdopen
<                ( int blen )
---
>   
>                ( int  )
427,428c427,428
<   BZ2_bzdopen
<                ( int blen )
---
>   
>                 int  )
427,428c427,428
<   BZ2_bzdopen
<                ( int blen )
---
>   
>                (   )
427,428c427,428
<   BZ2_bzdopen
<                ( int blen )
---
>   
>                   )
428c428
<                ( int blen )
---
>                 int blen )
428c428
<                ( int blen )
---
>                  blen )
428c428
<                ( int blen )
---
>                 int  )
428c428
<                ( int blen )
---
>                   )
428c428
<                ( int blen )
---
>                 int blen 
428c428
<                ( int blen )
---
>                  blen 
428c428
<                ( int blen )
---
>                 int  
428c428
<                ( int blen )
---
>                   
428c428
<                ( int blen )
---
>                (  blen )
428c428
<                ( int blen )
---
>                (   )
(97.6 %, 4894 bytes)
428c428
<                (  blen )
---
>                (   )
428c428
<                (  blen )
---
>                (   
428,429c428,429
<                (  blen )
< {
---
>                (   )
> 
428,429c428,429
<                (  blen )
< {
---
>                (   
> 
428c428
<                (  blen )
---
>                (   )
430c430
<    ;
---
>    
(97.6 %, 4890 bytes)
428c428
<                (   )
---
>                (   
428,429c428,429
<                (   )
< {
---
>                (   
> 
428c428
<                (   )
---
>                (   
430c430
<    ;
---
>    
428,430c428,430
<                (   )
< {
<    ;
---
>                (   
> 
>    
428c428
<                (   )
---
>                (   
432c432
< }
---
> 
428,429c428,429
<                (   )
< {
---
>                (   
> 
432c432
< }
---
> 
428c428
<                (   )
---
>                (   
430d429
<    ;
432c431,432
< }
---
>    
> 
428,430c428,429
<                (   )
< {
<    ;
---
>                (   
> 
432c431,432
< }
---
>    
> 
429c429
< {
---
> 
429,430c429,430
< {
<    ;
---
> 
>    
429c429
< {
---
> 
432c432
< }
---
> 
429,430c429
< {
<    ;
---
> 
432c431,432
< }
---
>    
> 
429c429
< {
---
> 
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  BZ_API(BZ2_bzwrite) (BZFILE* blen )
429,430c429,430
< {
<    ;
---
> 
>    
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  BZ_API(BZ2_bzwrite) (BZFILE* blen )
429c429
< {
---
> 
432d431
< }
436c435,436
< int BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
> 
>  BZ_API(BZ2_bzwrite) (BZFILE* blen )
(97.6 %, 4888 bytes)
430c430
<    ;
---
>    
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
> int (BZ2_bzwrite) (BZFILE* blen )
430c430
<    ;
---
>    
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  (BZ2_bzwrite) (BZFILE* blen )
430c430
<    ;
---
>    
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
> int BZ_APIBZ2_bzwrite) (BZFILE* blen )
430c430
<    ;
---
>    
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  BZ_APIBZ2_bzwrite) (BZFILE* blen )
430c430
<    ;
---
>    
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
> int BZ2_bzwrite) (BZFILE* blen )
430c430
<    ;
---
>    
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  BZ2_bzwrite) (BZFILE* blen )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  BZ_API(BZ2_bzwrite) (BZFILE* blen )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  (BZ2_bzwrite) (BZFILE* blen )
436c436
< int BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  BZ_APIBZ2_bzwrite) (BZFILE* blen )
(97.6 %, 4885 bytes)
436c436
<  BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  (BZ2_bzwrite) (BZFILE* blen )
436c436
<  BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  BZ2_bzwrite) (BZFILE* blen )
436c436
<  BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  () (BZFILE* blen )
436c436
<  BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  ) (BZFILE* blen )
436c436
<  BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  (BZ2_bzwrite (BZFILE* blen )
436c436
<  BZ_API(BZ2_bzwrite) (BZFILE* blen )
---
>  BZ2_bzwrite (BZFILE* blen )
(97.6 %, 4879 bytes)
436c436
<  (BZ2_bzwrite) (BZFILE* blen )
---
>  BZ2_bzwrite) (BZFILE* blen )
436c436
<  (BZ2_bzwrite) (BZFILE* blen )
---
>  ) (BZFILE* blen )
436c436
<  (BZ2_bzwrite) (BZFILE* blen )
---
>  BZ2_bzwrite (BZFILE* blen )
436c436
<  (BZ2_bzwrite) (BZFILE* blen )
---
>   (BZFILE* blen )
436c436
<  (BZ2_bzwrite) (BZFILE* blen )
---
>  BZ2_bzwrite) BZFILE* blen )
436c436
<  (BZ2_bzwrite) (BZFILE* blen )
---
>  ) BZFILE* blen )
436c436
<  (BZ2_bzwrite) (BZFILE* blen )
---
>  BZ2_bzwrite BZFILE* blen )
436c436
<  (BZ2_bzwrite) (BZFILE* blen )
---
>   BZFILE* blen )
436c436
<  (BZ2_bzwrite) (BZFILE* blen )
---
>  () (BZFILE* blen )
436c436
<  (BZ2_bzwrite) (BZFILE* blen )
---
>  ( (BZFILE* blen )
(97.6 %, 4877 bytes)
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>   (* blen )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>   * blen )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>   (BZFILE blen )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>   BZFILE blen )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>   ( blen )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>    blen )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite BZFILE* blen )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite * blen )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite BZFILE blen )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite  blen )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite BZFILE*  )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite *  )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite BZFILE  )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite   )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite (* blen )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite ( blen )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite (*  )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite (  )
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite (* blen 
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite ( blen 
436c436
<  BZ2_bzwrite (BZFILE* blen )
---
>  BZ2_bzwrite (*  
(97.6 %, 4870 bytes)
436c436
<  BZ2_bzwrite ( blen )
---
>  BZ2_bzwrite (  
436,437c436,437
<  BZ2_bzwrite ( blen )
< {
---
>  BZ2_bzwrite (  )
> 
436,437c436,437
<  BZ2_bzwrite ( blen )
< {
---
>  BZ2_bzwrite (  
> 
436c436
<  BZ2_bzwrite ( blen )
---
>  BZ2_bzwrite (  )
438c438
<    }
---
>    
436c436
<  BZ2_bzwrite ( blen )
---
>  BZ2_bzwrite (  
438c438
<    }
---
>    
436,438c436,438
<  BZ2_bzwrite ( blen )
< {
<    }
---
>  BZ2_bzwrite (  )
> 
>    
436,438c436,438
<  BZ2_bzwrite ( blen )
< {
<    }
---
>  BZ2_bzwrite (  
> 
>    
436c436
<  BZ2_bzwrite ( blen )
---
>  BZ2_bzwrite ( blen 
436,437c436,437
<  BZ2_bzwrite ( blen )
< {
---
>  BZ2_bzwrite ( blen 
> 
436c436
<  BZ2_bzwrite ( blen )
---
>  BZ2_bzwrite ( blen 
438c438
<    }
---
>    
436,438c436,438
<  BZ2_bzwrite ( blen )
< {
<    }
---
>  BZ2_bzwrite ( blen 
> 
>    
436c436
<  BZ2_bzwrite ( blen )
---
>  BZ2_bzwrite ( blen 
443c443
< static char *bzerrorstrings;
---
>  char *bzerrorstrings;
436,437c436,437
<  BZ2_bzwrite ( blen )
< {
---
>  BZ2_bzwrite ( blen 
> 
443c443
< static char *bzerrorstrings;
---
>  char *bzerrorstrings;
436c436
<  BZ2_bzwrite ( blen )
---
>  BZ2_bzwrite ( blen 
438c438
<    }
---
>    
443c443
< static char *bzerrorstrings;
---
>  char *bzerrorstrings;
436,438c436
<  BZ2_bzwrite ( blen )
< {
<    }
---
>  BZ2_bzwrite ( blen 
439a438
>    
443c442,443
< static char *bzerrorstrings;
---
> 
>  char *bzerrorstrings;
437c437
< {
---
> 
437,438c437,438
< {
<    }
---
> 
>    
437c437
< {
---
> 
443c443
< static char *bzerrorstrings;
---
>  char *bzerrorstrings;
437,438d436
< {
<    }
439a438
>    
443c442,443
< static char *bzerrorstrings;
---
> 
>  char *bzerrorstrings;
437c437
< {
---
> 
443c443
< static char *bzerrorstrings;
---
> static  *bzerrorstrings;
437,438d436
< {
<    }
439a438
>    
443c442,443
< static char *bzerrorstrings;
---
> 
> static  *bzerrorstrings;
437c437
< {
---
> 
443c443
< static char *bzerrorstrings;
---
>   *bzerrorstrings;
437,438d436
< {
<    }
439a438
>    
443c442,443
< static char *bzerrorstrings;
---
> 
>   *bzerrorstrings;
438c438
<    }
---
>    
438c438
<    }
---
>    
443c443
< static char *bzerrorstrings;
---
>  char *bzerrorstrings;
438c438
<    }
---
>    
443c443
< static char *bzerrorstrings;
---
> static  *bzerrorstrings;
438c438
<    }
---
>    
443c443
< static char *bzerrorstrings;
---
>   *bzerrorstrings;
438c438
<    }
---
>    
443c443
< static char *bzerrorstrings;
---
> static char bzerrorstrings;
438c438
<    }
---
>    
443c443
< static char *bzerrorstrings;
---
>  char bzerrorstrings;
438c438
<    }
---
>    
443c443
< static char *bzerrorstrings;
---
> static  bzerrorstrings;
438c438
<    }
---
>    
443c443
< static char *bzerrorstrings;
---
>   bzerrorstrings;
443c443
< static char *bzerrorstrings;
---
>  char *bzerrorstrings;
443c443
< static char *bzerrorstrings;
---
>   *bzerrorstrings;
443c443
< static char *bzerrorstrings;
---
>  char bzerrorstrings;
(97.6 %, 4864 bytes)
443c443
<  char *bzerrorstrings;
---
>   *bzerrorstrings;
443c443
<  char *bzerrorstrings;
---
>   bzerrorstrings;
443c443
<  char *bzerrorstrings;
---
>   *;
(97.6 %, 4860 bytes)
443c443
<   *bzerrorstrings;
---
>   bzerrorstrings;
443c443
<   *bzerrorstrings;
---
>   ;
443c443
<   *bzerrorstrings;
---
>   bzerrorstrings
443c443
<   *bzerrorstrings;
---
>   
443c443
<   *bzerrorstrings;
---
>   bzerrorstrings;
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
>  char * BZ_API(BZ2_bzerror) (errnum)
(97.6 %, 4859 bytes)
443c443
<   bzerrorstrings;
---
>   ;
443c443
<   bzerrorstrings;
---
>   
443c443
<   bzerrorstrings;
---
>   ;
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
>  char * BZ_API(BZ2_bzerror) (errnum)
443c443
<   bzerrorstrings;
---
>   
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
>  char * BZ_API(BZ2_bzerror) (errnum)
443c443
<   bzerrorstrings;
---
>   ;
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
> const  * BZ_API(BZ2_bzerror) (errnum)
443c443
<   bzerrorstrings;
---
>   
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
> const  * BZ_API(BZ2_bzerror) (errnum)
443c443
<   bzerrorstrings;
---
>   ;
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
>   * BZ_API(BZ2_bzerror) (errnum)
443c443
<   bzerrorstrings;
---
>   
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
>   * BZ_API(BZ2_bzerror) (errnum)
443c443
<   bzerrorstrings;
---
>   bzerrorstrings
443c443
<   bzerrorstrings;
---
>   bzerrorstrings
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
>  char * BZ_API(BZ2_bzerror) (errnum)
443c443
<   bzerrorstrings;
---
>   bzerrorstrings
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
> const  * BZ_API(BZ2_bzerror) (errnum)
443c443
<   bzerrorstrings;
---
>   bzerrorstrings
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
>   * BZ_API(BZ2_bzerror) (errnum)
443c443
<   bzerrorstrings;
---
>   bzerrorstrings
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
> const char  BZ_API(BZ2_bzerror) (errnum)
443c443
<   bzerrorstrings;
---
>   bzerrorstrings
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
>  char  BZ_API(BZ2_bzerror) (errnum)
443c443
<   bzerrorstrings;
---
>   bzerrorstrings
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
> const   BZ_API(BZ2_bzerror) (errnum)
443c443
<   bzerrorstrings;
---
>   bzerrorstrings
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
>    BZ_API(BZ2_bzerror) (errnum)
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
>  char * BZ_API(BZ2_bzerror) (errnum)
446c446
< const char * BZ_API(BZ2_bzerror) (errnum)
---
>   * BZ_API(BZ2_bzerror) (errnum)
(97.6 %, 4854 bytes)
446c446
<  char * BZ_API(BZ2_bzerror) (errnum)
---
>   * BZ_API(BZ2_bzerror) (errnum)
446c446
<  char * BZ_API(BZ2_bzerror) (errnum)
---
>    BZ_API(BZ2_bzerror) (errnum)
446c446
<  char * BZ_API(BZ2_bzerror) (errnum)
---
>   * (BZ2_bzerror) (errnum)
(97.6 %, 4850 bytes)
446c446
<   * BZ_API(BZ2_bzerror) (errnum)
---
>    BZ_API(BZ2_bzerror) (errnum)
446c446
<   * BZ_API(BZ2_bzerror) (errnum)
---
>    (BZ2_bzerror) (errnum)
(97.6 %, 4849 bytes)
446c446
<    BZ_API(BZ2_bzerror) (errnum)
---
>    (BZ2_bzerror) (errnum)
446c446
<    BZ_API(BZ2_bzerror) (errnum)
---
>    BZ2_bzerror) (errnum)
446c446
<    BZ_API(BZ2_bzerror) (errnum)
---
>    () (errnum)
446c446
<    BZ_API(BZ2_bzerror) (errnum)
---
>    ) (errnum)
446c446
<    BZ_API(BZ2_bzerror) (errnum)
---
>    (BZ2_bzerror (errnum)
446c446
<    BZ_API(BZ2_bzerror) (errnum)
---
>    BZ2_bzerror (errnum)
(97.6 %, 4843 bytes)
446c446
<    (BZ2_bzerror) (errnum)
---
>    BZ2_bzerror) (errnum)
446c446
<    (BZ2_bzerror) (errnum)
---
>    ) (errnum)
446c446
<    (BZ2_bzerror) (errnum)
---
>    BZ2_bzerror (errnum)
446c446
<    (BZ2_bzerror) (errnum)
---
>     (errnum)
446c446
<    (BZ2_bzerror) (errnum)
---
>    BZ2_bzerror) errnum)
446c446
<    (BZ2_bzerror) (errnum)
---
>    ) errnum)
446c446
<    (BZ2_bzerror) (errnum)
---
>    BZ2_bzerror errnum)
446c446
<    (BZ2_bzerror) (errnum)
---
>     errnum)
446c446
<    (BZ2_bzerror) (errnum)
---
>    () (errnum)
446c446
<    (BZ2_bzerror) (errnum)
---
>    ( (errnum)
446c446
<    (BZ2_bzerror) (errnum)
---
>    () errnum)
446c446
<    (BZ2_bzerror) (errnum)
---
>    ( errnum)
(97.6 %, 4841 bytes)
446c446
<    BZ2_bzerror (errnum)
---
>     ()
446c446
<    BZ2_bzerror (errnum)
---
>     )
446c446
<    BZ2_bzerror (errnum)
---
>     (errnum
446c446
<    BZ2_bzerror (errnum)
---
>     errnum
446c446
<    BZ2_bzerror (errnum)
---
>     (
446c446
<    BZ2_bzerror (errnum)
---
>     
446c446
<    BZ2_bzerror (errnum)
---
>    BZ2_bzerror errnum)
446c446
<    BZ2_bzerror (errnum)
---
>    BZ2_bzerror )
446c446
<    BZ2_bzerror (errnum)
---
>    BZ2_bzerror errnum
446c446
<    BZ2_bzerror (errnum)
---
>    BZ2_bzerror 
446,447c446,447
<    BZ2_bzerror (errnum)
< {
---
>    BZ2_bzerror errnum)
> 
446,447c446,447
<    BZ2_bzerror (errnum)
< {
---
>    BZ2_bzerror )
> 
446,447c446,447
<    BZ2_bzerror (errnum)
< {
---
>    BZ2_bzerror errnum
> 
446,447c446,447
<    BZ2_bzerror (errnum)
< {
---
>    BZ2_bzerror 
> 
446c446
<    BZ2_bzerror (errnum)
---
>    BZ2_bzerror ()
446c446
<    BZ2_bzerror (errnum)
---
>    BZ2_bzerror (
446,447c446,447
<    BZ2_bzerror (errnum)
< {
---
>    BZ2_bzerror ()
> 
446,447c446,447
<    BZ2_bzerror (errnum)
< {
---
>    BZ2_bzerror (
> 
446c446
<    BZ2_bzerror (errnum)
---
>    BZ2_bzerror ()
448c448
<    int err = bzerrorstrings;
---
>     err = bzerrorstrings;
446c446
<    BZ2_bzerror (errnum)
---
>    BZ2_bzerror (
448c448
<    int err = bzerrorstrings;
---
>     err = bzerrorstrings;
446,448c446,448
<    BZ2_bzerror (errnum)
< {
<    int err = bzerrorstrings;
---
>    BZ2_bzerror ()
> 
>     err = bzerrorstrings;
(97.6 %, 4835 bytes)
446c446
<    BZ2_bzerror ()
---
>    BZ2_bzerror (
446,447c446,447
<    BZ2_bzerror ()
< {
---
>    BZ2_bzerror (
> 
446c446
<    BZ2_bzerror ()
---
>    BZ2_bzerror (
448c448
<    int err = bzerrorstrings;
---
>     err = bzerrorstrings;
446,448c446,448
<    BZ2_bzerror ()
< {
<    int err = bzerrorstrings;
---
>    BZ2_bzerror (
> 
>     err = bzerrorstrings;
446c446
<    BZ2_bzerror ()
---
>    BZ2_bzerror (
448c448
<    int err = bzerrorstrings;
---
>    int  = bzerrorstrings;
446,448c446,448
<    BZ2_bzerror ()
< {
<    int err = bzerrorstrings;
---
>    BZ2_bzerror (
> 
>    int  = bzerrorstrings;
446c446
<    BZ2_bzerror ()
---
>    BZ2_bzerror (
448c448
<    int err = bzerrorstrings;
---
>      = bzerrorstrings;
446,448c446,448
<    BZ2_bzerror ()
< {
<    int err = bzerrorstrings;
---
>    BZ2_bzerror (
> 
>      = bzerrorstrings;
447c447
< {
---
> 
447,448c447,448
< {
<    int err = bzerrorstrings;
---
> 
>     err = bzerrorstrings;
447,448c447,448
< {
<    int err = bzerrorstrings;
---
> 
>    int  = bzerrorstrings;
447,448c447,448
< {
<    int err = bzerrorstrings;
---
> 
>      = bzerrorstrings;
447,448c447,448
< {
<    int err = bzerrorstrings;
---
> 
>    int err  bzerrorstrings;
447,448c447,448
< {
<    int err = bzerrorstrings;
---
> 
>     err  bzerrorstrings;
447,448c447,448
< {
<    int err = bzerrorstrings;
---
> 
>    int   bzerrorstrings;
447,448c447,448
< {
<    int err = bzerrorstrings;
---
> 
>       bzerrorstrings;
448c448
<    int err = bzerrorstrings;
---
>     err = bzerrorstrings;
448c448
<    int err = bzerrorstrings;
---
>      = bzerrorstrings;
448c448
<    int err = bzerrorstrings;
---
>     err  bzerrorstrings;
448c448
<    int err = bzerrorstrings;
---
>       bzerrorstrings;
448c448
<    int err = bzerrorstrings;
---
>     err = ;
448c448
<    int err = bzerrorstrings;
---
>      = ;
448c448
<    int err = bzerrorstrings;
---
>     err  ;
448c448
<    int err = bzerrorstrings;
---
>       ;
(97.6 %, 4828 bytes)
448,449c448,449
<       bzerrorstrings;
< }
---
>       
> 
448c448
<       bzerrorstrings;
---
>       ;
478c478
< #if BZ_UNIX
---
> if BZ_UNIX
448c448
<       bzerrorstrings;
---
>       
478c478
< #if BZ_UNIX
---
> if BZ_UNIX
448,449c448
<       bzerrorstrings;
< }
---
>       ;
478c477,478
< #if BZ_UNIX
---
> 
> if BZ_UNIX
448,449c448
<       bzerrorstrings;
< }
---
>       
478c477,478
< #if BZ_UNIX
---
> 
> if BZ_UNIX
448c448
<       bzerrorstrings;
---
>       bzerrorstrings
448,449c448,449
<       bzerrorstrings;
< }
---
>       bzerrorstrings
> 
448c448
<       bzerrorstrings;
---
>       bzerrorstrings
478c478
< #if BZ_UNIX
---
> if BZ_UNIX
448,449c448
<       bzerrorstrings;
< }
---
>       bzerrorstrings
478c477,478
< #if BZ_UNIX
---
> 
> if BZ_UNIX
448c448
<       bzerrorstrings;
---
>       bzerrorstrings
478c478
< #if BZ_UNIX
---
> # BZ_UNIX
448,449c448
<       bzerrorstrings;
< }
---
>       bzerrorstrings
478c477,478
< #if BZ_UNIX
---
> 
> # BZ_UNIX
448c448
<       bzerrorstrings;
---
>       bzerrorstrings
478c478
< #if BZ_UNIX
---
>  BZ_UNIX
448,449c448
<       bzerrorstrings;
< }
---
>       bzerrorstrings
478c477,478
< #if BZ_UNIX
---
> 
>  BZ_UNIX
449c449
< }
---
> 
449d448
< }
478c477,478
< #if BZ_UNIX
---
> 
> if BZ_UNIX
449d448
< }
478c477,478
< #if BZ_UNIX
---
> 
> # BZ_UNIX
449d448
< }
478c477,478
< #if BZ_UNIX
---
> 
>  BZ_UNIX
449d448
< }
478c477,478
< #if BZ_UNIX
---
> 
> #if 
449d448
< }
478c477,478
< #if BZ_UNIX
---
> 
> if 
449d448
< }
478c477,478
< #if BZ_UNIX
---
> 
> # 
449d448
< }
478c477,478
< #if BZ_UNIX
---
> 
>  
478c478
< #if BZ_UNIX
---
> if BZ_UNIX
478c478
< #if BZ_UNIX
---
>  BZ_UNIX
478c478
< #if BZ_UNIX
---
> if 
478c478
< #if BZ_UNIX
---
>  
478,479c478,479
< #if BZ_UNIX
< ) 
---
> if BZ_UNIX
>  
478,479c478,479
< #if BZ_UNIX
< ) 
---
>  BZ_UNIX
>  
478,479c478,479
< #if BZ_UNIX
< ) 
---
> if 
>  
478,479c478,479
< #if BZ_UNIX
< ) 
---
>  
>  
478c478
< #if BZ_UNIX
---
> # BZ_UNIX
478c478
< #if BZ_UNIX
---
> # 
478,479c478,479
< #if BZ_UNIX
< ) 
---
> # BZ_UNIX
>  
478,479c478,479
< #if BZ_UNIX
< ) 
---
> # 
>  
478c478
< #if BZ_UNIX
---
> # BZ_UNIX
481c481
< #      define NORETURN 
---
>       define NORETURN 
478c478
< #if BZ_UNIX
---
> # 
481c481
< #      define NORETURN 
---
>       define NORETURN 
478,479c478,479
< #if BZ_UNIX
< ) 
---
> # BZ_UNIX
>  
481c481
< #      define NORETURN 
---
>       define NORETURN 
478,479c478,479
< #if BZ_UNIX
< ) 
---
> # 
>  
481c481
< #      define NORETURN 
---
>       define NORETURN 
478c478
< #if BZ_UNIX
---
> #if 
478,479c478,479
< #if BZ_UNIX
< ) 
---
> #if 
>  
478c478
< #if BZ_UNIX
---
> #if 
481c481
< #      define NORETURN 
---
>       define NORETURN 
478,479c478,479
< #if BZ_UNIX
< ) 
---
> #if 
>  
481c481
< #      define NORETURN 
---
>       define NORETURN 
478c478
< #if BZ_UNIX
---
> #if 
481c481
< #      define NORETURN 
---
> #       NORETURN 
478,479c478,479
< #if BZ_UNIX
< ) 
---
> #if 
>  
481c481
< #      define NORETURN 
---
> #       NORETURN 
478c478
< #if BZ_UNIX
---
> #if 
481c481
< #      define NORETURN 
---
>        NORETURN 
478,479c478,479
< #if BZ_UNIX
< ) 
---
> #if 
>  
481c481
< #      define NORETURN 
---
>        NORETURN 
479c479
< ) 
---
>  
479c479
< ) 
---
>  
481c481
< #      define NORETURN 
---
>       define NORETURN 
(97.6 %, 4827 bytes)
481c481
< #      define NORETURN 
---
>       define NORETURN 
481c481
< #      define NORETURN 
---
>        NORETURN 
(97.6 %, 4826 bytes)
481c481
<       define NORETURN 
---
>        NORETURN 
481c481
<       define NORETURN 
---
>         
(97.6 %, 4820 bytes)
481c481
<        NORETURN 
---
>         
481c481
<        NORETURN 
---
>         
483c483
< #endif 
---
> endif 
481c481
<        NORETURN 
---
>         
483c483
< #endif 
---
> # 
481c481
<        NORETURN 
---
>         
483c483
< #endif 
---
>  
481c481
<        NORETURN 
---
>         
(97.7 %, 4812 bytes)
483c483
< #endif 
---
> endif 
483c483
< #endif 
---
>  
483c483
< #endif 
---
> endif 
483c483
< #endif 
---
>  
483c483
< #endif 
---
> endif 
483c483
< #endif 
---
>  
483c483
< #endif 
---
> endif 
483c483
< #endif 
---
>  
483c483
< #endif 
---
> # 
483c483
< #endif 
---
> # 
483c483
< #endif 
---
> # 
483c483
< #endif 
---
> # 
483c483
< #endif 
---
> # 
483c483
< #endif 
---
> # 
483c483
< #endif 
---
> # 
483c483
< #endif 
---
> # 
Termination check: size was 204936; now 4812
===< pass_balanced :: angles >===
24c24
< #include <stdio.h>
---
> #include 
489a490
>  
\ No newline at end of file
===< pass_balanced :: parens-only >===
17c17
<        *(bzallocvoid )
---
>        *bzallocvoid 
489a490
>  
\ No newline at end of file
42c42
<  * BZ2_bzReadOpen ( 
---
>  * BZ2_bzReadOpen  
49c49
<    )
---
>    
489a490
>  
\ No newline at end of file
53c53
<  void BZ2_bzReadGetUnused ( 
---
>  void BZ2_bzReadGetUnused  
58c58
<    )
---
>    
489a490
>  
\ No newline at end of file
62c62
<  * BZ2_bzWriteOpen ( 
---
>  * BZ2_bzWriteOpen  
68c68
<    )
---
>    
489a490
>  
\ No newline at end of file
72c72
<  void BZ2_bzWriteClose ( 
---
>  void BZ2_bzWriteClose  
78c78
<    );
---
>    ;
489a490
>  
\ No newline at end of file
80c80
<  void BZ2_bzWriteClose64 ( 
---
>  void BZ2_bzWriteClose64  
88c88
<    );
---
>    ;
489a490
>  
\ No newline at end of file
93c93
<   BZ2_bzBuffToBuffCompress ( 
---
>   BZ2_bzBuffToBuffCompress  
101c101
<    );
---
>    ;
489a490
>  
\ No newline at end of file
103c103
<   BZ2_bzBuffToBuffDecompress ( 
---
>   BZ2_bzBuffToBuffDecompress  
109c109
<       int           )
---
>       int           
489a490
>  
\ No newline at end of file
(97.7 %, 4811 bytes)
42c42
<  * BZ2_bzReadOpen ( 
---
>  * BZ2_bzReadOpen  
49c49
<    )
---
>    
53c53
<  void BZ2_bzReadGetUnused ( 
---
>  void BZ2_bzReadGetUnused  
58c58
<    )
---
>    
62c62
<  * BZ2_bzWriteOpen ( 
---
>  * BZ2_bzWriteOpen  
68c68
<    )
---
>    
72c72
<  void BZ2_bzWriteClose ( 
---
>  void BZ2_bzWriteClose  
78c78
<    );
---
>    ;
80c80
<  void BZ2_bzWriteClose64 ( 
---
>  void BZ2_bzWriteClose64  
88c88
<    );
---
>    ;
93c93
<   BZ2_bzBuffToBuffCompress ( 
---
>   BZ2_bzBuffToBuffCompress  
101c101
<    );
---
>    ;
103c103
<   BZ2_bzBuffToBuffDecompress ( 
---
>   BZ2_bzBuffToBuffDecompress  
109c109
<       int           )
---
>       int           
183c183
< makeMaps_e (   )
---
> makeMaps_e    
192c192
<  generateMTFValues (  s )
---
>  generateMTFValues   s 
204,205c204,205
<                     (  
<                      int        workFactor )
---
>                       
>                      int        workFactor 
209c209
<    ( sizeof(UInt32) )
---
>     sizeof(UInt32) 
209c209
<    ( sizeof(UInt32) )
---
>    ( sizeofUInt32 )
223c223
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  
236c236
<                      (  small )
---
>                        small 
248c248
<  BZ2_bzDecompress (  strm )
---
>  BZ2_bzDecompress   strm 
251c251
<     (s == NULL) 
---
>     s == NULL 
(97.7 %, 4809 bytes)
209c209
<     sizeof(UInt32) 
---
>     sizeofUInt32 
223c223
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  
236c236
<                      (  small )
---
>                        small 
248c248
<  BZ2_bzDecompress (  strm )
---
>  BZ2_bzDecompress   strm 
251c251
<     (s == NULL) 
---
>     s == NULL 
279c279
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
283c283
<                       int   workFactor )
---
>                       int   workFactor 
290,291c290,291
<    if (   
<        (    4))
---
>    if    
>        (    4)
(97.7 %, 4807 bytes)
279c279
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
283c283
<                       int   workFactor )
---
>                       int   workFactor 
290,291c290,291
<    if (   
<        (    4))
---
>    if    
>        (    4)
291c291
<        (    4))
---
>            4)
(97.7 %, 4805 bytes)
291c291
<        (    4)
---
>            4
299c299
<              (      )
---
>                    
311c311
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
315c315
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
322c322
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
328c328
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
338c338
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
343c343
<                      int   nUnused )
---
>                      int   nUnused 
345c345
<     bzf  ();
---
>     bzf  ;
347,348c347,348
<    if ( 
<        BZ_MAX_UNUSED)
---
>    if  
>        BZ_MAX_UNUSED
354c354
<  BZ2_bzReadClose (  )
---
>  BZ2_bzReadClose   
361c361
<            (      
---
>                  
364c364
<              int     len )
---
>              int     len 
373c373
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
376c376
<                        int*    nUnused )
---
>                        int*    nUnused 
388c388
<                          ( char*         dest, 
---
>                           char*         dest, 
394c394
<                            int           workFactor )
---
>                            int           workFactor 
402c402
<                            ( char*         dest, 
---
>                             char*         dest, 
407c407
<                              int            )
---
>                              int            
420c420
<                (   )
---
>                   
428c428
<                (   )
---
>                   
(97.7 %, 4803 bytes)
428c428
<                (   )
---
>                   
436c436
<  BZ2_bzwrite ( blen )
---
>  BZ2_bzwrite  blen 
446c446
<    BZ2_bzerror ()
---
>    BZ2_bzerror 
(97.7 %, 4801 bytes)
436c436
<  BZ2_bzwrite ( blen )
---
>  BZ2_bzwrite  blen 
446c446
<    BZ2_bzerror ()
---
>    BZ2_bzerror 
===< pass_clang :: union-to-struct >===
===< pass_clang :: simple-inliner >===
===< pass_clang :: copy-propagation >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: replace-simple-typedef >===
11,13d10
< typedef 
<    struct {
<         
15,20d11
<       void 
< 
<        *bzallocvoid 
<        ;
<    } 
<    bz_stream;
40c40
< typedef  BZFILE;
---
> 
55c55
<       BZFILE* , 
---
>       int* , 
74c74
<       BZFILE*       , 
---
>       int*       , 
82c82
<       BZFILE*       , 
---
>       int*       , 
312c312
<                     BZFILE*       b, 
---
>                     int*       b, 
323c323
<                     BZFILE*       b, 
---
>                     int*       b, 
374c374
<                        BZFILE* b, 
---
>                        int* b, 
(97.7 %, 4708 bytes)
31c31
< typedef  BZFILE;
---
> 
46c46
<       BZFILE* , 
---
>       int* , 
65c65
<       BZFILE*       , 
---
>       int*       , 
73c73
<       BZFILE*       , 
---
>       int*       , 
303c303
<                     BZFILE*       b, 
---
>                     int*       b, 
314c314
<                     BZFILE*       b, 
---
>                     int*       b, 
365c365
<                        BZFILE* b, 
---
>                        int* b, 
108c108
< typedef     UChar;
---
> 
(97.7 %, 4674 bytes)
108c108
< typedef     UChar;
---
> 
109c109
< typedef              Int32;
---
> 
(97.7 %, 4656 bytes)
109c109
< typedef              Int32;
---
> 
110,111c110
< typedef      UInt32
<  ;
---
> 
200c199
<     sizeof(UInt32) 
---
>     sizeof(int) 
(97.7 %, 4629 bytes)
110,111c110
< typedef      UInt32
<  ;
---
> 
200c199
<     sizeof(UInt32) 
---
>     sizeof(int) 
127,132d126
< typedef
<    struct {
<       
<         
<       
<       
134,150d127
<       
<           ;
<       
<           
< 
<    }
<    EState
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
(97.8 %, 4604 bytes)
126,131d125
< typedef
<    struct {
<       
<         
<       
<       
133,149d126
<       
<           ;
<       
<           
< 
<    }
<    EState
< 
< 
< 
< 
< 
< 
< 
< 
< 
< ;
159,162d158
< typedef
<    struct {
<       
<       
164,167d159
<       
<       
<           }
<    DState;
240c232
<    DState* s;
---
>    struct DState* s;
(97.8 %, 4490 bytes)
136,139d135
< typedef
<    struct {
<       
<       
141,144d136
<       
<       
<           }
<    DState;
217c209
<    DState* s;
---
>    struct DState* s;
232,237c232
< typedef 
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
---
> 
(97.8 %, 4426 bytes)
224,229c224
< typedef 
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
---
> 
===< pass_clang :: replace-dependent-typedef >===
===< pass_clang :: replace-one-level-typedef-type >===
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: simplify-recursive-template-instantiation >===
===< pass_clex :: rm-toks-13 >===
9,17c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> define BZ_API 
9,17c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #BZ_API 
9,18c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #define #   define BZ_EXTERN 
9,18c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #define BZ_OK                define BZ_EXTERN 
9,18c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #define BZ_OK                -BZ_EXTERN 
15,28d14
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
15,28d14
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include BZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include <5000
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> #include <stdio* BZ2_bzReadOpen ( 
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> #include <stdio.BZ2_bzReadOpen ( 
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> #include <stdio.h( 
17,34c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
---
> int*  ,   
17,34c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
---
> #   *  ,   
17,34c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
---
> #   define ,   
18,35c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> FILE* , 
18,35c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> #   * , 
18,35c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> #   define , 
29,36c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> int   , 
29,36c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> #, 
29,37c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
> #define int   ,
29,37c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
> #define BZ_MAX_UNUSED ,
33,38c33
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
>  void* ,    
33,38c33
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
>  * * ,    
33,38c33
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
>  * BZ2_bzReadOpen ,    
34,38d33
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
34,40c34
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
---
>       int)
34,42c34
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
---
>       int*  ;
35,44c35
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
---
>       void BZ2_bzReadGetUnused ( 
35,44c35
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
---
>       FILEBZ2_bzReadGetUnused ( 
35,44c35
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
---
>       FILE* ( 
36,44d35
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
36,45c36
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
---
>       int   *    , 
37,45c37
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
---
>       , 
37,46c37
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
---
>       int   int* , 
38,46c38
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
---
>       * , 
38,46c38
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
---
>       void, 
38,47c38
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
---
>       void* void**  ,  
39,47c39
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
---
>       **  ,  
40,47c40
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
---
>    *  ,  
42,47c42
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
---
> ,  
44,48c44
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
<       int*     
---
>  int*     
44,48c44
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
<       int*     
---
>  void *     
44,49c44
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
<       int*     
<    )
---
>  void BZ2_bzReadGetUnused )
45,51c45
<       int*    , 
<       int* , 
<       void**  ,  
<       int*     
<    )
< 
< ;
---
>       ;
45,53c45
<       int*    , 
<       int* , 
<       void**  ,  
<       int*     
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
---
>       int* BZ2_bzWriteOpen ( 
45,53c45
<       int*    , 
<       int* , 
<       void**  ,  
<       int*     
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
---
>       int*    BZ2_bzWriteOpen ( 
46,53c46
<       int* , 
<       void**  ,  
<       int*     
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
---
>       ( 
46,54c46
<       int* , 
<       void**  ,  
<       int*     
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
---
>       intint*  ,      
46,54c46
<       int* , 
<       void**  ,  
<       int*     
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
---
>       int* *  ,      
47,54c47
<       void**  ,  
<       int*     
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
---
>       ,      
47,55c47
<       void**  ,  
<       int*     
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
---
>       voidFILE* , 
47,55c47
<       void**  ,  
<       int*     
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
---
>       void** , 
47,55c47
<       void**  ,  
<       int*     
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
---
>       void**  , 
48,55d47
<       int*     
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
48,56c48
<       int*     
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
---
>       int, 
49,57c49
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
---
>    int   , 
51,57c51
< ;
< 
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
---
> , 
53,58c53
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
---
>  int    
53,59c53
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
---
>  * )
53,61c53
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
---
>  * BZ2_bzWriteOpen ;
54,63c54
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
---
>       void BZ2_bzWriteClose ( 
54,63c54
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
---
>       intBZ2_bzWriteClose ( 
54,63c54
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
---
>       int*  ( 
55,63d54
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
55,64c55
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       int*          , 
---
>       FILE*          , 
56,64d55
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       int*          , 
56,64d55
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       int*          , 
56,65c56
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
---
>       int   *       , 
57,65c57
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
---
>       , 
57,66c57
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
---
>       int   int           , 
58,66c58
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
---
>       , 
59,67c59
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>    unsigned * , 
61,67c61
< ;
< 
<  void BZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
> * , 
63,67c63
<  void BZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>  , 
63,68c63
<  void BZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
---
>  void unsigned *  
63,68c63
<  void BZ2_bzWriteClose ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
---
>  void BZ2_bzWriteClose *  
64,69c64
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
---
>       );
64,69c64
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
---
>       int;
64,71c64
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ2_bzWriteClose64 ( 
---
>       int*          void BZ2_bzWriteClose64 ( 
65,71c65
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ2_bzWriteClose64 ( 
---
>       BZ2_bzWriteClose64 ( 
65,71c65
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ2_bzWriteClose64 ( 
---
>       int( 
65,72c65
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       int*       int*          , 
66,72c66
<       int           , 
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       *          , 
67,72d66
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
67,72d66
<       unsigned * , 
<       unsigned *  
<    );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
(97.9 %, 4324 bytes)
64,69d63
<       );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
64,70c64
<       );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>       )* , 
66,70c66
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>  , 
66,71c66
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>  void unsigned * , 
66,71c66
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>  void BZ2_bzWriteClose64 * , 
67,71c67
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       , 
67,72c67
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       intunsigned * , 
67,72c67
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       int*          * , 
68,72c68
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       , 
68,73c68
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
---
>       intunsigned * 
68,73c68
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
---
>       int*       * 
69,74c69
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       );
69,74c69
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       int           ;
70,79c70
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
---
>       BZ2_bzBuffToBuffCompress ( 
70,79c70
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
---
>       unsigned ( 
70,80c70
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       unsigned * char*         , 
71,80c71
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       *         , 
71,80c71
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       unsigned , 
71,81c71
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned * unsigned * ,
72,81c72
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       * ,
72,81c72
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned ,
72,82c72
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       unsigned * char*         , 
73,82c73
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       *         , 
73,82c73
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       unsigned , 
74,83c74
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>    unsigned   ,
74,83c74
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>    ),
79,84c79
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
---
>   int           , 
79,84c79
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
---
>   BZ2_bzBuffToBuffCompress , 
80,84d79
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
80,85c80
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
---
>       char, 
80,86c80
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
---
>       char*         int            
81,87c81
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
---
>       );
81,87c81
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
---
>       unsigned ;
81,89c81
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
---
>       unsigned * BZ2_bzBuffToBuffDecompress ( 
82,89c82
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
---
>       ( 
82,90c82
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       charchar*         , 
82,90c82
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       char*         *         , 
83,90c83
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       , 
83,91c83
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned   unsigned * ,
84,91c84
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
>       * ,
84,91c84
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
>       int           ,
85,91d84
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
85,92c85
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       int           *         , 
86,92c86
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       , 
87,93c87
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>    unsigned   ,
87,93c87
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>    ),
89,94c89
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
---
>   int           , 
89,94c89
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
---
>   BZ2_bzBuffToBuffDecompress , 
90,94d89
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
90,95c90
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
---
>       char)
90,97c90
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
---
>       char*         ;
91,102c91
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
---
>       ;
91,107c91
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< #define True  
---
>       unsigned #define True  
91,107c91
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< #define True  
---
>       unsigned * define True  
92,107c92
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< #define True  
---
>       True  
92,109c92
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< #define True  
< 
< #        
---
>       char#        
92,111c92
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< #define True  
< 
< #        
< 
< #  
---
>       char*         #  
93,114c93
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< #define True  
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 
---
>       #define BZ_N_OVERSHOOT 
93,114c93
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< #define True  
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 
---
>       unsigned   define BZ_N_OVERSHOOT 
94,114c94
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< #define True  
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 
---
>       BZ_N_OVERSHOOT 
94,137c94
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< #define True  
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< makeMaps_e (   )
---
>       int           makeMaps_e (   )
95,137c95
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< #define True  
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< makeMaps_e (   )
---
>       (   )
96,137d95
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< #define True  
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< makeMaps_e (   )
97,138c97
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< #define True  
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< makeMaps_e (   )
< {
---
>  {
102,141c102
<      ;
< 
< 
< 
< 
< #define True  
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< makeMaps_e (   )
< {
<    
<       
< }
---
>      }
107,146c107
< #define True  
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< makeMaps_e (   )
< {
<    
<       
< }
< 
< 
< 
< 
<  generateMTFValues (  s )
---
> generateMTFValues (  s )
107,146c107
< #define True  
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< makeMaps_e (   )
< {
<    
<       
< }
< 
< 
< 
< 
<  generateMTFValues (  s )
---
> #(  s )
107,146c107
< #define True  
< 
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< makeMaps_e (   )
< {
<    
<       
< }
< 
< 
< 
< 
<  generateMTFValues (  s )
---
> #define s )
109,146c109
< #        
< 
< #  
<   
<   
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< makeMaps_e (   )
< {
<    
<       
< }
< 
< 
< 
< 
<  generateMTFValues (  s )
---
> )
111,146d110
< #  
<   
<   
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< makeMaps_e (   )
< {
<    
<       
< }
< 
< 
< 
< 
<  generateMTFValues (  s )
114,148c114
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< makeMaps_e (   )
< {
<    
<       
< }
< 
< 
< 
< 
<  generateMTFValues (  s )
< {
<        ;
---
> ;
114,153c114
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< makeMaps_e (   )
< {
<    
<       
< }
< 
< 
< 
< 
<  generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    }
---
> #}
114,157c114
< #define BZ_N_OVERSHOOT 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< makeMaps_e (   )
< {
<    
<       
< }
< 
< 
< 
< 
<  generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    }
< 
< 
< 
< BZ2_bzCompressInit 
---
> #define BZ2_bzCompressInit 
(97.9 %, 4204 bytes)
107,122c107
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    }
< 
< 
< 
< BZ2_bzCompressInit 
<                     (  
<                      int        workFactor )
< {
<       ;
---
> ;
107,123c107
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    }
< 
< 
< 
< BZ2_bzCompressInit 
<                     (  
<                      int        workFactor )
< {
<       ;
<       ;
---
> generateMTFValues ;
107,124c107
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    }
< 
< 
< 
< BZ2_bzCompressInit 
<                     (  
<                      int        workFactor )
< {
<       ;
<       ;
<     sizeof(int) 
---
> generateMTFValues (  sizeof(int) 
107,124c107
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    }
< 
< 
< 
< BZ2_bzCompressInit 
<                     (  
<                      int        workFactor )
< {
<       ;
<       ;
<     sizeof(int) 
---
> generateMTFValues (  s (int) 
108,124c108
< {
<        ;
< 
<    
<       
< 
<    }
< 
< 
< 
< BZ2_bzCompressInit 
<                     (  
<                      int        workFactor )
< {
<       ;
<       ;
<     sizeof(int) 
---
> int) 
109,124c109
<        ;
< 
<    
<       
< 
<    }
< 
< 
< 
< BZ2_bzCompressInit 
<                     (  
<                      int        workFactor )
< {
<       ;
<       ;
<     sizeof(int) 
---
>        ) 
114,125c114
<    }
< 
< 
< 
< BZ2_bzCompressInit 
<                     (  
<                      int        workFactor )
< {
<       ;
<       ;
<     sizeof(int) 
<     ;
---
>    ;
118,125d117
< BZ2_bzCompressInit 
<                     (  
<                      int        workFactor )
< {
<       ;
<       ;
<     sizeof(int) 
<     ;
119,138c119
<                     (  
<                      int        workFactor )
< {
<       ;
<       ;
<     sizeof(int) 
<     ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
---
>                     BZ2_bzCompress ( )
120,138c120
<                      int        workFactor )
< {
<       ;
<       ;
<     sizeof(int) 
<     ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
---
>                      ( )
120,138c120
<                      int        workFactor )
< {
<       ;
<       ;
<     sizeof(int) 
<     ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
---
>                      int        )
120,139c120
<                      int        workFactor )
< {
<       ;
<       ;
<     sizeof(int) 
<     ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
---
>                      int        workFactor {
121,141d120
< {
<       ;
<       ;
<     sizeof(int) 
<     ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
122,150c122
<       ;
<       ;
<     sizeof(int) 
<     ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
---
>       BZ2_bzDecompressInit 
(98.0 %, 4071 bytes)
114,152c114
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
>    BZ2_bzDecompress (  strm )
115,152c115
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
> (  strm )
127,152c127
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
> strm )
127,152c127
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
> BZ2_bzCompress )
127,153c127
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
---
> BZ2_bzCompress ( {
128,154c128
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
> struct DState* s;
131,154c131
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
> DState* s;
139,154c139
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
>  * s;
140,154c140
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
>                      s;
140,154c140
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
>                      (  ;
140,155c140
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
>                      (  small s == NULL 
141,155c141
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
> == NULL 
143,155c143
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
> NULL 
152,158c152
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
---
>  ;
152,159c152
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
---
>  BZ2_bzDecompress }
152,169c152
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
---
>  BZ2_bzDecompress (  typedef 
152,170c152
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
---
>  BZ2_bzDecompress (  strm struct {
154,170d153
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
154,171c154
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
---
>    FILE*     handle
154,171c154
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
---
>    struct *     handle
154,171c154
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
---
>    struct DStatehandle
154,172c154
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
<            ;
---
>    struct DState* ;
154,173c154
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
<            ;
<    }
---
>    struct DState* s}
155,174c155
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
---
>     bzFile;
155,174c155
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
---
>     s ;
155,182c155
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
---
>     s == * BZ2_bzWriteOpen 
158,182c158
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
---
>    BZ2_bzWriteOpen 
159,183c159
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> ( int*  bzerror,      
169,183c169
< typedef 
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> int*  bzerror,      
170,183c170
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>    *  bzerror,      
170,183c170
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>    struct bzerror,      
171,183c171
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       ,      
171,184c171
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>       FILEFILE* f, 
171,184c171
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>       FILE*     * f, 
172,184c172
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>            f, 
173,184c173
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    , 
174,185c174
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>    int   blockSize100k, 
174,185c174
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>    bzFileblockSize100k, 
182,185c182
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> , 
182,186c182
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> * int   verbosity,
183,186c183
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     verbosity,
183,186c183
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( ,
183,187c183
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( intint   workFactor )
183,187c183
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  workFactor )
183,187c183
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerror)
184,188c184
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       {
184,189c184
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<       ;
---
>                       FILE;
184,190c184
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<       ;
<    bzFile* bzf  ;
---
>                       FILE* bzFile* bzf  ;
184,190c184
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<       ;
<    bzFile* bzf  ;
---
>                       FILE* f* bzf  ;
185,190c185
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<       ;
<    bzFile* bzf  ;
---
>                       bzf  ;
185,190c185
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<       ;
<    bzFile* bzf  ;
---
>                       int   ;
185,192c185
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<       ;
<    bzFile* bzf  ;
< 
<    BZ_OK;
---
>                       int   blockSize100kBZ_OK;
186,192c186
<                       int   verbosity,
<                       int   workFactor )
< {
<       ;
<    bzFile* bzf  ;
< 
<    BZ_OK;
---
>                       ;
186,194c186
<                       int   verbosity,
<                       int   workFactor )
< {
<       ;
<    bzFile* bzf  ;
< 
<    BZ_OK;
< 
<    if    
---
>                       int   if    
186,195c186
<                       int   verbosity,
<                       int   workFactor )
< {
<       ;
<    bzFile* bzf  ;
< 
<    BZ_OK;
< 
<    if    
<        (    4)
---
>                       int   verbosity(    4)
187,195c187
<                       int   workFactor )
< {
<       ;
<    bzFile* bzf  ;
< 
<    BZ_OK;
< 
<    if    
<        (    4)
---
>                       4)
187,195c187
<                       int   workFactor )
< {
<       ;
<    bzFile* bzf  ;
< 
<    BZ_OK;
< 
<    if    
<        (    4)
---
>                       int   )
187,196c187
<                       int   workFactor )
< {
<       ;
<    bzFile* bzf  ;
< 
<    BZ_OK;
< 
<    if    
<        (    4)
<                bzf;   
---
>                       int   workFactor bzf;   
188,196c188
< {
<       ;
<    bzFile* bzf  ;
< 
<    BZ_OK;
< 
<    if    
<        (    4)
<                bzf;   
---
> ;   
189,197c189
<       ;
<    bzFile* bzf  ;
< 
<    BZ_OK;
< 
<    if    
<        (    4)
<                bzf;   
< }
---
>       }
190,202c190
<    bzFile* bzf  ;
< 
<    BZ_OK;
< 
<    if    
<        (    4)
<                bzf;   
< }
< 
< 
< 
< 
<  BZ2_bzWrite
---
>    BZ2_bzWrite
190,203c190
<    bzFile* bzf  ;
< 
<    BZ_OK;
< 
<    if    
<        (    4)
<                bzf;   
< }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
---
>    bzFile(      )
190,203c190
<    bzFile* bzf  ;
< 
<    BZ_OK;
< 
<    if    
<        (    4)
<                bzf;   
< }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
---
>    bzFile* )
190,204c190
<    bzFile* bzf  ;
< 
<    BZ_OK;
< 
<    if    
<        (    4)
<                bzf;   
< }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
---
>    bzFile* bzf  {
192,210c192
<    BZ_OK;
< 
<    if    
<        (    4)
<                bzf;   
< }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
---
>    }
(98.1 %, 3991 bytes)
189,208c189
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     int*       b, 
---
>       int*       b, 
194,208c194
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     int*       b, 
---
>  *       b, 
195,208c195
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     int*       b, 
---
>              b, 
195,208c195
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     int*       b, 
---
>              (      , 
196,209c196
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
---
> int           abandon,
202,209c202
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
---
> abandon,
206,209c206
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
---
> ,
206,210c206
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
> void unsigned * nbytes_in,
207,210c207
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                   * nbytes_in,
207,210c207
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                   ( nbytes_in,
207,210c207
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                   ( int,
207,211c207
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                   ( int*          unsigned * nbytes_out )
207,211c207
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                   ( int*          bzerror* nbytes_out )
208,211c208
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     nbytes_out )
208,211c208
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     int)
(98.1 %, 3852 bytes)
207,216c207
<                   ( int,
<                     unsigned * nbytes_out )
< 
<     ;
< 
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     int*       b, 
---
>                   ( intint*       b, 
208,216c208
<                     unsigned * nbytes_out )
< 
<     ;
< 
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     int*       b, 
---
>                     *       b, 
208,216c208
<                     unsigned * nbytes_out )
< 
<     ;
< 
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     int*       b, 
---
>                     unsigned b, 
208,216c208
<                     unsigned * nbytes_out )
< 
<     ;
< 
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     int*       b, 
---
>                     unsigned * , 
208,217c208
<                     unsigned * nbytes_out )
< 
<     ;
< 
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
---
>                     unsigned * nbytes_out int           abandon,
210,217c210
<     ;
< 
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
---
>     abandon,
214,217c214
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
---
> ,
214,218c214
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
> void unsigned * nbytes_in_lo32,
215,218c215
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   * nbytes_in_lo32,
215,218c215
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   ( nbytes_in_lo32,
215,218c215
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   ( int,
215,219c215
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                   ( int*          unsigned * nbytes_in_hi32,
215,219c215
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                   ( int*          bzerror* nbytes_in_hi32,
216,219c216
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     nbytes_in_hi32,
216,219c216
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     int,
216,220c216
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     int*       unsigned * nbytes_out_lo32,
216,220c216
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     int*       b* nbytes_out_lo32,
217,220c217
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     nbytes_out_lo32,
217,220c217
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     int           ,
217,221c217
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     int           abandonunsigned * nbytes_out_hi32 )
218,221c218
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     * nbytes_out_hi32 )
218,221c218
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned nbytes_out_hi32 )
218,221c218
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * )
218,222c218
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_in_lo32{
219,226c219
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
---
>                     }
219,230c219
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
---
>                     unsigned * BZ2_bzReadOpen 
219,230c219
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
---
>                     unsigned * BZ2_bzReadOpen 
219,231c219
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned * nbytes_in_hi32( int*  bzerror, 
220,231c220
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
220,231c220
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned *  bzerror, 
220,231c220
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned * bzerror, 
220,231c220
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned * nbytes_out_lo32, 
221,232c221
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     FILE* f, 
221,232c221
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned * f, 
221,232c221
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned * f, 
221,232c221
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned * nbytes_out_hi32 , 
222,233c222
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> int   verbosity,
226,233c226
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> verbosity,
230,233c230
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> ,
230,234c230
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> * int   small,
231,234c231
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    small,
231,234c231
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( ,
231,235c231
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( intvoid* unused,
231,235c231
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  * unused,
231,235c231
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  bzerrorunused,
232,235c232
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      ,
232,236c232
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILEint   nUnused )
232,236c232
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* nUnused )
232,236c232
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* f)
233,237c233
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      {
233,238c233
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
---
>                      int   bzf  ();
233,238c233
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
---
>                      int   verbosity();
234,238c234
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
---
>                      );
234,238c234
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
---
>                      int   ;
234,240c234
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
---
>                      int   smallif ( 
235,240c235
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
---
>                      ( 
235,241c235
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
---
>                      voidBZ_MAX_UNUSED)
235,241c235
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
---
>                      void* )
235,242c235
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
---
>                      void* unused;   
236,243c236
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
---
>                      }
236,247c236
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose (  )
---
>                      int   BZ2_bzReadClose (  )
236,247c236
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose (  )
---
>                      int   nUnused (  )
237,247c237
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose (  )
---
> )
238,248c238
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose (  )
< {
---
>     {
238,249c238
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose (  )
< {
<    }
---
>     bzf  }
238,253c238
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose (  )
< {
<    }
< 
< 
< 
<  BZ2_bzRead 
---
>     bzf  (BZ2_bzRead 
238,254c238
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose (  )
< {
<    }
< 
< 
< 
<  BZ2_bzRead 
<            (      
---
>     bzf  ()(      
240,257c240
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose (  )
< {
<    }
< 
< 
< 
<  BZ2_bzRead 
<            (      
<                
<                  
<              int     len )
---
>    int     len )
240,257c240
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose (  )
< {
<    }
< 
< 
< 
<  BZ2_bzRead 
<            (      
<                
<                  
<              int     len )
---
>    if len )
241,257c241
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose (  )
< {
<    }
< 
< 
< 
<  BZ2_bzRead 
<            (      
<                
<                  
<              int     len )
---
>        )
241,258c241
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose (  )
< {
<    }
< 
< 
< 
<  BZ2_bzRead 
<            (      
<                
<                  
<              int     len )
< {
---
>        BZ_MAX_UNUSED{
242,261c242
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose (  )
< {
<    }
< 
< 
< 
<  BZ2_bzRead 
<            (      
<                
<                  
<              int     len )
< {
<    
<      
< }
---
>       }
243,264d242
< }
< 
< 
< 
<  BZ2_bzReadClose (  )
< {
<    }
< 
< 
< 
<  BZ2_bzRead 
<            (      
<                
<                  
<              int     len )
< {
<    
<      
< }
< 
< 
< 
247,265c247
<  BZ2_bzReadClose (  )
< {
<    }
< 
< 
< 
<  BZ2_bzRead 
<            (      
<                
<                  
<              int     len )
< {
<    
<      
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
---
>  BZ2_bzReadGetUnused 
247,266c247
<  BZ2_bzReadClose (  )
< {
<    }
< 
< 
< 
<  BZ2_bzRead 
<            (      
<                
<                  
<              int     len )
< {
<    
<      
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>  BZ2_bzReadClose ( int*    bzerror, 
247,266c247
<  BZ2_bzReadClose (  )
< {
<    }
< 
< 
< 
<  BZ2_bzRead 
<            (      
<                
<                  
<              int     len )
< {
<    
<      
< }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>  BZ2_bzReadClose (  int*    bzerror, 
(98.2 %, 3680 bytes)
247,249c247
<  BZ2_bzReadClose ( int*    bzerror, 
<                        int* b, 
<                        void**  unused, 
---
>  BZ2_bzReadClose , 
247,250c247
<  BZ2_bzReadClose ( int*    bzerror, 
<                        int* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>  BZ2_bzReadClose ( int*    nUnused )
247,250c247
<  BZ2_bzReadClose ( int*    bzerror, 
<                        int* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>  BZ2_bzReadClose ( int*    nUnused )
(98.3 %, 3567 bytes)
247,260c247
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>  BZ2_bzReadClose ( destLen,
247,260c247
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>  BZ2_bzReadClose ( int,
247,261c247
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
---
>  BZ2_bzReadClose ( int*    char*         source, 
247,261c247
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
---
>  BZ2_bzReadClose ( int*    nUnused *         source, 
249,261c249
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
---
>     source, 
258,261c258
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
---
>  , 
259,262c259
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
---
>                          unsigned   sourceLen,
259,262c259
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
---
>                          ( sourceLen,
259,262c259
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
---
>                          ( char,
259,263c259
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                          ( char*         int           blockSize100k, 
259,263c259
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                          ( char*         destblockSize100k, 
260,263c260
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>                            , 
260,264c260
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int           verbosity, 
260,264c260
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned * verbosity, 
260,264c260
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned * destLen, 
261,264d260
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
261,265c261
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            charworkFactor )
261,265c261
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         )
261,266c261
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            char*         source{
262,268c262
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
---
>                            }
262,272c262
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
---
>                            unsigned   BZ2_bzBuffToBuffDecompress 
262,273c262
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            unsigned   sourceLen( char*         dest, 
263,273c263
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            char*         dest, 
263,273c263
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           *         dest, 
263,273c263
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           blockSize100kdest, 
264,273c264
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            , 
264,274c264
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            int           unsigned * destLen,
264,274c264
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            int           verbosity* destLen,
265,274c265
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            destLen,
265,274c265
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            int           ,
265,275c265
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
>                            int           workFactor char*         source, 
266,275c266
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
> *         source, 
268,275c268
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
> source, 
272,275c272
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
>  , 
273,276c273
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
---
>                            unsigned   sourceLen,
273,276c273
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
---
>                            ( sourceLen,
273,276c273
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
---
>                            ( char,
273,277c273
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small,
---
>                            ( char*         int           small,
273,277c273
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small,
---
>                            ( char*         destsmall,
274,277c274
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small,
---
>                              ,
274,278c274
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
---
>                              unsigned int            )
274,278c274
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
---
>                              unsigned * )
274,285c274
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
---
>                              unsigned * destLen;
275,290c275
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
---
>                              BZ2_bzopen
275,293c275
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
---
>                              char;
275,298c275
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
---
>                              char*         BZ2_bzdopen
275,301c275
<                              char*         source, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
---
>                              char*         source;
276,307c276
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
---
>                              BZ2_bzwrite ( blen )
276,307c276
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
---
>                              unsigned   ( blen )
276,307c276
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
---
>                              unsigned   sourceLenblen )
277,307c277
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
---
>                              )
277,308c277
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
---
>                              int           {
277,309c277
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
<    }
---
>                              int           small}
278,314c278
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
---
>                              bzerrorstrings;
278,314c278
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
---
>                              int            ;
285,317c285
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
< 
< 
<    BZ2_bzerror ()
---
> BZ2_bzerror ()
290,317c290
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
< 
< 
<    BZ2_bzerror ()
---
>   ()
293,317c293
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
< 
< 
<    BZ2_bzerror ()
---
>     )
298,318c298
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
< 
< 
<    BZ2_bzerror ()
< {
---
>   {
301,319c301
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
< 
< 
<    BZ2_bzerror ()
< {
<       bzerrorstrings;
---
>    bzerrorstrings;
307,319c307
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
< 
< 
<    BZ2_bzerror ()
< {
<       bzerrorstrings;
---
>  ;
307,320c307
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
< 
< 
<    BZ2_bzerror ()
< {
<       bzerrorstrings;
< }
---
>  BZ2_bzwrite }
307,349c307
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
< 
< 
<    BZ2_bzerror ()
< {
<       bzerrorstrings;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
>  BZ2_bzwrite ( #if BZ_UNIX
307,349c307
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
< 
< 
<    BZ2_bzerror ()
< {
<       bzerrorstrings;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
>  BZ2_bzwrite ( blen if BZ_UNIX
308,349c308
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
< 
< 
<    BZ2_bzerror ()
< {
<       bzerrorstrings;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> BZ_UNIX
309,354c309
<    }
< 
< 
< 
< 
<   bzerrorstrings;
< 
< 
<    BZ2_bzerror ()
< {
<       bzerrorstrings;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
<  
< 
<         
< 
< #endif 
---
>    #endif 
314,354c314
<   bzerrorstrings;
< 
< 
<    BZ2_bzerror ()
< {
<       bzerrorstrings;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
<  
< 
<         
< 
< #endif 
---
>   endif 
314,361c314
<   bzerrorstrings;
< 
< 
<    BZ2_bzerror ()
< {
<       bzerrorstrings;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
<  
< 
<         
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
<  
\ No newline at end of file
---
>   bzerrorstrings
\ No newline at end of file
317,361c317
<    BZ2_bzerror ()
< {
<       bzerrorstrings;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
<  
< 
<         
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
<  
\ No newline at end of file
---
>    
\ No newline at end of file
317,361c317
<    BZ2_bzerror ()
< {
<       bzerrorstrings;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
<  
< 
<         
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
<  
\ No newline at end of file
---
>    BZ2_bzerror 
\ No newline at end of file
317,361c317
<    BZ2_bzerror ()
< {
<       bzerrorstrings;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
<  
< 
<         
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
<  
\ No newline at end of file
---
>    BZ2_bzerror (
\ No newline at end of file
318,361d317
< {
<       bzerrorstrings;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
<  
< 
<         
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
<  
\ No newline at end of file
319,361c319
<       bzerrorstrings;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
<  
< 
<         
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
<  
\ No newline at end of file
---
>       
\ No newline at end of file
319,361c319
<       bzerrorstrings;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
<  
< 
<         
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
<  
\ No newline at end of file
---
>       bzerrorstrings
\ No newline at end of file
320,361d319
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
<  
< 
<         
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
<  
\ No newline at end of file
349,361d348
< #if BZ_UNIX
<  
< 
<         
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
<  
\ No newline at end of file
(98.3 %, 3419 bytes)
===< pass_clex :: rm-toks-10 >===
9,15c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> h>
9,15c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #>
9,17c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #define #   define BZ_API 
9,17c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #define BZ_OK                define BZ_API 
9,17c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #define BZ_OK                -BZ_API 
15,17d14
< #include <stdio.h>
< 
< #   define BZ_API 
15,18c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #define BZ_EXTERN 
15,18c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #include BZ_EXTERN 
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include <#define BZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include <stdiodefine BZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include <stdio.BZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include <stdio.h5000
17,33c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> * BZ2_bzReadOpen ( 
17,33c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> #   BZ2_bzReadOpen ( 
17,33c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> #   define ( 
18,34c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
---
> int*  ,   
18,34c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
---
> #   *  ,   
18,34c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
---
> #   define ,   
29,35c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> FILE* , 
29,35c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> #* , 
29,35c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> #define , 
29,36c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> #define BZ_MAX_UNUSED int   , 
33,36c33
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
>  , 
33,37c33
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
>  * int   ,
33,37c33
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
>  * BZ2_bzReadOpen ,
34,37d33
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
34,38c34
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
>       int* ,    
34,38c34
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
>       int*  ,    
35,38d34
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
35,40c35
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
---
>       FILE)
35,42c35
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
---
>       FILE* ;
36,44c36
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
---
>       void BZ2_bzReadGetUnused ( 
36,44c36
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
---
>       int   BZ2_bzReadGetUnused ( 
37,44c37
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
---
>       ( 
37,45c37
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
---
>       int   int*    , 
38,45c38
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
---
>       *    , 
38,45c38
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
---
>       void, 
38,46c38
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
---
>       void* int* , 
39,46c39
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
---
>       * , 
40,46c40
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
---
>    , 
42,47c42
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
---
> void**  ,  
44,47c44
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
---
>  **  ,  
44,47c44
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
---
>  void *  ,  
44,47c44
<  void BZ2_bzReadGetUnused ( 
<       int*    , 
<       int* , 
<       void**  ,  
---
>  void BZ2_bzReadGetUnused ,  
45,47d44
<       int*    , 
<       int* , 
<       void**  ,  
45,47d44
<       int*    , 
<       int* , 
<       void**  ,  
(98.4 %, 3370 bytes)
45,51d44
<       int*     
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
45,52c45
<       int*     
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
---
>       int* , 
46,52c46
<    )
< 
< ;
< 
<  * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
---
>    , 
(98.4 %, 3303 bytes)
45,53c45
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
---
>       void BZ2_bzWriteClose ( 
45,53c45
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
---
>       FILEBZ2_bzWriteClose ( 
45,53c45
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
---
>       FILE* ( 
46,53d45
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
46,54c46
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
---
>       int   ;
47,56c47
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
---
>       void BZ2_bzWriteClose64 ( 
47,56c47
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
---
>       int   BZ2_bzWriteClose64 ( 
48,56c48
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
---
>       ( 
49,57c49
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>    int*          , 
51,57c51
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> *          , 
53,57c53
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>  , 
53,58c53
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
---
>  void int*       , 
53,58c53
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
---
>  void BZ2_bzWriteClose *       , 
54,58c54
<       );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
---
>       , 
54,59c54
<       );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
---
>       )int           , 
56,59c56
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
---
>  , 
56,60c56
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>  void unsigned * , 
56,60c56
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>  void BZ2_bzWriteClose64 * , 
57,60c57
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>       , 
57,61c57
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       intunsigned * , 
57,61c57
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       int*          * , 
58,61c58
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       , 
58,62c58
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       intunsigned * , 
58,62c58
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       int*       * , 
59,62c59
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       , 
59,63c59
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
---
>       int           unsigned * 
60,63c60
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
---
>       * 
60,64c60
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       unsigned );
60,64c60
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       unsigned * ;
61,69c61
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
---
>       BZ2_bzBuffToBuffCompress ( 
61,69c61
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
---
>       unsigned ( 
61,70c61
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       unsigned * char*         , 
62,70c62
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       *         , 
62,70c62
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       unsigned , 
62,71c62
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned * unsigned * ,
63,71c63
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       * ,
63,71c63
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned ,
64,72c64
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>    char*         , 
64,72c64
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>    )*         , 
69,72c69
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>   , 
69,73c69
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>   BZ2_bzBuffToBuffCompress unsigned   ,
70,73c70
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>       ,
70,74c70
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
---
>       charint           , 
71,74d70
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
71,74d70
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
71,75c71
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
---
>       unsigned , 
71,76c71
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
---
>       unsigned * int            
72,77c72
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
---
>       );
72,77c72
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
---
>       char;
72,79c72
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
---
>       char*         BZ2_bzBuffToBuffDecompress ( 
73,79c73
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
---
>       ( 
73,80c73
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       unsigned   char*         , 
74,80c74
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       *         , 
75,80d74
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
75,80d74
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
75,81c75
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
>       int           * ,
76,81c76
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
>       ,
77,82c77
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>    char*         , 
77,82c77
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>    )*         , 
79,82c79
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>   , 
79,83c79
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>   BZ2_bzBuffToBuffDecompress unsigned   ,
80,83c80
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>       ,
80,84c80
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
---
>       charint           , 
81,84d80
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
81,84d80
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
81,85c81
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
---
>       unsigned )
81,87c81
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
---
>       unsigned * ;
82,92c82
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
---
>       ;
82,97c82
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
---
>       chargenerateMTFValues (  s )
82,97c82
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
---
>       char*         (  s )
83,97c83
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
---
>       s )
83,97c83
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
---
>       unsigned   )
84,98c84
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
< {
---
>       {
84,99c84
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
< {
<        ;
---
>       int           ;
85,104c85
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
---
>       ;
85,105c85
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
< }
---
>       int           }
87,117c87
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
---
>  BZ2_bzCompress ( )
92,117c92
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
---
>      ( )
97,117c97
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
---
> )
97,118c97
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
---
> generateMTFValues {
97,121c97
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
---
> generateMTFValues (  }
97,129c97
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
---
> generateMTFValues (  s BZ2_bzDecompressInit 
98,130c98
< {
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
---
> (  small )
99,130c99
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
---
>        small )
104,130c104
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
---
>    )
105,130d104
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
117,132d116
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
117,142c117
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
> BZ2_bzCompress BZ2_bzDecompress (  strm )
117,142c117
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
> BZ2_bzCompress ( (  strm )
118,142c118
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
> strm )
121,142c121
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
> )
129,143c129
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
---
>  {
130,144c130
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
>                      struct DState* s;
130,144c130
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
>                      (  DState* s;
130,144c130
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
>                      (  small * s;
131,144c131
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
> s;
133,144c133
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
> ;
142,145c142
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
>  s == NULL 
142,145c142
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
>  BZ2_bzDecompress == NULL 
142,145c142
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
>  BZ2_bzDecompress (  NULL 
142,148c142
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
---
>  BZ2_bzDecompress (  strm ;
143,148d142
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
144,159c144
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
---
>    typedef 
144,160c144
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
---
>    struct struct {
144,160c144
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
---
>    struct DState{
144,161c144
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
---
>    struct DState* FILE*     handle
144,161c144
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
---
>    struct DState* s*     handle
145,161c145
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
---
>     handle
145,162c145
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
<            ;
---
>     s ;
145,163c145
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
<            ;
<    }
---
>     s == }
148,163d147
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
<            ;
<    }
149,164c149
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
---
> ;
159,171d158
< typedef 
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
160,172c160
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
---
>    BZ2_bzWriteOpen 
160,173c160
<    struct {
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>    struct ( int*  bzerror,      
161,173c161
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       int*  bzerror,      
161,173c161
<       FILE*     handle
<            ;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       FILE*  bzerror,      
(98.4 %, 3223 bytes)
159,161c159
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> , 
159,162c159
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> * int   blockSize100k, 
160,162c160
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     blockSize100k, 
160,162c160
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( , 
160,163c160
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( intint   verbosity,
160,163c160
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  verbosity,
160,163c160
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  bzerror,
(98.5 %, 3104 bytes)
160,170c160
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
---
>                     ( int*  {
160,176c160
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
---
>                     ( int*  verbosity}
161,180c161
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
---
>                       void BZ2_bzWriteClose
161,180c161
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
---
>                       int   BZ2_bzWriteClose
161,181c161
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int,
---
>                       int   workFactor ( int,
162,181c162
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int,
---
> int,
163,181c163
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int,
---
>       ,
168,182c168
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int,
<                     unsigned * nbytes_out )
---
>  unsigned * nbytes_out )
169,182c169
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int,
<                     unsigned * nbytes_out )
---
>              * nbytes_out )
169,182c169
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int,
<                     unsigned * nbytes_out )
---
>              (      nbytes_out )
170,182c170
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int,
<                     unsigned * nbytes_out )
---
> )
176,184c176
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int,
<                     unsigned * nbytes_out )
< 
<     ;
---
> ;
180,187d179
< void BZ2_bzWriteClose
<                   ( int,
<                     unsigned * nbytes_out )
< 
<     ;
< 
< 
< 
180,187d179
< void BZ2_bzWriteClose
<                   ( int,
<                     unsigned * nbytes_out )
< 
<     ;
< 
< 
< 
(98.5 %, 3003 bytes)
180,182c180
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     int*       b, 
---
> , 
180,183c180
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
---
> void int           abandon,
181,183c181
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
---
>                   abandon,
181,183c181
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
---
>                   ( ,
181,184c181
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   ( intunsigned * nbytes_in_lo32,
181,184c181
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   ( int*          * nbytes_in_lo32,
181,184c181
<                   ( int*          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                   ( int*          bzerrornbytes_in_lo32,
182,184c182
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     ,
182,185c182
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     intunsigned * nbytes_in_hi32,
182,185c182
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     int*       * nbytes_in_hi32,
182,185c182
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     int*       bnbytes_in_hi32,
183,185c183
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     ,
183,186c183
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     int           unsigned * nbytes_out_lo32,
183,186c183
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     int           abandon* nbytes_out_lo32,
184,186c184
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     nbytes_out_lo32,
184,186c184
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned ,
184,187c184
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * unsigned * nbytes_out_hi32 )
184,187c184
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_in_lo32* nbytes_out_hi32 )
185,187c185
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     nbytes_out_hi32 )
185,187c185
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned )
185,188c185
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * {
185,192c185
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
---
>                     unsigned * nbytes_in_hi32}
186,196c186
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
---
>                     * BZ2_bzReadOpen 
186,196c186
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
---
>                     unsigned BZ2_bzReadOpen 
186,197c186
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned * ( int*  bzerror, 
186,197c186
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned * nbytes_out_lo32int*  bzerror, 
187,197c187
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     *  bzerror, 
187,197c187
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned bzerror, 
187,197c187
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     unsigned * , 
187,198c187
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                     unsigned * nbytes_out_hi32 FILE* f, 
188,198c188
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> * f, 
192,198c192
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> f, 
196,198c196
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> , 
196,199c196
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> * int   verbosity,
197,199c197
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    verbosity,
197,199c197
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( ,
197,200c197
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( intint   small,
197,200c197
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  small,
197,200c197
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  bzerror,
198,200d197
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
198,201c198
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* unused,
198,201c198
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* unused,
198,201c198
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* f,
199,201d198
<                      int   verbosity,
<                      int   small,
<                      void* unused,
199,201d198
<                      int   verbosity,
<                      int   small,
<                      void* unused,
199,202c199
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   verbosity)
200,203c200
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      {
200,204c200
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
---
>                      int   bzf  ();
200,204c200
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
---
>                      int   small();
201,204c201
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
---
>                      );
201,204c201
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
---
>                      void;
201,206c201
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
---
>                      void* if ( 
201,206c201
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
---
>                      void* unused( 
202,207c202
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
---
>                      BZ_MAX_UNUSED)
202,207c202
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
---
>                      int   )
202,208c202
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
---
>                      int   nUnused ;   
203,208d202
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
204,213c204
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    nUnused )
---
>     BZ2_bzReadClose ( int*    nUnused )
204,213c204
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    nUnused )
---
>     bzf  ( int*    nUnused )
204,213c204
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    nUnused )
---
>     bzf  (int*    nUnused )
204,213c204
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    nUnused )
---
>     bzf  ()*    nUnused )
206,213c206
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    nUnused )
---
>    nUnused )
206,213c206
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    nUnused )
---
>    if )
207,215c207
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
---
>        ;
207,224c207
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
---
>        BZ_MAX_UNUSEDBZ2_bzBuffToBuffCompress 
208,225c208
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>       ( char*         dest, 
209,225c209
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
> char*         dest, 
213,225c213
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  *         dest, 
213,225c213
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  BZ2_bzReadClose dest, 
213,225c213
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  BZ2_bzReadClose ( , 
213,226c213
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>  BZ2_bzReadClose ( intunsigned * destLen,
213,226c213
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>  BZ2_bzReadClose ( int*    * destLen,
213,226c213
<  BZ2_bzReadClose ( int*    nUnused )
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>  BZ2_bzReadClose ( int*    nUnused destLen,
215,226c215
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>     ,
224,227c224
<  BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
---
>  char*         source, 
225,227c225
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
---
>                          *         source, 
225,227c225
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
---
>                          ( source, 
225,227c225
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
---
>                          ( char, 
225,228c225
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
---
>                          ( char*         unsigned   sourceLen,
(98.6 %, 2867 bytes)
213,216c213
<  BZ2_bzReadClose ( int*    * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>  BZ2_bzReadClose ( int*    int           blockSize100k, 
213,216c213
<  BZ2_bzReadClose ( int*    * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>  BZ2_bzReadClose ( int*    * blockSize100k, 
213,216c213
<  BZ2_bzReadClose ( int*    * destLen,
<                            char*         source, 
<                            unsigned   sourceLen,
<                            int           blockSize100k, 
---
>  BZ2_bzReadClose ( int*    * destLen, 
(98.7 %, 2718 bytes)
213,222c213
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
---
>  BZ2_bzReadClose ( int*    * BZ2_bzBuffToBuffDecompress 
213,223c213
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  BZ2_bzReadClose ( int*    * blockSize100k( char*         dest, 
214,223c214
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            char*         dest, 
214,223c214
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           *         dest, 
214,223c214
<                            int           verbosity, 
<                            int           workFactor )
< {
<     
< }
< 
< 
< 
<  BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           verbositydest, 
(98.7 %, 2568 bytes)
214,216c214
<                            char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
>                            source, 
214,216c214
<                            char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
>                            char, 
214,217c214
<                            char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
---
>                            char*         unsigned   sourceLen,
214,217c214
<                            char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned   sourceLen,
---
>                            char*         destsourceLen,
(98.8 %, 2453 bytes)
214,229c214
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
---
>                            charBZ2_bzopen
215,232c215
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
---
>                              ;
215,237c215
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
---
>                              unsigned   BZ2_bzdopen
215,240c215
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
---
>                              unsigned   sourceLen;
216,246c216
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
---
>                              BZ2_bzwrite ( blen )
216,246c216
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
---
>                              int           ( blen )
216,246c216
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
---
>                              int           smallblen )
217,246c217
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
---
>                              )
217,247c217
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
---
>                              int            {
224,248c224
< ;
< 
< 
< 
< 
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
<    }
---
> }
229,252d228
<   BZ2_bzopen
<                   
< 
<     ;
< 
< 
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
235,255d234
< 
< 
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
< 
< 
237,256c237
<   BZ2_bzdopen
<                   
< 
<    ;
<    
< 
< 
< 
< 
<  BZ2_bzwrite ( blen )
< {
<    }
< 
< 
< 
< 
<   bzerrorstrings;
< 
< 
<    
\ No newline at end of file
---
>   
\ No newline at end of file
(98.9 %, 2330 bytes)
229,232c229
<   bzerrorstrings;
< 
< 
<    
\ No newline at end of file
---
>   
\ No newline at end of file
229,232c229
<   bzerrorstrings;
< 
< 
<    
\ No newline at end of file
---
>   bzerrorstrings
\ No newline at end of file
(98.9 %, 2309 bytes)
Termination check: size was 4812; now 2309
===< pass_balanced :: angles-only >===
15c15
< #include <stdio.h>
---
> #include stdio.h
===< pass_clang :: union-to-struct >===
===< pass_clang :: return-void >===
33c33
<  * BZ2_bzReadOpen ( 
---
>  void  BZ2_bzReadOpen ( 
===< pass_clang :: callexpr-to-value >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: replace-simple-typedef >===
===< pass_clang :: replace-one-level-typedef-type >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: remove-pointer >===
144c144
<    struct DState* s;
---
>    struct DState s;
===< pass_clang :: replace-dependent-name >===
===< pass_special :: c >===
===< pass_clex :: rm-toks-16 >===
9,18c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> define BZ_EXTERN 
9,18c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #BZ_EXTERN 
9,29c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #define #define BZ_MAX_UNUSED 5000
9,29c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_OK                define BZ_MAX_UNUSED 5000
9,29c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_OK                -BZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> 5000
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> #* BZ2_bzReadOpen ( 
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> #include BZ2_bzReadOpen ( 
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> #include <( 
15,34c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
---
> #include <stdioint*  ,   
15,34c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
---
> #include <stdio.*  ,   
15,34c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
---
> #include <stdio.h,   
17,35c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> FILE* , 
17,35c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> #   * , 
17,35c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> #   define , 
18,36c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> int   , 
18,36c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> #   , 
18,37c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
> #   define int   ,
29,37c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
> ,
29,38c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
> #void* ,    
29,38c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
> #define * ,    
29,38c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
> #define BZ_MAX_UNUSED ,    
33,39c33
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
---
>  int    
33,40c33
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
---
>  * )
33,42c33
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
---
>  * BZ2_bzReadOpen ;
34,44c34
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
---
>       void BZ2_bzReadGetUnused ( 
34,44c34
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
---
>       intBZ2_bzReadGetUnused ( 
34,44c34
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
---
>       int*  ( 
37,46d36
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
37,46d36
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
37,46d36
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
37,46d36
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
37,46d36
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
37,46d36
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
37,46d36
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
38,47d37
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
<       int   , 
38,49c38
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
---
>       void)
38,51c38
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
---
>       void* ;
39,53c39
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
---
>       void BZ2_bzWriteClose ( 
40,53c40
<    )
< 
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
---
>    BZ2_bzWriteClose ( 
42,53c42
< ;
< 
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
---
> ( 
44,54c44
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
---
>  );
44,54c44
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
---
>  void ;
44,56c44
<  void BZ2_bzReadGetUnused ( 
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
---
>  void BZ2_bzReadGetUnused void BZ2_bzWriteClose64 ( 
45,56c45
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
---
>       BZ2_bzWriteClose64 ( 
45,56c45
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
---
>       FILE( 
45,57c45
<       FILE* , 
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       FILE* int*          , 
46,57c46
<       int   , 
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       *          , 
47,57d46
<       int   , 
<       int    
<    )
< 
< ;
< 
<  void BZ2_bzWriteClose ( 
<       );
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
(98.9 %, 2185 bytes)
44,51c44
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>  void * , 
46,51c46
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>  , 
46,52c46
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>  void unsigned * , 
46,52c46
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>  void BZ2_bzWriteClose64 * , 
47,52c47
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       , 
47,53c47
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
---
>       intunsigned * 
47,53c47
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
---
>       int*          * 
48,54c48
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       );
48,54c48
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
---
>       int;
48,59c48
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
---
>       int*       BZ2_bzBuffToBuffCompress ( 
49,59c49
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
---
>       ( 
49,60c49
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       int           char*         , 
50,60c50
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       *         , 
50,60c50
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       unsigned , 
50,61c50
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned * unsigned * ,
51,61c51
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       * ,
51,61c51
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned ,
51,62c51
<       unsigned * , 
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       unsigned * char*         , 
52,62c52
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       *         , 
52,62c52
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       unsigned , 
52,63c52
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>       unsigned * unsigned   ,
53,63c53
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
---
>       ,
53,64c53
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
---
>       unsigned int           , 
54,64c54
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
---
>    , 
54,65c54
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
---
>    )int           , 
59,65c59
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
---
>   , 
59,66c59
<   BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
---
>   BZ2_bzBuffToBuffCompress int            
60,67c60
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
---
>       );
60,67c60
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
---
>       char;
60,69c60
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
---
>       char*         BZ2_bzBuffToBuffDecompress ( 
61,69c61
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
---
>       ( 
61,70c61
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           , 
<       int            
<    );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       unsigned char*         , 
(99.0 %, 2036 bytes)
60,67c60
<       );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
---
>       , 
60,68c60
<       );
< 
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
---
>       )int           )
62,68c62
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
---
>   )
62,70c62
<   BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
---
>   BZ2_bzBuffToBuffDecompress ;
63,75c63
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
---
>       ;
63,80c63
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
---
>       chargenerateMTFValues (  s )
63,80c63
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
---
>       char*         (  s )
64,80c64
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
---
>       s )
64,80c64
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
---
>       unsigned )
64,81c64
<       unsigned * ,
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
< {
---
>       unsigned * {
65,82c65
<       char*         , 
<       unsigned   ,
<       int           , 
<       int           )
< 
<  ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
< {
<        ;
---
>       ;
(99.1 %, 1902 bytes)
62,105c62
<   BZ2_bzBuffToBuffDecompress ;
< 
<    
< 
<              
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
---
>   BZ2_bzBuffToBuffDecompress (  small )
67,105c67
<      ;
< 
< 
< 
< 
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
---
>      small )
72,105c72
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
---
> )
72,106c72
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
---
> generateMTFValues {
72,108c72
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
---
> generateMTFValues (  }
72,117c72
< generateMTFValues (  s )
< {
<        ;
< 
<    
<       
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<     
< }
< 
< 
< 
< 
< 
< 
< 
<  BZ2_bzDecompressInit 
<                      (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
> generateMTFValues (  s BZ2_bzDecompress (  strm )
(99.2 %, 1719 bytes)
62,77c62
<   BZ2_bzBuffToBuffDecompress (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
>   BZ2_bzBuffToBuffDecompress == NULL 
62,77c62
<   BZ2_bzBuffToBuffDecompress (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
>   BZ2_bzBuffToBuffDecompress (  NULL 
62,80c62
<   BZ2_bzBuffToBuffDecompress (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
---
>   BZ2_bzBuffToBuffDecompress (  small ;
63,80d62
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
65,90d64
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
74,91c74
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
---
>  BZ2_bzWriteOpen 
74,92c74
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
---
>  BZ2_bzDecompress ( int*  verbosity,
74,92c74
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
---
>  BZ2_bzDecompress (  int*  verbosity,
74,92c74
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
---
>  BZ2_bzDecompress (  strm *  verbosity,
75,92c75
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
---
> verbosity,
76,92c76
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
---
>    ,
76,93c76
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
<                       int   workFactor )
---
>    struct int   workFactor )
76,93c76
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
<                       int   workFactor )
---
>    struct DStateworkFactor )
76,93c76
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
<                       int   workFactor )
---
>    struct DState* )
76,94c76
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
<                       int   workFactor )
< {
---
>    struct DState* s{
77,95c77
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
---
>     }
77,100c77
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
---
>     s BZ2_bzWrite
77,101c77
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
---
>     s == (      )
80,101c80
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
---
>    )
81,101d80
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
91,107d90
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
91,112c91
< * BZ2_bzWriteOpen 
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose64
---
> * void BZ2_bzWriteClose64
92,112c92
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose64
---
>                     BZ2_bzWriteClose64
92,113c92
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     ( ( int*          bzerror, 
92,113c92
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     ( intint*          bzerror, 
92,113c92
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     ( int*  *          bzerror, 
92,113c92
<                     ( int*  verbosity,
<                       int   workFactor )
< {
<       }
< 
< 
< 
< 
<  BZ2_bzWrite
<              (      )
< {
<    
< 
<    
<          
<    
< }
< 
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                     ( int*  verbositybzerror, 
(99.2 %, 1541 bytes)
92,96c92
<                     ( int*  *          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     ( int*  nbytes_in_hi32,
92,96c92
<                     ( int*  *          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     ( int*  *          ,
92,97c92
<                     ( int*  *          bzerror, 
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     ( int*  *          bzerrorunsigned * nbytes_out_lo32,
93,97c93
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     * nbytes_out_lo32,
93,97c93
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     intnbytes_out_lo32,
93,97c93
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     int*       ,
93,98c93
<                     int*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     int*       bunsigned * nbytes_out_hi32 )
94,98c94
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     * nbytes_out_hi32 )
94,98c94
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     int           nbytes_out_hi32 )
(99.3 %, 1364 bytes)
92,104c92
<                     ( int*  nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     ( int*  *  bzerror, 
92,104c92
<                     ( int*  nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     ( int*  nbytes_in_hi32bzerror, 
93,104c93
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<    
< }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>                     , 
(99.4 %, 1188 bytes)
92,96c92
<                     ( int*  *  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                     ( int*  ,
92,97c92
<                     ( int*  *  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                     ( int*  *  int   nUnused )
92,97c92
<                     ( int*  *  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                     ( int*  *  bzerrornUnused )
93,97c93
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      )
93,98c93
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      FILE{
93,99c93
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
---
>                      FILE* bzf  ();
93,99c93
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
---
>                      FILE* f();
94,99c94
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
---
>                      );
94,99c94
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
---
>                      int   ;
94,101c94
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
---
>                      int   verbosityif ( 
95,101c95
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
---
>                      ( 
95,102c95
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
---
>                      int   BZ_MAX_UNUSED)
(99.5 %, 1020 bytes)
92,103c92
<                     ( int*  *  bzerrornUnused )
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    * blockSize100k, 
---
>                     ( int*  *  bzerrornUnused * blockSize100k, 
93,103c93
< {
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    * blockSize100k, 
---
> blockSize100k, 
94,103c94
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    * blockSize100k, 
---
>     , 
94,104c94
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
---
>     bzf  char, 
94,104c94
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
---
>     bzf  (, 
94,105c94
<     bzf  ();
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
---
>     bzf  ()unsigned   sourceLen,
96,105c96
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
---
>    sourceLen,
96,105c96
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
---
>    if ,
97,106c97
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
---
>        int           small,
97,106c97
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
---
>        BZ_MAX_UNUSEDsmall,
98,106c98
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
---
>       ,
99,107c99
< }
< 
< 
< 
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
---
> int            )
103,107c103
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
---
>  )
103,114c103
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
---
>  BZ2_bzReadClose ;
103,119c103
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>  BZ2_bzReadClose ( 
\ No newline at end of file
103,119c103
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>  BZ2_bzReadClose ( int
\ No newline at end of file
103,119c103
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>  BZ2_bzReadClose ( int*    
\ No newline at end of file
103,119c103
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>  BZ2_bzReadClose ( int*    * 
\ No newline at end of file
103,119c103
<  BZ2_bzReadClose ( int*    * blockSize100k, 
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>  BZ2_bzReadClose ( int*    * blockSize100k
\ No newline at end of file
104,119c104
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>                            
\ No newline at end of file
104,119c104
<                            char, 
<                              unsigned   sourceLen,
<                              int           small,
<                              int            )
< 
<    
< 
< 
< 
< 
< ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>                            char
\ No newline at end of file
(99.6 %, 802 bytes)
103,108c103
<  BZ2_bzReadClose ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>  BZ2_bzReadClose 
\ No newline at end of file
===< pass_clex :: rm-toks-14 >===
9,17c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> BZ_API 
9,18c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> ##   define BZ_EXTERN 
9,18c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #define define BZ_EXTERN 
9,18c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #define BZ_OK                BZ_EXTERN 
9,29c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_OK                -#define BZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #BZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include 5000
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> #include <* BZ2_bzReadOpen ( 
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> #include <stdioBZ2_bzReadOpen ( 
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> #include <stdio.( 
15,34c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
---
> #include <stdio.hint*  ,   
17,34c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
---
> *  ,   
17,34c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
---
> #   ,   
17,35c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> #   define FILE* , 
18,35c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> * , 
18,35c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> #   , 
18,36c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> #   define int   , 
29,36c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> , 
29,37c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
> #int   ,
29,37c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
> #define ,
29,38c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
> #define BZ_MAX_UNUSED void* ,    
33,38c33
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
>  * ,    
33,38c33
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
>  * ,    
33,39c33
<  * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
---
>  * BZ2_bzReadOpen int    
34,40c34
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
---
>       )
34,42c34
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
---
>       int;
34,44c34
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void ;
---
>       int*  void ;
35,44c35
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void ;
---
>       ;
35,46c35
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
---
>       FILEvoid BZ2_bzWriteClose64 ( 
35,46c35
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
---
>       FILE* BZ2_bzWriteClose64 ( 
36,46c36
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
---
>       ( 
36,47c36
<       int   , 
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       int   int*          , 
37,47c37
<       int   ,
<       void* ,    
<       int    
<    )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       *          , 
(99.7 %, 712 bytes)
34,43c34
<       )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
---
>       , 
36,44c36
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
> unsigned * , 
38,44c38
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>  * , 
38,44c38
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
---
>  void , 
40,45c40
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>  unsigned * , 
40,45c40
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>  void * , 
40,45c40
<  void BZ2_bzWriteClose64 ( 
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>  void BZ2_bzWriteClose64 , 
41,45d40
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
41,46c41
<       int*          , 
<       int*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       int* , 
(99.7 %, 606 bytes)
41,51c41
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       );
< 
<   BZ2_bzBuffToBuffDecompress (  small )
---
>       )
41,52c41
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       );
< 
<   BZ2_bzBuffToBuffDecompress (  small )
< {
---
>       unsigned {
41,54c41
<       unsigned * , 
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       );
< 
<   BZ2_bzBuffToBuffDecompress (  small )
< {
<     
< }
---
>       unsigned * }
42,63c42
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       );
< 
<   BZ2_bzBuffToBuffDecompress (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
>       BZ2_bzDecompress (  strm )
42,63c42
<       unsigned * 
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       );
< 
<   BZ2_bzBuffToBuffDecompress (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
>       unsigned (  strm )
43,63c43
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       );
< 
<   BZ2_bzBuffToBuffDecompress (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
>    strm )
43,63c43
<    );
< 
< 
< 
< 
<   BZ2_bzBuffToBuffCompress ( 
<       );
< 
<   BZ2_bzBuffToBuffDecompress (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
>    ))
48,64c48
<   BZ2_bzBuffToBuffCompress ( 
<       );
< 
<   BZ2_bzBuffToBuffDecompress (  small )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
---
>   {
(99.8 %, 486 bytes)
41,56c41
<       )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
>       == NULL 
42,56c42
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
> NULL 
44,59c44
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
---
> ;
53,60c53
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
---
>  }
53,70c53
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
---
>  BZ2_bzDecompress * BZ2_bzWriteOpen 
53,70c53
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
---
>  BZ2_bzDecompress (  BZ2_bzWriteOpen 
53,71c53
<  BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  *  bzerrornUnused )
---
>  BZ2_bzDecompress (  strm ( int*  *  bzerrornUnused )
54,71c54
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  *  bzerrornUnused )
---
> int*  *  bzerrornUnused )
55,71c55
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  *  bzerrornUnused )
---
>    *  *  bzerrornUnused )
55,71c55
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  *  bzerrornUnused )
---
>    struct *  bzerrornUnused )
55,71c55
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  *  bzerrornUnused )
---
>    struct DStatebzerrornUnused )
55,71c55
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  *  bzerrornUnused )
---
>    struct DState* )
55,72c55
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  *  bzerrornUnused )
< {
---
>    struct DState* s{
56,72d55
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  *  bzerrornUnused )
< {
56,73c56
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  *  bzerrornUnused )
< {
<     bzf  ();
---
>     s ();
56,73c56
<     s == NULL 
<    
< 
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  *  bzerrornUnused )
< {
<     bzf  ();
---
>     s == );
60,73d59
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  *  bzerrornUnused )
< {
<     bzf  ();
60,75c60
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  *  bzerrornUnused )
< {
<     bzf  ();
< 
<    if ( 
---
> if ( 
(99.8 %, 393 bytes)
59,73c59
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>    
\ No newline at end of file
61,73c61
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>    
\ No newline at end of file
61,73c61
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>    if 
\ No newline at end of file
62,73c62
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>        
\ No newline at end of file
62,73c62
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>        BZ_MAX_UNUSED
\ No newline at end of file
63,73c63
<       ;   
< }
< 
< 
< 
<  BZ2_bzReadClose ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>       
\ No newline at end of file
64,73d63
< }
< 
< 
< 
<  BZ2_bzReadClose ;
< 
< 
< 
< 
<   
\ No newline at end of file
68,73c68
<  BZ2_bzReadClose ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>  
\ No newline at end of file
68,73c68
<  BZ2_bzReadClose ;
< 
< 
< 
< 
<   
\ No newline at end of file
---
>  BZ2_bzReadClose 
\ No newline at end of file
(99.8 %, 369 bytes)
===< pass_clex :: rm-toks-12 >===
9,16d8
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
9,17c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #define BZ_API 
9,17c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #define BZ_API 
9,18c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #define BZ_OK                #   define BZ_EXTERN 
9,18c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #define BZ_OK                -define BZ_EXTERN 
15,18c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> BZ_EXTERN 
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> ##define BZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include define BZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include <BZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include <stdio5000
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> #include <stdio.* BZ2_bzReadOpen ( 
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> #include <stdio.hBZ2_bzReadOpen ( 
17,33c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
---
> ( 
17,34c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       )
---
> #   )
17,36c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       )
< 
< ;
---
> #   define ;
18,38c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       )
< 
< ;
< 
<  void ;
---
> void ;
18,38c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       )
< 
< ;
< 
<  void ;
---
> #   ;
18,40c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
---
> #   define void BZ2_bzWriteClose64 ( 
29,40c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
---
> BZ2_bzWriteClose64 ( 
29,40c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
---
> #( 
29,41c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
<       )
---
> #define )
29,42c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzReadOpen ( 
<       )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
<       )
< {
---
> #define BZ_MAX_UNUSED {
33,44c33
<  * BZ2_bzReadOpen ( 
<       )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
<       )
< {
<     
< }
---
>  }
33,53c33
<  * BZ2_bzReadOpen ( 
<       )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
<       )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
>  * BZ2_bzDecompress (  strm )
33,53c33
<  * BZ2_bzReadOpen ( 
<       )
< 
< ;
< 
<  void ;
< 
<  void BZ2_bzWriteClose64 ( 
<       )
< {
<     
< }
< 
< 
< 
< 
<  
< 
< 
< 
<  BZ2_bzDecompress (  strm )
---
>  * BZ2_bzReadOpen (  strm )
(99.9 %, 275 bytes)
33,36c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
>  * NULL 
33,39c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
---
>  * BZ2_bzDecompress ;
33,41c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
---
>  * BZ2_bzDecompress (  if ( 
33,41c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
---
>  * BZ2_bzDecompress (  strm ( 
34,42c34
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
---
> BZ_MAX_UNUSED)
35,42c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
---
>    )
35,43c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
---
>    struct ;   
35,44c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
---
>    struct DState}
35,48c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    struct DState* 
\ No newline at end of file
35,48c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    struct DState* s
\ No newline at end of file
36,48c36
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
36,48c36
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s 
\ No newline at end of file
36,48c36
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s == 
\ No newline at end of file
39,48c39
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
41,48c41
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
41,48c41
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
42,48c42
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
42,48c42
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        BZ_MAX_UNUSED
\ No newline at end of file
43,48c43
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
44,48d43
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-11 >===
9,15c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> >
9,17c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> ##   define BZ_API 
9,17c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #define define BZ_API 
9,17c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #define BZ_OK                BZ_API 
9,18c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #define BZ_OK                -#   define BZ_EXTERN 
15,18c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> define BZ_EXTERN 
15,18c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #BZ_EXTERN 
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include #define BZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include <define BZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include <stdioBZ_MAX_UNUSED 5000
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include <stdio.5000
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
---
> #include <stdio.h* BZ2_bzDecompress (  strm )
17,33c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
---
> BZ2_bzDecompress (  strm )
17,33c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
---
> #   (  strm )
17,33c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
---
> #   define strm )
18,33c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
---
> )
18,34c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
< {
---
> #   {
18,35c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
> #   define struct DState* s;
29,35c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
> DState* s;
29,35c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
> #* s;
29,35c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
> #define s;
29,35c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
> #define BZ_MAX_UNUSED ;
33,36c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
>  s == NULL 
33,36c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
>  * == NULL 
33,36c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
>  * BZ2_bzDecompress NULL 
33,39c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
---
>  * BZ2_bzDecompress (  ;
33,41c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
---
>  * BZ2_bzDecompress (  strm if ( 
34,41c34
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
---
> ( 
35,42c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
---
>    BZ_MAX_UNUSED)
35,42c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
---
>    struct )
35,43c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
---
>    struct DState;   
35,44c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
---
>    struct DState* }
35,48c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    struct DState* s
\ No newline at end of file
36,48c36
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
36,48c36
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s 
\ No newline at end of file
36,48c36
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s == 
\ No newline at end of file
39,48c39
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
41,48c41
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
41,48c41
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
42,48c42
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
42,48c42
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        BZ_MAX_UNUSED
\ No newline at end of file
43,48c43
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
44,48d43
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-7 >===
9,15c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> <stdio.h>
9,15c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #stdio.h>
9,15c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define .h>
9,15c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_OK                h>
9,15c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_OK                ->
15,16d14
< #include <stdio.h>
< 
15,17c15
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #define BZ_API 
15,17c15
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #include BZ_API 
15,18c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #include <#   define BZ_EXTERN 
15,18c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #include <stdiodefine BZ_EXTERN 
15,18c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #include <stdio.BZ_EXTERN 
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #include <stdio.h#define BZ_MAX_UNUSED 5000
17,29c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
17,29c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   BZ_MAX_UNUSED 5000
17,29c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define 5000
18,33c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
---
> * BZ2_bzDecompress (  strm )
18,33c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
---
> #   BZ2_bzDecompress (  strm )
18,33c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
---
> #   define (  strm )
29,33c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
---
> strm )
29,33c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
---
> #)
29,34c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
< {
---
> #define {
29,35c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
> #define BZ_MAX_UNUSED struct DState* s;
33,35c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
>  DState* s;
33,35c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
>  * * s;
33,35c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
>  * BZ2_bzDecompress s;
33,35c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
---
>  * BZ2_bzDecompress (  ;
33,36c33
<  * BZ2_bzDecompress (  strm )
< {
<    struct DState* s;
<     s == NULL 
---
>  * BZ2_bzDecompress (  strm s == NULL 
34,36c34
< {
<    struct DState* s;
<     s == NULL 
---
> == NULL 
35,36c35
<    struct DState* s;
<     s == NULL 
---
>    NULL 
35,39c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
---
>    struct ;
35,41c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
---
>    struct DStateif ( 
35,41c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
---
>    struct DState* ( 
35,42c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
---
>    struct DState* sBZ_MAX_UNUSED)
36,42c36
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
---
>     )
36,43c36
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
---
>     s ;   
36,44c36
<     s == NULL 
<    
< 
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
---
>     s == }
39,48c39
<    ;
< 
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
41,48c41
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
41,48c41
<    if ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    if 
\ No newline at end of file
42,48c42
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
42,48c42
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        BZ_MAX_UNUSED
\ No newline at end of file
43,48c43
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
44,48d43
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-1 >===
9c9
< #define BZ_OK                -9
---
> define BZ_OK                -9
9c9
< #define BZ_OK                -9
---
> #BZ_OK                -9
9c9
< #define BZ_OK                -9
---
> #define -9
9c9
< #define BZ_OK                -9
---
> #define BZ_OK                9
9,15c9
< #define BZ_OK                -9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_OK                -#include <stdio.h>
15c15
< #include <stdio.h>
---
> include <stdio.h>
15c15
< #include <stdio.h>
---
> #<stdio.h>
15c15
< #include <stdio.h>
---
> #include stdio.h>
15c15
< #include <stdio.h>
---
> #include <.h>
15c15
< #include <stdio.h>
---
> #include <stdioh>
15c15
< #include <stdio.h>
---
> #include <stdio.>
(99.9 %, 274 bytes)
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_OK                #include <stdio.h>
15c15
< #include <stdio.h>
---
> include <stdio.h>
15c15
< #include <stdio.h>
---
> #<stdio.h>
15c15
< #include <stdio.h>
---
> #include stdio.h>
15c15
< #include <stdio.h>
---
> #include <.h>
15c15
< #include <stdio.h>
---
> #include <stdioh>
15c15
< #include <stdio.h>
---
> #include <stdio.>
15,17c15
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #include <stdio.h#   define BZ_API 
17c17
< #   define BZ_API 
---
> define BZ_API 
17c17
< #   define BZ_API 
---
> #   BZ_API 
17,18c17
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #   define #   define BZ_EXTERN 
18c18
< #   define BZ_EXTERN 
---
> define BZ_EXTERN 
18c18
< #   define BZ_EXTERN 
---
> #   BZ_EXTERN 
18,29c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> #   define #define BZ_MAX_UNUSED 5000
29c29
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
29c29
< #define BZ_MAX_UNUSED 5000
---
> #BZ_MAX_UNUSED 5000
29c29
< #define BZ_MAX_UNUSED 5000
---
> #define 5000
29,33c29
< #define BZ_MAX_UNUSED 5000
< 
< 
< 
<  * BZ2_bzDecompress (  strm )
---
> #define BZ_MAX_UNUSED * BZ2_bzDecompress (  strm )
33c33
<  * BZ2_bzDecompress (  strm )
---
>  BZ2_bzDecompress (  strm )
33c33
<  * BZ2_bzDecompress (  strm )
---
>  * (  strm )
33c33
<  * BZ2_bzDecompress (  strm )
---
>  * BZ2_bzDecompress strm )
33c33
<  * BZ2_bzDecompress (  strm )
---
>  * BZ2_bzDecompress (  )
(99.9 %, 272 bytes)
33c33
<  BZ2_bzDecompress (  strm )
---
>  (  strm )
33c33
<  BZ2_bzDecompress (  strm )
---
>  BZ2_bzDecompress strm )
33c33
<  BZ2_bzDecompress (  strm )
---
>  BZ2_bzDecompress (  )
33,34c33
<  BZ2_bzDecompress (  strm )
< {
---
>  BZ2_bzDecompress (  strm {
34,35c34
< {
<    struct DState* s;
---
> struct DState* s;
35c35
<    struct DState* s;
---
>    DState* s;
35c35
<    struct DState* s;
---
>    struct * s;
35c35
<    struct DState* s;
---
>    struct DStates;
35c35
<    struct DState* s;
---
>    struct DState* ;
35,36c35
<    struct DState* s;
<     s == NULL 
---
>    struct DState* ss == NULL 
(99.9 %, 267 bytes)
33,34c33
<  BZ2_bzDecompress (  )
< {
---
>  BZ2_bzDecompress (  {
34,35c34
< {
<    struct DState* s;
---
> struct DState* s;
35c35
<    struct DState* s;
---
>    DState* s;
35c35
<    struct DState* s;
---
>    struct * s;
35c35
<    struct DState* s;
---
>    struct DStates;
35c35
<    struct DState* s;
---
>    struct DState* ;
35,36c35
<    struct DState* s;
<     s == NULL 
---
>    struct DState* ss == NULL 
36c36
<     s == NULL 
---
>     == NULL 
36c36
<     s == NULL 
---
>     s NULL 
36,39c36
<     s == NULL 
<    
< 
<    ;
---
>     s == ;
39,40d38
<    ;
< 
41c41
<    if ( 
---
>    ( 
41,42c41
<    if ( 
<        BZ_MAX_UNUSED)
---
>    if BZ_MAX_UNUSED)
42c42
<        BZ_MAX_UNUSED)
---
>        )
42,43c42
<        BZ_MAX_UNUSED)
<       ;   
---
>        BZ_MAX_UNUSED;   
43,44c43
<       ;   
< }
---
>       }
44,48d43
< }
< 
< 
< 
<  
\ No newline at end of file
(99.9 %, 264 bytes)
41,42c41
<    ( 
<        BZ_MAX_UNUSED)
---
>    BZ_MAX_UNUSED)
42c42
<        BZ_MAX_UNUSED)
---
>        )
42,43c42
<        BZ_MAX_UNUSED)
<       ;   
---
>        BZ_MAX_UNUSED;   
43,44c43
<       ;   
< }
---
>       }
44,48d43
< }
< 
< 
< 
<  
\ No newline at end of file
Termination check: size was 2309; now 264
===< pass_balanced :: angles >===
15c15
< #include <stdio.h>
---
> #include 
===< pass_clang :: local-to-global >===
33c33,34
<  BZ2_bzDecompress (  )
---
>  struct DState *BZ2_bzDecompress_s;
> BZ2_bzDecompress (  )
35c36
<    struct DState* s;
---
>    
===< pass_clang :: remove-nested-function >===
===< pass_clang :: return-void >===
===< pass_clang :: copy-propagation >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: replace-class-with-base-template-spec >===
===< pass_clang :: remove-addr-taken >===
===< pass_clang :: replace-undefined-function >===
===< pass_comments :: 0 >===
===< pass_ints :: a >===
29c29
< #define BZ_MAX_UNUSED 5000
---
> #define BZ_MAX_UNUSED 000
(99.9 %, 263 bytes)
29c29
< #define BZ_MAX_UNUSED 000
---
> #define BZ_MAX_UNUSED 00
(99.9 %, 262 bytes)
29c29
< #define BZ_MAX_UNUSED 00
---
> #define BZ_MAX_UNUSED 0
(99.9 %, 261 bytes)
===< pass_ints :: e >===
===< pass_clex :: rm-toks-13 >===
9,17c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> BZ_API 
9,18c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> ##   define BZ_EXTERN 
9,18c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #define define BZ_EXTERN 
9,18c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #define BZ_OK                BZ_EXTERN 
15,28d14
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
15,28d14
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #include BZ_MAX_UNUSED 0
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #include <0
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include <stdioBZ2_bzDecompress (  )
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include <stdio.(  )
15,33c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include <stdio.h)
17,33d16
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
17,35c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
> #   struct DState* s;
17,35c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
> #   define DState* s;
18,35c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
> * s;
18,35c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
> #   s;
18,35c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
> #   define ;
29,36c29
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
<     s == NULL 
---
> s == NULL 
29,36c29
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
<     s == NULL 
---
> #== NULL 
29,36c29
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
<     s == NULL 
---
> #define NULL 
29,39c29
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
---
> #define BZ_MAX_UNUSED ;
33,41c33
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
---
>  ( 
33,42c33
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
---
>  BZ2_bzDecompress BZ_MAX_UNUSED)
34,42d33
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
34,43c34
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
---
> ;   
35,44c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
---
>    }
35,48c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    struct 
\ No newline at end of file
35,48c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    struct DState
\ No newline at end of file
35,48c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    struct DState* 
\ No newline at end of file
35,48c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    struct DState* s
\ No newline at end of file
36,48c36
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
36,48c36
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s 
\ No newline at end of file
36,48c36
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s == 
\ No newline at end of file
39,48c39
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
41,48c41
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
42,48c42
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
42,48c42
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        BZ_MAX_UNUSED
\ No newline at end of file
43,48c43
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
44,48d43
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-10 >===
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> >
9,17c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> ##   define BZ_API 
9,17c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #define define BZ_API 
9,17c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #define BZ_OK                BZ_API 
15,17d14
< #include <stdio.h>
< 
< #   define BZ_API 
15,18c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #define BZ_EXTERN 
15,18c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #include BZ_EXTERN 
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #include <#define BZ_MAX_UNUSED 0
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdiodefine BZ_MAX_UNUSED 0
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdio.BZ_MAX_UNUSED 0
15,29c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdio.h0
17,33c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> BZ2_bzDecompress (  )
17,33c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #   (  )
17,33c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #   define )
18,33d17
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
18,35c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
> #   struct DState* s;
18,35c18
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
> #   define DState* s;
29,35c29
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
> * s;
29,35c29
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
> #s;
29,35c29
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
> #define ;
29,36c29
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
<     s == NULL 
---
> #define BZ_MAX_UNUSED s == NULL 
33,36c33
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
<     s == NULL 
---
>  == NULL 
33,36c33
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
<     s == NULL 
---
>  BZ2_bzDecompress NULL 
33,39c33
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
---
>  BZ2_bzDecompress (  ;
34,41c34
< {
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
---
> ( 
35,42c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
---
>    BZ_MAX_UNUSED)
35,42c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
---
>    struct )
35,43c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
---
>    struct DState;   
35,44c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
---
>    struct DState* }
35,48c35
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    struct DState* s
\ No newline at end of file
36,48c36
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
36,48c36
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s 
\ No newline at end of file
36,48c36
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s == 
\ No newline at end of file
39,48c39
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
41,48c41
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
42,48c42
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
42,48c42
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        BZ_MAX_UNUSED
\ No newline at end of file
43,48c43
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
44,48d43
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-6 >===
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> <stdio.h>
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #stdio.h>
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define .h>
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_OK                h>
15c15
< #include <stdio.h>
---
> >
15,17c15
< #include <stdio.h>
< 
< #   define BZ_API 
---
> ##   define BZ_API 
15,17c15
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #include define BZ_API 
15,17c15
< #include <stdio.h>
< 
< #   define BZ_API 
---
> #include <BZ_API 
15,18c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #include <stdio#   define BZ_EXTERN 
15,18c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #include <stdio.define BZ_EXTERN 
15,18c15
< #include <stdio.h>
< 
< #   define BZ_API 
< #   define BZ_EXTERN 
---
> #include <stdio.hBZ_EXTERN 
17,28d16
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
17,29c17
< #   define BZ_API 
< #   define BZ_EXTERN 
< 
< 
< 
< 
<  
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 0
---
> #   define BZ_MAX_UNUSED 0
(99.9 %, 209 bytes)
17,21c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> )
17,22c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
---
> #{
17,23c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
> #define struct DState* s;
17,23c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
> #define BZ_MAX_UNUSED DState* s;
21,23c21
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
>  * s;
21,23c21
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
>  BZ2_bzDecompress s;
21,23c21
<  BZ2_bzDecompress (  )
< {
<    struct DState* s;
---
>  BZ2_bzDecompress (  ;
22,24c22
< {
<    struct DState* s;
<     s == NULL 
---
> s == NULL 
23,24c23
<    struct DState* s;
<     s == NULL 
---
>    == NULL 
23,24c23
<    struct DState* s;
<     s == NULL 
---
>    struct NULL 
23,27c23
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
---
>    struct DState;
23,29c23
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
---
>    struct DState* ( 
23,30c23
<    struct DState* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
---
>    struct DState* sBZ_MAX_UNUSED)
24,30c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
---
>     )
24,31c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
---
>     s ;   
24,32c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
---
>     s == }
27,36c27
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
29,36c29
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
30,36c30
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
30,36c30
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        BZ_MAX_UNUSED
\ No newline at end of file
31,36c31
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
32,36d31
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-1 >===
9c9
< #define BZ_OK                9
---
> define BZ_OK                9
9c9
< #define BZ_OK                9
---
> #BZ_OK                9
9c9
< #define BZ_OK                9
---
> #define 9
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_OK                #include <stdio.h>
15c15
< #include <stdio.h>
---
> include <stdio.h>
15c15
< #include <stdio.h>
---
> #<stdio.h>
15c15
< #include <stdio.h>
---
> #include stdio.h>
15c15
< #include <stdio.h>
---
> #include <.h>
15c15
< #include <stdio.h>
---
> #include <stdioh>
15c15
< #include <stdio.h>
---
> #include <stdio.>
15,17c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdio.h#define BZ_MAX_UNUSED 0
17c17
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
17c17
< #define BZ_MAX_UNUSED 0
---
> #BZ_MAX_UNUSED 0
17c17
< #define BZ_MAX_UNUSED 0
---
> #define 0
17,21c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #define BZ_MAX_UNUSED BZ2_bzDecompress (  )
21c21
<  BZ2_bzDecompress (  )
---
>  (  )
21c21
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress )
21,22c21
<  BZ2_bzDecompress (  )
< {
---
>  BZ2_bzDecompress (  {
22,23c22
< {
<    struct DState* s;
---
> struct DState* s;
23c23
<    struct DState* s;
---
>    DState* s;
23c23
<    struct DState* s;
---
>    struct * s;
23c23
<    struct DState* s;
---
>    struct DStates;
23c23
<    struct DState* s;
---
>    struct DState* ;
23,24c23
<    struct DState* s;
<     s == NULL 
---
>    struct DState* ss == NULL 
24c24
<     s == NULL 
---
>     == NULL 
24c24
<     s == NULL 
---
>     s NULL 
24,27c24
<     s == NULL 
<    
< 
<    ;
---
>     s == ;
27,28d26
<    ;
< 
29,30c29
<    ( 
<        BZ_MAX_UNUSED)
---
>    BZ_MAX_UNUSED)
30c30
<        BZ_MAX_UNUSED)
---
>        )
30,31c30
<        BZ_MAX_UNUSED)
<       ;   
---
>        BZ_MAX_UNUSED;   
31,32c31
<       ;   
< }
---
>       }
32,36d31
< }
< 
< 
< 
<  
\ No newline at end of file
Termination check: size was 264; now 209
===< pass_balanced :: curly >===
22,25d21
< {
<    struct DState* s;
<     s == NULL 
<    
27,32d22
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
===< pass_balanced :: angles >===
15c15
< #include <stdio.h>
---
> #include 
===< pass_balanced :: curly-only >===
22c22
< {
---
> 
32c32
< }
---
> 
===< pass_balanced :: angles-only >===
15c15
< #include <stdio.h>
---
> #include stdio.h
===< pass_clang :: param-to-local >===
===< pass_clang :: remove-nested-function >===
===< pass_clang :: simplify-dependent-typedef >===
===< pass_clang :: replace-one-level-typedef-type >===
===< pass_clang :: instantiate-template-type-param-to-int >===
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: empty-struct-to-int >===
23c23
<    struct DState* s;
---
>     int* s;
(99.9 %, 200 bytes)
===< pass_clang :: simplify-recursive-template-instantiation >===
===< pass_ints :: c >===
===< pass_clex :: rm-toks-11 >===
9,16d8
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
9,16d8
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
9,16d8
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
9,17c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #define BZ_OK                0
15,21c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> BZ2_bzDecompress (  )
15,21c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #(  )
15,21c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include )
15,22c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
---
> #include <{
15,23c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int* s;
---
> #include <stdioint* s;
15,23c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int* s;
---
> #include <stdio.* s;
15,23c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int* s;
---
> #include <stdio.hs;
17,23c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int* s;
---
> ;
17,24c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int* s;
<     s == NULL 
---
> #s == NULL 
17,24c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int* s;
<     s == NULL 
---
> #define == NULL 
17,24c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int* s;
<     s == NULL 
---
> #define BZ_MAX_UNUSED NULL 
21,27c21
<  BZ2_bzDecompress (  )
< {
<     int* s;
<     s == NULL 
<    
< 
<    ;
---
>  ;
21,29c21
<  BZ2_bzDecompress (  )
< {
<     int* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
---
>  BZ2_bzDecompress ( 
21,30c21
<  BZ2_bzDecompress (  )
< {
<     int* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
---
>  BZ2_bzDecompress (  BZ_MAX_UNUSED)
22,30c22
< {
<     int* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
---
> )
23,31c23
<     int* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
---
>     ;   
23,32c23
<     int* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
---
>     int}
23,36c23
<     int* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int* 
\ No newline at end of file
23,36c23
<     int* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int* s
\ No newline at end of file
24,36c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
24,36c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s 
\ No newline at end of file
24,36c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s == 
\ No newline at end of file
27,36c27
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
29,36c29
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
30,36c30
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
30,36c30
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        BZ_MAX_UNUSED
\ No newline at end of file
31,36c31
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
32,36d31
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-10 >===
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> >
9,17c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> ##define BZ_MAX_UNUSED 0
9,17c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #define define BZ_MAX_UNUSED 0
9,17c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #define BZ_OK                BZ_MAX_UNUSED 0
15,17c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> 0
15,21c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #BZ2_bzDecompress (  )
15,21c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include (  )
15,21c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include <)
15,22c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
---
> #include <stdio{
15,23c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int* s;
---
> #include <stdio.int* s;
15,23c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int* s;
---
> #include <stdio.h* s;
17,23c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int* s;
---
> s;
17,23c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int* s;
---
> #;
17,24c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int* s;
<     s == NULL 
---
> #define s == NULL 
17,24c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int* s;
<     s == NULL 
---
> #define BZ_MAX_UNUSED == NULL 
21,24c21
<  BZ2_bzDecompress (  )
< {
<     int* s;
<     s == NULL 
---
>  NULL 
21,27c21
<  BZ2_bzDecompress (  )
< {
<     int* s;
<     s == NULL 
<    
< 
<    ;
---
>  BZ2_bzDecompress ;
21,29c21
<  BZ2_bzDecompress (  )
< {
<     int* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
---
>  BZ2_bzDecompress (  ( 
22,30c22
< {
<     int* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
---
> BZ_MAX_UNUSED)
23,30c23
<     int* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
---
>     )
23,31c23
<     int* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
---
>     int;   
23,32c23
<     int* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
---
>     int* }
23,36c23
<     int* s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int* s
\ No newline at end of file
24,36c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
24,36c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s 
\ No newline at end of file
24,36c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s == 
\ No newline at end of file
27,36c27
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
29,36c29
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
30,36c30
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
30,36c30
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        BZ_MAX_UNUSED
\ No newline at end of file
31,36c31
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
32,36d31
< }
< 
< 
< 
<  
\ No newline at end of file
Termination check: size was 209; now 200
===< pass_ternary :: b >===
===< pass_balanced :: angles-only >===
15c15
< #include <stdio.h>
---
> #include stdio.h
===< pass_clang :: local-to-global >===
21c21,22
<  BZ2_bzDecompress (  )
---
>  int *BZ2_bzDecompress_s;
> BZ2_bzDecompress (  )
23c24
<     int* s;
---
>     
===< pass_clang :: param-to-global >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-var >===
===< pass_clang :: simplify-if >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: move-function-body >===
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: remove-pointer >===
23c23
<     int* s;
---
>     int s;
(99.9 %, 199 bytes)
===< pass_clang :: replace-array-index-var >===
===< pass_unifdef :: 0 >===
===< pass_special :: c >===
===< pass_ints :: b >===
===< pass_ints :: c >===
===< pass_clex :: rm-toks-11 >===
9,16d8
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
9,16d8
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
9,16d8
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
9,17c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #define BZ_OK                0
15,21c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> BZ2_bzDecompress (  )
15,21c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #(  )
15,21c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include )
15,22c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
---
> #include <{
15,23c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #include <stdioint s;
15,23c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #include <stdio.s;
15,23c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #include <stdio.h;
17,24c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == NULL 
---
> s == NULL 
17,24c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == NULL 
---
> #== NULL 
17,24c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == NULL 
---
> #define NULL 
17,27c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == NULL 
<    
< 
<    ;
---
> #define BZ_MAX_UNUSED ;
21,29c21
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
---
>  ( 
21,30c21
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
---
>  BZ2_bzDecompress BZ_MAX_UNUSED)
22,30d21
< {
<     int s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
22,31c22
< {
<     int s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
---
> ;   
23,32c23
<     int s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
---
>     }
23,36c23
<     int s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int 
\ No newline at end of file
23,36c23
<     int s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int s
\ No newline at end of file
24,36c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
24,36c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s 
\ No newline at end of file
24,36c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s == 
\ No newline at end of file
27,36c27
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
29,36c29
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
30,36c30
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
30,36c30
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        BZ_MAX_UNUSED
\ No newline at end of file
31,36c31
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
32,36d31
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-7 >===
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> stdio.h>
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #.h>
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define h>
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_OK                >
15,16d14
< #include <stdio.h>
< 
15,16d14
< #include <stdio.h>
< 
15,17c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #include BZ_MAX_UNUSED 0
15,17c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #include <0
15,21c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include <stdioBZ2_bzDecompress (  )
15,21c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include <stdio.(  )
15,21c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include <stdio.h)
17,21d16
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
17,23c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #int s;
17,23c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #define s;
17,23c17
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #define BZ_MAX_UNUSED ;
21,24c21
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == NULL 
---
>  s == NULL 
21,24c21
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == NULL 
---
>  BZ2_bzDecompress == NULL 
21,24c21
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == NULL 
---
>  BZ2_bzDecompress (  NULL 
22,27c22
< {
<     int s;
<     s == NULL 
<    
< 
<    ;
---
> ;
23,29c23
<     int s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
---
>     ( 
23,30c23
<     int s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
---
>     int BZ_MAX_UNUSED)
23,30c23
<     int s;
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
---
>     int s)
24,31c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
---
>     ;   
24,32c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
---
>     s }
24,36c24
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s == 
\ No newline at end of file
27,36c27
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
29,36c29
<    ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
30,36c30
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
30,36c30
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        BZ_MAX_UNUSED
\ No newline at end of file
31,36c31
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
32,36d31
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-2 >===
9c9
< #define BZ_OK                9
---
> BZ_OK                9
9c9
< #define BZ_OK                9
---
> #9
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define #include <stdio.h>
9,15c9
< #define BZ_OK                9
< 
< 
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_OK                include <stdio.h>
15c15
< #include <stdio.h>
---
> <stdio.h>
15c15
< #include <stdio.h>
---
> #stdio.h>
15c15
< #include <stdio.h>
---
> #include .h>
15c15
< #include <stdio.h>
---
> #include <h>
15c15
< #include <stdio.h>
---
> #include <stdio>
(99.9 %, 171 bytes)
9,14d8
< #9
< 
< 
< 
< 
< 
15c15
< #include <stdio.h>
---
> <stdio.h>
15c15
< #include <stdio.h>
---
> #stdio.h>
15c15
< #include <stdio.h>
---
> #include .h>
15c15
< #include <stdio.h>
---
> #include <h>
15c15
< #include <stdio.h>
---
> #include <stdio>
15,17c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdio.#define BZ_MAX_UNUSED 0
15,17c15
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdio.hdefine BZ_MAX_UNUSED 0
(99.9 %, 163 bytes)
9c9
< #include <stdio.h>
---
> #stdio.h>
9c9
< #include <stdio.h>
---
> #include .h>
9c9
< #include <stdio.h>
---
> #include <h>
9c9
< #include <stdio.h>
---
> #include <stdio>
9,11c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdio.#define BZ_MAX_UNUSED 0
9,11c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdio.hdefine BZ_MAX_UNUSED 0
11c11
< #define BZ_MAX_UNUSED 0
---
> BZ_MAX_UNUSED 0
11c11
< #define BZ_MAX_UNUSED 0
---
> #0
11,15c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #define BZ2_bzDecompress (  )
11,15c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #define BZ_MAX_UNUSED (  )
15c15
<  BZ2_bzDecompress (  )
---
>  )
15,16c15
<  BZ2_bzDecompress (  )
< {
---
>  BZ2_bzDecompress {
15,17c15
<  BZ2_bzDecompress (  )
< {
<     int s;
---
>  BZ2_bzDecompress (  int s;
16,17c16
< {
<     int s;
---
> s;
17c17
<     int s;
---
>     ;
17,18c17
<     int s;
<     s == NULL 
---
>     int s == NULL 
17,18c17
<     int s;
<     s == NULL 
---
>     int s== NULL 
18c18
<     s == NULL 
---
>     NULL 
18,21c18
<     s == NULL 
<    
< 
<    ;
---
>     s ;
18,23c18
<     s == NULL 
<    
< 
<    ;
< 
<    ( 
---
>     s == ( 
21,24c21
<    ;
< 
<    ( 
<        BZ_MAX_UNUSED)
---
>    BZ_MAX_UNUSED)
23,24c23
<    ( 
<        BZ_MAX_UNUSED)
---
>    )
24,25c24
<        BZ_MAX_UNUSED)
<       ;   
---
>        ;   
24,26c24
<        BZ_MAX_UNUSED)
<       ;   
< }
---
>        BZ_MAX_UNUSED}
25,30c25
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
26,30d25
< }
< 
< 
< 
<  
\ No newline at end of file
(99.9 %, 143 bytes)
18,19c18
<     s == ( 
<        BZ_MAX_UNUSED)
---
>     s == )
19,20c19
<        BZ_MAX_UNUSED)
<       ;   
---
>        ;   
19,21c19
<        BZ_MAX_UNUSED)
<       ;   
< }
---
>        BZ_MAX_UNUSED}
20,25c20
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
21,25d20
< }
< 
< 
< 
<  
\ No newline at end of file
Termination check: size was 200; now 143
===< pass_balanced :: curly >===
16,21c16
< {
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
---
> 
===< pass_clang :: aggregate-to-scalar >===
===< pass_clang :: param-to-local >===
===< pass_clang :: remove-nested-function >===
===< pass_clang :: callexpr-to-value >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: simplify-comma-expr >===
===< pass_clang :: replace-dependent-typedef >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: replace-class-with-base-template-spec >===
===< pass_clang :: replace-array-index-var >===
===< pass_comments :: 0 >===
===< pass_special :: b >===
===< pass_clex :: rm-toks-16 >===
9,17c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> s;
9,17c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #;
9,18c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == ( 
---
> #include s == ( 
9,18c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == ( 
---
> #include <== ( 
9,18c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == ( 
---
> #include <stdio( 
9,19c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
---
> #include <stdio.BZ_MAX_UNUSED)
9,19c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
---
> #include <stdio.h)
11,20c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
---
> ;   
11,21c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
---
> #}
11,25c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
> #define 
\ No newline at end of file
11,25c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
> #define BZ_MAX_UNUSED 
\ No newline at end of file
15,24d14
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
15,25c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>  BZ2_bzDecompress 
\ No newline at end of file
15,25c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>  BZ2_bzDecompress (  
\ No newline at end of file
16,25d15
< {
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
17,25c17
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
17,25c17
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int 
\ No newline at end of file
17,25c17
<     int s;
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int s
\ No newline at end of file
18,25c18
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
18,25c18
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s 
\ No newline at end of file
18,25c18
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s == 
\ No newline at end of file
19,25c19
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
19,25c19
<        BZ_MAX_UNUSED)
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        BZ_MAX_UNUSED
\ No newline at end of file
20,25c20
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
21,25d20
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-tok-pattern-4 >===
9c9
< #include <stdio.h>
---
> include <stdio.h>
9c9
< #include <stdio.h>
---
>  <stdio.h>
9c9
< #include <stdio.h>
---
> include stdio.h>
9c9
< #include <stdio.h>
---
>  stdio.h>
9c9
< #include <stdio.h>
---
> include <.h>
9c9
< #include <stdio.h>
---
>  <.h>
9c9
< #include <stdio.h>
---
> include .h>
9c9
< #include <stdio.h>
---
>  .h>
9c9
< #include <stdio.h>
---
> # <stdio.h>
9c9
< #include <stdio.h>
---
> # stdio.h>
9c9
< #include <stdio.h>
---
> # <.h>
9c9
< #include <stdio.h>
---
> # .h>
9c9
< #include <stdio.h>
---
> # <stdioh>
9c9
< #include <stdio.h>
---
> # stdioh>
9c9
< #include <stdio.h>
---
> # <h>
9c9
< #include <stdio.h>
---
> # h>
9c9
< #include <stdio.h>
---
> #include stdio.h>
9c9
< #include <stdio.h>
---
> #include .h>
9c9
< #include <stdio.h>
---
> #include stdioh>
9c9
< #include <stdio.h>
---
> #include h>
9c9
< #include <stdio.h>
---
> #include stdio.>
9c9
< #include <stdio.h>
---
> #include .>
9c9
< #include <stdio.h>
---
> #include stdio>
9c9
< #include <stdio.h>
---
> #include >
9c9
< #include <stdio.h>
---
> #include <.h>
9c9
< #include <stdio.h>
---
> #include <h>
9c9
< #include <stdio.h>
---
> #include <.>
9c9
< #include <stdio.h>
---
> #include <>
9c9
< #include <stdio.h>
---
> #include <.h
9c9
< #include <stdio.h>
---
> #include <h
9c9
< #include <stdio.h>
---
> #include <.
9c9
< #include <stdio.h>
---
> #include <
9c9
< #include <stdio.h>
---
> #include <stdioh>
9c9
< #include <stdio.h>
---
> #include <stdio>
9c9
< #include <stdio.h>
---
> #include <stdioh
9c9
< #include <stdio.h>
---
> #include <stdio
9c9
< #include <stdio.h>
---
> #include <stdioh>
11c11
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
9c9
< #include <stdio.h>
---
> #include <stdio>
11c11
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
9c9
< #include <stdio.h>
---
> #include <stdioh
11c11
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
9c9
< #include <stdio.h>
---
> #include <stdio
11c11
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
9c9
< #include <stdio.h>
---
> #include <stdio.>
9c9
< #include <stdio.h>
---
> #include <stdio.
9c9
< #include <stdio.h>
---
> #include <stdio.>
11c11
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
9c9
< #include <stdio.h>
---
> #include <stdio.
11c11
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
9c9
< #include <stdio.h>
---
> #include <stdio.>
11c11
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
9c9
< #include <stdio.h>
---
> #include <stdio.
11c11
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
9c9
< #include <stdio.h>
---
> #include <stdio.>
11c11
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
9c9
< #include <stdio.h>
---
> #include <stdio.
11c11
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
9c9
< #include <stdio.h>
---
> #include <stdio.h
9c9
< #include <stdio.h>
---
> #include <stdio.h
11c11
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
9c9
< #include <stdio.h>
---
> #include <stdio.h
11c11
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
9c9
< #include <stdio.h>
---
> #include <stdio.h
11c11
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
9c9
< #include <stdio.h>
---
> #include <stdio.h
11c11
< #define BZ_MAX_UNUSED 0
---
> #define  0
9c9
< #include <stdio.h>
---
> #include <stdio.h
11c11
< #define BZ_MAX_UNUSED 0
---
> define  0
9c9
< #include <stdio.h>
---
> #include <stdio.h
11c11
< #define BZ_MAX_UNUSED 0
---
> #  0
9c9
< #include <stdio.h>
---
> #include <stdio.h
11c11
< #define BZ_MAX_UNUSED 0
---
>   0
11c11
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
11c11
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 0
11c11
< #define BZ_MAX_UNUSED 0
---
> define  0
11c11
< #define BZ_MAX_UNUSED 0
---
>   0
11c11
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 
11c11
< #define BZ_MAX_UNUSED 0
---
>  BZ_MAX_UNUSED 
11c11
< #define BZ_MAX_UNUSED 0
---
> define  
11c11
< #define BZ_MAX_UNUSED 0
---
>   
11c11
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
11c11
< #define BZ_MAX_UNUSED 0
---
> #  0
11c11
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 
11c11
< #define BZ_MAX_UNUSED 0
---
> #  
11c11
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 0
15c15
<  BZ2_bzDecompress (  )
---
>   (  )
11c11
< #define BZ_MAX_UNUSED 0
---
> #  0
15c15
<  BZ2_bzDecompress (  )
---
>   (  )
11c11
< #define BZ_MAX_UNUSED 0
---
> # BZ_MAX_UNUSED 
15c15
<  BZ2_bzDecompress (  )
---
>   (  )
11c11
< #define BZ_MAX_UNUSED 0
---
> #  
15c15
<  BZ2_bzDecompress (  )
---
>   (  )
11c11
< #define BZ_MAX_UNUSED 0
---
> #define  0
11c11
< #define BZ_MAX_UNUSED 0
---
> #define  
11c11
< #define BZ_MAX_UNUSED 0
---
> #define  0
15c15
<  BZ2_bzDecompress (  )
---
>   (  )
11c11
< #define BZ_MAX_UNUSED 0
---
> #define  
15c15
<  BZ2_bzDecompress (  )
---
>   (  )
11c11
< #define BZ_MAX_UNUSED 0
---
> #define  0
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress   )
11c11
< #define BZ_MAX_UNUSED 0
---
> #define  
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress   )
11c11
< #define BZ_MAX_UNUSED 0
---
> #define  0
15c15
<  BZ2_bzDecompress (  )
---
>     )
11c11
< #define BZ_MAX_UNUSED 0
---
> #define  
15c15
<  BZ2_bzDecompress (  )
---
>     )
11c11
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
11c11
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
15c15
<  BZ2_bzDecompress (  )
---
>   (  )
11c11
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress   )
11c11
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
15c15
<  BZ2_bzDecompress (  )
---
>     )
11c11
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress (  
11c11
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
15c15
<  BZ2_bzDecompress (  )
---
>   (  
11c11
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress   
11c11
< #define BZ_MAX_UNUSED 0
---
> #define BZ_MAX_UNUSED 
15c15
<  BZ2_bzDecompress (  )
---
>     
15c15
<  BZ2_bzDecompress (  )
---
>   (  )
15c15
<  BZ2_bzDecompress (  )
---
>     )
15c15
<  BZ2_bzDecompress (  )
---
>   (  
15c15
<  BZ2_bzDecompress (  )
---
>     
15,16c15,16
<  BZ2_bzDecompress (  )
< {
---
>   (  )
> 
15,16c15,16
<  BZ2_bzDecompress (  )
< {
---
>     )
> 
15,16c15,16
<  BZ2_bzDecompress (  )
< {
---
>   (  
> 
15,16c15,16
<  BZ2_bzDecompress (  )
< {
---
>     
> 
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress   )
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress   
15,16c15,16
<  BZ2_bzDecompress (  )
< {
---
>  BZ2_bzDecompress   )
> 
15,16c15,16
<  BZ2_bzDecompress (  )
< {
---
>  BZ2_bzDecompress   
> 
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress   )
17c17
<     int s;
---
>      s;
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress   
17c17
<     int s;
---
>      s;
15,17c15,17
<  BZ2_bzDecompress (  )
< {
<     int s;
---
>  BZ2_bzDecompress   )
> 
>      s;
15,17c15,17
<  BZ2_bzDecompress (  )
< {
<     int s;
---
>  BZ2_bzDecompress   
> 
>      s;
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress (  
15,16c15,16
<  BZ2_bzDecompress (  )
< {
---
>  BZ2_bzDecompress (  
> 
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress (  
17c17
<     int s;
---
>      s;
15,17c15,17
<  BZ2_bzDecompress (  )
< {
<     int s;
---
>  BZ2_bzDecompress (  
> 
>      s;
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress (  
17c17
<     int s;
---
>     int ;
15,17c15,17
<  BZ2_bzDecompress (  )
< {
<     int s;
---
>  BZ2_bzDecompress (  
> 
>     int ;
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress (  
17c17
<     int s;
---
>      ;
15,17c15,17
<  BZ2_bzDecompress (  )
< {
<     int s;
---
>  BZ2_bzDecompress (  
> 
>      ;
16c16
< {
---
> 
16,17c16,17
< {
<     int s;
---
> 
>      s;
16,17c16,17
< {
<     int s;
---
> 
>     int ;
16,17c16,17
< {
<     int s;
---
> 
>      ;
16,17c16,17
< {
<     int s;
---
> 
>     int s
16,17c16,17
< {
<     int s;
---
> 
>      s
16,17c16,17
< {
<     int s;
---
> 
>     int 
16,17c16,17
< {
<     int s;
---
> 
>      
17c17
<     int s;
---
>      s;
17c17
<     int s;
---
>      ;
17c17
<     int s;
---
>      s
17c17
<     int s;
---
>      
17,18c17,18
<     int s;
<     s == ( 
---
>      s;
>      == ( 
17,18c17,18
<     int s;
<     s == ( 
---
>      ;
>      == ( 
17,18c17,18
<     int s;
<     s == ( 
---
>      s
>      == ( 
17,18c17,18
<     int s;
<     s == ( 
---
>      
>      == ( 
17c17
<     int s;
---
>     int ;
17c17
<     int s;
---
>     int 
17,18c17,18
<     int s;
<     s == ( 
---
>     int ;
>      == ( 
17,18c17,18
<     int s;
<     s == ( 
---
>     int 
>      == ( 
17,18c17,18
<     int s;
<     s == ( 
---
>     int ;
>     s  ( 
17,18c17,18
<     int s;
<     s == ( 
---
>     int 
>     s  ( 
17,18c17,18
<     int s;
<     s == ( 
---
>     int ;
>       ( 
17,18c17,18
<     int s;
<     s == ( 
---
>     int 
>       ( 
17c17
<     int s;
---
>     int s
17,18c17,18
<     int s;
<     s == ( 
---
>     int s
>      == ( 
17,18c17,18
<     int s;
<     s == ( 
---
>     int s
>     s  ( 
17,18c17,18
<     int s;
<     s == ( 
---
>     int s
>       ( 
17,18c17,18
<     int s;
<     s == ( 
---
>     int s
>     s ==  
17,18c17,18
<     int s;
<     s == ( 
---
>     int s
>      ==  
17,18c17,18
<     int s;
<     s == ( 
---
>     int s
>     s   
17,18c17,18
<     int s;
<     s == ( 
---
>     int s
>        
18c18
<     s == ( 
---
>      == ( 
18c18
<     s == ( 
---
>       ( 
18c18
<     s == ( 
---
>      ==  
18c18
<     s == ( 
---
>        
18,19c18,19
<     s == ( 
<        BZ_MAX_UNUSED)
---
>      == ( 
>        )
18,19c18,19
<     s == ( 
<        BZ_MAX_UNUSED)
---
>       ( 
>        )
18,19c18,19
<     s == ( 
<        BZ_MAX_UNUSED)
---
>      ==  
>        )
18,19c18,19
<     s == ( 
<        BZ_MAX_UNUSED)
---
>        
>        )
18c18
<     s == ( 
---
>     s  ( 
18c18
<     s == ( 
---
>     s   
18,19c18,19
<     s == ( 
<        BZ_MAX_UNUSED)
---
>     s  ( 
>        )
18,19c18,19
<     s == ( 
<        BZ_MAX_UNUSED)
---
>     s   
>        )
18,19c18,19
<     s == ( 
<        BZ_MAX_UNUSED)
---
>     s  ( 
>        BZ_MAX_UNUSED
18,19c18,19
<     s == ( 
<        BZ_MAX_UNUSED)
---
>     s   
>        BZ_MAX_UNUSED
18,19c18,19
<     s == ( 
<        BZ_MAX_UNUSED)
---
>     s  ( 
>        
18,19c18,19
<     s == ( 
<        BZ_MAX_UNUSED)
---
>     s   
>        
18c18
<     s == ( 
---
>     s ==  
18,19c18,19
<     s == ( 
<        BZ_MAX_UNUSED)
---
>     s ==  
>        )
18,19c18,19
<     s == ( 
<        BZ_MAX_UNUSED)
---
>     s ==  
>        BZ_MAX_UNUSED
18,19c18,19
<     s == ( 
<        BZ_MAX_UNUSED)
---
>     s ==  
>        
18c18
<     s == ( 
---
>     s ==  
20c20
<       ;   
---
>          
18,20c18,20
<     s == ( 
<        BZ_MAX_UNUSED)
<       ;   
---
>     s ==  
>        )
>          
(99.9 %, 141 bytes)
19c19
<        BZ_MAX_UNUSED
---
>        
21c21
< }
---
> 
19,21c19,21
<        BZ_MAX_UNUSED
<       ;   
< }
---
>        
>          
> 
19c19
<        BZ_MAX_UNUSED
---
>        
19,20c19,20
<        BZ_MAX_UNUSED
<       ;   
---
>        
>          
19c19
<        BZ_MAX_UNUSED
---
>        
21c21
< }
---
> 
19,21c19,21
<        BZ_MAX_UNUSED
<       ;   
< }
---
>        
>          
> 
20c20
<       ;   
---
>          
20,21c20,21
<       ;   
< }
---
>          
> 
20c20
<       ;   
---
>          
20,21c20,21
<       ;   
< }
---
>          
> 
20c20
<       ;   
---
>          
20,21c20,21
<       ;   
< }
---
>          
> 
20c20
<       ;   
---
>          
20,21c20,21
<       ;   
< }
---
>          
> 
21c21
< }
---
> 
21c21
< }
---
> 
21c21
< }
---
> 
21c21
< }
---
> 
21c21
< }
---
> 
21c21
< }
---
> 
21c21
< }
---
> 
21c21
< }
---
> 
Termination check: size was 143; now 141
===< pass_balanced :: parens >===
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress 
===< pass_clang :: param-to-local >===
===< pass_clang :: remove-nested-function >===
===< pass_clang :: union-to-struct >===
===< pass_clang :: replace-simple-typedef >===
===< pass_clang :: replace-dependent-typedef >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: remove-pointer >===
===< pass_clang :: remove-addr-taken >===
===< pass_peep :: a >===
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
9c9
< #include <stdio.h>
---
> #include 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
16,21c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> 
17c17
<     int s;
---
>     int s
20c20
<       ;   
---
>          
===< pass_ints :: a >===
===< pass_ints :: c >===
===< pass_ints :: d >===
===< pass_clex :: rm-toks-14 >===
9,15d8
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
9,17c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #int s;
9,17c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #include s;
9,17c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #include <;
9,18c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
---
> #include <stdios ==  
9,18c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
---
> #include <stdio.==  
9,19c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
---
> #include <stdio.hBZ_MAX_UNUSED
11,20c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
---
> ;   
11,21c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> #}
11,25c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
> #define 
\ No newline at end of file
11,25c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
> #define BZ_MAX_UNUSED 
\ No newline at end of file
15,24d14
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
15,25c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>  BZ2_bzDecompress 
\ No newline at end of file
15,25c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>  BZ2_bzDecompress (  
\ No newline at end of file
16,25d15
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
17,25c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
17,25c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int 
\ No newline at end of file
17,25c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int s
\ No newline at end of file
18,25c18
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
18,25c18
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s 
\ No newline at end of file
19,25c19
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
20,25c20
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
21,25d20
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-12 >===
9,15c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> (  )
9,15c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #)
9,16c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
---
> #include {
9,17c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #include <int s;
9,17c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #include <stdios;
9,17c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #include <stdio.;
9,18c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
---
> #include <stdio.hs ==  
11,18c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
---
> ==  
11,19c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
---
> #BZ_MAX_UNUSED
11,20c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
---
> #define ;   
11,21c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
> #define BZ_MAX_UNUSED }
15,24d14
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
15,25c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>  BZ2_bzDecompress 
\ No newline at end of file
15,25c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>  BZ2_bzDecompress (  
\ No newline at end of file
16,25d15
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
17,25c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
17,25c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int 
\ No newline at end of file
17,25c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int s
\ No newline at end of file
18,25c18
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
18,25c18
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s 
\ No newline at end of file
19,25c19
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
20,25c20
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
21,25d20
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-10 >===
9,11c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> 0
9,15c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #BZ2_bzDecompress (  )
9,15c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include (  )
9,15c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include <)
9,16c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
---
> #include <stdio{
9,17c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #include <stdio.int s;
9,17c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #include <stdio.hs;
11,17c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> ;
11,18c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
---
> #s ==  
11,18c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
---
> #define ==  
11,19c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
---
> #define BZ_MAX_UNUSED BZ_MAX_UNUSED
15,20c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
---
>  ;   
15,21c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
>  BZ2_bzDecompress }
15,25c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>  BZ2_bzDecompress (  
\ No newline at end of file
16,25d15
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
17,25c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
17,25c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int 
\ No newline at end of file
17,25c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int s
\ No newline at end of file
18,25c18
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
18,25c18
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s 
\ No newline at end of file
19,25c19
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
20,25c20
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
21,25d20
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-8 >===
9,11c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
9,11c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #BZ_MAX_UNUSED 0
9,11c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #include 0
9,15c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include <BZ2_bzDecompress (  )
9,15c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include <stdio(  )
9,15c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include <stdio.)
9,16c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
---
> #include <stdio.h{
11,17c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> int s;
11,17c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #s;
11,17c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #define ;
11,18c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
---
> #define BZ_MAX_UNUSED s ==  
15,18c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
---
>  ==  
15,19c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
---
>  BZ2_bzDecompress BZ_MAX_UNUSED
15,20c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
---
>  BZ2_bzDecompress (  ;   
16,20d15
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
17,25c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
17,25c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int 
\ No newline at end of file
17,25c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int s
\ No newline at end of file
18,25c18
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
18,25c18
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s 
\ No newline at end of file
19,25c19
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
20,25c20
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
21,25d20
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-6 >===
9c9
< #include <stdio.h>
---
> >
9,11c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> ##define BZ_MAX_UNUSED 0
9,11c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #include define BZ_MAX_UNUSED 0
9,11c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #include <BZ_MAX_UNUSED 0
9,11c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdio0
9,15c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include <stdio.BZ2_bzDecompress (  )
9,15c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #include <stdio.h(  )
11,15c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> )
11,16c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
---
> #{
11,17c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #define int s;
11,17c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
< {
<     int s;
---
> #define BZ_MAX_UNUSED s;
15,17c15
<  BZ2_bzDecompress (  )
< {
<     int s;
---
>  ;
15,18c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
---
>  BZ2_bzDecompress s ==  
15,18c15
<  BZ2_bzDecompress (  )
< {
<     int s;
<     s ==  
---
>  BZ2_bzDecompress (  ==  
16,19c16
< {
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
---
> BZ_MAX_UNUSED
17,20c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
---
>     ;   
17,21c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
---
>     int }
17,25c17
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     int s
\ No newline at end of file
18,25c18
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     
\ No newline at end of file
18,25c18
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>     s 
\ No newline at end of file
19,25c19
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>        
\ No newline at end of file
20,25c20
<       ;   
< }
< 
< 
< 
<  
\ No newline at end of file
---
>       
\ No newline at end of file
21,25d20
< }
< 
< 
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-1 >===
9c9
< #include <stdio.h>
---
> include <stdio.h>
9c9
< #include <stdio.h>
---
> #<stdio.h>
9c9
< #include <stdio.h>
---
> #include stdio.h>
9c9
< #include <stdio.h>
---
> #include <.h>
9c9
< #include <stdio.h>
---
> #include <stdioh>
9c9
< #include <stdio.h>
---
> #include <stdio.>
9,11c9
< #include <stdio.h>
< 
< #define BZ_MAX_UNUSED 0
---
> #include <stdio.h#define BZ_MAX_UNUSED 0
11c11
< #define BZ_MAX_UNUSED 0
---
> define BZ_MAX_UNUSED 0
11c11
< #define BZ_MAX_UNUSED 0
---
> #BZ_MAX_UNUSED 0
11c11
< #define BZ_MAX_UNUSED 0
---
> #define 0
11,15c11
< #define BZ_MAX_UNUSED 0
< 
< 
< 
<  BZ2_bzDecompress (  )
---
> #define BZ_MAX_UNUSED BZ2_bzDecompress (  )
15c15
<  BZ2_bzDecompress (  )
---
>  (  )
15c15
<  BZ2_bzDecompress (  )
---
>  BZ2_bzDecompress )
15,16c15
<  BZ2_bzDecompress (  )
< {
---
>  BZ2_bzDecompress (  {
16,17c16
< {
<     int s;
---
> int s;
17c17
<     int s;
---
>     s;
17c17
<     int s;
---
>     int ;
17,18c17
<     int s;
<     s ==  
---
>     int ss ==  
18c18
<     s ==  
---
>     ==  
18,19c18
<     s ==  
<        BZ_MAX_UNUSED
---
>     s BZ_MAX_UNUSED
19,20c19
<        BZ_MAX_UNUSED
<       ;   
---
>        ;   
20,21c20
<       ;   
< }
---
>       }
21,25d20
< }
< 
< 
< 
<  
\ No newline at end of file
Termination check: size was 141; now 141
===< pass_clang :: rename-fun >===
15c15
<  BZ2_bzDecompress (  )
---
>  fn1 (  )
(99.9 %, 128 bytes)
===< pass_clang :: rename-param >===
===< pass_clang :: rename-var >===
===< pass_clang :: rename-class >===
===< pass_clang :: rename-cxx-method >===
===< pass_clang :: combine-global-var >===
===< pass_clang :: combine-local-var >===
===< pass_clang :: simplify-struct-union-decl >===
===< pass_clang :: move-global-var >===
===< pass_clang :: unify-function-decl >===
===< pass_clex :: delete-string >===
===< pass_indent :: final >===
1,7d0
<  
< 
< 
< 
< 
< 
< 
13,15c6
< 
< 
<  fn1 (  )
---
> fn1 (  )
17,20c8,9
<     int s;
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
---
>   int s;
>   s == BZ_MAX_UNUSED;
22,25d10
< 
< 
< 
<  
\ No newline at end of file
1c1
<  
---
> 
15c15
<  fn1 (  )
---
> fn1 (  )
18,20c18,20
<     s ==  
<        BZ_MAX_UNUSED
<       ;   
---
>     s ==
>     BZ_MAX_UNUSED
>     ;
25d24
<  
\ No newline at end of file
(100.0 %, 90 bytes)
8,9c8,9
<   int s;
<   s == BZ_MAX_UNUSED;
---
>     int s;
>     s == BZ_MAX_UNUSED;
6,7c6
< fn1 (  )
< {
---
> fn1() {
(100.0 %, 94 bytes)
6,9c6,8
< fn1 (  )
< {
<     int s;
<     s == BZ_MAX_UNUSED;
---
> fn1() {
>   int s;
>   s == BZ_MAX_UNUSED;
(100.0 %, 87 bytes)
===================== done ====================

pass statistics:
  method pass_balanced :: angles worked 0 times and failed 3 times
  method pass_balanced :: angles-only worked 0 times and failed 3 times
  method pass_balanced :: curly worked 69 times and failed 52 times
  method pass_balanced :: curly-only worked 11 times and failed 35 times
  method pass_balanced :: parens worked 0 times and failed 1 times
  method pass_balanced :: parens-only worked 6 times and failed 29 times
  method pass_blank :: 0 worked 0 times and failed 1 times
  method pass_clang :: aggregate-to-scalar worked 0 times and failed 0 times
  method pass_clang :: callexpr-to-value worked 23 times and failed 0 times
  method pass_clang :: class-template-to-class worked 0 times and failed 0 times
  method pass_clang :: combine-global-var worked 0 times and failed 0 times
  method pass_clang :: combine-local-var worked 0 times and failed 0 times
  method pass_clang :: copy-propagation worked 0 times and failed 0 times
  method pass_clang :: empty-struct-to-int worked 2 times and failed 1 times
  method pass_clang :: instantiate-template-param worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-type-param-to-int worked 0 times and failed 0 times
  method pass_clang :: lift-assignment-expr worked 0 times and failed 0 times
  method pass_clang :: local-to-global worked 0 times and failed 2 times
  method pass_clang :: move-function-body worked 0 times and failed 0 times
  method pass_clang :: move-global-var worked 0 times and failed 0 times
  method pass_clang :: param-to-global worked 0 times and failed 0 times
  method pass_clang :: param-to-local worked 0 times and failed 0 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: reduce-array-size worked 0 times and failed 0 times
  method pass_clang :: reduce-class-template-param worked 0 times and failed 0 times
  method pass_clang :: reduce-pointer-level worked 0 times and failed 0 times
  method pass_clang :: remove-addr-taken worked 0 times and failed 0 times
  method pass_clang :: remove-array worked 0 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-enum-member-value worked 0 times and failed 0 times
  method pass_clang :: remove-namespace worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer worked 1 times and failed 1 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-trivial-base-template worked 0 times and failed 0 times
  method pass_clang :: remove-unresolved-base worked 0 times and failed 0 times
  method pass_clang :: remove-unused-enum-member worked 0 times and failed 0 times
  method pass_clang :: remove-unused-field worked 0 times and failed 0 times
  method pass_clang :: remove-unused-function worked 5 times and failed 1 times
  method pass_clang :: remove-unused-outer-class worked 0 times and failed 0 times
  method pass_clang :: remove-unused-var worked 38 times and failed 0 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-cxx-method worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 1 times and failed 0 times
  method pass_clang :: rename-param worked 0 times and failed 0 times
  method pass_clang :: rename-var worked 0 times and failed 0 times
  method pass_clang :: replace-array-index-var worked 0 times and failed 0 times
  method pass_clang :: replace-callexpr worked 0 times and failed 0 times
  method pass_clang :: replace-class-with-base-template-spec worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-name worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-derived-class worked 0 times and failed 0 times
  method pass_clang :: replace-one-level-typedef-type worked 0 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 7 times and failed 1 times
  method pass_clang :: replace-undefined-function worked 0 times and failed 0 times
  method pass_clang :: return-void worked 0 times and failed 1 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-callexpr worked 0 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 0 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 0 times and failed 0 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-recursive-template-instantiation worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 0 times and failed 0 times
  method pass_clang :: template-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clex :: delete-string worked 0 times and failed 0 times
  method pass_clex :: rm-tok-pattern-4 worked 256 times and failed 4256 times
  method pass_clex :: rm-toks-1 worked 4 times and failed 95 times
  method pass_clex :: rm-toks-10 worked 11 times and failed 352 times
  method pass_clex :: rm-toks-11 worked 22 times and failed 1338 times
  method pass_clex :: rm-toks-12 worked 43 times and failed 1540 times
  method pass_clex :: rm-toks-13 worked 64 times and failed 2370 times
  method pass_clex :: rm-toks-14 worked 5 times and failed 78 times
  method pass_clex :: rm-toks-15 worked 227 times and failed 2691 times
  method pass_clex :: rm-toks-16 worked 9 times and failed 138 times
  method pass_clex :: rm-toks-2 worked 3 times and failed 25 times
  method pass_clex :: rm-toks-3 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-4 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-5 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-6 worked 54 times and failed 966 times
  method pass_clex :: rm-toks-7 worked 0 times and failed 74 times
  method pass_clex :: rm-toks-8 worked 0 times and failed 23 times
  method pass_clex :: rm-toks-9 worked 0 times and failed 0 times
  method pass_comments :: 0 worked 1 times and failed 0 times
  method pass_include_includes :: 0 worked 0 times and failed 0 times
  method pass_includes :: 0 worked 20 times and failed 6 times
  method pass_indent :: final worked 3 times and failed 0 times
  method pass_indent :: regular worked 0 times and failed 0 times
  method pass_ints :: a worked 3 times and failed 0 times
  method pass_ints :: b worked 0 times and failed 0 times
  method pass_ints :: c worked 0 times and failed 0 times
  method pass_ints :: d worked 0 times and failed 0 times
  method pass_ints :: e worked 0 times and failed 0 times
  method pass_peep :: a worked 0 times and failed 84 times
  method pass_special :: a worked 0 times and failed 0 times
  method pass_special :: b worked 0 times and failed 0 times
  method pass_special :: c worked 0 times and failed 0 times
  method pass_ternary :: b worked 1 times and failed 0 times
  method pass_ternary :: c worked 0 times and failed 0 times
  method pass_unifdef :: 0 worked 13 times and failed 3 times


          '/home/ukoc/mangroveL/sut-bzip2/runs/run-1454655507.4593/bzip2.c' reduced to:

#include <stdio.h>

#define BZ_MAX_UNUSED 0

fn1() {
  int s;
  s == BZ_MAX_UNUSED;
}
1435.17user 412.12system 21:35.92elapsed 142%CPU (0avgtext+0avgdata 59996maxresident)k
712inputs+9529272outputs (10major+147668404minor)pagefaults 0swaps
