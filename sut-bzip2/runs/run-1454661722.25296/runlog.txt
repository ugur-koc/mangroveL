===< 28783 >===
running 2 interestingness tests in parallel
===< pass_includes :: 0 >===
113d112
< #include <stdio.h>
116d115
< #   include <windows.h>
329d328
< #include <stdlib.h>
332d331
< #include <stdio.h>
(0.0 %, 204912 bytes)
328d327
< #include <stdlib.h>
331d330
< #include <stdio.h>
332d331
< #include <ctype.h>
(0.0 %, 204893 bytes)
331d330
< #include <ctype.h>
332d331
< #include <string.h>
5053d5052
< #include <stdio.h>
(0.0 %, 204874 bytes)
331d330
< #include <string.h>
5052d5051
< #include <stdio.h>
(0.0 %, 204854 bytes)
5051d5050
< #include <stdio.h>
5052d5051
< #include <stdlib.h>
5053d5052
< #include <string.h>
(0.0 %, 204835 bytes)
5051d5050
< #include <stdlib.h>
5052d5051
< #include <string.h>
5053d5052
< #include <signal.h>
5054d5053
< #include <math.h>
(0.1 %, 204815 bytes)
5051d5050
< #include <string.h>
5052d5051
< #include <signal.h>
5053d5052
< #include <math.h>
(0.1 %, 204795 bytes)
5051d5050
< #include <signal.h>
5052d5051
< #include <math.h>
5053d5052
< #include <errno.h>
5054d5053
< #include <ctype.h>
(0.1 %, 204777 bytes)
5052d5051
< #include <errno.h>
5053d5052
< #include <ctype.h>
5066d5065
< #   include <fcntl.h>
5067d5066
< #   include <sys/types.h>
(0.1 %, 204758 bytes)
5065d5064
< #   include <fcntl.h>
5066d5065
< #   include <sys/types.h>
5067d5066
< #   include <utime.h>
5068d5067
< #   include <unistd.h>
5069d5068
< #   include <sys/stat.h>
(0.1 %, 204732 bytes)
5066d5065
< #   include <utime.h>
5067d5066
< #   include <unistd.h>
5068d5067
< #   include <sys/stat.h>
5069d5068
< #   include <sys/times.h>
(0.1 %, 204709 bytes)
5067d5066
< #   include <sys/stat.h>
5068d5067
< #   include <sys/times.h>
(0.1 %, 204684 bytes)
5067d5066
< #   include <sys/times.h>
5090d5089
< #     include <io.h>
(0.1 %, 204658 bytes)
5089d5088
< #     include <io.h>
5090d5089
< #     include <fcntl.h>
5105d5104
< #     include <io.h>
(0.1 %, 204637 bytes)
5089d5088
< #     include <fcntl.h>
5104d5103
< #     include <io.h>
(0.2 %, 204613 bytes)
5103d5102
< #     include <io.h>
5104d5103
< #     include <fcntl.h>
5118d5117
< #   include <io.h>
(0.2 %, 204592 bytes)
5103d5102
< #     include <fcntl.h>
5117d5116
< #   include <io.h>
5118d5117
< #   include <fcntl.h>
(0.2 %, 204568 bytes)
5116d5115
< #   include <io.h>
5117d5116
< #   include <fcntl.h>
5118d5117
< #   include <sys\stat.h>
(0.2 %, 204549 bytes)
5116d5115
< #   include <fcntl.h>
5117d5116
< #   include <sys\stat.h>
(0.2 %, 204527 bytes)
5116d5115
< #   include <sys\stat.h>
(0.2 %, 204502 bytes)
===< pass_unifdef :: 0 >===
357d356
< #if BZ_DEBUG
364,366d362
< #else
< #define AssertD(cond,msg) /* */
< #endif
357,364d356
< #if BZ_DEBUG
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #else
366d357
< #endif
(0.2 %, 204444 bytes)
120d119
< #   ifdef BZ_EXPORT
123,127d121
< #   else
<    /* import windows dll dynamically */
< #   define BZ_API(func) (WINAPI * func)
< #   define BZ_EXTERN
< #   endif
120,123d119
< #   ifdef BZ_EXPORT
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #   else
127d122
< #   endif
(0.3 %, 204304 bytes)
108,111d107
< #ifndef BZ_IMPORT
< #define BZ_EXPORT
< #endif
< 
108d107
< #ifndef BZ_IMPORT
110d108
< #endif
(0.3 %, 204260 bytes)
5101,5102d5100
< #if BZ_LCCWIN32
< 
5122,5123d5119
< 
< #endif /* BZ_LCCWIN32 */
5101,5125d5100
< #if BZ_LCCWIN32
< 
< #   define NORETURN       /**/
< #   define PATH_SEP       '\\'
< #   define MY_LSTAT       _stat
< #   define MY_STAT        _stat
< #   define MY_S_ISREG(x)  ((x) & _S_IFREG)
< #   define MY_S_ISDIR(x)  ((x) & _S_IFDIR)
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FILESPEC(root, name)                \
<       root = snocString ((root), (name))
< 
< #   define SET_BINARY_MODE(fd)                        \
<       do {                                            \
<          int retVal = setmode ( fileno ( fd ),        \
<                                 O_BINARY );           \
<          ERROR_IF_MINUS_ONE ( retVal );               \
<       } while ( 0 )
< 
< #endif /* BZ_LCCWIN32 */
< 
< 
160,226d159
< #ifndef BZ_NO_STDIO
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< #endif
< 
264,300d196
< #ifndef BZ_NO_STDIO
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< #endif
< 
320,322d215
< #ifndef BZ_NO_STDIO
< #endif
< 
343,365d235
< #ifndef BZ_NO_STDIO
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< #else
376d245
< #endif
771d639
< #ifdef BZ_NO_STDIO
775d642
< #endif
3448,3494d3314
< #ifndef BZ_NO_STDIO
< void BZ2_bz__AssertH__fail ( int errcode )
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
< #endif
4265,4625d4084
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
< 
< #define BZ_SETERR(eee)                    \
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< /*---------------------------------------------*/
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; /*not reached*/
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
< #endif
< 
< 
4755,4943d4213
< 
< 
< #ifndef BZ_NO_STDIO
< /*---------------------------------------------------*/
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
<                  const char *mode,
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   /* binary mode */
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
<       fp = fdopen(fd,mode2);
< #endif
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       /* Guard against total chaos and anarchy -- JRS */
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
< }
< 
< 
< /*---------------------------------------------------*/
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    /* do nothing now... */
<    return 0;
< }
< 
< 
< /*---------------------------------------------------*/
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
< #endif
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
(0.7 %, 203528 bytes)
160d159
< #ifndef BZ_NO_STDIO
225d223
< #endif
264d261
< #ifndef BZ_NO_STDIO
299d295
< #endif
320,322d315
< #ifndef BZ_NO_STDIO
< #endif
< 
343d335
< #ifndef BZ_NO_STDIO
365,376d356
< #else
< extern void bz_internal_error ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) bz_internal_error ( errcode ); }
< #define AssertD(cond,msg) /* */
< #define VPrintf0(zf) /* */
< #define VPrintf1(zf,za1) /* */
< #define VPrintf2(zf,za1,za2) /* */
< #define VPrintf3(zf,za1,za2,za3) /* */
< #define VPrintf4(zf,za1,za2,za3,za4) /* */
< #define VPrintf5(zf,za1,za2,za3,za4,za5) /* */
< #endif
771,776d750
< #ifdef BZ_NO_STDIO
< #ifndef NULL
< #define NULL 0
< #endif
< #endif
< 
3448d3421
< #ifndef BZ_NO_STDIO
3494d3466
< #endif
4265d4236
< #ifndef BZ_NO_STDIO
4623d4593
< #endif
4757d4726
< #ifndef BZ_NO_STDIO
4943d4911
< #endif
4805d4804
< #ifdef BZ_STRICT_ANSI
4807,4809d4805
< #else
<       fp = fdopen(fd,mode2);
< #endif
(1.0 %, 202886 bytes)
4774,4776d4773
< #ifdef BZ_STRICT_ANSI
<       fp = NULL;
< #else
4778d4774
< #endif
5018d5017
< #if BZ_UNIX
5065d5063
< #endif /* BZ_UNIX */
5844d5841
< #  if BZ_UNIX
5852,5854d5848
< #  else
<    return fopen(name, mode);
< #  endif
5914d5907
< #if BZ_UNIX
5917d5909
< #endif
5922d5913
< #  if BZ_UNIX
5927d5917
< #  endif
5934d5923
< #  if BZ_UNIX
5951d5939
< #  endif
5959d5946
< #  if BZ_UNIX
5964,5971d5950
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif /* BZ_UNIX */
6530d6508
< #     if BZ_UNIX
6532d6509
< #     endif
6682d6658
< #  if BZ_UNIX
6686d6661
< #  endif
6827d6801
< #     if BZ_UNIX
6829d6802
< #     endif
(1.0 %, 202834 bytes)
5014,5062d5013
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
< 
< #   define SET_BINARY_MODE(fd) /**/
< 
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
< #      define NORETURN /**/
< #   endif
< 
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< #endif /* BZ_UNIX */
< 
5840,5848d5790
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
5850d5791
< #  endif
5910,5913d5850
< #if BZ_UNIX
< static 
< struct MY_STAT fileMetaInfo;
< #endif
5918,5923d5854
< #  if BZ_UNIX
<    IntNative retVal;
<    /* Note use of stat here, not lstat. */
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
5930,5947d5860
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
< #  endif
5955,5960d5867
< #  if BZ_UNIX
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
<    return False;
< #  else /* ! BZ_UNIX */
5967d5873
< #  endif /* BZ_UNIX */
6526,6528d6431
< #     if BZ_UNIX
<       "\n"
< #     endif
6678,6682d6580
< #  if BZ_UNIX
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< #  endif
6823,6825d6720
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
61,302d60
< #ifndef _BZLIB_H
< #define _BZLIB_H
< 
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< /* Need a definitition for FILE */
< #include <stdio.h>
< 
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
< 
< 
< /*-- Core (low-level) library functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< /*-- High(er) level library functions --*/
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< /*-- Utility functions --*/
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< #ifdef __cplusplus
< }
< #endif
< 
< #endif
< 
61d60
< #ifndef _BZLIB_H
299,300d297
< #endif
< 
311,747d310
< #ifndef _BZLIB_PRIVATE_H
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< /*-- General stuff. --*/
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
< extern void BZ2_bz__AssertH__fail ( int errcode );
< #define AssertH(cond,errcode) \
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
< #define AssertD(cond,msg) \
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
< #define VPrintf2(zf,za1,za2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
< 
< 
< /*-- Header bytes. --*/
< 
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
<   
< /*-- Constants for the back end. --*/
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< /*-- Stuff for randomising repetitive blocks. --*/
< 
< extern Int32 BZ2_rNums[512];
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
<    s->rNToGo--;
< 
< 
< 
< /*-- Stuff for doing CRCs. --*/
< 
< extern UInt32 BZ2_crc32Table[256];
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
< 
< 
< 
< /*-- States and modes for compression. --*/
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< /*-- Structure holding all the compression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
<       Int32    mode;
<       Int32    state;
< 
<       /* remembers avail_in when flush/finish requested */
<       UInt32   avail_in_expect;
< 
<       /* for doing the block sorting */
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       /* aliases for arr1 and arr2 */
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       /* for deciding when to use the fallback sorting algorithm */
<       Int32    workFactor;
< 
<       /* run-length-encoding of the input */
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       /* input and output limits and current posns */
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       /* the buffer for bit stream creation */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* block and combined CRCs */
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       /* misc administratium */
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       /* stuff for coding the MTF values */
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
<    EState;
< 
< 
< 
< /*-- externs for compression. --*/
< 
< extern void 
< BZ2_blockSort ( EState* );
< 
< extern void 
< BZ2_compressBlock ( EState*, Bool );
< 
< extern void 
< BZ2_bsInitWrite ( EState* );
< 
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
< 
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
< 
< 
< 
< /*-- states for decompression. --*/
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< /*-- Constants for the fast MTF decoder. --*/
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< /*-- Structure holding all the decompression-side stuff. --*/
< 
< typedef
<    struct {
<       /* pointer back to the struct bz_stream */
<       bz_stream* strm;
< 
<       /* state indicator for this stream */
<       Int32    state;
< 
<       /* for doing the final run-length decoding */
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       /* the buffer for bit stream reading */
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       /* misc administratium */
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       /* for undoing the Burrows-Wheeler transform */
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       /* for undoing the Burrows-Wheeler transform (FAST) */
<       UInt32   *tt;
< 
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       /* stored and calculated CRCs */
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       /* map of bytes used in block */
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       /* for decoding the MTF values */
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       /* save area for scalars in the main decompress code */
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
<    DState;
< 
< 
< 
< /*-- Macros for decompression. --*/
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
< 
< #define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
< 
< #define GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
< 
< 
< /*-- externs for decompression. --*/
< 
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
< 
< extern Int32 
< BZ2_decompress ( DState* );
< 
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
< 
< 
< #endif
< 
311d310
< #ifndef _BZLIB_PRIVATE_H
744,746d742
< 
< 
< #endif
(1.0 %, 202809 bytes)
308d307
< #ifndef _BZLIB_PRIVATE_H
741,743d739
< 
< 
< #endif
110d109
< #ifdef _WIN32
117,120d115
< #else
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< #endif
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4984,4990d4974
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
(1.1 %, 202775 bytes)
110,117d109
< #ifdef _WIN32
< #   ifdef small
<       /* windows.h define small to char */
< #      undef small
< #   endif
< #   define BZ_API(func) WINAPI func
< #   define BZ_EXTERN extern
< #else
120d111
< #endif
4980,4986d4970
< 
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
4981,4987d4980
< #if defined(_WIN32) && !defined(__CYGWIN__)
< #undef  BZ_LCCWIN32
< #define BZ_LCCWIN32 1
< #undef  BZ_UNIX
< #define BZ_UNIX 0
< #endif
< 
5045d5037
< #   ifdef __CYGWIN__
5053d5044
< #   endif
5045,5053d5044
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
(1.2 %, 202468 bytes)
5029,5037d5028
< #   ifdef __CYGWIN__
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
5015d5014
< #   ifdef __DJGPP__
5027d5025
< #   endif
6656,6658d6653
< #  ifndef __DJGPP__
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6656d6641
< #  ifndef __DJGPP__
6658d6642
< #  endif
(1.4 %, 202097 bytes)
5015,5028d5014
< #   ifdef __DJGPP__
< #     undef MY_LSTAT
< #     undef MY_STAT
< #     define MY_LSTAT stat
< #     define MY_STAT stat
< #     undef SET_BINARY_MODE
< #     define SET_BINARY_MODE(fd)                        \
<         do {                                            \
<            int retVal = setmode ( fileno ( fd ),        \
<                                   O_BINARY );           \
<            ERROR_IF_MINUS_ONE ( retVal );               \
<         } while ( 0 )
< #   endif
< 
6647d6632
< #  ifndef __DJGPP__
6649d6633
< #  endif
319,322d318
< #ifndef __GNUC__
< #define __inline__  /* */
< #endif 
< 
5009d5004
< #   ifdef __GNUC__
5011,5013d5005
< #   else
< #      define NORETURN /**/
< #   endif
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
(1.6 %, 201603 bytes)
319d318
< #ifndef __GNUC__
321d319
< #endif 
5009,5011d5006
< #   ifdef __GNUC__
< #      define NORETURN __attribute__ ((noreturn))
< #   else
5013d5007
< #   endif
63d62
< #ifdef __cplusplus
65d63
< #endif
287d284
< #ifdef __cplusplus
289d285
< #endif
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201490 bytes)
63,66d62
< #ifdef __cplusplus
< extern "C" {
< #endif
< 
286,289d281
< 
< #ifdef __cplusplus
< }
< #endif
(1.7 %, 201421 bytes)
===< pass_comments :: 0 >===
1,55c1,5
< /*-------------------------------------------------------------*/
< /*--- Public header file for the library.                   ---*/
< /*---                                               bzlib.h ---*/
< /*-------------------------------------------------------------*/
< 
< /*--
<   This file is a part of bzip2 and/or libbzip2, a program and
<   library for lossless, block-sorting data compression.
< 
<   Copyright (C) 1996-2002 Julian R Seward.  All rights reserved.
< 
<   Redistribution and use in source and binary forms, with or without
<   modification, are permitted provided that the following conditions
<   are met:
< 
<   1. Redistributions of source code must retain the above copyright
<      notice, this list of conditions and the following disclaimer.
< 
<   2. The origin of this software must not be misrepresented; you must 
<      not claim that you wrote the original software.  If you use this 
<      software in a product, an acknowledgment in the product 
<      documentation would be appreciated but is not required.
< 
<   3. Altered source versions must be plainly marked as such, and must
<      not be misrepresented as being the original software.
< 
<   4. The name of the author may not be used to endorse or promote 
<      products derived from this software without specific prior written 
<      permission.
< 
<   THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS
<   OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
<   WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
<   ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
<   DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
<   DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE
<   GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
<   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
<   WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
<   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
<   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
< 
<   Julian Seward, Cambridge, UK.
<   jseward@acm.org
<   bzip2/libbzip2 version 1.0 of 21 March 2000
< 
<   This program is based on (at least) the work of:
<      Mike Burrows
<      David Wheeler
<      Peter Fenwick
<      Alistair Moffat
<      Radford Neal
<      Ian H. Witten
<      Robert Sedgewick
<      Jon L. Bentley
---
>  
> 
> 
> 
> 
57,58d6
<   For more information on these sources, see the manual.
< --*/
103c51
< /* Need a definitition for FILE */
---
> 
110c58
< /*-- Core (low-level) library functions --*/
---
> 
144c92
< /*-- High(er) level library functions --*/
---
> 
212c160
< /*-- Utility functions --*/
---
> 
234,242c182
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
---
> 
283,289c223,229
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.h ---*/
< /*-------------------------------------------------------------*/
< /*-------------------------------------------------------------*/
< /*--- Private header file for the library.                  ---*/
< /*---                                       bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
296c236
< /*-- General stuff. --*/
---
> 
311c251
< #define __inline__  /* */
---
> #define __inline__  
340d279
< /*-- Header bytes. --*/
342,345c281,285
< #define BZ_HDR_B 0x42   /* 'B' */
< #define BZ_HDR_Z 0x5a   /* 'Z' */
< #define BZ_HDR_h 0x68   /* 'h' */
< #define BZ_HDR_0 0x30   /* '0' */
---
> 
> #define BZ_HDR_B 0x42   
> #define BZ_HDR_Z 0x5a   
> #define BZ_HDR_h 0x68   
> #define BZ_HDR_0 0x30   
347c287
< /*-- Constants for the back end. --*/
---
> 
363c303
< /*-- Stuff for randomising repetitive blocks. --*/
---
> 
387c327
< /*-- Stuff for doing CRCs. --*/
---
> 
410c350
< /*-- States and modes for compression. --*/
---
> 
428c368
< /*-- Structure holding all the compression-side stuff. --*/
---
> 
432c372
<       /* pointer back to the struct bz_stream */
---
>       
435,436c375,376
<       /* mode this stream is in, and whether inputting */
<       /* or outputting data */
---
>       
>       
440c380
<       /* remembers avail_in when flush/finish requested */
---
>       
443c383
<       /* for doing the block sorting */
---
>       
449c389
<       /* aliases for arr1 and arr2 */
---
>       
455c395
<       /* for deciding when to use the fallback sorting algorithm */
---
>       
458c398
<       /* run-length-encoding of the input */
---
>       
463c403
<       /* input and output limits and current posns */
---
>       
469c409
<       /* map of bytes used in block */
---
>       
474c414
<       /* the buffer for bit stream creation */
---
>       
478c418
<       /* block and combined CRCs */
---
>       
482c422
<       /* misc administratium */
---
>       
487c427
<       /* stuff for coding the MTF values */
---
>       
496c436
<       /* second dimension: only 3 needed; 4 makes index calculations faster */
---
>       
504c444
< /*-- externs for compression. --*/
---
> 
523c463
< /*-- states for decompression. --*/
---
> 
572c512
< /*-- Constants for the fast MTF decoder. --*/
---
> 
579c519
< /*-- Structure holding all the decompression-side stuff. --*/
---
> 
583c523
<       /* pointer back to the struct bz_stream */
---
>       
586c526
<       /* state indicator for this stream */
---
>       
589c529
<       /* for doing the final run-length decoding */
---
>       
595c535
<       /* the buffer for bit stream reading */
---
>       
599c539
<       /* misc administratium */
---
>       
605c545
<       /* for undoing the Burrows-Wheeler transform */
---
>       
614c554
<       /* for undoing the Burrows-Wheeler transform (FAST) */
---
>       
617c557
<       /* for undoing the Burrows-Wheeler transform (SMALL) */
---
>       
621c561
<       /* stored and calculated CRCs */
---
>       
627c567
<       /* map of bytes used in block */
---
>       
633c573
<       /* for decoding the MTF values */
---
>       
645c585
<       /* save area for scalars in the main decompress code */
---
>       
676c616
< /*-- Macros for decompression. --*/
---
> 
710c650
< /*-- externs for decompression. --*/
---
> 
723d662
< /*-- BZ_NO_STDIO seems to make NULL disappear on some platforms. --*/
726,728d664
< /*-------------------------------------------------------------*/
< /*--- end                                   bzlib_private.h ---*/
< /*-------------------------------------------------------------*/
732,735d667
< /*-------------------------------------------------------------*/
< /*--- Block sorting machinery                               ---*/
< /*---                                           blocksort.c ---*/
< /*-------------------------------------------------------------*/
737,740d668
< /*---------------------------------------------*/
< /*--- Fallback O(N log(N)^2) sorting        ---*/
< /*--- algorithm, for repetitive blocks      ---*/
< /*---------------------------------------------*/
742c670,682
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
775c715
< /*---------------------------------------------*/
---
> 
832,838c772
<       /* Random partitioning.  Median of 3 sometimes fails to
<          avoid bad cases.  Median of 9 seems to help but 
<          looks rather expensive.  This too seems to work but
<          is cheaper.  Guidance for the magic constants 
<          7621 and 32768 is taken from Sedgewick's algorithms
<          book, chapter 35.
<       */
---
>       
904,916c838,839
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       eclass exists for [0 .. nblock-1]
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)eclass) [0 .. nblock-1] holds block
<       All other areas of eclass destroyed
<       fmap [0 .. nblock-1] holds sorted order
<       bhtab [ 0 .. 2+(nblock/32) ] destroyed
< */
---
> 
> 
938,941c861
<    /*--
<       Initial 1-char radix sort to generate
<       initial fmap and initial BH bits.
<    --*/
---
>    
960,964c880
<    /*--
<       Inductively refine the buckets.  Kind-of an
<       "exponential radix sort" (!), inspired by the
<       Manber-Myers suffix array construction algorithm.
<    --*/
---
>    
966c882
<    /*-- set sentinel bits for block-end detection --*/
---
>    
972c888
<    /*-- the log(N) loop --*/
---
>    
990c906
< 	 /*-- find the next non-singleton bucket --*/
---
> 	 
1007c923
<          /*-- now [l, r] bracket current bucket --*/
---
>          
1012c928
<             /*-- scan bucket and generate header bits-- */
---
>             
1028,1032c944
<    /*-- 
<       Reconstruct the original block in
<       eclass8 [0 .. nblock-1], since the
<       previous phase destroyed it.
<    --*/
---
>    
1051,1055d962
< /*---------------------------------------------*/
< /*--- The main, O(N^2 log(N)) sorting       ---*/
< /*--- algorithm.  Faster for "normal"       ---*/
< /*--- non-repetitive blocks.                ---*/
< /*---------------------------------------------*/
1057c964,969
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
1072c984
<    /* 1 */
---
>    
1076c988
<    /* 2 */
---
>    
1080c992
<    /* 3 */
---
>    
1084c996
<    /* 4 */
---
>    
1088c1000
<    /* 5 */
---
>    
1092c1004
<    /* 6 */
---
>    
1096c1008
<    /* 7 */
---
>    
1100c1012
<    /* 8 */
---
>    
1104c1016
<    /* 9 */
---
>    
1108c1020
<    /* 10 */
---
>    
1112c1024
<    /* 11 */
---
>    
1116c1028
<    /* 12 */
---
>    
1124c1036
<       /* 1 */
---
>       
1130c1042
<       /* 2 */
---
>       
1136c1048
<       /* 3 */
---
>       
1142c1054
<       /* 4 */
---
>       
1148c1060
<       /* 5 */
---
>       
1154c1066
<       /* 6 */
---
>       
1160c1072
<       /* 7 */
---
>       
1166c1078
<       /* 8 */
---
>       
1185,1191c1097,1098
< /*---------------------------------------------*/
< /*--
<    Knuth's increments seem to work better
<    than Incerpi-Sedgewick here.  Possibly
<    because the number of elems to sort is
<    usually small, typically <= 20.
< --*/
---
> 
> 
1223c1130
<          /*-- copy 1 --*/
---
>          
1237c1144
<          /*-- copy 2 --*/
---
>          
1251c1158
<          /*-- copy 3 --*/
---
>          
1271,1278c1178,1179
< /*---------------------------------------------*/
< /*--
<    The following is an implementation of
<    an elegant 3-way quicksort for strings,
<    described in a paper "Fast Algorithms for
<    Sorting and Searching Strings", by Robert
<    Sedgewick and Jon L. Bentley.
< --*/
---
> 
> 
1444,1457c1345,1346
< /*---------------------------------------------*/
< /* Pre:
<       nblock > N_OVERSHOOT
<       block32 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       ptr exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)block32) [0 .. nblock-1] holds block
<       All other areas of block32 destroyed
<       ftab [0 .. 65536 ] destroyed
<       ptr [0 .. nblock-1] holds sorted order
<       if (*budget < 0), sorting was abandoned
< */
---
> 
> 
1482c1371
<    /*-- set up the 2-byte frequency table --*/
---
>    
1507c1396
<    /*-- (emphasises close relationship of block & quadrant) --*/
---
>    
1515c1404
<    /*-- Complete the initial radix sort --*/
---
>    
1545,1549c1434
<    /*--
<       Now ftab contains the first loc of every small bucket.
<       Calculate the running order, from smallest to largest
<       big bucket.
<    --*/
---
>    
1575,1577c1460
<    /*--
<       The main sorting loop.
<    --*/
---
>    
1583,1588c1466
<       /*--
<          Process big buckets, starting with the least full.
<          Basically this is a 3-step process in which we call
<          mainQSort3 to sort the small buckets [ss, j], but
<          also make a big effort to avoid the calls if we can.
<       --*/
---
>       
1591,1598c1469
<       /*--
<          Step 1:
<          Complete the big bucket [ss] by quicksorting
<          any unsorted small buckets [ss, j], for j != ss.  
<          Hopefully previous pointer-scanning phases have already
<          completed many of the small buckets [ss, j], so
<          we don't have to sort them at all.
<       --*/
---
>       
1624,1630c1495
<       /*--
<          Step 2:
<          Now scan this big bucket [ss] so as to synthesise the
<          sorted order for small buckets [t, ss] for all t,
<          including, magically, the bucket [ss,ss] too.
<          This will avoid doing Real Work in subsequent Step 1's.
<       --*/
---
>       
1652,1655c1517
<                 /* Extremely rare case missing in bzip2-1.0.0 and 1.0.1.
<                    Necessity for this case is demonstrated by compressing 
<                    a sequence of approximately 48.5 million of character 
<                    251; 1.0.0/1.0.1 will then die here. */
---
>                 
1661,1699c1523
<       /*--
<          Step 3:
<          The [ss] big bucket is now done.  Record this fact,
<          and update the quadrant descriptors.  Remember to
<          update quadrants in the overshoot area too, if
<          necessary.  The "if (i < 255)" test merely skips
<          this updating for the last bucket processed, since
<          updating for the last bucket is pointless.
< 
<          The quadrant array provides a way to incrementally
<          cache sort orderings, as they appear, so as to 
<          make subsequent comparisons in fullGtU() complete
<          faster.  For repetitive blocks this makes a big
<          difference (but not big enough to be able to avoid
<          the fallback sorting mechanism, exponential radix sort).
< 
<          The precise meaning is: at all times:
< 
<             for 0 <= i < nblock and 0 <= j <= nblock
< 
<             if block[i] != block[j], 
< 
<                then the relative values of quadrant[i] and 
<                     quadrant[j] are meaningless.
< 
<                else {
<                   if quadrant[i] < quadrant[j]
<                      then the string starting at i lexicographically
<                      precedes the string starting at j
< 
<                   else if quadrant[i] > quadrant[j]
<                      then the string starting at j lexicographically
<                      precedes the string starting at i
< 
<                   else
<                      the relative ordering of the strings starting
<                      at i and j has not yet been determined.
<                }
<       --*/
---
>       
1731,1743c1555,1556
< /*---------------------------------------------*/
< /* Pre:
<       nblock > 0
<       arr2 exists for [0 .. nblock-1 +N_OVERSHOOT]
<       ((UChar*)arr2)  [0 .. nblock-1] holds block
<       arr1 exists for [0 .. nblock-1]
< 
<    Post:
<       ((UChar*)arr2) [0 .. nblock-1] holds block
<       All other areas of block destroyed
<       ftab [ 0 .. 65536 ] destroyed
<       arr1 [0 .. nblock-1] holds sorted order
< */
---
> 
> 
1760,1764c1573
<       /* Calculate the location for quadrant, remembering to get
<          the alignment right.  Assumes that &(block[0]) is at least
<          2-byte aligned -- this should be ok since block is really
<          the first section of arr2.
<       */
---
>       
1769,1775c1578
<       /* (wfact-1) / 3 puts the default-factor-30
<          transition point at very roughly the same place as 
<          with v0.1 and v0.9.0.  
<          Not that it particularly matters any more, since the
<          resulting compressed stream is now the same regardless
<          of whether or not we use the main sort or fallback sort.
<       */
---
>       
1805,1807d1607
< /*-------------------------------------------------------------*/
< /*--- end                                       blocksort.c ---*/
< /*-------------------------------------------------------------*/
1809,1812d1608
< /*-------------------------------------------------------------*/
< /*--- Huffman coding low-level stuff                        ---*/
< /*---                                             huffman.c ---*/
< /*-------------------------------------------------------------*/
1815c1611,1618
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
1853c1656
< /*---------------------------------------------------*/
---
> 
1859,1862c1662
<    /*--
<       Nodes and heap entries run from 1.  Entry 0
<       for both the heap and nodes is a sentinel.
<    --*/
---
>    
1925c1725
< /*---------------------------------------------------*/
---
> 
1943c1743
< /*---------------------------------------------------*/
---
> 
1977,1992c1777,1787
< /*-------------------------------------------------------------*/
< /*--- end                                         huffman.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-------------------------------------------------------------*/
< /*--- Table for doing CRCs                                  ---*/
< /*---                                            crctable.c ---*/
< /*-------------------------------------------------------------*/
< 
< 
< /*--
<   I think this is an implementation of the AUTODIN-II,
<   Ethernet & FDDI 32-bit CRC standard.  Vaguely derived
<   from code by Rob Warnock, in Section 51 of the
<   comp.compression FAQ.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
1996c1791
<    /*-- Ugly, innit? --*/
---
>    
2065,2067d1859
< /*-------------------------------------------------------------*/
< /*--- end                                        crctable.c ---*/
< /*-------------------------------------------------------------*/
2069,2072d1860
< /*-------------------------------------------------------------*/
< /*--- Table for randomising repetitive blocks               ---*/
< /*---                                           randtable.c ---*/
< /*-------------------------------------------------------------*/
2075c1863,1870
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2132,2134d1926
< /*-------------------------------------------------------------*/
< /*--- end                                       randtable.c ---*/
< /*-------------------------------------------------------------*/
2136,2139d1927
< /*-------------------------------------------------------------*/
< /*--- Compression machinery (not incl block sorting)        ---*/
< /*---                                            compress.c ---*/
< /*-------------------------------------------------------------*/
2142,2144d1929
< /*---------------------------------------------------*/
< /*--- Bit stream I/O                              ---*/
< /*---------------------------------------------------*/
2146c1931,1941
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
2154c1949
< /*---------------------------------------------------*/
---
> 
2167c1962
< /*---------------------------------------------------*/
---
> 
2180c1975
< /*---------------------------------------------------*/
---
> 
2191c1986
< /*---------------------------------------------------*/
---
> 
2202c1997
< /*---------------------------------------------------*/
---
> 
2210,2212d2004
< /*---------------------------------------------------*/
< /*--- The back end proper                         ---*/
< /*---------------------------------------------------*/
2214c2006,2009
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
2228c2023
< /*---------------------------------------------------*/
---
> 
2238,2259c2033
<    /* 
<       After sorting (eg, here),
<          s->arr1 [ 0 .. s->nblock-1 ] holds sorted order,
<          and
<          ((UChar*)s->arr2) [ 0 .. s->nblock-1 ] 
<          holds the original block data.
< 
<       The first thing to do is generate the MTF values,
<       and put them in
<          ((UInt16*)s->arr1) [ 0 .. s->nblock-1 ].
<       Because there are strictly fewer or equal MTF values
<       than block values, ptr values in this area are overwritten
<       with MTF values only when they are no longer needed.
< 
<       The final compressed bitstream is generated into the
<       area starting at
<          (UChar*) (&((UChar*)s->arr2)[s->nblock])
< 
<       These storage aliases are set up in bzCompressInit(),
<       except for the last one, which is arranged in 
<       compressBlock().
<    */
---
>    
2344c2118
< /*---------------------------------------------------*/
---
> 
2355,2363c2129
<    /*--
<    UChar  len [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    is a global since the decoder also needs it.
< 
<    Int32  code[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    Int32  rfreq[BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<    are also globals only used in this proc.
<    Made global to keep stack frame size small.
<    --*/
---
>    
2381c2147
<    /*--- Decide how many coding tables to use ---*/
---
>    
2389c2155
<    /*--- Generate an initial set of coding tables ---*/
---
>    
2429,2431c2195
<    /*--- 
<       Iterate up to BZ_N_ITERS times to improve the tables.
<    ---*/
---
>    
2440,2443c2204
<       /*---
<         Set up an auxiliary length table which is used to fast-track
< 	the common case (nGroups == 6). 
<       ---*/
---
>       
2457c2218
<          /*--- Set group start & end marks. --*/
---
>          
2462,2465c2223
<          /*-- 
<             Calculate the cost of this group as coded
<             by each of the coding tables.
<          --*/
---
>          
2469c2227
<             /*--- fast track the common case ---*/
---
>             
2498c2256
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2505,2508c2263
<          /*-- 
<             Find the coding table which is best for this group,
<             and record its identity in the selector table.
<          --*/
---
>          
2517,2519c2272
<          /*-- 
<             Increment the symbol frequencies for the selected table.
<           --*/
---
>          
2521c2274
<             /*--- fast track the common case ---*/
---
>             
2539c2292
< 	    /*--- slow version which correctly handles all situations ---*/
---
> 	    
2554,2556c2307
<       /*--
<         Recompute the tables based on the accumulated frequencies.
<       --*/
---
>       
2569c2320
<    /*--- Compute MTF values for the selectors. ---*/
---
>    
2588c2339
<    /*--- Assign actual codes for the tables. --*/
---
>    
2602c2353
<    /*--- Transmit the mapping table. ---*/
---
>    
2625c2376
<    /*--- Now the selectors. ---*/
---
>    
2636c2387
<    /*--- Now the coding tables. ---*/
---
>    
2643,2644c2394,2395
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++; /* 10 */ };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--; /* 11 */ };
---
>          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
>          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
2652c2403
<    /*--- And finally, the block data proper ---*/
---
>    
2663c2414
<             /*--- fast track the common case ---*/
---
>             
2690c2441
< 	 /*--- slow version which correctly handles all situations ---*/
---
> 	 
2709c2460
< /*---------------------------------------------------*/
---
> 
2729c2480
<    /*-- If this is the first block, create the stream header. --*/
---
>    
2744c2495
<       /*-- Now the block's CRC, so it is in a known place. --*/
---
>       
2747,2755c2498
<       /*-- 
<          Now a single bit indicating (non-)randomisation. 
<          As of version 0.9.5, we use a better sorting algorithm
<          which makes randomisation unnecessary.  So always set
<          the randomised bit to 'no'.  Of course, the decoder
<          still needs to be able to handle randomised blocks
<          so as to maintain backwards compatibility with
<          older versions of bzip2.
<       --*/
---
>       
2764c2507
<    /*-- If this is the last block, add the stream trailer. --*/
---
>    
2778,2780d2520
< /*-------------------------------------------------------------*/
< /*--- end                                        compress.c ---*/
< /*-------------------------------------------------------------*/
2782,2785d2521
< /*-------------------------------------------------------------*/
< /*--- Decompression machinery                               ---*/
< /*---                                          decompress.c ---*/
< /*-------------------------------------------------------------*/
2788c2524,2531
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
2802c2545
< /*---------------------------------------------------*/
---
> 
2836c2579
< /*---------------------------------------------------*/
---
> 
2854c2597
<       if (zn > 20 /* the longest code */)         \
---
>       if (zn > 20 )         \
2868c2611
< /*---------------------------------------------------*/
---
> 
2876c2619
<    /* stuff that needs to be saved/restored */
---
>    
2903c2646
<       /*initialise the save area*/
---
>       
2930c2673
<    /*restore from the save area*/
---
>    
3029c2772
<       /*--- Receive the mapping table ---*/
---
>       
3049c2792
<       /*--- Now the selectors ---*/
---
>       
3065c2808
<       /*--- Undo the MTF values for the selectors. ---*/
---
>       
3079c2822
<       /*--- Now the coding tables ---*/
---
>       
3094c2837
<       /*--- Create the Huffman decoding tables ---*/
---
>       
3112c2855
<       /*--- Now the MTF values ---*/
---
>       
3121c2864
<       /*-- MTF init --*/
---
>       
3133c2876
<       /*-- end MTF init --*/
---
>       
3179c2922
<             /*-- uc = MTF ( nextSym-1 ) --*/
---
>             
3186c2929
<                   /* avoid general-case expense */
---
>                   
3202c2945
<                   /* general case */
---
>                   
3231c2974
<             /*-- end uc = MTF ( nextSym-1 ) --*/
---
>             
3244,3246c2987
<       /* Now we know what nblock is, we can do a better sanity
<          check on s->origPtr.
<       */
---
>       
3256c2997
<       /*-- Set up cftab to facilitate generation of T^(-1) --*/
---
>       
3263c3004
<          /*-- Make a copy of cftab, used in generation of T --*/
---
>          
3266c3007
<          /*-- compute the T vector --*/
---
>          
3273c3014
<          /*-- Compute T^(-1) by pointer reversal on T --*/
---
>          
3296c3037
<          /*-- compute the T^(-1) vector --*/
---
>          
3381,3383d3121
< /*-------------------------------------------------------------*/
< /*--- end                                      decompress.c ---*/
< /*-------------------------------------------------------------*/
3385,3388d3122
< /*-------------------------------------------------------------*/
< /*--- Library top-level functions.                          ---*/
< /*---                                               bzlib.c ---*/
< /*-------------------------------------------------------------*/
3390,3392d3123
< /*---------------------------------------------------*/
< /*--- Compression stuff                           ---*/
< /*---------------------------------------------------*/
3395c3126,3136
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3443c3184
< /*---------------------------------------------------*/
---
> 
3454c3195
< /*---------------------------------------------------*/
---
> 
3469c3210
< /*---------------------------------------------------*/
---
> 
3483c3224
< /*---------------------------------------------------*/
---
> 
3501c3242
< /*---------------------------------------------------*/
---
> 
3568c3309
< /*---------------------------------------------------*/
---
> 
3604c3345
< /*---------------------------------------------------*/
---
> 
3613c3354
< /*---------------------------------------------------*/
---
> 
3617c3358
<    /*-- fast track the common case --*/           \
---
>               \
3628c3369
<    /*-- general, uncommon cases --*/              \
---
>                  \
3641c3382
< /*---------------------------------------------------*/
---
> 
3649c3390
<       /*-- fast track the common case --*/
---
>       
3651c3392
<          /*-- block full? --*/
---
>          
3653c3394
<          /*-- no input? --*/
---
>          
3665c3406
<       /*-- general, uncommon case --*/
---
>       
3667c3408
<          /*-- block full? --*/
---
>          
3669c3410
<          /*-- no input? --*/
---
>          
3671c3412
<          /*-- flush/finish end? --*/
---
>          
3686c3427
< /*---------------------------------------------------*/
---
> 
3694c3435
<       /*-- no output space? --*/
---
>       
3697c3438
<       /*-- block done? --*/
---
>       
3713c3454
< /*---------------------------------------------------*/
---
> 
3760c3501
< /*---------------------------------------------------*/
---
> 
3817c3558
<    return BZ_OK; /*--not reached--*/
---
>    return BZ_OK; 
3821c3562
< /*---------------------------------------------------*/
---
> 
3841,3843d3581
< /*---------------------------------------------------*/
< /*--- Decompression stuff                         ---*/
< /*---------------------------------------------------*/
3845c3583,3586
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
3885c3626
< /*---------------------------------------------------*/
---
> 
3894c3635
<          /* try to finish existing run */
---
>          
3907c3648
<          /* can a new run be started? */
---
>          
3939c3680
<       /* restore */
---
>       
3949c3690
<       /* end restore */
---
>       
3957c3698
<          /* try to finish existing run */
---
>          
3979c3720
<          /* can a new run be started? */
---
>          
4012c3753
<       /* save */
---
>       
4022c3763
<       /* end save */
---
>       
4028c3769
< /*---------------------------------------------------*/
---
> 
4043c3784
< /*---------------------------------------------------*/
---
> 
4052c3793
<          /* try to finish existing run */
---
>          
4065c3806
<          /* can a new run be started? */
---
>          
4098c3839
<          /* try to finish existing run */
---
>          
4111c3852
<          /* can a new run be started? */
---
>          
4139c3880
< /*---------------------------------------------------*/
---
> 
4187c3928
<    return 0;  /*NOTREACHED*/
---
>    return 0;  
4191c3932
< /*---------------------------------------------------*/
---
> 
4211,4213c3952,3954
< /*---------------------------------------------------*/
< /*--- File I/O stuff                              ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
4234c3975
< /*---------------------------------------------*/
---
> 
4244c3985
< /*---------------------------------------------------*/
---
> 
4292c4033
< /*---------------------------------------------------*/
---
> 
4337c4078
< /*---------------------------------------------------*/
---
> 
4415c4156
< /*---------------------------------------------------*/
---
> 
4471c4212
< /*---------------------------------------------------*/
---
> 
4489c4230
< /*---------------------------------------------------*/
---
> 
4545c4286
<    return 0; /*not reached*/
---
>    return 0; 
4549c4290
< /*---------------------------------------------------*/
---
> 
4570,4572d4310
< /*---------------------------------------------------*/
< /*--- Misc convenience stuff                      ---*/
< /*---------------------------------------------------*/
4574c4312,4315
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
4611c4352
<    /* normal termination */
---
>    
4626c4367
< /*---------------------------------------------------*/
---
> 
4659c4400
<    /* normal termination */
---
>    
4679,4694c4420,4425
< /*---------------------------------------------------*/
< /*--
<    Code contributed by Yoshioka Tsuneo
<    (QWF00133@niftyserve.or.jp/tsuneo-y@is.aist-nara.ac.jp),
<    to support better zlib compatibility.
<    This code is not _officially_ part of libbzip2 (yet);
<    I haven't tested it, documented it, or considered the
<    threading-safeness of it.
<    If this code breaks, please contact both Yoshioka and me.
< --*/
< /*---------------------------------------------------*/
< 
< /*---------------------------------------------------*/
< /*--
<    return version like "0.9.0c".
< --*/
---
> 
> 
> 
> 
> 
> 
4701c4432
< /*---------------------------------------------------*/
---
> 
4705,4706c4436,4437
<                ( const char *path,   /* no use when bzdopen */
<                  int fd,             /* no use when bzdopen */
---
>                ( const char *path,   
>                  int fd,             
4708c4439
<                  int open_mode)      /* bzopen: 0, bzdopen:1 */
---
>                  int open_mode)      
4739c4470
<    strcat(mode2,"b");   /* binary mode */
---
>    strcat(mode2,"b");   
4753c4484
<       /* Guard against total chaos and anarchy -- JRS */
---
>       
4770,4775c4501,4502
< /*---------------------------------------------------*/
< /*--
<    open file for read or write.
<       ex) bzopen("file","w9")
<       case path="" or NULL => use stdin or stdout.
< --*/
---
> 
> 
4780c4507
<    return bzopen_or_bzdopen(path,-1,mode,/*bzopen*/0);
---
>    return bzopen_or_bzdopen(path,-1,mode,0);
4784c4511
< /*---------------------------------------------------*/
---
> 
4789c4516
<    return bzopen_or_bzdopen(NULL,fd,mode,/*bzdopen*/1);
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1);
4793c4520
< /*---------------------------------------------------*/
---
> 
4807c4534
< /*---------------------------------------------------*/
---
> 
4821c4548
< /*---------------------------------------------------*/
---
> 
4824c4551
<    /* do nothing now... */
---
>    
4829c4556
< /*---------------------------------------------------*/
---
> 
4850,4853c4577,4578
< /*---------------------------------------------------*/
< /*--
<    return last error code 
< --*/
---
> 
> 
4865,4870c4590,4595
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
<       ,"???"   /* for future */
---
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
>       ,"???"   
4884,4950c4609,4634
< /*-------------------------------------------------------------*/
< /*--- end                                           bzlib.c ---*/
< /*-------------------------------------------------------------*/
< 
< /*-----------------------------------------------------------*/
< /*--- A block-sorting, lossless compressor        bzip2.c ---*/
< /*-----------------------------------------------------------*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- IMPORTANT                                    ---*/
< /*----------------------------------------------------*/
< 
< /*--
<    WARNING:
<       This program and library (attempts to) compress data by 
<       performing several non-trivial transformations on it.  
<       Unless you are 100% familiar with *all* the algorithms 
<       contained herein, and with the consequences of modifying them, 
<       you should NOT meddle with the compression or decompression 
<       machinery.  Incorrect changes can and very likely *will* 
<       lead to disasterous loss of data.
< 
<    DISCLAIMER:
<       I TAKE NO RESPONSIBILITY FOR ANY LOSS OF DATA ARISING FROM THE
<       USE OF THIS PROGRAM, HOWSOEVER CAUSED.
< 
<       Every compression of a file implies an assumption that the
<       compressed file can be decompressed to reproduce the original.
<       Great efforts in design, coding and testing have been made to
<       ensure that this program works correctly.  However, the
<       complexity of the algorithms, and, in particular, the presence
<       of various special cases in the code which occur with very low
<       but non-zero probability make it impossible to rule out the
<       possibility of bugs remaining in the program.  DO NOT COMPRESS
<       ANY DATA WITH THIS PROGRAM AND/OR LIBRARY UNLESS YOU ARE PREPARED 
<       TO ACCEPT THE POSSIBILITY, HOWEVER SMALL, THAT THE DATA WILL 
<       NOT BE RECOVERABLE.
< 
<       That is not to say this program is inherently unreliable.
<       Indeed, I very much hope the opposite is true.  bzip2/libbzip2
<       has been carefully constructed and extensively tested.
< 
<    PATENTS:
<       To the best of my knowledge, bzip2/libbzip2 does not use any 
<       patented algorithms.  However, I do not have the resources 
<       available to carry out a full patent search.  Therefore I cannot 
<       give any guarantee of the above statement.
< --*/
< 
< 
< 
< /*----------------------------------------------------*/
< /*--- and now for something much more pleasant :-) ---*/
< /*----------------------------------------------------*/
< 
< /*---------------------------------------------*/
< /*--
<   Place a 1 beside your platform, and 0 elsewhere.
< --*/
< 
< /*--
<   Generic 32-bit Unix.
<   Also works on 64-bit Unix boxes.
<   This is the default.
< --*/
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
4953,4959c4637
< /*--
<   Win32, as seen by Jacob Navia's excellent
<   port of (Chris Fraser & David Hanson)'s excellent
<   lcc compiler.  Or with MS Visual C.
<   This is selected automatically if compiled by a compiler which
<   defines _WIN32, not including the Cygwin GCC.
< --*/
---
> 
4963,4966c4641,4642
< /*---------------------------------------------*/
< /*--
<   Some stuff for all platforms.
< --*/
---
> 
> 
4976,4979c4652,4653
< /*---------------------------------------------*/
< /*--
<    Platform-specific stuff.
< --*/
---
> 
> 
4997c4671,4675
< #   define SET_BINARY_MODE(fd) /**/
---
> #   define SET_BINARY_MODE(fd) 
> 
> #      define NORETURN 
> 
> #endif 
4999d4676
< #      define NORETURN /**/
5001d4677
< #endif /* BZ_UNIX */
5005,5008d4680
< /*---------------------------------------------*/
< /*--
<   Some more stuff for all platforms :-)
< --*/
5013,5016c4685
< /*--
<   IntNative is your platform's `native' int size.
<   Only here to avoid probs with 64-bit platforms.
< --*/
---
> 
5020,5022c4689,4691
< /*---------------------------------------------------*/
< /*--- Misc (file handling) data decls             ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
5030c4699
< /*-- source modes; F==file, I==stdin, O==stdout --*/
---
> 
5035c4704
< /*-- operation modes --*/
---
> 
5067,5070c4736,4739
< /*---------------------------------------------------*/
< /*--- An implementation of 64-bit ints.  Sigh.    ---*/
< /*--- Roll on widespread deployment of ANSI C9X ! ---*/
< /*---------------------------------------------------*/
---
> 
> 
> 
> 
5115c4784
< /* Divide *n by 10, and return the remainder.  */
---
> 
5131,5133c4800
< /* ... and the Whole Entire Point of all this UInt64 stuff is
<    so that we can supply the following function.
< */
---
> 
5152,5154d4818
< /*---------------------------------------------------*/
< /*--- Processing of complete files and streams    ---*/
< /*---------------------------------------------------*/
5156d4819
< /*---------------------------------------------*/
5158c4821,4825
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
5254c4921
<    /*notreached*/
---
>    
5259c4926
< /*---------------------------------------------*/
---
> 
5369c5036
<    return True; /*notreached*/
---
>    return True; 
5373c5040
< /*---------------------------------------------*/
---
> 
5460c5127
<    return True; /*notreached*/
---
>    return True; 
5464,5466d5130
< /*---------------------------------------------------*/
< /*--- Error [non-] handling grunge                ---*/
< /*---------------------------------------------------*/
5468c5132,5135
< /*---------------------------------------------*/
---
> 
> 
> 
> 
5476c5143
< /*---------------------------------------------*/
---
> 
5491c5158
< /*---------------------------------------------*/
---
> 
5504c5171
< /*---------------------------------------------*/
---
> 
5515,5519c5182
<       /* Check whether input file still exists.  Delete output file
<          only if input exists to avoid loss of data.  Joerg Prante, 5
<          January 2002.  (JRS 06-Jan-2002: other changes in 1.0.2 mean
<          this is less likely to happen.  But to be ultra-paranoid, we
<          do the check anyway.)  */
---
>       
5563c5226
< /*---------------------------------------------*/
---
> 
5578c5241
< /*---------------------------------------------*/
---
> 
5591c5254
< /*---------------------------------------------*/
---
> 
5608c5271
< /*---------------------------------------------*/
---
> 
5622c5285
< /*---------------------------------------------*/
---
> 
5633c5296
< /*---------------------------------------------*/
---
> 
5689c5352
< /*---------------------------------------------*/
---
> 
5701c5364
< /*---------------------------------------------*/
---
> 
5716,5723d5378
< /*---------------------------------------------------*/
< /*--- The main driver machinery                   ---*/
< /*---------------------------------------------------*/
< 
< /* All rather crufty.  The main problem is that input files
<    are stat()d multiple times before use.  This should be
<    cleaned up. 
< */
5725c5380,5385
< /*---------------------------------------------*/
---
> 
> 
> 
> 
> 
> 
5736c5396
< /*---------------------------------------------*/
---
> 
5757c5417
< /*---------------------------------------------*/
---
> 
5768,5777c5428,5429
< /*---------------------------------------------*/
< /* Open an output file safely with O_EXCL and good permissions.
<    This avoids a race condition in versions < 1.0.2, in which
<    the file was first opened and then had its interim permissions
<    set safely.  We instead use open() to create the file with
<    the interim permissions required. (--- --- rw-).
< 
<    For non-Unix platforms, if we are not worrying about
<    security issues, simple this simply behaves like fopen.
< */
---
> 
> 
5794,5797c5446,5447
< /*---------------------------------------------*/
< /*--
<   if in doubt, return True
< --*/
---
> 
> 
5811,5814c5461,5462
< /*---------------------------------------------*/
< /*--
<   rac 11/21/98 see if file has hard links to it
< --*/
---
> 
> 
5827,5849c5475,5476
< /*---------------------------------------------*/
< /* Copy modification date, access date, permissions and owner from the
<    source to destination file.  We have to copy this meta-info off
<    into fileMetaInfo before starting to compress / decompress it,
<    because doing it afterwards means we get the wrong access time.
< 
<    To complicate matters, in compress() and decompress() below, the
<    sequence of tests preceding the call to saveInputFileMetaInfo()
<    involves calling fileExists(), which in turn establishes its result
<    by attempting to fopen() the file, and if successful, immediately
<    fclose()ing it again.  So we have to assume that the fopen() call
<    does not cause the access time field to be updated.
< 
<    Reading of the man page for stat() (man 2 stat) on RedHat 7.2 seems
<    to imply that merely doing open() will not affect the access time.
<    Therefore we merely need to hope that the C library only does
<    open() as a result of fopen(), and not any kind of read()-ahead
<    cleverness.
< 
<    It sounds pretty fragile to me.  Whether this carries across
<    robustly to arbitrary Unix-like platforms (or even works robustly
<    on this one, RedHat 7.2) is unknown to me.  Nevertheless ...  
< */
---
> 
> 
5860c5487
<    /* Note use of stat here, not lstat. */
---
>    
5884,5886c5511
<    /* chown() will in many cases return with EPERM, which can
<       be safely ignored.
<    */
---
>    
5891c5516
< /*---------------------------------------------*/
---
> 
5896,5898c5521
<    /* On unix, files can contain any characters and the file expansion
<     * is performed by the shell.
<     */
---
>    
5900,5903c5523,5524
< #  else /* ! BZ_UNIX */
<    /* On non-unix (Win* platforms), wildcard characters are not allowed in 
<     * filenames.
<     */
---
> #  else 
>    
5907c5528
< #  endif /* BZ_UNIX */
---
> #  endif 
5911c5532
< /*---------------------------------------------*/
---
> 
5940c5561
< /*---------------------------------------------*/
---
> 
6029,6030c5650
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6101c5721
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6107c5727
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6121c5741
< /*---------------------------------------------*/
---
> 
6189c5809
<    if ( /* srcMode == SM_F2F implied && */ cantGuess ) {
---
>    if (  cantGuess ) {
6194c5814
<       /* just a warning, no return */
---
>       
6215,6216c5835
<       /* Save the file's meta-info before we open it.  Doing it later
<          means we mess up the access times. */
---
>       
6278c5897
<    /*--- Now the input and output handles are sane.  Do the Biz. ---*/
---
>    
6284c5903
<    /*--- If there was an I/O error, we won't get here. ---*/
---
>    
6319c5938
< /*---------------------------------------------*/
---
> 
6399c6018
<    /*--- Now the input handle is sane.  Do the Biz. ---*/
---
>    
6408c6027
< /*---------------------------------------------*/
---
> 
6433c6052
< /*---------------------------------------------*/
---
> 
6477c6096
< /*---------------------------------------------*/
---
> 
6488,6501c6107,6108
< /*---------------------------------------------*/
< /*--
<   All the garbage from here to main() is purely to
<   implement a linked list of command-line arguments,
<   into which main() copies argv[1 .. argc-1].
< 
<   The purpose of this exercise is to facilitate 
<   the expansion of wildcard characters * and ? in 
<   filenames for OSs which don't know how to do it
<   themselves, like MSDOS, Windows 95 and NT.
< 
<   The actual Dirty Work is done by the platform-
<   specific macro APPEND_FILESPEC.
< --*/
---
> 
> 
6511c6118
< /*---------------------------------------------*/
---
> 
6523c6130
< /*---------------------------------------------*/
---
> 
6536c6143
< /*---------------------------------------------*/
---
> 
6554c6161
< /*---------------------------------------------*/
---
> 
6582c6189
< /*---------------------------------------------*/
---
> 
6593c6200
<    /*-- Be really really really paranoid :-) --*/
---
>    
6599c6206
<    /*-- Initialise --*/
---
>    
6614c6221
<    i = j = 0; /* avoid bogus warning from egcs-1.1.X */
---
>    i = j = 0; 
6616c6223
<    /*-- Set up signal handlers for mem access errors --*/
---
>    
6631,6633c6238
<    /*-- Copy flags from env var BZIP2, and 
<         expand filename wildcards in arg list.
<    --*/
---
>    
6641c6246
<    /*-- Find the length of the longest filename --*/
---
>    
6654c6259
<    /*-- Determine source modes; flag handling may change this too. --*/
---
>    
6659,6660c6264,6265
<    /*-- Determine what to do (compress/uncompress/test/cat). --*/
<    /*-- Note that subsequent flag handling may change this. --*/
---
>    
>    
6676c6281
<    /*-- Look at the flags. --*/
---
>    
6715c6320
<    /*-- And again ... --*/
---
>    
6824,6826c6429
<    /* Free the argument list memory to mollify leak detectors 
<       (eg) Purify, Checker.  Serves no other useful purpose.
<    */
---
>    
6839,6841c6442,6444
< /*-----------------------------------------------------------*/
< /*--- end                                         bzip2.c ---*/
< /*-----------------------------------------------------------*/
\ No newline at end of file
---
> 
> 
>  
\ No newline at end of file
(19.2 %, 165542 bytes)
===< pass_blank :: 0 >===
1,8d0
<  
< 
< 
< 
< 
< 
< 
< 
10d1
< 
14d4
< 
29d18
< 
36d24
< 
41d28
< 
43d29
< 
49,51d34
< 
< 
< 
53d35
< 
56,59d37
< 
< 
< 
< 
66d43
< 
71d47
< 
75d50
< 
81d55
< 
85d58
< 
89,93d61
< 
< 
< 
< 
< 
95d62
< 
97d63
< 
106d71
< 
111d75
< 
118d81
< 
125d87
< 
133d94
< 
140d100
< 
148d107
< 
158,161d116
< 
< 
< 
< 
171d125
< 
180,183d133
< 
< 
< 
< 
187d136
< 
192d140
< 
197d144
<          
203d149
< 
209d154
< 
213d157
< 
217d160
< 
222,230d164
< 
< 
< 
< 
< 
< 
< 
< 
< 
232d165
< 
234,237d166
< 
< 
< 
< 
239d167
< 
247d174
< 
250d176
< 
252d177
< 
274,275d198
< 
< 
278,281d200
< 
< 
< 
< 
286,288d204
<   
< 
< 
291d206
< 
294d208
< 
298d211
< 
300,304d212
< 
< 
< 
< 
< 
306d213
< 
310d216
< 
314d219
< 
316d220
< 
324,328d227
< 
< 
< 
< 
< 
330d228
< 
335d232
< 
340d236
< 
347,351d242
< 
< 
< 
< 
< 
356d246
< 
359d248
< 
364,369d252
< 
< 
< 
< 
< 
< 
372d254
<       
374,376d255
< 
<       
<       
379,380d257
< 
<       
382,383d258
< 
<       
388,389d262
< 
<       
394,395d266
< 
<       
397,398d267
< 
<       
402,403d270
< 
<       
408,409d274
< 
<       
413,414d277
< 
<       
417,418d279
< 
<       
421,422d281
< 
<       
426,427d284
< 
<       
432d288
< 
436d291
<       
438d292
< 
441,445d294
< 
< 
< 
< 
< 
448d296
< 
451d298
< 
454d300
< 
457d302
< 
460,464d304
< 
< 
< 
< 
< 
467d306
< 
509,513d347
< 
< 
< 
< 
< 
516,520d349
< 
< 
< 
< 
< 
523d351
<       
525,526d352
< 
<       
528,529d353
< 
<       
534,535d357
< 
<       
538,539d359
< 
<       
544,545d363
< 
<       
553,554d370
< 
<       
556,557d371
< 
<       
560,561d373
< 
<       
566,567d377
< 
<       
572,573d381
< 
<       
579d386
< 
584,585d390
< 
<       
610d414
< 
613,617d416
< 
< 
< 
< 
< 
622d420
< 
627d424
< 
633d429
< 
636d431
< 
641d435
< 
644d437
< 
648,651d440
< 
< 
< 
< 
654d442
< 
657d444
< 
661,682d447
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
692d456
< 
694d457
< 
704d466
< 
713,715d474
< 
< 
< 
718d476
< 
729,730d486
< 
< 
732d487
< 
736d490
< 
740d493
< 
743,744d495
< 
< 
756d506
< 
758d507
< 
761d509
< 
763d510
< 
765d511
< 
771,772d516
< 
<       
778d521
< 
781d523
< 
808d549
< 
810d550
< 
812d551
< 
815d553
< 
818d555
< 
828d564
< 
836,840d571
< 
< 
< 
< 
< 
846d576
< 
860,861d589
< 
<    
868d595
< 
875d601
< 
879,882d604
< 
<    
< 
<    
887,888d608
< 
<    
891d610
< 
894d612
< 
901d618
< 
905,906d621
< 
< 	 
922,923d636
< 
<          
927,928d639
< 
<             
936d646
< 
939d648
< 
943,944d651
< 
<    
955d661
< 
961,969d666
< 
< 
< 
< 
< 
< 
< 
< 
< 
982d678
< 
984d679
<    
988d682
<    
992d685
<    
996d688
<    
1000d691
<    
1004d694
<    
1008d697
<    
1012d700
<    
1016d703
<    
1020d706
<    
1024d709
<    
1028d712
<    
1032d715
< 
1034d716
< 
1036d717
<       
1042d722
<       
1048d727
<       
1054d732
<       
1060d737
<       
1066d742
<       
1072d747
<       
1078d752
<       
1084d757
< 
1087d759
< 
1092d763
< 
1095,1098d765
< 
< 
< 
< 
1103d769
< 
1116d781
< 
1119d783
< 
1123d786
< 
1126d788
< 
1129,1130d790
< 
<          
1143,1144d802
< 
<          
1157,1158d814
< 
<          
1171d826
< 
1176,1180d830
< 
< 
< 
< 
< 
1183d832
< 
1194d842
< 
1207d854
< 
1209d855
< 
1214d859
< 
1219,1220d863
< 
< 
1222d864
< 
1228,1229d869
< 
< 
1233d872
< 
1246d884
< 
1250d887
< 
1254d890
< 
1257d892
< 
1259d893
< 
1261d894
< 
1269d901
< 
1274d905
< 
1277d907
< 
1302d931
< 
1304d932
< 
1309d936
< 
1312d938
< 
1315d940
< 
1319d943
< 
1323d946
< 
1326d948
< 
1332d953
< 
1343,1347d963
< 
< 
< 
< 
< 
1351d966
< 
1370,1371d984
< 
<    
1373d985
< 
1395,1396d1006
< 
<    
1401d1010
< 
1403,1404d1011
< 
<    
1406d1012
< 
1433,1434d1038
< 
<    
1439d1042
< 
1459,1461d1061
< 
<    
< 
1463d1062
< 
1465,1466d1063
< 
<       
1468,1469d1064
< 
<       
1492d1086
< 
1494,1495d1087
< 
<       
1514d1105
< 
1517d1107
<                 
1520d1109
< 
1522,1523d1110
< 
<       
1525d1111
< 
1530d1115
< 
1532d1116
< 
1542d1125
< 
1544d1126
< 
1549d1130
< 
1553,1556d1133
< 
< 
< 
< 
1569d1145
< 
1573d1148
<       
1577,1578d1151
< 
<       
1583d1155
< 
1598d1169
< 
1603d1173
< 
1606,1618d1175
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1622d1178
< 
1626d1181
< 
1637d1191
< 
1654,1656d1207
< 
< 
< 
1662d1212
<    
1665d1214
< 
1669d1217
< 
1672d1219
< 
1674d1220
< 
1677d1222
< 
1681d1225
< 
1688d1231
< 
1690d1232
<    
1702d1243
< 
1704d1244
< 
1713d1252
<       
1715d1253
< 
1723,1725d1260
< 
< 
< 
1733d1267
< 
1741,1743d1274
< 
< 
< 
1753d1283
< 
1758d1287
< 
1761d1289
< 
1763d1290
< 
1766d1292
< 
1775,1788d1300
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1790,1792d1301
< 
<    
< 
1858,1870d1366
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1925,1941d1420
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
1947,1949d1425
< 
< 
< 
1960,1962d1435
< 
< 
< 
1973,1975d1445
< 
< 
< 
1984,1986d1453
< 
< 
< 
1995,1997d1461
< 
< 
< 
2003,2009d1466
< 
< 
< 
< 
< 
< 
< 
2021,2023d1477
< 
< 
< 
2032,2033d1485
< 
<    
2037d1488
< 
2040d1490
< 
2042d1491
< 
2046d1494
< 
2053d1500
< 
2057d1503
< 
2092d1537
< 
2095d1539
< 
2111d1554
< 
2113d1555
< 
2116,2118d1557
< 
< 
< 
2121d1559
< 
2128,2131d1565
< 
<    
< 
< 
2134d1567
< 
2136d1568
< 
2141d1572
< 
2146,2147d1576
< 
<    
2154,2155d1582
< 
<    
2158d1584
< 
2170d1595
< 
2177d1601
< 
2183d1606
<  
2188d1610
<  
2194,2195d1615
< 
<    
2197d1616
< 
2199d1617
< 
2203,2204d1620
< 
<       
2212d1627
< 
2217,2218d1631
< 
<          
2222,2223d1634
< 
<          
2225d1635
< 
2227d1636
<             
2231d1639
< 
2237d1644
< 
2248d1654
< 
2250d1655
< 
2254d1658
< 
2256d1659
< 	    
2262,2263d1664
<  
<          
2271,2272d1671
< 
<          
2274,2275d1672
<             
< 
2277d1673
< 
2288d1683
< 
2290d1684
< 
2292d1685
< 	    
2296d1688
< 
2306,2307d1697
< 
<       
2312,2313d1701
< 
< 
2318,2320d1705
< 
< 
<    
2338,2339d1722
< 
<    
2352,2353d1734
< 
<    
2361d1741
<      
2365d1744
< 
2371d1749
< 
2375,2376d1752
< 
<    
2386,2387d1761
< 
<    
2389d1762
< 
2399d1771
< 
2402,2403d1773
< 
<    
2412d1781
< 
2414d1782
<             
2420d1787
< 
2426d1792
< 
2437d1802
< 
2439d1803
< 
2441d1804
< 	 
2448,2449d1810
< 
< 
2454d1814
< 
2458,2460d1817
< 
< 
< 
2464d1820
< 
2469d1824
< 
2474d1828
< 
2477d1830
< 
2479,2480d1831
< 
<    
2488d1838
< 
2490d1839
< 
2494,2495d1842
< 
<       
2497,2498d1843
< 
<       
2500d1844
< 
2505,2507d1848
< 
< 
<    
2509d1849
< 
2519,2531d1858
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
2543,2545d1869
< 
< 
< 
2548d1871
< 
2572d1894
< 
2575d1896
< 
2578,2579d1898
< 
< 
2609,2611d1927
< 
< 
< 
2618,2619d1933
< 
<    
2644d1957
< 
2646d1958
<       
2672,2673d1983
< 
<    
2698d2007
< 
2700d2008
< 
2702d2009
< 
2705d2011
< 
2708d2013
< 
2711d2015
< 
2716d2019
< 
2727d2029
< 
2729d2030
< 
2742d2042
< 
2746d2045
<  
2756d2054
< 
2758d2055
< 
2766d2062
< 
2771,2772d2066
< 
<       
2779d2072
< 
2781d2073
< 
2791,2792d2082
< 
<       
2807,2808d2096
< 
<       
2812d2099
<    
2821,2822d2107
< 
<       
2836,2837d2120
< 
<       
2854,2856d2136
< 
<       
< 
2861d2140
< 
2863,2864d2141
< 
<       
2876,2877d2152
<       
< 
2880d2154
< 
2882d2155
< 
2884d2156
< 
2886d2157
< 
2896d2166
< 
2900d2169
< 
2915d2183
< 
2917d2184
< 
2919d2185
< 
2921,2922d2186
< 
<             
2927d2190
< 
2929d2191
<                   
2945d2206
<                   
2974,2975d2234
<             
< 
2981d2239
< 
2986,2987d2243
< 
<       
2990d2245
< 
2996,2997d2250
< 
<       
3001d2253
< 
3003,3004d2254
< 
<          
3006,3007d2255
< 
<          
3013,3014d2260
< 
<          
3024d2269
< 
3034d2278
< 
3036,3037d2279
< 
<          
3043d2284
< 
3053d2293
< 
3055d2294
< 
3057,3059d2295
< 
< 
< 
3061d2296
< 
3072d2306
< 
3082d2315
< 
3085d2317
< 
3088d2319
< 
3090d2320
< 
3092d2321
< 
3117d2345
< 
3120,3136d2347
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
3151d2361
< 
3179d2388
< 
3182,3184d2390
< 
< 
< 
3193,3195d2398
< 
< 
< 
3202d2404
< 
3208,3210d2409
< 
< 
< 
3222,3224d2420
< 
< 
< 
3231,3232d2426
< 
< 
3240,3242d2433
< 
< 
< 
3251d2441
< 
3253d2442
< 
3258d2446
< 
3262d2449
< 
3266d2452
< 
3270d2455
< 
3275d2459
< 
3283d2466
< 
3292d2474
< 
3297d2478
< 
3307,3309d2487
< 
< 
< 
3343,3345d2520
< 
< 
< 
3352,3354d2526
< 
< 
< 
3380,3382d2551
< 
< 
< 
3387d2555
< 
3389,3390d2556
< 
<       
3392d2557
<          
3394d2558
<          
3403d2566
< 
3405,3406d2567
< 
<       
3408d2568
<          
3410d2569
<          
3412d2570
<          
3425,3427d2582
< 
< 
< 
3432d2586
< 
3434,3435d2587
< 
<       
3437,3438d2588
< 
<       
3440d2589
< 
3449d2597
< 
3452,3454d2599
< 
< 
< 
3461d2605
<    
3463d2606
< 
3476d2618
< 
3494d2635
< 
3496d2636
< 
3499,3501d2638
< 
< 
< 
3510d2646
< 
3513d2648
< 
3516d2650
< 
3536d2669
< 
3546d2678
< 
3560,3562d2691
< 
< 
< 
3570d2698
< 
3575d2702
< 
3577d2703
< 
3580,3586d2705
< 
< 
< 
< 
< 
< 
< 
3593d2711
< 
3595d2712
< 
3599d2715
< 
3602d2717
< 
3621d2735
< 
3624,3626d2737
< 
< 
< 
3631d2741
< 
3633d2742
< 
3635d2743
<          
3647,3648d2754
<    
<          
3650,3651d2755
<                
<    
3658d2761
<    
3664d2766
<    
3670d2771
<    
3677d2777
< 
3679,3680d2778
< 
<       
3690,3691d2787
<       
< 
3695d2790
< 
3697,3698d2791
< 
<          
3720d2812
<          
3731d2822
<    
3736d2826
<    
3741d2830
<    
3746d2834
< 
3752,3753d2839
< 
<       
3763d2848
<       
3766,3769d2850
< 
< 
< 
< 
3782,3784d2862
< 
< 
< 
3789d2866
< 
3791d2867
< 
3793d2868
<          
3805,3806d2879
<    
<          
3808,3809d2880
<                
<    
3816d2886
<    
3822d2891
<    
3828d2896
<    
3835d2902
< 
3837d2903
< 
3839d2904
<          
3851,3852d2915
<    
<          
3854d2916
<    
3860d2921
<    
3865d2925
<    
3870d2929
<    
3875d2933
< 
3878,3880d2935
< 
< 
< 
3888d2942
< 
3925d2978
< 
3927d2979
< 
3930,3932d2981
< 
< 
< 
3940d2988
< 
3944d2991
< 
3947d2993
< 
3950,3955d2995
< 
< 
< 
< 
< 
< 
3961d3000
< 
3973,3975d3011
< 
< 
< 
3983,3985d3018
< 
< 
< 
3995d3027
< 
3997d3028
< 
4003d3033
< 
4006d3035
< 
4010d3038
< 
4019d3046
< 
4025d3051
< 
4030,4033d3055
< 
< 
< 
< 
4042d3063
< 
4050d3070
< 
4053d3072
< 
4056d3074
< 
4063d3080
< 
4071d3087
< 
4076,4078d3091
< 
< 
< 
4089,4090d3101
< 
< 
4102d3112
< 
4109d3118
< 
4114d3122
< 
4122d3129
< 
4130d3136
< 
4134d3139
< 
4140d3144
< 
4149d3152
< 
4154,4156d3156
< 
< 
< 
4167d3166
< 
4169d3167
< 
4176d3173
< 
4179d3175
< 
4183d3178
< 
4185d3179
< 
4193d3186
<    
4199d3191
< 
4203d3194
< 
4206d3196
< 
4210,4212d3199
< 
< 
< 
4216d3202
< 
4220d3205
< 
4223d3207
< 
4228,4230d3211
< 
< 
< 
4239d3219
< 
4241d3220
< 
4244d3222
< 
4247d3224
< 
4250d3226
< 
4253d3228
< 
4255d3229
< 
4258d3231
< 
4268d3240
< 
4270d3241
< 
4273d3243
< 
4277d3246
< 
4283d3251
<       
4285d3252
< 
4288,4290d3254
< 
< 
< 
4304d3267
< 
4309,4315d3271
< 
< 
< 
< 
< 
< 
< 
4327d3282
< 
4334d3288
< 
4342d3295
< 
4347d3299
< 
4351,4352d3302
< 
<    
4356d3305
< 
4360d3308
< 
4365,4367d3312
< 
< 
< 
4378d3322
< 
4384d3327
< 
4390d3332
< 
4395d3336
< 
4399,4400d3339
< 
<    
4404d3342
< 
4413d3350
< 
4418,4425d3354
< 
< 
< 
< 
< 
< 
< 
< 
4430,4433d3358
< 
< 
< 
< 
4452d3376
< 
4471d3394
< 
4482d3404
< 
4484d3405
<       
4499,4502d3419
< 
< 
< 
< 
4509,4511d3425
< 
< 
< 
4518,4520d3431
< 
< 
< 
4532,4534d3442
< 
< 
< 
4538d3445
< 
4546,4548d3452
< 
< 
< 
4551d3454
<    
4554,4556d3456
< 
< 
< 
4561d3460
<    
4575,4578d3473
< 
< 
< 
< 
4597,4598d3491
< 
< 
4602d3494
< 
4607,4634d3498
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
4636,4637d3499
< 
< 
4639,4643d3500
< 
< 
< 
< 
< 
4646d3502
< 
4650,4654d3505
< 
< 
< 
< 
< 
4658d3508
< 
4664d3513
< 
4667d3515
< 
4670d3517
< 
4672d3518
< 
4674d3519
< 
4676,4681d3520
< 
< 
< 
< 
< 
<                                        
4684,4685d3522
< 
< 
4687,4692d3523
< 
< 
< 
< 
< 
< 
4698,4699d3528
< 
< 
4703,4704d3531
< 
< 
4708d3534
< 
4711d3536
< 
4713d3537
< 
4722d3545
< 
4730d3552
< 
4733,4740d3554
< 
< 
< 
< 
< 
< 
< 
< 
4744,4745d3557
< 
< 
4758,4759d3569
< 
< 
4772,4773d3581
< 
< 
4782,4784d3589
< 
< 
< 
4798,4800d3602
< 
< 
< 
4817,4825d3618
< 
< 
< 
< 
< 
< 
< 
< 
< 
4835d3627
< 
4838d3629
< 
4841d3631
< 
4845d3634
< 
4847d3635
< 
4849d3636
< 
4855d3641
< 
4857d3642
< 
4862d3646
< 
4875d3658
< 
4901d3683
< 
4903d3684
< 
4919d3699
< 
4921d3700
<    
4923,4926d3701
< 
< 
< 
< 
4936d3710
< 
4939d3712
< 
4942d3714
< 
4945d3716
< 
4947d3717
< 
4954d3723
< 
4963d3731
< 
4966d3733
< 
4968d3734
< 
4971d3736
< 
4974d3738
< 
4979d3742
< 
4991d3753
< 
5004d3765
<   
5034d3794
< 
5038,5040d3797
< 
< 
< 
5050d3806
< 
5053d3808
< 
5056d3810
< 
5058d3811
< 
5065d3817
< 
5071d3822
< 
5074d3824
< 
5076d3825
< 
5080d3828
< 
5082d3829
< 
5086d3832
< 
5089d3834
< 
5125d3869
< 
5129,5135d3872
< 
< 
< 
< 
< 
< 
< 
5141,5143d3877
< 
< 
< 
5156,5158d3889
< 
< 
< 
5169,5171d3899
< 
< 
< 
5177d3904
< 
5181,5182d3907
< 
<       
5213d3937
< 
5224,5226d3947
< 
< 
< 
5239,5241d3959
< 
< 
< 
5252,5254d3969
< 
< 
< 
5269,5271d3983
< 
< 
< 
5283,5285d3994
< 
< 
< 
5294,5296d4002
< 
< 
< 
5344d4049
< 
5350,5352d4054
< 
< 
< 
5362,5364d4063
< 
< 
< 
5377,5385d4075
< 
< 
< 
< 
< 
< 
< 
< 
< 
5394,5396d4083
< 
< 
< 
5411d4097
< 
5415,5417d4100
< 
< 
< 
5426,5429d4108
< 
< 
< 
< 
5444,5447d4122
< 
< 
< 
< 
5453d4127
< 
5459,5462d4132
< 
< 
< 
< 
5468d4137
< 
5473,5476d4141
< 
< 
< 
< 
5481d4145
< 
5487d4150
<    
5492,5493d4154
< 
< 
5500d4160
< 
5503d4162
< 
5506d4164
< 
5509d4166
< 
5511d4167
<    
5514,5516d4169
< 
< 
< 
5521d4173
<    
5524d4175
<    
5530,5532d4180
< 
< 
< 
5534d4181
< 
5539d4185
< 
5549d4194
< 
5559,5561d4203
< 
< 
< 
5569d4210
< 
5571d4211
< 
5574d4213
< 
5590d4228
< 
5648d4285
< 
5650d4286
<       
5653d4288
< 
5655d4289
< 
5669d4302
< 
5690d4322
< 
5709d4340
< 
5714d4344
< 
5720,5721d4349
< 
<    
5726,5727d4353
< 
<    
5736d4361
< 
5739,5741d4363
< 
< 
< 
5751d4372
< 
5753d4373
< 
5756d4375
< 
5777d4395
< 
5814d4431
<       
5833d4449
< 
5835d4450
<       
5838d4452
< 
5840d4453
< 
5854d4466
< 
5866d4477
< 
5885d4495
< 
5890d4499
< 
5896,5897d4504
< 
<    
5902,5903d4508
< 
<    
5922d4526
< 
5934d4537
< 
5936,5938d4538
< 
< 
< 
5945d4544
< 
5947d4545
< 
5950d4547
< 
5957d4553
< 
5981d4576
< 
5983d4577
< 
5996d4589
< 
6006d4598
< 
6011d4602
< 
6017,6018d4607
< 
<    
6021d4609
< 
6025,6027d4612
< 
< 
< 
6032d4616
< 
6050,6052d4633
< 
< 
< 
6089d4669
< 
6094,6096d4673
< 
< 
< 
6105,6109d4681
< 
< 
< 
< 
< 
6116,6118d4687
< 
< 
< 
6123d4691
< 
6128,6130d4695
< 
< 
< 
6135d4699
< 
6141,6143d4704
< 
< 
< 
6159,6161d4719
< 
< 
< 
6167d4724
< 
6187,6189d4743
< 
< 
< 
6191d4744
< 
6199,6200d4751
< 
<    
6205,6206d4755
< 
<    
6222,6223d4770
< 
<    
6228d4774
< 
6231d4776
< 
6236,6238d4780
< 
< 
<    
6244,6246d4785
< 
< 
<    
6257,6259d4795
< 
< 
<    
6262,6265d4797
< 
< 
<    
<    
6267d4798
< 
6271d4801
< 
6279,6281d4808
< 
< 
<    
6319,6320d4845
<    
<    
6347d4871
< 
6351d4874
< 
6357d4879
< 
6360d4881
< 
6362d4882
< 
6370d4889
< 
6385d4903
< 
6404d4921
< 
6428,6429d4944
< 
<    
6437d4951
< 
6440,6444d4953
< 
< 
< 
< 
<  
\ No newline at end of file
===< pass_clang_binsrch :: replace-function-def-with-decl >===
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2127c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
---
> ;
2129d1204
<    
2132,2518c1207,1208
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
< 
< 
< 
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3630c1603
< {
<    UChar k1;
---
> ;
3632d1604
<    if (s->blockRandomised) {
3634,3676d1605
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
3678d1606
<    } else {
3680,3781c1608,1609
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
< 
< 
< 
< 
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c2433
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c2439
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c2445
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c2457
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c2464
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c2470
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c2480
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c2486
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c2492
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c2498
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c2504
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c2510
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c2516
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c2522
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c2528
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c2534
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c2540
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c2546
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c2558
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c2564
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c2570
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c2576
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c2583
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c2590
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c2602
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c2607
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c2613
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c2626
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c2631
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c2637
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c2643
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c2649
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c2655
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c2661
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c2667
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c2684
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c2690
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c2696
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c2702
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c2709
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2448c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
< 
< 
< 
< 
< 
< 
< 
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
< 
< 
< 
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< static
< void sendMTFValues ( EState* s )
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
---
> ;
2450,2453d1179
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
2455,2457d1180
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
2461,2463d1183
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
2465,2473d1184
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
2475,2476c1186,1188
<       BZ2_blockSort ( s );
<    }
---
> static
> void makeMaps_e ( EState* s )
> ;
2478d1189
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
2480,2487d1190
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
2489c1192,1194
<    if (s->nblock > 0) {
---
> static
> void generateMTFValues ( EState* s )
> ;
2491,2493d1195
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
2495,2496d1196
<       
<       bsPutUInt32 ( s, s->blockCRC );
2498,2499c1198,1199
<       
<       bsW(s,1,0);
---
> #define BZ_LESSER_ICOST  0
> #define BZ_GREATER_ICOST 15
2501,2504c1201,1203
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
---
> static
> void sendMTFValues ( EState* s )
> ;
2507,2508d1205
<    
<    if (is_last_block) {
2510,2518c1207,1208
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> void BZ2_compressBlock ( EState* s, Bool is_last_block )
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
3138,3181c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
3187,3192c1320
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
3198,3201c1326
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
3205,3207c1330
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
3213,3221c1336
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
3227,3230c1342
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
3235,3239c1347
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
3312,3342c1420
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
3348,3351c1426
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
3385,3424c1460
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
3430,3451c1466
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
3457,3498c1472
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
3629,3765c1603
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
3771,3781c1609
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
3787,3877c1615
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3977,3982c1715
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> ;
4440,4498c2173
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
4748,4757c2423
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
---
> ;
4762,4771c2428
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4762,4771c4762
< {
<    Int32  i;
<    double base = 1.0;
<    double sum  = 0.0;
<    for (i = 0; i < 8; i++) {
<       sum  += base * (double)(n->b[i]);
<       base *= 256.0;
<    }
<    return sum;
< }
---
> ;
4776,4781c4767
< {
<    Int32 i;
<    for (i = 0; i < 8; i++)
<       if (n->b[i] != 0) return 0;
<    return 1;
< }
---
> ;
4787,4797c4773
< {
<    UInt32 rem, tmp;
<    Int32  i;
<    rem = 0;
<    for (i = 7; i >= 0; i--) {
<       tmp = rem * 256 + n->b[i];
<       n->b[i] = tmp / 10;
<       rem = tmp % 10;
<    }
<    return rem;
< }
---
> ;
4803,4816c4779
< {
<    Int32  i, q;
<    UChar  buf[32];
<    Int32  nBuf   = 0;
<    UInt64 n_copy = *n;
<    do {
<       q = uInt64_qrm10 ( &n_copy );
<       buf[nBuf] = q + '0';
<       nBuf++;
<    } while (!uInt64_isZero(&n_copy));
<    outbuf[nBuf] = 0;
<    for (i = 0; i < nBuf; i++) 
<       outbuf[i] = buf[nBuf-i-1];
< }
---
> ;
4828,4922c4791
< {
<    BZFILE* bzf = NULL;
<    UChar   ibuf[5000];
<    Int32   nIbuf;
<    UInt32  nbytes_in_lo32, nbytes_in_hi32;
<    UInt32  nbytes_out_lo32, nbytes_out_hi32;
<    Int32   bzerr, bzerr_dummy, ret;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    bzf = BZ2_bzWriteOpen ( &bzerr, zStream, 
<                            blockSize100k, verbosity, workFactor );   
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n" );
< 
<    while (True) {
< 
<       if (myfeof(stream)) break;
<       nIbuf = fread ( ibuf, sizeof(UChar), 5000, stream );
<       if (ferror(stream)) goto errhandler_io;
<       if (nIbuf > 0) BZ2_bzWrite ( &bzerr, bzf, (void*)ibuf, nIbuf );
<       if (bzerr != BZ_OK) goto errhandler;
< 
<    }
< 
<    BZ2_bzWriteClose64 ( &bzerr, bzf, 0, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    if (bzerr != BZ_OK) goto errhandler;
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fflush ( zStream );
<    if (ret == EOF) goto errhandler_io;
<    if (zStream != stdout) {
<       ret = fclose ( zStream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (ferror(stream)) goto errhandler_io;
<    ret = fclose ( stream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 1) {
<       if (nbytes_in_lo32 == 0 && nbytes_in_hi32 == 0) {
< 	 fprintf ( stderr, " no data compressed.\n");
<       } else {
< 	 Char   buf_nin[32], buf_nout[32];
< 	 UInt64 nbytes_in,   nbytes_out;
< 	 double nbytes_in_d, nbytes_out_d;
< 	 uInt64_from_UInt32s ( &nbytes_in, 
< 			       nbytes_in_lo32, nbytes_in_hi32 );
< 	 uInt64_from_UInt32s ( &nbytes_out, 
< 			       nbytes_out_lo32, nbytes_out_hi32 );
< 	 nbytes_in_d  = uInt64_to_double ( &nbytes_in );
< 	 nbytes_out_d = uInt64_to_double ( &nbytes_out );
< 	 uInt64_toAscii ( buf_nin, &nbytes_in );
< 	 uInt64_toAscii ( buf_nout, &nbytes_out );
< 	 fprintf ( stderr, "%6.3f:1, %6.3f bits/byte, "
< 		   "%5.2f%% saved, %s in, %s out.\n",
< 		   nbytes_in_d / nbytes_out_d,
< 		   (8.0 * nbytes_out_d) / nbytes_in_d,
< 		   100.0 * (1.0 - nbytes_out_d / nbytes_in_d),
< 		   buf_nin,
< 		   buf_nout
< 		 );
<       }
<    }
< 
<    return;
< 
<    errhandler:
<    BZ2_bzWriteClose64 ( &bzerr_dummy, bzf, 1, 
<                         &nbytes_in_lo32, &nbytes_in_hi32,
<                         &nbytes_out_lo32, &nbytes_out_hi32 );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_MEM_ERROR:
<          outOfMemory (); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       default:
<          panic ( "compress:unexpected error" );
<    }
< 
<    panic ( "compress:end" );
<    
< }
---
> ;
4929,5037c4798
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(stream);
<    SET_BINARY_MODE(zStream);
< 
<    if (ferror(stream)) goto errhandler_io;
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto trycat;
<          if ((bzerr == BZ_OK || bzerr == BZ_STREAM_END) && nread > 0)
<             fwrite ( obuf, sizeof(UChar), nread, stream );
<          if (ferror(stream)) goto errhandler_io;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "decompress:bzReadGetUnused" );
< 
<       if (nUnused == 0 && myfeof(zStream)) break;
<    }
< 
<    closeok:
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (ferror(stream)) goto errhandler_io;
<    ret = fflush ( stream );
<    if (ret != 0) goto errhandler_io;
<    if (stream != stdout) {
<       ret = fclose ( stream );
<       outputHandleJustInCase = NULL;
<       if (ret == EOF) goto errhandler_io;
<    }
<    outputHandleJustInCase = NULL;
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    trycat: 
<    if (forceOverwrite) {
<       rewind(zStream);
<       while (True) {
<       	 if (myfeof(zStream)) break;
<       	 nread = fread ( obuf, sizeof(UChar), 5000, zStream );
<       	 if (ferror(zStream)) goto errhandler_io;
<       	 if (nread > 0) fwrite ( obuf, sizeof(UChar), nread, stream );
<       	 if (ferror(stream)) goto errhandler_io;
<       }
<       goto closeok;
<    }
<   
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          crcError();
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          compressedStreamEOF();
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (stream != stdout) fclose(stream);
<          if (streamNo == 1) {
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "\n%s: %s: trailing garbage after EOF ignored\n",
<                       progName, inName );
<             return True;       
<          }
<       default:
<          panic ( "decompress:unexpected error" );
<    }
< 
<    panic ( "decompress:end" );
<    return True; 
< }
---
> ;
5043,5128c4804
< {
<    BZFILE* bzf = NULL;
<    Int32   bzerr, bzerr_dummy, ret, nread, streamNo, i;
<    UChar   obuf[5000];
<    UChar   unused[BZ_MAX_UNUSED];
<    Int32   nUnused;
<    UChar*  unusedTmp;
< 
<    nUnused = 0;
<    streamNo = 0;
< 
<    SET_BINARY_MODE(zStream);
<    if (ferror(zStream)) goto errhandler_io;
< 
<    while (True) {
< 
<       bzf = BZ2_bzReadOpen ( 
<                &bzerr, zStream, verbosity, 
<                (int)smallMode, unused, nUnused
<             );
<       if (bzf == NULL || bzerr != BZ_OK) goto errhandler;
<       streamNo++;
< 
<       while (bzerr == BZ_OK) {
<          nread = BZ2_bzRead ( &bzerr, bzf, obuf, 5000 );
<          if (bzerr == BZ_DATA_ERROR_MAGIC) goto errhandler;
<       }
<       if (bzerr != BZ_STREAM_END) goto errhandler;
< 
<       BZ2_bzReadGetUnused ( &bzerr, bzf, (void**)(&unusedTmp), &nUnused );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
< 
<       for (i = 0; i < nUnused; i++) unused[i] = unusedTmp[i];
< 
<       BZ2_bzReadClose ( &bzerr, bzf );
<       if (bzerr != BZ_OK) panic ( "test:bzReadGetUnused" );
<       if (nUnused == 0 && myfeof(zStream)) break;
< 
<    }
< 
<    if (ferror(zStream)) goto errhandler_io;
<    ret = fclose ( zStream );
<    if (ret == EOF) goto errhandler_io;
< 
<    if (verbosity >= 2) fprintf ( stderr, "\n    " );
<    return True;
< 
<    errhandler:
<    BZ2_bzReadClose ( &bzerr_dummy, bzf );
<    if (verbosity == 0) 
<       fprintf ( stderr, "%s: %s: ", progName, inName );
<    switch (bzerr) {
<       case BZ_CONFIG_ERROR:
<          configError(); break;
<       case BZ_IO_ERROR:
<          errhandler_io:
<          ioError(); break;
<       case BZ_DATA_ERROR:
<          fprintf ( stderr,
<                    "data integrity (CRC) error in data\n" );
<          return False;
<       case BZ_MEM_ERROR:
<          outOfMemory();
<       case BZ_UNEXPECTED_EOF:
<          fprintf ( stderr,
<                    "file ends unexpectedly\n" );
<          return False;
<       case BZ_DATA_ERROR_MAGIC:
<          if (zStream != stdin) fclose(zStream);
<          if (streamNo == 1) {
<           fprintf ( stderr, 
<                     "bad magic number (file not created by bzip2)\n" );
<             return False;
<          } else {
<             if (noisy)
<             fprintf ( stderr, 
<                       "trailing garbage after EOF ignored\n" );
<             return True;       
<          }
<       default:
<          panic ( "test:unexpected error" );
<    }
< 
<    panic ( "test:end" );
<    return True; 
< }
---
> ;
5138,5140c4814
< {
<    if (v > exitValue) exitValue = v;
< }
---
> ;
5146,5155c4820
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\nIt is possible that the compressed file(s) have become corrupted.\n"
<         "You can use the -tvv option to test integrity of such files.\n\n"
<         "You can use the `bzip2recover' program to attempt to recover\n"
<         "data from undamaged sections of corrupted files.\n\n"
<     );
< }
---
> ;
5161,5168c4826
< {
<    if (noisy)
<    fprintf (
<       stderr,
<       "\tInput file = %s, output file = %s\n",
<       inName, outName 
<    );
< }
---
> ;
5174,5223c4832
< {
<    IntNative      retVal;
<    struct MY_STAT statBuf;
< 
<    if ( srcMode == SM_F2F 
<         && opMode != OM_TEST
<         && deleteOutputOnInterrupt ) {
< 
<       
<       retVal = MY_STAT ( inName, &statBuf );
<       if (retVal == 0) {
<          if (noisy)
<             fprintf ( stderr, 
<                       "%s: Deleting output file %s, if it exists.\n",
<                       progName, outName );
<          if (outputHandleJustInCase != NULL)
<             fclose ( outputHandleJustInCase );
<          retVal = remove ( outName );
<          if (retVal != 0)
<             fprintf ( stderr,
<                       "%s: WARNING: deletion of output file "
<                       "(apparently) failed.\n",
<                       progName );
<       } else {
<          fprintf ( stderr,
<                    "%s: WARNING: deletion of output file suppressed\n",
<                     progName );
<          fprintf ( stderr,
<                    "%s:    since input file no longer exists.  Output file\n",
<                    progName );
<          fprintf ( stderr,
<                    "%s:    `%s' may be incomplete.\n",
<                    progName, outName );
<          fprintf ( stderr, 
<                    "%s:    I suggest doing an integrity test (bzip2 -tv)"
<                    " of it.\n",
<                    progName );
<       }
<    }
< 
<    if (noisy && numFileNames > 0 && numFilesProcessed < numFileNames) {
<       fprintf ( stderr, 
<                 "%s: WARNING: some files have not been processed:\n"
<                 "%s:    %d specified on command line, %d not processed yet.\n\n",
<                 progName, progName,
<                 numFileNames, numFileNames - numFilesProcessed );
<    }
<    setExit(ec);
<    exit(exitValue);
< }
---
> ;
5229,5238c4838
< {
<    fprintf ( stderr,
<              "\n%s: PANIC -- internal consistency error:\n"
<              "\t%s\n"
<              "\tThis is a BUG.  Please report it to me at:\n"
<              "\tjseward@acm.org\n",
<              progName, s );
<    showFileNames();
<    cleanUpAndFail( 3 );
< }
---
> ;
5244,5251c4844
< {
<    fprintf ( stderr,
<              "\n%s: Data integrity error when decompressing.\n",
<              progName );
<    showFileNames();
<    cadvise();
<    cleanUpAndFail( 2 );
< }
---
> ;
5257,5268c4850
< {
<   if (noisy) {
<     fprintf ( stderr,
< 	      "\n%s: Compressed file ends unexpectedly;\n\t"
< 	      "perhaps it is corrupted?  *Possible* reason follows.\n",
< 	      progName );
<     perror ( progName );
<     showFileNames();
<     cadvise();
<   }
<   cleanUpAndFail( 2 );
< }
---
> ;
5274,5282c4856
< {
<    fprintf ( stderr,
<              "\n%s: I/O or other error, bailing out.  "
<              "Possible reason follows.\n",
<              progName );
<    perror ( progName );
<    showFileNames();
<    cleanUpAndFail( 1 );
< }
---
> ;
5288,5293c4862
< {
<    fprintf ( stderr,
<              "\n%s: Control-C or similar caught, quitting.\n",
<              progName );
<    cleanUpAndFail(1);
< }
---
> ;
5299,5349c4868
< {
<    if (opMode == OM_Z)
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst compressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (2) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (3) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (1) and (2).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (1)\n"
<       "   or (2), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
<       else
<       fprintf ( 
<       stderr,
<       "\n%s: Caught a SIGSEGV or SIGBUS whilst decompressing.\n"
<       "\n"
<       "   Possible causes are (most likely first):\n"
<       "   (1) The compressed data is corrupted, and bzip2's usual checks\n"
<       "       failed to detect this.  Try bzip2 -tvv my_file.bz2.\n"
<       "   (2) This computer has unreliable memory or cache hardware\n"
<       "       (a surprisingly common problem; try a different machine.)\n"
<       "   (3) A bug in the compiler used to create this executable\n"
<       "       (unlikely, if you didn't compile bzip2 yourself.)\n"
<       "   (4) A real bug in bzip2 -- I hope this should never be the case.\n"
<       "   The user's manual, Section 4.3, has more info on (2) and (3).\n"
<       "   \n"
<       "   If you suspect this is a bug in bzip2, or are unsure about (2)\n"
<       "   or (3), feel free to report it to me at: jseward@acm.org.\n"
<       "   Section 4.3 of the user's manual describes the info a useful\n"
<       "   bug report should have.  If the manual is available on your\n"
<       "   system, please try and read it before mailing me.  If you don't\n"
<       "   have the manual or can't be bothered to read it, mail me anyway.\n"
<       "\n",
<       progName );
< 
<    showFileNames();
<    if (opMode == OM_Z)
<       cleanUpAndFail( 3 ); else
<       { cadvise(); cleanUpAndFail( 2 ); }
< }
---
> ;
5355,5361c4874
< {
<    fprintf ( stderr,
<              "\n%s: couldn't allocate enough memory\n",
<              progName );
<    showFileNames();
<    cleanUpAndFail(1);
< }
---
> ;
5367,5376c4880
< {
<    fprintf ( stderr,
<              "bzip2: I'm not configured correctly for this platform!\n"
<              "\tI require Int32, Int16 and Char to have sizes\n"
<              "\tof 4, 2 and 1 bytes to run properly, and they don't.\n"
<              "\tProbably you can fix this by defining them correctly,\n"
<              "\tand recompiling.  Bye!\n" );
<    setExit(3);
<    exit(exitValue);
< }
---
> ;
5388,5393c4892
< {
<    Int32 i;
<    if ( (Int32)strlen(s) >= longestFileName ) return;
<    for (i = 1; i <= longestFileName - (Int32)strlen(s); i++)
<       fprintf ( stderr, " " );
< }
---
> ;
5399,5414c4898
< {
<    if ( strlen(from) > FILE_NAME_LEN-10 )  {
<       fprintf (
<          stderr,
<          "bzip2: file name\n`%s'\n"
<          "is suspiciously (more than %d chars) long.\n"
<          "Try using a reasonable file name instead.  Sorry! :-)\n",
<          from, FILE_NAME_LEN-10
<       );
<       setExit(1);
<       exit(exitValue);
<    }
< 
<   strncpy(to,from,FILE_NAME_LEN-10);
<   to[FILE_NAME_LEN-10]='\0';
< }
---
> ;
5420,5425c4904
< {
<    FILE *tmp   = fopen ( name, "rb" );
<    Bool exists = (tmp != NULL);
<    if (tmp != NULL) fclose ( tmp );
<    return exists;
< }
---
> ;
5431,5443c4910
< {
< #  if BZ_UNIX
<    FILE*     fp;
<    IntNative fh;
<    fh = open(name, O_WRONLY|O_CREAT|O_EXCL, S_IWUSR|S_IRUSR);
<    if (fh == -1) return NULL;
<    fp = fdopen(fh, mode);
<    if (fp == NULL) close(fh);
<    return fp;
< #  else
<    return fopen(name, mode);
< #  endif
< }
---
> ;
5450,5458c4917
< {
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return True;
<    if (MY_S_ISREG(statBuf.st_mode)) return False;
<    return True;
< }
---
> ;
5465,5472c4924
< {  
<    IntNative      i;
<    struct MY_STAT statBuf;
< 
<    i = MY_LSTAT ( name, &statBuf );
<    if (i != 0) return 0;
<    return (statBuf.st_nlink - 1);
< }
---
> ;
5484,5491c4936
< {
< #  if BZ_UNIX
<    IntNative retVal;
<    
<    retVal = MY_STAT( srcName, &fileMetaInfo );
<    ERROR_IF_NOT_ZERO ( retVal );
< #  endif
< }
---
> ;
5496,5513c4941
< {
< #  if BZ_UNIX
<    IntNative      retVal;
<    struct utimbuf uTimBuf;
< 
<    uTimBuf.actime = fileMetaInfo.st_atime;
<    uTimBuf.modtime = fileMetaInfo.st_mtime;
< 
<    retVal = chmod ( dstName, fileMetaInfo.st_mode );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = utime ( dstName, &uTimBuf );
<    ERROR_IF_NOT_ZERO ( retVal );
< 
<    retVal = chown ( dstName, fileMetaInfo.st_uid, fileMetaInfo.st_gid );
<    
< #  endif
< }
---
> ;
5519,5529c4947
< {
< #  if BZ_UNIX
<    
<    return False;
< #  else 
<    
<    for (; *name != '\0'; name++)
<       if (*name == '?' || *name == '*') return True;
<    return False;
< #  endif 
< }
---
> ;
5542,5548c4960
< {
<    Int32 ns = strlen(s);
<    Int32 nx = strlen(suffix);
<    if (ns < nx) return False;
<    if (strcmp(s + ns - nx, suffix) == 0) return True;
<    return False;
< }
---
> ;
5553,5558c4965
< {
<    if (!hasSuffix(name,oldSuffix)) return False;
<    name[strlen(name)-strlen(oldSuffix)] = 0;
<    strcat ( name, newSuffix );
<    return True;
< }
---
> ;
5564,5738c4971
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "compress: bad modes\n" );
< 
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          strcat ( outName, ".bz2" ); 
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++) {
<       if (hasSuffix(inName, zSuffix[i])) {
<          if (noisy)
<          fprintf ( stderr, 
<                    "%s: Input file %s already has %s suffix.\n",
<                    progName, inName, zSuffix[i] );
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	 remove(outName);
<       } else {
< 	 fprintf ( stderr, "%s: Output file %s already exists.\n",
< 		   progName, outName );
< 	 setExit(1);
< 	 return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName )) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( isatty ( fileno ( stdout ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't write compressed data to a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "compress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr,  "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    compressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( srcMode == SM_F2F ) {
<       applySavedMetaInfoToOutputFile ( outName );
<       deleteOutputOnInterrupt = False;
<       if ( !keepInputFiles ) {
<          IntNative retVal = remove ( inName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
< 
<    deleteOutputOnInterrupt = False;
< }
---
> ;
5744,5935c4977
< {
<    FILE  *inStr;
<    FILE  *outStr;
<    Int32 n, i;
<    Bool  magicNumberOK;
<    Bool  cantGuess;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "uncompress: bad modes\n" );
< 
<    cantGuess = False;
<    switch (srcMode) {
<       case SM_I2O: 
<          copyFileName ( inName, "(stdin)" );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<       case SM_F2F: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, name );
<          for (i = 0; i < BZ_N_SUFFIX_PAIRS; i++)
<             if (mapSuffix(outName,zSuffix[i],unzSuffix[i]))
<                goto zzz; 
<          cantGuess = True;
<          strcat ( outName, ".out" );
<          break;
<       case SM_F2O: 
<          copyFileName ( inName, name );
<          copyFileName ( outName, "(stdout)" ); 
<          break;
<    }
< 
<    zzz:
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode == SM_F2F || srcMode == SM_F2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite && notAStandardFile ( inName )) {
<       if (noisy)
<       fprintf ( stderr, "%s: Input file %s is not a normal file.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if (  cantGuess ) {
<       if (noisy)
<       fprintf ( stderr, 
<                 "%s: Can't guess original name for %s -- using %s\n",
<                 progName, inName, outName );
<       
<    }   
<    if ( srcMode == SM_F2F && fileExists ( outName ) ) {
<       if (forceOverwrite) {
< 	remove(outName);
<       } else {
<         fprintf ( stderr, "%s: Output file %s already exists.\n",
<                   progName, outName );
<         setExit(1);
<         return;
<       }
<    }
<    if ( srcMode == SM_F2F && !forceOverwrite &&
<         (n=countHardLinks ( inName ) ) > 0) {
<       fprintf ( stderr, "%s: Input file %s has %d other link%s.\n",
<                 progName, inName, n, n > 1 ? "s" : "" );
<       setExit(1);
<       return;
<    }
< 
<    if ( srcMode == SM_F2F ) {
<       
<       saveInputFileMetaInfo ( inName );
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          inStr = stdin;
<          outStr = stdout;
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2O:
<          inStr = fopen ( inName, "rb" );
<          outStr = stdout;
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          outStr = fopen_output_safely ( outName, "wb" );
<          if ( outStr == NULL) {
<             fprintf ( stderr, "%s: Can't create output file %s: %s.\n",
<                       progName, outName, strerror(errno) );
<             if ( inStr != NULL ) fclose ( inStr );
<             setExit(1);
<             return;
<          }
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s: %s.\n",
<                       progName, inName, strerror(errno) );
<             if ( outStr != NULL ) fclose ( outStr );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "uncompress: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = outStr;
<    deleteOutputOnInterrupt = True;
<    magicNumberOK = uncompressStream ( inStr, outStr );
<    outputHandleJustInCase = NULL;
< 
<    
<    if ( magicNumberOK ) {
<       if ( srcMode == SM_F2F ) {
<          applySavedMetaInfoToOutputFile ( outName );
<          deleteOutputOnInterrupt = False;
<          if ( !keepInputFiles ) {
<             IntNative retVal = remove ( inName );
<             ERROR_IF_NOT_ZERO ( retVal );
<          }
<       }
<    } else {
<       unzFailsExist = True;
<       deleteOutputOnInterrupt = False;
<       if ( srcMode == SM_F2F ) {
<          IntNative retVal = remove ( outName );
<          ERROR_IF_NOT_ZERO ( retVal );
<       }
<    }
<    deleteOutputOnInterrupt = False;
< 
<    if ( magicNumberOK ) {
<       if (verbosity >= 1)
<          fprintf ( stderr, "done\n" );
<    } else {
<       setExit(2);
<       if (verbosity >= 1)
<          fprintf ( stderr, "not a bzip2 file.\n" ); else
<          fprintf ( stderr,
<                    "%s: %s is not a bzip2 file.\n",
<                    progName, inName );
<    }
< 
< }
---
> ;
5941,6024c4983
< {
<    FILE *inStr;
<    Bool allOK;
<    struct MY_STAT statBuf;
< 
<    deleteOutputOnInterrupt = False;
< 
<    if (name == NULL && srcMode != SM_I2O)
<       panic ( "testf: bad modes\n" );
< 
<    copyFileName ( outName, "(none)" );
<    switch (srcMode) {
<       case SM_I2O: copyFileName ( inName, "(stdin)" ); break;
<       case SM_F2F: copyFileName ( inName, name ); break;
<       case SM_F2O: copyFileName ( inName, name ); break;
<    }
< 
<    if ( srcMode != SM_I2O && containsDubiousChars ( inName ) ) {
<       if (noisy)
<       fprintf ( stderr, "%s: There are no files matching `%s'.\n",
<                 progName, inName );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O && !fileExists ( inName ) ) {
<       fprintf ( stderr, "%s: Can't open input %s: %s.\n",
<                 progName, inName, strerror(errno) );
<       setExit(1);
<       return;
<    }
<    if ( srcMode != SM_I2O ) {
<       MY_STAT(inName, &statBuf);
<       if ( MY_S_ISDIR(statBuf.st_mode) ) {
<          fprintf( stderr,
<                   "%s: Input file %s is a directory.\n",
<                   progName,inName);
<          setExit(1);
<          return;
<       }
<    }
< 
<    switch ( srcMode ) {
< 
<       case SM_I2O:
<          if ( isatty ( fileno ( stdin ) ) ) {
<             fprintf ( stderr,
<                       "%s: I won't read compressed data from a terminal.\n",
<                       progName );
<             fprintf ( stderr, "%s: For help, type: `%s --help'.\n",
<                               progName, progName );
<             setExit(1);
<             return;
<          };
<          inStr = stdin;
<          break;
< 
<       case SM_F2O: case SM_F2F:
<          inStr = fopen ( inName, "rb" );
<          if ( inStr == NULL ) {
<             fprintf ( stderr, "%s: Can't open input file %s:%s.\n",
<                       progName, inName, strerror(errno) );
<             setExit(1);
<             return;
<          };
<          break;
< 
<       default:
<          panic ( "testf: bad srcMode" );
<          break;
<    }
< 
<    if (verbosity >= 1) {
<       fprintf ( stderr, "  %s: ", inName );
<       pad ( inName );
<       fflush ( stderr );
<    }
< 
<    
<    outputHandleJustInCase = NULL;
<    allOK = testStream ( inStr );
< 
<    if (allOK && verbosity >= 1) fprintf ( stderr, "ok\n" );
<    if (!allOK) testFailsExist = True;
< }
---
> ;
6030,6049c4989
< {
<    fprintf ( stderr,
< 
<     "bzip2, a block-sorting file compressor.  "
<     "Version %s.\n"
<     "   \n"
<     "   Copyright (C) 1996-2002 by Julian Seward.\n"
<     "   \n"
<     "   This program is free software; you can redistribute it and/or modify\n"
<     "   it under the terms set out in the LICENSE file, which is included\n"
<     "   in the bzip2-1.0 source distribution.\n"
<     "   \n"
<     "   This program is distributed in the hope that it will be useful,\n"
<     "   but WITHOUT ANY WARRANTY; without even the implied warranty of\n"
<     "   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n"
<     "   LICENSE file for more details.\n"
<     "   \n",
<     BZ2_bzlibVersion()
<    );
< }
---
> ;
6055,6093c4995
< {
<    fprintf (
<       stderr,
<       "bzip2, a block-sorting file compressor.  "
<       "Version %s.\n"
<       "\n   usage: %s [flags and input files in any order]\n"
<       "\n"
<       "   -h --help           print this message\n"
<       "   -d --decompress     force decompression\n"
<       "   -z --compress       force compression\n"
<       "   -k --keep           keep (don't delete) input files\n"
<       "   -f --force          overwrite existing output files\n"
<       "   -t --test           test compressed file integrity\n"
<       "   -c --stdout         output to standard out\n"
<       "   -q --quiet          suppress noncritical error messages\n"
<       "   -v --verbose        be verbose (a 2nd -v gives more)\n"
<       "   -L --license        display software version & license\n"
<       "   -V --version        display software version & license\n"
<       "   -s --small          use less memory (at most 2500k)\n"
<       "   -1 .. -9            set block size to 100k .. 900k\n"
<       "   --fast              alias for -1\n"
<       "   --best              alias for -9\n"
<       "\n"
<       "   If invoked as `bzip2', default action is to compress.\n"
<       "              as `bunzip2',  default action is to decompress.\n"
<       "              as `bzcat', default action is to decompress to stdout.\n"
<       "\n"
<       "   If no file names are given, bzip2 compresses or decompresses\n"
<       "   from standard input to standard output.  You can combine\n"
<       "   short flags, so `-v -4' means the same as -v4 or -4v, &c.\n"
< #     if BZ_UNIX
<       "\n"
< #     endif
<       ,
< 
<       BZ2_bzlibVersion(),
<       fullProgName
<    );
< }
---
> ;
6099,6104c5001
< {
<    fprintf ( 
<       stderr, 
<       "%s: %s is redundant in versions 0.9.5 and above\n",
<       progName, flag );
< }
---
> ;
6121,6127c5018
< {
<    void* p;
< 
<    p = malloc ( (size_t)n );
<    if (p == NULL) outOfMemory ();
<    return p;
< }
---
> ;
6133,6140c5024
< {
<    Cell *c;
< 
<    c = (Cell*) myMalloc ( sizeof ( Cell ) );
<    c->name = NULL;
<    c->link = NULL;
<    return c;
< }
---
> ;
6146,6158c5030
< {
<    if (root == NULL) {
<       Cell *tmp = mkCell();
<       tmp->name = (Char*) myMalloc ( 5 + strlen(name) );
<       strcpy ( tmp->name, name );
<       return tmp;
<    } else {
<       Cell *tmp = root;
<       while (tmp->link != NULL) tmp = tmp->link;
<       tmp->link = snocString ( tmp->link, name );
<       return root;
<    }
< }
---
> ;
6164,6186c5036
< {
<    Int32 i, j, k;
<    Char *envbase, *p;
< 
<    envbase = getenv(varName);
<    if (envbase != NULL) {
<       p = envbase;
<       i = 0;
<       while (True) {
<          if (p[i] == 0) break;
<          p += i;
<          i = 0;
<          while (isspace((Int32)(p[0]))) p++;
<          while (p[i] != 0 && !isspace((Int32)(p[i]))) i++;
<          if (i > 0) {
<             k = i; if (k > FILE_NAME_LEN-10) k = FILE_NAME_LEN-10;
<             for (j = 0; j < k; j++) tmpName[j] = p[j];
<             tmpName[k] = 0;
<             APPEND_FLAG(*argList, tmpName);
<          }
<       }
<    }
< }
---
> ;
6193,6439c5043
< {
<    Int32  i, j;
<    Char   *tmp;
<    Cell   *argList;
<    Cell   *aa;
<    Bool   decode;
< 
<    
<    if (sizeof(Int32) != 4 || sizeof(UInt32) != 4  ||
<        sizeof(Int16) != 2 || sizeof(UInt16) != 2  ||
<        sizeof(Char)  != 1 || sizeof(UChar)  != 1)
<       configError();
< 
<    
<    outputHandleJustInCase  = NULL;
<    smallMode               = False;
<    keepInputFiles          = False;
<    forceOverwrite          = False;
<    noisy                   = True;
<    verbosity               = 0;
<    blockSize100k           = 9;
<    testFailsExist          = False;
<    unzFailsExist           = False;
<    numFileNames            = 0;
<    numFilesProcessed       = 0;
<    workFactor              = 30;
<    deleteOutputOnInterrupt = False;
<    exitValue               = 0;
<    i = j = 0; 
< 
<    
<    signal (SIGSEGV, mySIGSEGVorSIGBUScatcher);
< #  if BZ_UNIX
<    signal (SIGBUS,  mySIGSEGVorSIGBUScatcher);
< #  endif
< 
<    copyFileName ( inName,  "(none)" );
<    copyFileName ( outName, "(none)" );
< 
<    copyFileName ( progNameReally, argv[0] );
<    progName = &progNameReally[0];
<    for (tmp = &progNameReally[0]; *tmp != '\0'; tmp++)
<       if (*tmp == PATH_SEP) progName = tmp + 1;
< 
< 
<    
<    argList = NULL;
<    addFlagsFromEnvVar ( &argList,  "BZIP2" );
<    addFlagsFromEnvVar ( &argList,  "BZIP" );
<    for (i = 1; i <= argc-1; i++)
<       APPEND_FILESPEC(argList, argv[i]);
< 
< 
<    
<    longestFileName = 7;
<    numFileNames    = 0;
<    decode          = True;
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) { decode = False; continue; }
<       if (aa->name[0] == '-' && decode) continue;
<       numFileNames++;
<       if (longestFileName < (Int32)strlen(aa->name) )
<          longestFileName = (Int32)strlen(aa->name);
<    }
< 
< 
<    
<    if (numFileNames == 0)
<       srcMode = SM_I2O; else srcMode = SM_F2F;
< 
< 
<    
<    
<    opMode = OM_Z;
< 
<    if ( (strstr ( progName, "unzip" ) != 0) ||
<         (strstr ( progName, "UNZIP" ) != 0) )
<       opMode = OM_UNZ;
< 
<    if ( (strstr ( progName, "z2cat" ) != 0) ||
<         (strstr ( progName, "Z2CAT" ) != 0) ||
<         (strstr ( progName, "zcat" ) != 0)  ||
<         (strstr ( progName, "ZCAT" ) != 0) )  {
<       opMode = OM_UNZ;
<       srcMode = (numFileNames == 0) ? SM_I2O : SM_F2O;
<    }
< 
< 
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (aa->name[0] == '-' && aa->name[1] != '-') {
<          for (j = 1; aa->name[j] != '\0'; j++) {
<             switch (aa->name[j]) {
<                case 'c': srcMode          = SM_F2O; break;
<                case 'd': opMode           = OM_UNZ; break;
<                case 'z': opMode           = OM_Z; break;
<                case 'f': forceOverwrite   = True; break;
<                case 't': opMode           = OM_TEST; break;
<                case 'k': keepInputFiles   = True; break;
<                case 's': smallMode        = True; break;
<                case 'q': noisy            = False; break;
<                case '1': blockSize100k    = 1; break;
<                case '2': blockSize100k    = 2; break;
<                case '3': blockSize100k    = 3; break;
<                case '4': blockSize100k    = 4; break;
<                case '5': blockSize100k    = 5; break;
<                case '6': blockSize100k    = 6; break;
<                case '7': blockSize100k    = 7; break;
<                case '8': blockSize100k    = 8; break;
<                case '9': blockSize100k    = 9; break;
<                case 'V':
<                case 'L': license();            break;
<                case 'v': verbosity++; break;
<                case 'h': usage ( progName );
<                          exit ( 0 );
<                          break;
<                default:  fprintf ( stderr, "%s: Bad flag `%s'\n",
<                                    progName, aa->name );
<                          usage ( progName );
<                          exit ( 1 );
<                          break;
<             }
<          }
<       }
<    }
<    
<    
<    for (aa = argList; aa != NULL; aa = aa->link) {
<       if (ISFLAG("--")) break;
<       if (ISFLAG("--stdout"))            srcMode          = SM_F2O;  else
<       if (ISFLAG("--decompress"))        opMode           = OM_UNZ;  else
<       if (ISFLAG("--compress"))          opMode           = OM_Z;    else
<       if (ISFLAG("--force"))             forceOverwrite   = True;    else
<       if (ISFLAG("--test"))              opMode           = OM_TEST; else
<       if (ISFLAG("--keep"))              keepInputFiles   = True;    else
<       if (ISFLAG("--small"))             smallMode        = True;    else
<       if (ISFLAG("--quiet"))             noisy            = False;   else
<       if (ISFLAG("--version"))           license();                  else
<       if (ISFLAG("--license"))           license();                  else
<       if (ISFLAG("--exponential"))       workFactor = 1;             else 
<       if (ISFLAG("--repetitive-best"))   redundant(aa->name);        else
<       if (ISFLAG("--repetitive-fast"))   redundant(aa->name);        else
<       if (ISFLAG("--fast"))              blockSize100k = 1;          else
<       if (ISFLAG("--best"))              blockSize100k = 9;          else
<       if (ISFLAG("--verbose"))           verbosity++;                else
<       if (ISFLAG("--help"))              { usage ( progName ); exit ( 0 ); }
<          else
<          if (strncmp ( aa->name, "--", 2) == 0) {
<             fprintf ( stderr, "%s: Bad flag `%s'\n", progName, aa->name );
<             usage ( progName );
<             exit ( 1 );
<          }
<    }
< 
<    if (verbosity > 4) verbosity = 4;
<    if (opMode == OM_Z && smallMode && blockSize100k > 2) 
<       blockSize100k = 2;
< 
<    if (opMode == OM_TEST && srcMode == SM_F2O) {
<       fprintf ( stderr, "%s: -c and -t cannot be used together.\n",
<                 progName );
<       exit ( 1 );
<    }
< 
<    if (srcMode == SM_F2O && numFileNames == 0)
<       srcMode = SM_I2O;
< 
<    if (opMode != OM_Z) blockSize100k = 0;
< 
<    if (srcMode == SM_F2F) {
<       signal (SIGINT,  mySignalCatcher);
<       signal (SIGTERM, mySignalCatcher);
< #     if BZ_UNIX
<       signal (SIGHUP,  mySignalCatcher);
< #     endif
<    }
< 
<    if (opMode == OM_Z) {
<      if (srcMode == SM_I2O) {
<         compress ( NULL );
<      } else {
<         decode = True;
<         for (aa = argList; aa != NULL; aa = aa->link) {
<            if (ISFLAG("--")) { decode = False; continue; }
<            if (aa->name[0] == '-' && decode) continue;
<            numFilesProcessed++;
<            compress ( aa->name );
<         }
<      }
<    } 
<    else
< 
<    if (opMode == OM_UNZ) {
<       unzFailsExist = False;
<       if (srcMode == SM_I2O) {
<          uncompress ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
<             if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             uncompress ( aa->name );
<          }      
<       }
<       if (unzFailsExist) { 
<          setExit(2); 
<          exit(exitValue);
<       }
<    } 
< 
<    else {
<       testFailsExist = False;
<       if (srcMode == SM_I2O) {
<          testf ( NULL );
<       } else {
<          decode = True;
<          for (aa = argList; aa != NULL; aa = aa->link) {
< 	    if (ISFLAG("--")) { decode = False; continue; }
<             if (aa->name[0] == '-' && decode) continue;
<             numFilesProcessed++;
<             testf ( aa->name );
< 	 }
<       }
<       if (testFailsExist && noisy) {
<          fprintf ( stderr,
<            "\n"
<            "You can use the `bzip2recover' program to attempt to recover\n"
<            "data from undamaged sections of corrupted files.\n\n"
<          );
<          setExit(2);
<          exit(exitValue);
<       }
<    }
< 
<    
<    aa = argList;
<    while (aa != NULL) {
<       Cell* aa2 = aa->link;
<       if (aa->name != NULL) free(aa->name);
<       free(aa);
<       aa = aa2;
<    }
< 
<    return exitValue;
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
(39.5 %, 124010 bytes)
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
689,712c689
< {
<    Int32 i, j, tmp;
<    UInt32 ec_tmp;
< 
<    if (lo == hi) return;
< 
<    if (hi - lo > 3) {
<       for ( i = hi-4; i >= lo; i-- ) {
<          tmp = fmap[i];
<          ec_tmp = eclass[tmp];
<          for ( j = i+4; j <= hi && ec_tmp > eclass[fmap[j]]; j += 4 )
<             fmap[j-4] = fmap[j];
<          fmap[j-4] = tmp;
<       }
<    }
< 
<    for ( i = hi-1; i >= lo; i-- ) {
<       tmp = fmap[i];
<       ec_tmp = eclass[tmp];
<       for ( j = i+1; j <= hi && ec_tmp > eclass[fmap[j]]; j++ )
<          fmap[j-1] = fmap[j];
<       fmap[j-1] = tmp;
<    }
< }
---
> ;
750,827c727
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m;
<    Int32 sp, lo, hi;
<    UInt32 med, r, r3;
<    Int32 stackLo[FALLBACK_QSORT_STACK_SIZE];
<    Int32 stackHi[FALLBACK_QSORT_STACK_SIZE];
< 
<    r = 0;
< 
<    sp = 0;
<    fpush ( loSt, hiSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < FALLBACK_QSORT_STACK_SIZE, 1004 );
< 
<       fpop ( lo, hi );
<       if (hi - lo < FALLBACK_QSORT_SMALL_THRESH) {
<          fallbackSimpleSort ( fmap, eclass, lo, hi );
<          continue;
<       }
< 
<       
<       r = ((r * 7621) + 1) % 32768;
<       r3 = r % 3;
<       if (r3 == 0) med = eclass[fmap[lo]]; else
<       if (r3 == 1) med = eclass[fmap[(lo+hi)>>1]]; else
<                    med = eclass[fmap[hi]];
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (1) {
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unLo]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unLo], fmap[ltLo]); 
<                ltLo++; unLo++; 
<                continue; 
<             };
<             if (n > 0) break;
<             unLo++;
<          }
<          while (1) {
<             if (unLo > unHi) break;
<             n = (Int32)eclass[fmap[unHi]] - (Int32)med;
<             if (n == 0) { 
<                fswap(fmap[unHi], fmap[gtHi]); 
<                gtHi--; unHi--; 
<                continue; 
<             };
<             if (n < 0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          fswap(fmap[unLo], fmap[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "fallbackQSort3(2)" );
< 
<       if (gtHi < ltLo) continue;
< 
<       n = fmin(ltLo-lo, unLo-ltLo); fvswap(lo, unLo-n, n);
<       m = fmin(hi-gtHi, gtHi-unHi); fvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       if (n - lo > hi - m) {
<          fpush ( lo, n );
<          fpush ( m, hi );
<       } else {
<          fpush ( m, hi );
<          fpush ( lo, n );
<       }
<    }
< }
---
> ;
853,954c753
< {
<    Int32 ftab[257];
<    Int32 ftabCopy[256];
<    Int32 H, i, j, k, l, r, cc, cc1;
<    Int32 nNotDone;
<    Int32 nBhtab;
<    UChar* eclass8 = (UChar*)eclass;
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        bucket sorting ...\n" );
<    for (i = 0; i < 257;    i++) ftab[i] = 0;
<    for (i = 0; i < nblock; i++) ftab[eclass8[i]]++;
<    for (i = 0; i < 256;    i++) ftabCopy[i] = ftab[i];
<    for (i = 1; i < 257;    i++) ftab[i] += ftab[i-1];
< 
<    for (i = 0; i < nblock; i++) {
<       j = eclass8[i];
<       k = ftab[j] - 1;
<       ftab[j] = k;
<       fmap[k] = i;
<    }
< 
<    nBhtab = 2 + (nblock / 32);
<    for (i = 0; i < nBhtab; i++) bhtab[i] = 0;
<    for (i = 0; i < 256; i++) SET_BH(ftab[i]);
< 
<    
< 
<    
<    for (i = 0; i < 32; i++) { 
<       SET_BH(nblock + 2*i);
<       CLEAR_BH(nblock + 2*i + 1);
<    }
< 
<    
<    H = 1;
<    while (1) {
< 
<       if (verb >= 4) 
<          VPrintf1 ( "        depth %6d has ", H );
< 
<       j = 0;
<       for (i = 0; i < nblock; i++) {
<          if (ISSET_BH(i)) j = i;
<          k = fmap[i] - H; if (k < 0) k += nblock;
<          eclass[k] = j;
<       }
< 
<       nNotDone = 0;
<       r = -1;
<       while (1) {
< 
< 	 
<          k = r + 1;
<          while (ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (ISSET_BH(k)) {
<             while (WORD_BH(k) == 0xffffffff) k += 32;
<             while (ISSET_BH(k)) k++;
<          }
<          l = k - 1;
<          if (l >= nblock) break;
<          while (!ISSET_BH(k) && UNALIGNED_BH(k)) k++;
<          if (!ISSET_BH(k)) {
<             while (WORD_BH(k) == 0x00000000) k += 32;
<             while (!ISSET_BH(k)) k++;
<          }
<          r = k - 1;
<          if (r >= nblock) break;
< 
<          
<          if (r > l) {
<             nNotDone += (r - l + 1);
<             fallbackQSort3 ( fmap, eclass, l, r );
< 
<             
<             cc = -1;
<             for (i = l; i <= r; i++) {
<                cc1 = eclass[fmap[i]];
<                if (cc != cc1) { SET_BH(i); cc = cc1; };
<             }
<          }
<       }
< 
<       if (verb >= 4) 
<          VPrintf1 ( "%6d unresolved strings\n", nNotDone );
< 
<       H *= 2;
<       if (H > nblock || nNotDone == 0) break;
<    }
< 
<    
<    if (verb >= 4)
<       VPrintf0 ( "        reconstructing block ...\n" );
<    j = 0;
<    for (i = 0; i < nblock; i++) {
<       while (ftabCopy[j] == 0) j++;
<       ftabCopy[j]--;
<       eclass8[fmap[i]] = (UChar)j;
<    }
<    AssertH ( j < 256, 1005 );
< }
---
> ;
978,1094c777
< {
<    Int32  k;
<    UChar  c1, c2;
<    UInt16 s1, s2;
< 
<    AssertD ( i1 != i2, "mainGtU" );
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
<    
<    c1 = block[i1]; c2 = block[i2];
<    if (c1 != c2) return (c1 > c2);
<    i1++; i2++;
< 
<    k = nblock + 8;
< 
<    do {
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
<       
<       c1 = block[i1]; c2 = block[i2];
<       if (c1 != c2) return (c1 > c2);
<       s1 = quadrant[i1]; s2 = quadrant[i2];
<       if (s1 != s2) return (s1 > s2);
<       i1++; i2++;
< 
<       if (i1 >= nblock) i1 -= nblock;
<       if (i2 >= nblock) i2 -= nblock;
< 
<       k -= 8;
<       (*budget)--;
<    }
<       while (k >= 0);
< 
<    return False;
< }
---
> ;
1113,1175c796
< {
<    Int32 i, j, h, bigN, hp;
<    UInt32 v;
< 
<    bigN = hi - lo + 1;
<    if (bigN < 2) return;
< 
<    hp = 0;
<    while (incs[hp] < bigN) hp++;
<    hp--;
< 
<    for (; hp >= 0; hp--) {
<       h = incs[hp];
< 
<       i = lo + h;
<       while (True) {
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          
<          if (i > hi) break;
<          v = ptr[i];
<          j = i;
<          while ( mainGtU ( 
<                     ptr[j-h]+d, v+d, block, quadrant, nblock, budget 
<                  ) ) {
<             ptr[j] = ptr[j-h];
<             j = j - h;
<             if (j <= (lo + h - 1)) break;
<          }
<          ptr[j] = v;
<          i++;
< 
<          if (*budget < 0) return;
<       }
<    }
< }
---
> ;
1198,1206c819
< {
<    UChar t;
<    if (a > b) { t = a; a = b; b = t; };
<    if (b > c) { 
<       b = c;
<       if (a > b) b = a;
<    }
<    return b;
< }
---
> ;
1243,1331c856
< {
<    Int32 unLo, unHi, ltLo, gtHi, n, m, med;
<    Int32 sp, lo, hi, d;
< 
<    Int32 stackLo[MAIN_QSORT_STACK_SIZE];
<    Int32 stackHi[MAIN_QSORT_STACK_SIZE];
<    Int32 stackD [MAIN_QSORT_STACK_SIZE];
< 
<    Int32 nextLo[3];
<    Int32 nextHi[3];
<    Int32 nextD [3];
< 
<    sp = 0;
<    mpush ( loSt, hiSt, dSt );
< 
<    while (sp > 0) {
< 
<       AssertH ( sp < MAIN_QSORT_STACK_SIZE, 1001 );
< 
<       mpop ( lo, hi, d );
<       if (hi - lo < MAIN_QSORT_SMALL_THRESH || 
<           d > MAIN_QSORT_DEPTH_THRESH) {
<          mainSimpleSort ( ptr, block, quadrant, nblock, lo, hi, d, budget );
<          if (*budget < 0) return;
<          continue;
<       }
< 
<       med = (Int32) 
<             mmed3 ( block[ptr[ lo         ]+d],
<                     block[ptr[ hi         ]+d],
<                     block[ptr[ (lo+hi)>>1 ]+d] );
< 
<       unLo = ltLo = lo;
<       unHi = gtHi = hi;
< 
<       while (True) {
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unLo]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unLo], ptr[ltLo]); 
<                ltLo++; unLo++; continue; 
<             };
<             if (n >  0) break;
<             unLo++;
<          }
<          while (True) {
<             if (unLo > unHi) break;
<             n = ((Int32)block[ptr[unHi]+d]) - med;
<             if (n == 0) { 
<                mswap(ptr[unHi], ptr[gtHi]); 
<                gtHi--; unHi--; continue; 
<             };
<             if (n <  0) break;
<             unHi--;
<          }
<          if (unLo > unHi) break;
<          mswap(ptr[unLo], ptr[unHi]); unLo++; unHi--;
<       }
< 
<       AssertD ( unHi == unLo-1, "mainQSort3(2)" );
< 
<       if (gtHi < ltLo) {
<          mpush(lo, hi, d+1 );
<          continue;
<       }
< 
<       n = mmin(ltLo-lo, unLo-ltLo); mvswap(lo, unLo-n, n);
<       m = mmin(hi-gtHi, gtHi-unHi); mvswap(unLo, hi-m+1, m);
< 
<       n = lo + unLo - ltLo - 1;
<       m = hi - (gtHi - unHi) + 1;
< 
<       nextLo[0] = lo;  nextHi[0] = n;   nextD[0] = d;
<       nextLo[1] = m;   nextHi[1] = hi;  nextD[1] = d;
<       nextLo[2] = n+1; nextHi[2] = m-1; nextD[2] = d+1;
< 
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
<       if (mnextsize(1) < mnextsize(2)) mnextswap(1,2);
<       if (mnextsize(0) < mnextsize(1)) mnextswap(0,1);
< 
<       AssertD (mnextsize(0) >= mnextsize(1), "mainQSort3(8)" );
<       AssertD (mnextsize(1) >= mnextsize(2), "mainQSort3(9)" );
< 
<       mpush (nextLo[0], nextHi[0], nextD[0]);
<       mpush (nextLo[1], nextHi[1], nextD[1]);
<       mpush (nextLo[2], nextHi[2], nextD[2]);
<    }
< }
---
> ;
1360,1548c885
< {
<    Int32  i, j, k, ss, sb;
<    Int32  runningOrder[256];
<    Bool   bigDone[256];
<    Int32  copyStart[256];
<    Int32  copyEnd  [256];
<    UChar  c1;
<    Int32  numQSorted;
<    UInt16 s;
<    if (verb >= 4) VPrintf0 ( "        main sort initialise ...\n" );
< 
<    
<    for (i = 65536; i >= 0; i--) ftab[i] = 0;
< 
<    j = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<       quadrant[i-1] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-1]) << 8);
<       ftab[j]++;
<       quadrant[i-2] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-2]) << 8);
<       ftab[j]++;
<       quadrant[i-3] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i-3]) << 8);
<       ftab[j]++;
<    }
<    for (; i >= 0; i--) {
<       quadrant[i] = 0;
<       j = (j >> 8) | ( ((UInt16)block[i]) << 8);
<       ftab[j]++;
<    }
< 
<    
<    for (i = 0; i < BZ_N_OVERSHOOT; i++) {
<       block   [nblock+i] = block[i];
<       quadrant[nblock+i] = 0;
<    }
< 
<    if (verb >= 4) VPrintf0 ( "        bucket sorting ...\n" );
< 
<    
<    for (i = 1; i <= 65536; i++) ftab[i] += ftab[i-1];
< 
<    s = block[0] << 8;
<    i = nblock-1;
<    for (; i >= 3; i -= 4) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<       s = (s >> 8) | (block[i-1] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-1;
<       s = (s >> 8) | (block[i-2] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-2;
<       s = (s >> 8) | (block[i-3] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i-3;
<    }
<    for (; i >= 0; i--) {
<       s = (s >> 8) | (block[i] << 8);
<       j = ftab[s] -1;
<       ftab[s] = j;
<       ptr[j] = i;
<    }
< 
<    
<    for (i = 0; i <= 255; i++) {
<       bigDone     [i] = False;
<       runningOrder[i] = i;
<    }
< 
<    {
<       Int32 vv;
<       Int32 h = 1;
<       do h = 3 * h + 1; while (h <= 256);
<       do {
<          h = h / 3;
<          for (i = h; i <= 255; i++) {
<             vv = runningOrder[i];
<             j = i;
<             while ( BIGFREQ(runningOrder[j-h]) > BIGFREQ(vv) ) {
<                runningOrder[j] = runningOrder[j-h];
<                j = j - h;
<                if (j <= (h - 1)) goto zero;
<             }
<             zero:
<             runningOrder[j] = vv;
<          }
<       } while (h != 1);
<    }
< 
<    
< 
<    numQSorted = 0;
< 
<    for (i = 0; i <= 255; i++) {
< 
<       
<       ss = runningOrder[i];
< 
<       
<       for (j = 0; j <= 255; j++) {
<          if (j != ss) {
<             sb = (ss << 8) + j;
<             if ( ! (ftab[sb] & SETMASK) ) {
<                Int32 lo = ftab[sb]   & CLEARMASK;
<                Int32 hi = (ftab[sb+1] & CLEARMASK) - 1;
<                if (hi > lo) {
<                   if (verb >= 4)
<                      VPrintf4 ( "        qsort [0x%x, 0x%x]   "
<                                 "done %d   this %d\n",
<                                 ss, j, numQSorted, hi - lo + 1 );
<                   mainQSort3 ( 
<                      ptr, block, quadrant, nblock, 
<                      lo, hi, BZ_N_RADIX, budget 
<                   );   
<                   numQSorted += (hi - lo + 1);
<                   if (*budget < 0) return;
<                }
<             }
<             ftab[sb] |= SETMASK;
<          }
<       }
< 
<       AssertH ( !bigDone[ss], 1006 );
< 
<       
<       {
<          for (j = 0; j <= 255; j++) {
<             copyStart[j] =  ftab[(j << 8) + ss]     & CLEARMASK;
<             copyEnd  [j] = (ftab[(j << 8) + ss + 1] & CLEARMASK) - 1;
<          }
<          for (j = ftab[ss << 8] & CLEARMASK; j < copyStart[ss]; j++) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1])
<                ptr[ copyStart[c1]++ ] = k;
<          }
<          for (j = (ftab[(ss+1) << 8] & CLEARMASK) - 1; j > copyEnd[ss]; j--) {
<             k = ptr[j]-1; if (k < 0) k += nblock;
<             c1 = block[k];
<             if (!bigDone[c1]) 
<                ptr[ copyEnd[c1]-- ] = k;
<          }
<       }
< 
<       AssertH ( (copyStart[ss]-1 == copyEnd[ss])
<                 || 
<                 
<                 (copyStart[ss] == 0 && copyEnd[ss] == nblock-1),
<                 1007 )
< 
<       for (j = 0; j <= 255; j++) ftab[(j << 8) + ss] |= SETMASK;
< 
<       
<       bigDone[ss] = True;
< 
<       if (i < 255) {
<          Int32 bbStart  = ftab[ss << 8] & CLEARMASK;
<          Int32 bbSize   = (ftab[(ss+1) << 8] & CLEARMASK) - bbStart;
<          Int32 shifts   = 0;
< 
<          while ((bbSize >> shifts) > 65534) shifts++;
< 
<          for (j = bbSize-1; j >= 0; j--) {
<             Int32 a2update     = ptr[bbStart + j];
<             UInt16 qVal        = (UInt16)(j >> shifts);
<             quadrant[a2update] = qVal;
<             if (a2update < BZ_N_OVERSHOOT)
<                quadrant[a2update + nblock] = qVal;
<          }
<          AssertH ( ((bbSize-1) >> shifts) <= 65535, 1002 );
<       }
< 
<    }
< 
<    if (verb >= 4)
<       VPrintf3 ( "        %d pointers, %d sorted, %d scanned\n",
<                  nblock, numQSorted, nblock - numQSorted );
< }
---
> ;
1558,1605c895
< {
<    UInt32* ptr    = s->ptr; 
<    UChar*  block  = s->block;
<    UInt32* ftab   = s->ftab;
<    Int32   nblock = s->nblock;
<    Int32   verb   = s->verbosity;
<    Int32   wfact  = s->workFactor;
<    UInt16* quadrant;
<    Int32   budget;
<    Int32   budgetInit;
<    Int32   i;
< 
<    if (nblock < 10000) {
<       fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<    } else {
<       
<       i = nblock+BZ_N_OVERSHOOT;
<       if (i & 1) i++;
<       quadrant = (UInt16*)(&(block[i]));
< 
<       
<       if (wfact < 1  ) wfact = 1;
<       if (wfact > 100) wfact = 100;
<       budgetInit = nblock * ((wfact-1) / 3);
<       budget = budgetInit;
< 
<       mainSort ( ptr, block, quadrant, ftab, nblock, verb, &budget );
<       if (verb >= 3) 
<          VPrintf3 ( "      %d work, %d block, ratio %5.2f\n",
<                     budgetInit - budget,
<                     nblock, 
<                     (float)(budgetInit - budget) /
<                     (float)(nblock==0 ? 1 : nblock) ); 
<       if (budget < 0) {
<          if (verb >= 2) 
<             VPrintf0 ( "    too repetitive; using fallback"
<                        " sorting algorithm\n" );
<          fallbackSort ( s->arr1, s->arr2, ftab, nblock, verb );
<       }
<    }
< 
<    s->origPtr = -1;
<    for (i = 0; i < s->nblock; i++)
<       if (ptr[i] == 0)
<          { s->origPtr = i; break; };
< 
<    AssertH( s->origPtr != -1, 1003 );
< }
---
> ;
1661,1722c951
< {
<    
<    Int32 nNodes, nHeap, n1, n2, i, j, k;
<    Bool  tooLong;
< 
<    Int32 heap   [ BZ_MAX_ALPHA_SIZE + 2 ];
<    Int32 weight [ BZ_MAX_ALPHA_SIZE * 2 ];
<    Int32 parent [ BZ_MAX_ALPHA_SIZE * 2 ]; 
< 
<    for (i = 0; i < alphaSize; i++)
<       weight[i+1] = (freq[i] == 0 ? 1 : freq[i]) << 8;
< 
<    while (True) {
< 
<       nNodes = alphaSize;
<       nHeap = 0;
< 
<       heap[0] = 0;
<       weight[0] = 0;
<       parent[0] = -2;
< 
<       for (i = 1; i <= alphaSize; i++) {
<          parent[i] = -1;
<          nHeap++;
<          heap[nHeap] = i;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nHeap < (BZ_MAX_ALPHA_SIZE+2), 2001 );
<    
<       while (nHeap > 1) {
<          n1 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          n2 = heap[1]; heap[1] = heap[nHeap]; nHeap--; DOWNHEAP(1);
<          nNodes++;
<          parent[n1] = parent[n2] = nNodes;
<          weight[nNodes] = ADDWEIGHTS(weight[n1], weight[n2]);
<          parent[nNodes] = -1;
<          nHeap++;
<          heap[nHeap] = nNodes;
<          UPHEAP(nHeap);
<       }
< 
<       AssertH( nNodes < (BZ_MAX_ALPHA_SIZE * 2), 2002 );
< 
<       tooLong = False;
<       for (i = 1; i <= alphaSize; i++) {
<          j = 0;
<          k = i;
<          while (parent[k] >= 0) { k = parent[k]; j++; }
<          len[i-1] = j;
<          if (j > maxLen) tooLong = True;
<       }
<       
<       if (! tooLong) break;
< 
<       for (i = 1; i < alphaSize; i++) {
<          j = weight[i] >> 8;
<          j = 1 + (j / 2);
<          weight[i] = j << 8;
<       }
<    }
< }
---
> ;
1731,1740c960
< {
<    Int32 n, vec, i;
< 
<    vec = 0;
<    for (n = minLen; n <= maxLen; n++) {
<       for (i = 0; i < alphaSize; i++)
<          if (length[i] == n) { code[i] = vec; vec++; };
<       vec <<= 1;
<    }
< }
---
> ;
1751,1774c971
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1751,1774c1751
< {
<    Int32 pp, i, j, vec;
< 
<    pp = 0;
<    for (i = minLen; i <= maxLen; i++)
<       for (j = 0; j < alphaSize; j++)
<          if (length[j] == i) { perm[pp] = j; pp++; };
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) base[i] = 0;
<    for (i = 0; i < alphaSize; i++) base[length[i]+1]++;
< 
<    for (i = 1; i < BZ_MAX_CODE_LEN; i++) base[i] += base[i-1];
< 
<    for (i = 0; i < BZ_MAX_CODE_LEN; i++) limit[i] = 0;
<    vec = 0;
< 
<    for (i = minLen; i <= maxLen; i++) {
<       vec += (base[i+1] - base[i]);
<       limit[i] = vec-1;
<       vec <<= 1;
<    }
<    for (i = minLen + 1; i <= maxLen; i++)
<       base[i] = ((limit[i-1] + 1) << 1) - base[i];
< }
---
> ;
1943,1946c1920
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1952,1959c1926
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1979,1983c1946
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1989,1994c1952
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
2000,2002c1958
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
2012,2020c1968
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
2026,2115c1974
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
2124,2457c1983
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
2462,2518c1988
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
2534,2542c2004
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
2613,3119c2075
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
(49.3 %, 103928 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1203
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1208
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1224
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1295
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2335,2378c1314
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2335,2378c2335
< {
<    fprintf(stderr, 
<       "\n\nbzip2/libbzip2: internal error number %d.\n"
<       "This is a bug in bzip2/libbzip2, %s.\n"
<       "Please report it to me at: jseward@acm.org.  If this happened\n"
<       "when you were using some program which uses libbzip2 as a\n"
<       "component, you should also report this bug to the author(s)\n"
<       "of that program.  Please make an effort to report this bug;\n"
<       "timely and accurate bug reports eventually lead to higher\n"
<       "quality software.  Thanks.  Julian Seward, 30 December 2001.\n\n",
<       errcode,
<       BZ2_bzlibVersion()
<    );
< 
<    if (errcode == 1007) {
<    fprintf(stderr,
<       "\n*** A special note about internal error number 1007 ***\n"
<       "\n"
<       "Experience suggests that a common cause of i.e. 1007\n"
<       "is unreliable memory or other hardware.  The 1007 assertion\n"
<       "just happens to cross-check the results of huge numbers of\n"
<       "memory reads/writes, and so acts (unintendedly) as a stress\n"
<       "test of your memory system.\n"
<       "\n"
<       "I suggest the following: try compressing the file again,\n"
<       "possibly monitoring progress in detail with the -vv flag.\n"
<       "\n"
<       "* If the error cannot be reproduced, and/or happens at different\n"
<       "  points in compression, you may have a flaky memory system.\n"
<       "  Try a memory-test program.  I have used Memtest86\n"
<       "  (www.memtest86.com).  At the time of writing it is free (GPLd).\n"
<       "  Memtest86 tests memory much more thorougly than your BIOSs\n"
<       "  power-on test, and may find failures that the BIOS doesn't.\n"
<       "\n"
<       "* If the error can be repeatably reproduced, this is a bug in\n"
<       "  bzip2, and I would very much like to hear about it.  Please\n"
<       "  let me know, and, ideally, save a copy of the file causing the\n"
<       "  problem -- without which I will be unable to investigate it.\n"
<       "\n"
<    );
<    }
< 
<    exit(3);
< }
---
> ;
2384,2389c2341
< {
<    if (sizeof(int)   != 4) return 0;
<    if (sizeof(short) != 2) return 0;
<    if (sizeof(char)  != 1) return 0;
<    return 1;
< }
---
> ;
2395,2398c2347
< {
<    void* v = malloc ( items * size );
<    return v;
< }
---
> ;
2402,2404c2351
< {
<    if (addr != NULL) free ( addr );
< }
---
> ;
2410,2418c2357
< {
<    Int32 i;
<    s->nblock = 0;
<    s->numZ = 0;
<    s->state_out_pos = 0;
<    BZ_INITIALISE_CRC ( s->blockCRC );
<    for (i = 0; i < 256; i++) s->inUse[i] = False;
<    s->blockNo++;
< }
---
> ;
2424,2427c2363
< {
<    s->state_in_ch  = 256;
<    s->state_in_len = 0;
< }
---
> ;
2432,2436c2368
< {
<    if (s->state_in_ch < 256 && s->state_in_len > 0)
<       return False; else
<       return True;
< }
---
> ;
2509,2539c2441
< {
<    Int32 i;
<    UChar ch = (UChar)(s->state_in_ch);
<    for (i = 0; i < s->state_in_len; i++) {
<       BZ_UPDATE_CRC( s->blockCRC, ch );
<    }
<    s->inUse[s->state_in_ch] = True;
<    switch (s->state_in_len) {
<       case 1:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 2:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       case 3:
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          break;
<       default:
<          s->inUse[s->state_in_len-4] = True;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = (UChar)ch; s->nblock++;
<          s->block[s->nblock] = ((UChar)(s->state_in_len-4));
<          s->nblock++;
<          break;
<    }
< }
---
> ;
2545,2548c2447
< {
<    if (s->state_in_ch < 256) add_pair_to_block ( s );
<    init_RL ( s );
< }
---
> ;
2582,2621c2481
< {
<    Bool progress_in = False;
< 
<    if (s->mode == BZ_M_RUNNING) {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<       }
< 
<    } else {
< 
<       
<       while (True) {
<          
<          if (s->nblock >= s->nblockMAX) break;
<          
<          if (s->strm->avail_in == 0) break;
<          
<          if (s->avail_in_expect == 0) break;
<          progress_in = True;
<          ADD_CHAR_TO_BLOCK ( s, (UInt32)(*((UChar*)(s->strm->next_in))) ); 
<          s->strm->next_in++;
<          s->strm->avail_in--;
<          s->strm->total_in_lo32++;
<          if (s->strm->total_in_lo32 == 0) s->strm->total_in_hi32++;
<          s->avail_in_expect--;
<       }
<    }
<    return progress_in;
< }
---
> ;
2627,2648c2487
< {
<    Bool progress_out = False;
< 
<    while (True) {
< 
<       
<       if (s->strm->avail_out == 0) break;
< 
<       
<       if (s->state_out_pos >= s->numZ) break;
< 
<       progress_out = True;
<       *(s->strm->next_out) = s->zbits[s->state_out_pos];
<       s->state_out_pos++;
<       s->strm->avail_out--;
<       s->strm->next_out++;
<       s->strm->total_out_lo32++;
<       if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<    }
< 
<    return progress_out;
< }
---
> ;
2654,2695c2493
< {
<    Bool progress_in  = False;
<    Bool progress_out = False;
<    EState* s = strm->state;
<    
<    while (True) {
< 
<       if (s->state == BZ_S_OUTPUT) {
<          progress_out |= copy_output_until_stop ( s );
<          if (s->state_out_pos < s->numZ) break;
<          if (s->mode == BZ_M_FINISHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<          prepare_new_block ( s );
<          s->state = BZ_S_INPUT;
<          if (s->mode == BZ_M_FLUSHING && 
<              s->avail_in_expect == 0 &&
<              isempty_RL(s)) break;
<       }
< 
<       if (s->state == BZ_S_INPUT) {
<          progress_in |= copy_input_until_stop ( s );
<          if (s->mode != BZ_M_RUNNING && s->avail_in_expect == 0) {
<             flush_RL ( s );
<             BZ2_compressBlock ( s, (Bool)(s->mode == BZ_M_FINISHING) );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->nblock >= s->nblockMAX) {
<             BZ2_compressBlock ( s, False );
<             s->state = BZ_S_OUTPUT;
<          }
<          else
<          if (s->strm->avail_in == 0) {
<             break;
<          }
<       }
< 
<    }
< 
<    return progress_in || progress_out;
< }
---
> ;
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
(52.3 %, 97724 bytes)
1140,1143c1140
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1149,1156c1146
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1176,1180c1166
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1186,1191c1172
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1197,1199c1178
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1209,1217c1188
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1223,1312c1194
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1223,1312c1223
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1321,1654c1232
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1659,1715c1237
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
---
> ;
1731,1739c1253
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1810,2316c1324
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2624,2760c1632
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2766,2776c1638
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
===< pass_clang_binsrch :: remove-unused-function >===
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1660d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
1662,1715d1603
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
< 
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786d3633
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
3791,3793d3637
< static 
< Bool uncompressStream ( FILE *zStream, FILE *stream )
< ;
3797,3799d3640
< static 
< Bool testStream ( FILE *zStream )
< ;
3807,3809d3647
< static
< void setExit ( Int32 v )
< ;
3813,3815d3650
< static 
< void cadvise ( void )
< ;
3819,3821d3653
< static 
< void showFileNames ( void )
< ;
3825,3827d3656
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3659
< static 
< void panic ( Char* s )
< ;
3837,3839d3662
< static 
< void crcError ( void )
< ;
3843,3845d3665
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851d3668
< static 
< void ioError ( void )
< ;
3855,3857d3671
< static 
< void mySignalCatcher ( IntNative n )
< ;
3861,3863d3674
< static 
< void mySIGSEGVorSIGBUScatcher ( IntNative n )
< ;
3867,3869d3677
< static 
< void outOfMemory ( void )
< ;
3873,3875d3680
< static 
< void configError ( void )
< ;
3885,3887d3689
< static 
< void pad ( Char *s )
< ;
3891,3893d3692
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
3897,3899d3695
< static 
< Bool fileExists ( Char* name )
< ;
3904,3905d3699
< FILE* fopen_output_safely ( Char* name, const char* mode )
< ;
3910,3912d3703
< static 
< Bool notAStandardFile ( Char* name )
< ;
3917,3919c3708,3733
< static 
< Int32 countHardLinks ( Char* name )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
> 
3929,3931d3742
< static 
< void saveInputFileMetaInfo ( Char *srcName )
< ;
3934,3936d3744
< static 
< void applySavedMetaInfoToOutputFile ( Char *dstName )
< ;
3940,3942c3748,3750
< static 
< Bool containsDubiousChars ( Char* name )
< ;
---
> 
> 
> 
3953,3955d3760
< static 
< Bool hasSuffix ( Char* s, Char* suffix )
< ;
3957,3960d3761
< static 
< Bool mapSuffix ( Char* name, 
<                  Char* oldSuffix, Char* newSuffix )
< ;
3964,3966d3764
< static 
< void compress ( Char *name )
< ;
3970,3972d3767
< static 
< void uncompress ( Char *name )
< ;
3976,3978d3770
< static 
< void testf ( Char *name )
< ;
3982,3984d3773
< static 
< void license ( void )
< ;
3988,3990d3776
< static 
< void usage ( Char *fullProgName )
< ;
3994,3996c3780,3787
< static 
< void redundant ( Char* flag )
< ;
---
> 
> 
> 
> 
> 
> 
> 
> 
4011,4013d3801
< static 
< void *myMalloc ( Int32 n )
< ;
4017,4019d3804
< static 
< Cell *mkCell ( void )
< ;
4023,4025d3807
< static 
< Cell *snocString ( Cell *root, Char *name )
< ;
4029,4031c3811,3814
< static 
< void addFlagsFromEnvVar ( Cell** argList, Char* varName ) 
< ;
---
> 
> 
> 
> 
449,450c449
< extern void 
< BZ2_compressBlock ( EState*, Bool );
---
> ;
683,689c682
< static 
< __inline__
< void fallbackSimpleSort ( UInt32* fmap, 
<                           UInt32* eclass, 
<                           Int32   lo, 
<                           Int32   hi )
< ;
---
> 
722,727c715
< static
< void fallbackQSort3 ( UInt32* fmap, 
<                       UInt32* eclass,
<                       Int32   loSt, 
<                       Int32   hiSt )
< ;
---
> 
747,753c735
< static
< void fallbackSort ( UInt32* fmap, 
<                     UInt32* eclass, 
<                     UInt32* bhtab,
<                     Int32   nblock,
<                     Int32   verb )
< ;
---
> 
769,777c751
< static
< __inline__
< Bool mainGtU ( UInt32  i1, 
<                UInt32  i2,
<                UChar*  block, 
<                UInt16* quadrant,
<                UInt32  nblock,
<                Int32*  budget )
< ;
---
> 
787,796c761
< static
< void mainSimpleSort ( UInt32* ptr,
<                       UChar*  block,
<                       UInt16* quadrant,
<                       Int32   nblock,
<                       Int32   lo, 
<                       Int32   hi, 
<                       Int32   d,
<                       Int32*  budget )
< ;
---
> 
816,819c781
< static 
< __inline__
< UChar mmed3 ( UChar a, UChar b, UChar c )
< ;
---
> 
847,856c809
< static
< void mainQSort3 ( UInt32* ptr,
<                   UChar*  block,
<                   UInt16* quadrant,
<                   Int32   nblock,
<                   Int32   loSt, 
<                   Int32   hiSt, 
<                   Int32   dSt,
<                   Int32*  budget )
< ;
---
> 
877,885c830
< static
< void mainSort ( UInt32* ptr, 
<                 UChar*  block,
<                 UInt16* quadrant, 
<                 UInt32* ftab,
<                 Int32   nblock,
<                 Int32   verb,
<                 Int32*  budget )
< ;
---
> 
1658,1684d1602
< void BZ2_compressBlock ( EState* s, Bool is_last_block )
< {
<    if (s->nblock > 0) {
< 
<       BZ_FINALISE_CRC ( s->blockCRC );
<       s->combinedCRC = (s->combinedCRC << 1) | (s->combinedCRC >> 31);
<       s->combinedCRC ^= s->blockCRC;
<       if (s->blockNo > 1) s->numZ = 0;
< 
<       if (s->verbosity >= 2)
<          VPrintf4( "    block %d: crc = 0x%8x, "
<                    "combined CRC = 0x%8x, size = %d\n",
<                    s->blockNo, s->blockCRC, s->combinedCRC, s->nblock );
< 
<       BZ2_blockSort ( s );
<    }
< 
<    s->zbits = (UChar*) (&((UChar*)s->arr2)[s->nblock]);
< 
<    
<    if (s->blockNo == 1) {
<       BZ2_bsInitWrite ( s );
<       bsPutUChar ( s, BZ_HDR_B );
<       bsPutUChar ( s, BZ_HDR_Z );
<       bsPutUChar ( s, BZ_HDR_h );
<       bsPutUChar ( s, (UChar)(BZ_HDR_0 + s->blockSize100k) );
<    }
1686,1715d1603
<    if (s->nblock > 0) {
< 
<       bsPutUChar ( s, 0x31 ); bsPutUChar ( s, 0x41 );
<       bsPutUChar ( s, 0x59 ); bsPutUChar ( s, 0x26 );
<       bsPutUChar ( s, 0x53 ); bsPutUChar ( s, 0x59 );
< 
<       
<       bsPutUInt32 ( s, s->blockCRC );
< 
<       
<       bsW(s,1,0);
< 
<       bsW ( s, 24, s->origPtr );
<       generateMTFValues ( s );
<       sendMTFValues ( s );
<    }
< 
< 
<    
<    if (is_last_block) {
< 
<       bsPutUChar ( s, 0x17 ); bsPutUChar ( s, 0x72 );
<       bsPutUChar ( s, 0x45 ); bsPutUChar ( s, 0x38 );
<       bsPutUChar ( s, 0x50 ); bsPutUChar ( s, 0x90 );
<       bsPutUInt32 ( s, s->combinedCRC );
<       if (s->verbosity >= 2)
<          VPrintf1( "    final combined CRC = 0x%x\n   ", s->combinedCRC );
<       bsFinishWrite ( s );
<    }
< }
2439,2441d2326
< static
< void add_pair_to_block ( EState* s )
< ;
2445,2447c2330,2331
< static
< void flush_RL ( EState* s )
< ;
---
> 
> 
2479,2481d2362
< static
< Bool copy_input_until_stop ( EState* s )
< ;
2485,2487c2366,2367
< static
< Bool copy_output_until_stop ( EState* s )
< ;
---
> 
> 
2971,2977c2851
< static Bool myfeof ( FILE* f )
< {
<    Int32 c = fgetc ( f );
<    if (c == EOF) return True;
<    ungetc ( c, f );
<    return False;
< }
---
> 
3718,3724d3591
< static void    panic                 ( Char* )   NORETURN;
< static void    ioError               ( void )    NORETURN;
< static void    outOfMemory           ( void )    NORETURN;
< static void    configError           ( void )    NORETURN;
< static void    crcError              ( void )    NORETURN;
< static void    cleanUpAndFail        ( Int32 )   NORETURN;
< static void    compressedStreamEOF   ( void )    NORETURN;
3726,3727c3593,3601
< static void    copyFileName ( Char*, Char* );
< static void*   myMalloc     ( Int32 );
---
> 
> 
> 
> 
> 
> 
> 
> 
> 
3741,3752d3614
< static
< void uInt64_from_UInt32s ( UInt64* n, UInt32 lo32, UInt32 hi32 )
< {
<    n->b[7] = (UChar)((hi32 >> 24) & 0xFF);
<    n->b[6] = (UChar)((hi32 >> 16) & 0xFF);
<    n->b[5] = (UChar)((hi32 >> 8)  & 0xFF);
<    n->b[4] = (UChar) (hi32        & 0xFF);
<    n->b[3] = (UChar)((lo32 >> 24) & 0xFF);
<    n->b[2] = (UChar)((lo32 >> 16) & 0xFF);
<    n->b[1] = (UChar)((lo32 >> 8)  & 0xFF);
<    n->b[0] = (UChar) (lo32        & 0xFF);
< }
3755,3757d3616
< static
< double uInt64_to_double ( UInt64* n )
< ;
3760,3762d3618
< static
< Bool uInt64_isZero ( UInt64* n )
< ;
3766,3768d3621
< static 
< Int32 uInt64_qrm10 ( UInt64* n )
< ;
3772,3774d3624
< static
< void uInt64_toAscii ( char* outbuf, UInt64* n )
< ;
3784,3786c3634,3639
< static 
< void compressStream ( FILE *stream, FILE *zStream )
< ;
---
> 
> 
> 
> 
> 
> 
3825,3827d3677
< static 
< void cleanUpAndFail ( Int32 ec )
< ;
3831,3833d3680
< static 
< void panic ( Char* s )
< ;
3837,3839d3683
< static 
< void crcError ( void )
< ;
3843,3845d3686
< static 
< void compressedStreamEOF ( void )
< ;
3849,3851c3690,3694
< static 
< void ioError ( void )
< ;
---
> 
> 
> 
> 
> 
3867,3869d3709
< static 
< void outOfMemory ( void )
< ;
3873,3875c3713,3714
< static 
< void configError ( void )
< ;
---
> 
> 
3891,3893c3730
< static 
< void copyFileName ( Char* to, Char* from ) 
< ;
---
> 
4011,4013c3848
< static 
< void *myMalloc ( Int32 n )
< ;
---
> 
(55.3 %, 91545 bytes)
===< pass_clang_binsrch :: replace-function-def-with-decl >===
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1168
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1239
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1539
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1545
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1551
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2108
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
1085,1088c1085
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
---
> ;
1094,1101c1091
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> ;
1121,1125c1111
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> ;
1131,1136c1117
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> ;
1142,1144c1123
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> ;
1154,1162c1133
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> ;
1168,1257c1139
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
---
> ;
1266,1599c1148
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1266,1599c1266
< {
<    Int32 v, t, i, j, gs, ge, totc, bt, bc, iter;
<    Int32 nSelectors, alphaSize, minLen, maxLen, selCtr;
<    Int32 nGroups, nBytes;
< 
<    
< 
< 
<    UInt16 cost[BZ_N_GROUPS];
<    Int32  fave[BZ_N_GROUPS];
< 
<    UInt16* mtfv = s->mtfv;
< 
<    if (s->verbosity >= 3)
<       VPrintf3( "      %d in block, %d after MTF & 1-2 coding, "
<                 "%d+2 syms in use\n", 
<                 s->nblock, s->nMTF, s->nInUse );
< 
<    alphaSize = s->nInUse+2;
<    for (t = 0; t < BZ_N_GROUPS; t++)
<       for (v = 0; v < alphaSize; v++)
<          s->len[t][v] = BZ_GREATER_ICOST;
< 
<    
<    AssertH ( s->nMTF > 0, 3001 );
<    if (s->nMTF < 200)  nGroups = 2; else
<    if (s->nMTF < 600)  nGroups = 3; else
<    if (s->nMTF < 1200) nGroups = 4; else
<    if (s->nMTF < 2400) nGroups = 5; else
<                        nGroups = 6;
< 
<    
<    { 
<       Int32 nPart, remF, tFreq, aFreq;
< 
<       nPart = nGroups;
<       remF  = s->nMTF;
<       gs = 0;
<       while (nPart > 0) {
<          tFreq = remF / nPart;
<          ge = gs-1;
<          aFreq = 0;
<          while (aFreq < tFreq && ge < alphaSize-1) {
<             ge++;
<             aFreq += s->mtfFreq[ge];
<          }
< 
<          if (ge > gs 
<              && nPart != nGroups && nPart != 1 
<              && ((nGroups-nPart) % 2 == 1)) {
<             aFreq -= s->mtfFreq[ge];
<             ge--;
<          }
< 
<          if (s->verbosity >= 3)
<             VPrintf5( "      initial group %d, [%d .. %d], "
<                       "has %d syms (%4.1f%%)\n",
<                       nPart, gs, ge, aFreq, 
<                       (100.0 * (float)aFreq) / (float)(s->nMTF) );
<  
<          for (v = 0; v < alphaSize; v++)
<             if (v >= gs && v <= ge) 
<                s->len[nPart-1][v] = BZ_LESSER_ICOST; else
<                s->len[nPart-1][v] = BZ_GREATER_ICOST;
<  
<          nPart--;
<          gs = ge+1;
<          remF -= aFreq;
<       }
<    }
< 
<    
<    for (iter = 0; iter < BZ_N_ITERS; iter++) {
< 
<       for (t = 0; t < nGroups; t++) fave[t] = 0;
< 
<       for (t = 0; t < nGroups; t++)
<          for (v = 0; v < alphaSize; v++)
<             s->rfreq[t][v] = 0;
< 
<       
<       if (nGroups == 6) {
<          for (v = 0; v < alphaSize; v++) {
<             s->len_pack[v][0] = (s->len[1][v] << 16) | s->len[0][v];
<             s->len_pack[v][1] = (s->len[3][v] << 16) | s->len[2][v];
<             s->len_pack[v][2] = (s->len[5][v] << 16) | s->len[4][v];
< 	 }
<       }
< 
<       nSelectors = 0;
<       totc = 0;
<       gs = 0;
<       while (True) {
< 
<          
<          if (gs >= s->nMTF) break;
<          ge = gs + BZ_G_SIZE - 1; 
<          if (ge >= s->nMTF) ge = s->nMTF-1;
< 
<          
<          for (t = 0; t < nGroups; t++) cost[t] = 0;
< 
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             register UInt32 cost01, cost23, cost45;
<             register UInt16 icv;
<             cost01 = cost23 = cost45 = 0;
< 
< #           define BZ_ITER(nn)                \
<                icv = mtfv[gs+(nn)];           \
<                cost01 += s->len_pack[icv][0]; \
<                cost23 += s->len_pack[icv][1]; \
<                cost45 += s->len_pack[icv][2]; \
< 
<             BZ_ITER(0);  BZ_ITER(1);  BZ_ITER(2);  BZ_ITER(3);  BZ_ITER(4);
<             BZ_ITER(5);  BZ_ITER(6);  BZ_ITER(7);  BZ_ITER(8);  BZ_ITER(9);
<             BZ_ITER(10); BZ_ITER(11); BZ_ITER(12); BZ_ITER(13); BZ_ITER(14);
<             BZ_ITER(15); BZ_ITER(16); BZ_ITER(17); BZ_ITER(18); BZ_ITER(19);
<             BZ_ITER(20); BZ_ITER(21); BZ_ITER(22); BZ_ITER(23); BZ_ITER(24);
<             BZ_ITER(25); BZ_ITER(26); BZ_ITER(27); BZ_ITER(28); BZ_ITER(29);
<             BZ_ITER(30); BZ_ITER(31); BZ_ITER(32); BZ_ITER(33); BZ_ITER(34);
<             BZ_ITER(35); BZ_ITER(36); BZ_ITER(37); BZ_ITER(38); BZ_ITER(39);
<             BZ_ITER(40); BZ_ITER(41); BZ_ITER(42); BZ_ITER(43); BZ_ITER(44);
<             BZ_ITER(45); BZ_ITER(46); BZ_ITER(47); BZ_ITER(48); BZ_ITER(49);
< 
< #           undef BZ_ITER
< 
<             cost[0] = cost01 & 0xffff; cost[1] = cost01 >> 16;
<             cost[2] = cost23 & 0xffff; cost[3] = cost23 >> 16;
<             cost[4] = cost45 & 0xffff; cost[5] = cost45 >> 16;
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++) { 
<                UInt16 icv = mtfv[i];
<                for (t = 0; t < nGroups; t++) cost[t] += s->len[t][icv];
<             }
<          }
<  
<          
<          bc = 999999999; bt = -1;
<          for (t = 0; t < nGroups; t++)
<             if (cost[t] < bc) { bc = cost[t]; bt = t; };
<          totc += bc;
<          fave[bt]++;
<          s->selector[nSelectors] = bt;
<          nSelectors++;
< 
<          
<          if (nGroups == 6 && 50 == ge-gs+1) {
<             
< 
< #           define BZ_ITUR(nn) s->rfreq[bt][ mtfv[gs+(nn)] ]++
< 
<             BZ_ITUR(0);  BZ_ITUR(1);  BZ_ITUR(2);  BZ_ITUR(3);  BZ_ITUR(4);
<             BZ_ITUR(5);  BZ_ITUR(6);  BZ_ITUR(7);  BZ_ITUR(8);  BZ_ITUR(9);
<             BZ_ITUR(10); BZ_ITUR(11); BZ_ITUR(12); BZ_ITUR(13); BZ_ITUR(14);
<             BZ_ITUR(15); BZ_ITUR(16); BZ_ITUR(17); BZ_ITUR(18); BZ_ITUR(19);
<             BZ_ITUR(20); BZ_ITUR(21); BZ_ITUR(22); BZ_ITUR(23); BZ_ITUR(24);
<             BZ_ITUR(25); BZ_ITUR(26); BZ_ITUR(27); BZ_ITUR(28); BZ_ITUR(29);
<             BZ_ITUR(30); BZ_ITUR(31); BZ_ITUR(32); BZ_ITUR(33); BZ_ITUR(34);
<             BZ_ITUR(35); BZ_ITUR(36); BZ_ITUR(37); BZ_ITUR(38); BZ_ITUR(39);
<             BZ_ITUR(40); BZ_ITUR(41); BZ_ITUR(42); BZ_ITUR(43); BZ_ITUR(44);
<             BZ_ITUR(45); BZ_ITUR(46); BZ_ITUR(47); BZ_ITUR(48); BZ_ITUR(49);
< 
< #           undef BZ_ITUR
< 
<          } else {
< 	    
<             for (i = gs; i <= ge; i++)
<                s->rfreq[bt][ mtfv[i] ]++;
<          }
< 
<          gs = ge+1;
<       }
<       if (s->verbosity >= 3) {
<          VPrintf2 ( "      pass %d: size is %d, grp uses are ", 
<                    iter+1, totc/8 );
<          for (t = 0; t < nGroups; t++)
<             VPrintf1 ( "%d ", fave[t] );
<          VPrintf0 ( "\n" );
<       }
< 
<       
<       for (t = 0; t < nGroups; t++)
<          BZ2_hbMakeCodeLengths ( &(s->len[t][0]), &(s->rfreq[t][0]), 
<                                  alphaSize, 20 );
<    }
< 
< 
<    AssertH( nGroups < 8, 3002 );
<    AssertH( nSelectors < 32768 &&
<             nSelectors <= (2 + (900000 / BZ_G_SIZE)),
<             3003 );
< 
< 
<    
<    {
<       UChar pos[BZ_N_GROUPS], ll_i, tmp2, tmp;
<       for (i = 0; i < nGroups; i++) pos[i] = i;
<       for (i = 0; i < nSelectors; i++) {
<          ll_i = s->selector[i];
<          j = 0;
<          tmp = pos[j];
<          while ( ll_i != tmp ) {
<             j++;
<             tmp2 = tmp;
<             tmp = pos[j];
<             pos[j] = tmp2;
<          };
<          pos[0] = tmp;
<          s->selectorMtf[i] = j;
<       }
<    };
< 
<    
<    for (t = 0; t < nGroups; t++) {
<       minLen = 32;
<       maxLen = 0;
<       for (i = 0; i < alphaSize; i++) {
<          if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<          if (s->len[t][i] < minLen) minLen = s->len[t][i];
<       }
<       AssertH ( !(maxLen > 20), 3004 );
<       AssertH ( !(minLen < 1),  3005 );
<       BZ2_hbAssignCodes ( &(s->code[t][0]), &(s->len[t][0]), 
<                           minLen, maxLen, alphaSize );
<    }
< 
<    
<    { 
<       Bool inUse16[16];
<       for (i = 0; i < 16; i++) {
<           inUse16[i] = False;
<           for (j = 0; j < 16; j++)
<              if (s->inUse[i * 16 + j]) inUse16[i] = True;
<       }
<      
<       nBytes = s->numZ;
<       for (i = 0; i < 16; i++)
<          if (inUse16[i]) bsW(s,1,1); else bsW(s,1,0);
< 
<       for (i = 0; i < 16; i++)
<          if (inUse16[i])
<             for (j = 0; j < 16; j++) {
<                if (s->inUse[i * 16 + j]) bsW(s,1,1); else bsW(s,1,0);
<             }
< 
<       if (s->verbosity >= 3) 
<          VPrintf1( "      bytes: mapping %d, ", s->numZ-nBytes );
<    }
< 
<    
<    nBytes = s->numZ;
<    bsW ( s, 3, nGroups );
<    bsW ( s, 15, nSelectors );
<    for (i = 0; i < nSelectors; i++) { 
<       for (j = 0; j < s->selectorMtf[i]; j++) bsW(s,1,1);
<       bsW(s,1,0);
<    }
<    if (s->verbosity >= 3)
<       VPrintf1( "selectors %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
< 
<    for (t = 0; t < nGroups; t++) {
<       Int32 curr = s->len[t][0];
<       bsW ( s, 5, curr );
<       for (i = 0; i < alphaSize; i++) {
<          while (curr < s->len[t][i]) { bsW(s,2,2); curr++;  };
<          while (curr > s->len[t][i]) { bsW(s,2,3); curr--;  };
<          bsW ( s, 1, 0 );
<       }
<    }
< 
<    if (s->verbosity >= 3)
<       VPrintf1 ( "code lengths %d, ", s->numZ-nBytes );
< 
<    
<    nBytes = s->numZ;
<    selCtr = 0;
<    gs = 0;
<    while (True) {
<       if (gs >= s->nMTF) break;
<       ge = gs + BZ_G_SIZE - 1; 
<       if (ge >= s->nMTF) ge = s->nMTF-1;
<       AssertH ( s->selector[selCtr] < nGroups, 3006 );
< 
<       if (nGroups == 6 && 50 == ge-gs+1) {
<             
<             UInt16 mtfv_i;
<             UChar* s_len_sel_selCtr 
<                = &(s->len[s->selector[selCtr]][0]);
<             Int32* s_code_sel_selCtr
<                = &(s->code[s->selector[selCtr]][0]);
< 
< #           define BZ_ITAH(nn)                      \
<                mtfv_i = mtfv[gs+(nn)];              \
<                bsW ( s,                             \
<                      s_len_sel_selCtr[mtfv_i],      \
<                      s_code_sel_selCtr[mtfv_i] )
< 
<             BZ_ITAH(0);  BZ_ITAH(1);  BZ_ITAH(2);  BZ_ITAH(3);  BZ_ITAH(4);
<             BZ_ITAH(5);  BZ_ITAH(6);  BZ_ITAH(7);  BZ_ITAH(8);  BZ_ITAH(9);
<             BZ_ITAH(10); BZ_ITAH(11); BZ_ITAH(12); BZ_ITAH(13); BZ_ITAH(14);
<             BZ_ITAH(15); BZ_ITAH(16); BZ_ITAH(17); BZ_ITAH(18); BZ_ITAH(19);
<             BZ_ITAH(20); BZ_ITAH(21); BZ_ITAH(22); BZ_ITAH(23); BZ_ITAH(24);
<             BZ_ITAH(25); BZ_ITAH(26); BZ_ITAH(27); BZ_ITAH(28); BZ_ITAH(29);
<             BZ_ITAH(30); BZ_ITAH(31); BZ_ITAH(32); BZ_ITAH(33); BZ_ITAH(34);
<             BZ_ITAH(35); BZ_ITAH(36); BZ_ITAH(37); BZ_ITAH(38); BZ_ITAH(39);
<             BZ_ITAH(40); BZ_ITAH(41); BZ_ITAH(42); BZ_ITAH(43); BZ_ITAH(44);
<             BZ_ITAH(45); BZ_ITAH(46); BZ_ITAH(47); BZ_ITAH(48); BZ_ITAH(49);
< 
< #           undef BZ_ITAH
< 
<       } else {
< 	 
<          for (i = gs; i <= ge; i++) {
<             bsW ( s, 
<                   s->len  [s->selector[selCtr]] [mtfv[i]],
<                   s->code [s->selector[selCtr]] [mtfv[i]] );
<          }
<       }
< 
< 
<       gs = ge+1;
<       selCtr++;
<    }
<    AssertH( selCtr == nSelectors, 3007 );
< 
<    if (s->verbosity >= 3)
<       VPrintf1( "codes %d\n", s->numZ-nBytes );
< }
---
> ;
1619,1627c1286
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->seqToUnseq[s->nInUse] = i;
<          s->nInUse++;
<       }
< }
---
> ;
1698,2204c1357
< {
<    UChar      uc;
<    Int32      retVal;
<    Int32      minLen, maxLen;
<    bz_stream* strm = s->strm;
< 
<    
<    Int32  i;
<    Int32  j;
<    Int32  t;
<    Int32  alphaSize;
<    Int32  nGroups;
<    Int32  nSelectors;
<    Int32  EOB;
<    Int32  groupNo;
<    Int32  groupPos;
<    Int32  nextSym;
<    Int32  nblockMAX;
<    Int32  nblock;
<    Int32  es;
<    Int32  N;
<    Int32  curr;
<    Int32  zt;
<    Int32  zn; 
<    Int32  zvec;
<    Int32  zj;
<    Int32  gSel;
<    Int32  gMinlen;
<    Int32* gLimit;
<    Int32* gBase;
<    Int32* gPerm;
< 
<    if (s->state == BZ_X_MAGIC_1) {
<       
<       s->save_i           = 0;
<       s->save_j           = 0;
<       s->save_t           = 0;
<       s->save_alphaSize   = 0;
<       s->save_nGroups     = 0;
<       s->save_nSelectors  = 0;
<       s->save_EOB         = 0;
<       s->save_groupNo     = 0;
<       s->save_groupPos    = 0;
<       s->save_nextSym     = 0;
<       s->save_nblockMAX   = 0;
<       s->save_nblock      = 0;
<       s->save_es          = 0;
<       s->save_N           = 0;
<       s->save_curr        = 0;
<       s->save_zt          = 0;
<       s->save_zn          = 0;
<       s->save_zvec        = 0;
<       s->save_zj          = 0;
<       s->save_gSel        = 0;
<       s->save_gMinlen     = 0;
<       s->save_gLimit      = NULL;
<       s->save_gBase       = NULL;
<       s->save_gPerm       = NULL;
<    }
< 
<    
<    i           = s->save_i;
<    j           = s->save_j;
<    t           = s->save_t;
<    alphaSize   = s->save_alphaSize;
<    nGroups     = s->save_nGroups;
<    nSelectors  = s->save_nSelectors;
<    EOB         = s->save_EOB;
<    groupNo     = s->save_groupNo;
<    groupPos    = s->save_groupPos;
<    nextSym     = s->save_nextSym;
<    nblockMAX   = s->save_nblockMAX;
<    nblock      = s->save_nblock;
<    es          = s->save_es;
<    N           = s->save_N;
<    curr        = s->save_curr;
<    zt          = s->save_zt;
<    zn          = s->save_zn; 
<    zvec        = s->save_zvec;
<    zj          = s->save_zj;
<    gSel        = s->save_gSel;
<    gMinlen     = s->save_gMinlen;
<    gLimit      = s->save_gLimit;
<    gBase       = s->save_gBase;
<    gPerm       = s->save_gPerm;
< 
<    retVal = BZ_OK;
< 
<    switch (s->state) {
< 
<       GET_UCHAR(BZ_X_MAGIC_1, uc);
<       if (uc != BZ_HDR_B) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_2, uc);
<       if (uc != BZ_HDR_Z) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_UCHAR(BZ_X_MAGIC_3, uc)
<       if (uc != BZ_HDR_h) RETURN(BZ_DATA_ERROR_MAGIC);
< 
<       GET_BITS(BZ_X_MAGIC_4, s->blockSize100k, 8)
<       if (s->blockSize100k < (BZ_HDR_0 + 1) || 
<           s->blockSize100k > (BZ_HDR_0 + 9)) RETURN(BZ_DATA_ERROR_MAGIC);
<       s->blockSize100k -= BZ_HDR_0;
< 
<       if (s->smallDecompress) {
<          s->ll16 = BZALLOC( s->blockSize100k * 100000 * sizeof(UInt16) );
<          s->ll4  = BZALLOC( 
<                       ((1 + s->blockSize100k * 100000) >> 1) * sizeof(UChar) 
<                    );
<          if (s->ll16 == NULL || s->ll4 == NULL) RETURN(BZ_MEM_ERROR);
<       } else {
<          s->tt  = BZALLOC( s->blockSize100k * 100000 * sizeof(Int32) );
<          if (s->tt == NULL) RETURN(BZ_MEM_ERROR);
<       }
< 
<       GET_UCHAR(BZ_X_BLKHDR_1, uc);
< 
<       if (uc == 0x17) goto endhdr_2;
<       if (uc != 0x31) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_2, uc);
<       if (uc != 0x41) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_3, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_4, uc);
<       if (uc != 0x26) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_5, uc);
<       if (uc != 0x53) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_BLKHDR_6, uc);
<       if (uc != 0x59) RETURN(BZ_DATA_ERROR);
< 
<       s->currBlockNo++;
<       if (s->verbosity >= 2)
<          VPrintf1 ( "\n    [%d: huff+mtf ", s->currBlockNo );
<  
<       s->storedBlockCRC = 0;
<       GET_UCHAR(BZ_X_BCRC_1, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_2, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_3, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_BCRC_4, uc);
<       s->storedBlockCRC = (s->storedBlockCRC << 8) | ((UInt32)uc);
< 
<       GET_BITS(BZ_X_RANDBIT, s->blockRandomised, 1);
< 
<       s->origPtr = 0;
<       GET_UCHAR(BZ_X_ORIGPTR_1, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_2, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
<       GET_UCHAR(BZ_X_ORIGPTR_3, uc);
<       s->origPtr = (s->origPtr << 8) | ((Int32)uc);
< 
<       if (s->origPtr < 0)
<          RETURN(BZ_DATA_ERROR);
<       if (s->origPtr > 10 + 100000*s->blockSize100k) 
<          RETURN(BZ_DATA_ERROR);
< 
<       
<       for (i = 0; i < 16; i++) {
<          GET_BIT(BZ_X_MAPPING_1, uc);
<          if (uc == 1) 
<             s->inUse16[i] = True; else 
<             s->inUse16[i] = False;
<       }
< 
<       for (i = 0; i < 256; i++) s->inUse[i] = False;
< 
<       for (i = 0; i < 16; i++)
<          if (s->inUse16[i])
<             for (j = 0; j < 16; j++) {
<                GET_BIT(BZ_X_MAPPING_2, uc);
<                if (uc == 1) s->inUse[i * 16 + j] = True;
<             }
<       makeMaps_d ( s );
<       if (s->nInUse == 0) RETURN(BZ_DATA_ERROR);
<       alphaSize = s->nInUse+2;
< 
<       
<       GET_BITS(BZ_X_SELECTOR_1, nGroups, 3);
<       if (nGroups < 2 || nGroups > 6) RETURN(BZ_DATA_ERROR);
<       GET_BITS(BZ_X_SELECTOR_2, nSelectors, 15);
<       if (nSelectors < 1) RETURN(BZ_DATA_ERROR);
<       for (i = 0; i < nSelectors; i++) {
<          j = 0;
<          while (True) {
<             GET_BIT(BZ_X_SELECTOR_3, uc);
<             if (uc == 0) break;
<             j++;
<             if (j >= nGroups) RETURN(BZ_DATA_ERROR);
<          }
<          s->selectorMtf[i] = j;
<       }
< 
<       
<       {
<          UChar pos[BZ_N_GROUPS], tmp, v;
<          for (v = 0; v < nGroups; v++) pos[v] = v;
<    
<          for (i = 0; i < nSelectors; i++) {
<             v = s->selectorMtf[i];
<             tmp = pos[v];
<             while (v > 0) { pos[v] = pos[v-1]; v--; }
<             pos[0] = tmp;
<             s->selector[i] = tmp;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          GET_BITS(BZ_X_CODING_1, curr, 5);
<          for (i = 0; i < alphaSize; i++) {
<             while (True) {
<                if (curr < 1 || curr > 20) RETURN(BZ_DATA_ERROR);
<                GET_BIT(BZ_X_CODING_2, uc);
<                if (uc == 0) break;
<                GET_BIT(BZ_X_CODING_3, uc);
<                if (uc == 0) curr++; else curr--;
<             }
<             s->len[t][i] = curr;
<          }
<       }
< 
<       
<       for (t = 0; t < nGroups; t++) {
<          minLen = 32;
<          maxLen = 0;
<          for (i = 0; i < alphaSize; i++) {
<             if (s->len[t][i] > maxLen) maxLen = s->len[t][i];
<             if (s->len[t][i] < minLen) minLen = s->len[t][i];
<          }
<          BZ2_hbCreateDecodeTables ( 
<             &(s->limit[t][0]), 
<             &(s->base[t][0]), 
<             &(s->perm[t][0]), 
<             &(s->len[t][0]),
<             minLen, maxLen, alphaSize
<          );
<          s->minLens[t] = minLen;
<       }
< 
<       
< 
<       EOB      = s->nInUse+1;
<       nblockMAX = 100000 * s->blockSize100k;
<       groupNo  = -1;
<       groupPos = 0;
< 
<       for (i = 0; i <= 255; i++) s->unzftab[i] = 0;
< 
<       
<       {
<          Int32 ii, jj, kk;
<          kk = MTFA_SIZE-1;
<          for (ii = 256 / MTFL_SIZE - 1; ii >= 0; ii--) {
<             for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                s->mtfa[kk] = (UChar)(ii * MTFL_SIZE + jj);
<                kk--;
<             }
<             s->mtfbase[ii] = kk + 1;
<          }
<       }
<       
< 
<       nblock = 0;
<       GET_MTF_VAL(BZ_X_MTF_1, BZ_X_MTF_2, nextSym);
< 
<       while (True) {
< 
<          if (nextSym == EOB) break;
< 
<          if (nextSym == BZ_RUNA || nextSym == BZ_RUNB) {
< 
<             es = -1;
<             N = 1;
<             do {
<                if (nextSym == BZ_RUNA) es = es + (0+1) * N; else
<                if (nextSym == BZ_RUNB) es = es + (1+1) * N;
<                N = N * 2;
<                GET_MTF_VAL(BZ_X_MTF_3, BZ_X_MTF_4, nextSym);
<             }
<                while (nextSym == BZ_RUNA || nextSym == BZ_RUNB);
< 
<             es++;
<             uc = s->seqToUnseq[ s->mtfa[s->mtfbase[0]] ];
<             s->unzftab[uc] += es;
< 
<             if (s->smallDecompress)
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->ll16[nblock] = (UInt16)uc;
<                   nblock++;
<                   es--;
<                }
<             else
<                while (es > 0) {
<                   if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
<                   s->tt[nblock] = (UInt32)uc;
<                   nblock++;
<                   es--;
<                };
< 
<             continue;
< 
<          } else {
< 
<             if (nblock >= nblockMAX) RETURN(BZ_DATA_ERROR);
< 
<             
<             {
<                Int32 ii, jj, kk, pp, lno, off;
<                UInt32 nn;
<                nn = (UInt32)(nextSym - 1);
< 
<                if (nn < MTFL_SIZE) {
<                   
<                   pp = s->mtfbase[0];
<                   uc = s->mtfa[pp+nn];
<                   while (nn > 3) {
<                      Int32 z = pp+nn;
<                      s->mtfa[(z)  ] = s->mtfa[(z)-1];
<                      s->mtfa[(z)-1] = s->mtfa[(z)-2];
<                      s->mtfa[(z)-2] = s->mtfa[(z)-3];
<                      s->mtfa[(z)-3] = s->mtfa[(z)-4];
<                      nn -= 4;
<                   }
<                   while (nn > 0) { 
<                      s->mtfa[(pp+nn)] = s->mtfa[(pp+nn)-1]; nn--; 
<                   };
<                   s->mtfa[pp] = uc;
<                } else { 
<                   
<                   lno = nn / MTFL_SIZE;
<                   off = nn % MTFL_SIZE;
<                   pp = s->mtfbase[lno] + off;
<                   uc = s->mtfa[pp];
<                   while (pp > s->mtfbase[lno]) { 
<                      s->mtfa[pp] = s->mtfa[pp-1]; pp--; 
<                   };
<                   s->mtfbase[lno]++;
<                   while (lno > 0) {
<                      s->mtfbase[lno]--;
<                      s->mtfa[s->mtfbase[lno]] 
<                         = s->mtfa[s->mtfbase[lno-1] + MTFL_SIZE - 1];
<                      lno--;
<                   }
<                   s->mtfbase[0]--;
<                   s->mtfa[s->mtfbase[0]] = uc;
<                   if (s->mtfbase[0] == 0) {
<                      kk = MTFA_SIZE-1;
<                      for (ii = 256 / MTFL_SIZE-1; ii >= 0; ii--) {
<                         for (jj = MTFL_SIZE-1; jj >= 0; jj--) {
<                            s->mtfa[kk] = s->mtfa[s->mtfbase[ii] + jj];
<                            kk--;
<                         }
<                         s->mtfbase[ii] = kk + 1;
<                      }
<                   }
<                }
<             }
<             
< 
<             s->unzftab[s->seqToUnseq[uc]]++;
<             if (s->smallDecompress)
<                s->ll16[nblock] = (UInt16)(s->seqToUnseq[uc]); else
<                s->tt[nblock]   = (UInt32)(s->seqToUnseq[uc]);
<             nblock++;
< 
<             GET_MTF_VAL(BZ_X_MTF_5, BZ_X_MTF_6, nextSym);
<             continue;
<          }
<       }
< 
<       
<       if (s->origPtr < 0 || s->origPtr >= nblock)
<          RETURN(BZ_DATA_ERROR);
< 
<       s->state_out_len = 0;
<       s->state_out_ch  = 0;
<       BZ_INITIALISE_CRC ( s->calculatedBlockCRC );
<       s->state = BZ_X_OUTPUT;
<       if (s->verbosity >= 2) VPrintf0 ( "rt+rld" );
< 
<       
<       s->cftab[0] = 0;
<       for (i = 1; i <= 256; i++) s->cftab[i] = s->unzftab[i-1];
<       for (i = 1; i <= 256; i++) s->cftab[i] += s->cftab[i-1];
< 
<       if (s->smallDecompress) {
< 
<          
<          for (i = 0; i <= 256; i++) s->cftabCopy[i] = s->cftab[i];
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->ll16[i]);
<             SET_LL(i, s->cftabCopy[uc]);
<             s->cftabCopy[uc]++;
<          }
< 
<          
<          i = s->origPtr;
<          j = GET_LL(i);
<          do {
<             Int32 tmp = GET_LL(j);
<             SET_LL(j, i);
<             i = j;
<             j = tmp;
<          }
<             while (i != s->origPtr);
< 
<          s->tPos = s->origPtr;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_SMALL(s->k0); s->nblock_used++;
<          }
< 
<       } else {
< 
<          
<          for (i = 0; i < nblock; i++) {
<             uc = (UChar)(s->tt[i] & 0xff);
<             s->tt[s->cftab[uc]] |= (i << 8);
<             s->cftab[uc]++;
<          }
< 
<          s->tPos = s->tt[s->origPtr] >> 8;
<          s->nblock_used = 0;
<          if (s->blockRandomised) {
<             BZ_RAND_INIT_MASK;
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<             BZ_RAND_UPD_MASK; s->k0 ^= BZ_RAND_MASK; 
<          } else {
<             BZ_GET_FAST(s->k0); s->nblock_used++;
<          }
< 
<       }
< 
<       RETURN(BZ_OK);
< 
< 
< 
<     endhdr_2:
< 
<       GET_UCHAR(BZ_X_ENDHDR_2, uc);
<       if (uc != 0x72) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_3, uc);
<       if (uc != 0x45) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_4, uc);
<       if (uc != 0x38) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_5, uc);
<       if (uc != 0x50) RETURN(BZ_DATA_ERROR);
<       GET_UCHAR(BZ_X_ENDHDR_6, uc);
<       if (uc != 0x90) RETURN(BZ_DATA_ERROR);
< 
<       s->storedCombinedCRC = 0;
<       GET_UCHAR(BZ_X_CCRC_1, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_2, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_3, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
<       GET_UCHAR(BZ_X_CCRC_4, uc);
<       s->storedCombinedCRC = (s->storedCombinedCRC << 8) | ((UInt32)uc);
< 
<       s->state = BZ_X_IDLE;
<       RETURN(BZ_STREAM_END);
< 
<       default: AssertH ( False, 4001 );
<    }
< 
<    AssertH ( False, 4002 );
< 
<    save_state_and_return:
< 
<    s->save_i           = i;
<    s->save_j           = j;
<    s->save_t           = t;
<    s->save_alphaSize   = alphaSize;
<    s->save_nGroups     = nGroups;
<    s->save_nSelectors  = nSelectors;
<    s->save_EOB         = EOB;
<    s->save_groupNo     = groupNo;
<    s->save_groupPos    = groupPos;
<    s->save_nextSym     = nextSym;
<    s->save_nblockMAX   = nblockMAX;
<    s->save_nblock      = nblock;
<    s->save_es          = es;
<    s->save_N           = N;
<    s->save_curr        = curr;
<    s->save_zt          = zt;
<    s->save_zn          = zn;
<    s->save_zvec        = zvec;
<    s->save_zj          = zj;
<    s->save_gSel        = gSel;
<    s->save_gMinlen     = gMinlen;
<    s->save_gLimit      = gLimit;
<    s->save_gBase       = gBase;
<    s->save_gPerm       = gPerm;
< 
<    return retVal;   
< }
---
> ;
2504,2640c1657
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_FAST(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       
<       UInt32        c_calculatedBlockCRC = s->calculatedBlockCRC;
<       UChar         c_state_out_ch       = s->state_out_ch;
<       Int32         c_state_out_len      = s->state_out_len;
<       Int32         c_nblock_used        = s->nblock_used;
<       Int32         c_k0                 = s->k0;
<       UInt32*       c_tt                 = s->tt;
<       UInt32        c_tPos               = s->tPos;
<       char*         cs_next_out          = s->strm->next_out;
<       unsigned int  cs_avail_out         = s->strm->avail_out;
<       
< 
<       UInt32       avail_out_INIT = cs_avail_out;
<       Int32        s_save_nblockPP = s->save_nblock+1;
<       unsigned int total_out_lo32_old;
< 
<       while (True) {
< 
<          
<          if (c_state_out_len > 0) {
<             while (True) {
<                if (cs_avail_out == 0) goto return_notr;
<                if (c_state_out_len == 1) break;
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                c_state_out_len--;
<                cs_next_out++;
<                cs_avail_out--;
<             }
<             s_state_out_len_eq_one:
<             {
<                if (cs_avail_out == 0) { 
<                   c_state_out_len = 1; goto return_notr;
<                };
<                *( (UChar*)(cs_next_out) ) = c_state_out_ch;
<                BZ_UPDATE_CRC ( c_calculatedBlockCRC, c_state_out_ch );
<                cs_next_out++;
<                cs_avail_out--;
<             }
<          }   
<          
<          if (c_nblock_used == s_save_nblockPP) {
<             c_state_out_len = 0; goto return_notr;
<          };   
<          c_state_out_ch = c_k0;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (k1 != c_k0) { 
<             c_k0 = k1; goto s_state_out_len_eq_one; 
<          };
<          if (c_nblock_used == s_save_nblockPP) 
<             goto s_state_out_len_eq_one;
<    
<          c_state_out_len = 2;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          c_state_out_len = 3;
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          if (c_nblock_used == s_save_nblockPP) continue;
<          if (k1 != c_k0) { c_k0 = k1; continue; };
<    
<          BZ_GET_FAST_C(k1); c_nblock_used++;
<          c_state_out_len = ((Int32)k1) + 4;
<          BZ_GET_FAST_C(c_k0); c_nblock_used++;
<       }
< 
<       return_notr:
<       total_out_lo32_old = s->strm->total_out_lo32;
<       s->strm->total_out_lo32 += (avail_out_INIT - cs_avail_out);
<       if (s->strm->total_out_lo32 < total_out_lo32_old)
<          s->strm->total_out_hi32++;
< 
<       
<       s->calculatedBlockCRC = c_calculatedBlockCRC;
<       s->state_out_ch       = c_state_out_ch;
<       s->state_out_len      = c_state_out_len;
<       s->nblock_used        = c_nblock_used;
<       s->k0                 = c_k0;
<       s->tt                 = c_tt;
<       s->tPos               = c_tPos;
<       s->strm->next_out     = cs_next_out;
<       s->strm->avail_out    = cs_avail_out;
<       
<    }
< }
---
> ;
2646,2656c1663
< {
<    Int32 nb, na, mid;
<    nb = 0;
<    na = 256;
<    do {
<       mid = (nb + na) >> 1;
<       if (indx >= cftab[mid]) nb = mid; else na = mid;
<    }
<    while (na - nb != 1);
<    return nb;
< }
---
> ;
2662,2752c1669
< {
<    UChar k1;
< 
<    if (s->blockRandomised) {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<                
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); BZ_RAND_UPD_MASK; 
<          k1 ^= BZ_RAND_MASK; s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); BZ_RAND_UPD_MASK; 
<          s->k0 ^= BZ_RAND_MASK; s->nblock_used++;
<       }
< 
<    } else {
< 
<       while (True) {
<          
<          while (True) {
<             if (s->strm->avail_out == 0) return;
<             if (s->state_out_len == 0) break;
<             *( (UChar*)(s->strm->next_out) ) = s->state_out_ch;
<             BZ_UPDATE_CRC ( s->calculatedBlockCRC, s->state_out_ch );
<             s->state_out_len--;
<             s->strm->next_out++;
<             s->strm->avail_out--;
<             s->strm->total_out_lo32++;
<             if (s->strm->total_out_lo32 == 0) s->strm->total_out_hi32++;
<          }
<    
<          
<          if (s->nblock_used == s->save_nblock+1) return;
<    
<          s->state_out_len = 1;
<          s->state_out_ch = s->k0;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 2;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          s->state_out_len = 3;
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          if (s->nblock_used == s->save_nblock+1) continue;
<          if (k1 != s->k0) { s->k0 = k1; continue; };
<    
<          BZ_GET_SMALL(k1); s->nblock_used++;
<          s->state_out_len = ((Int32)k1) + 4;
<          BZ_GET_SMALL(s->k0); s->nblock_used++;
<       }
< 
<    }
< }
---
> ;
3309,3367c2226
< {
<    int    bzerr;
<    char   unused[BZ_MAX_UNUSED];
<    int    blockSize100k = 9;
<    int    writing       = 0;
<    char   mode2[10]     = "";
<    FILE   *fp           = NULL;
<    BZFILE *bzfp         = NULL;
<    int    verbosity     = 0;
<    int    workFactor    = 30;
<    int    smallMode     = 0;
<    int    nUnused       = 0; 
< 
<    if (mode == NULL) return NULL;
<    while (*mode) {
<       switch (*mode) {
<       case 'r':
<          writing = 0; break;
<       case 'w':
<          writing = 1; break;
<       case 's':
<          smallMode = 1; break;
<       default:
<          if (isdigit((int)(*mode))) {
<             blockSize100k = *mode-BZ_HDR_0;
<          }
<       }
<       mode++;
<    }
<    strcat(mode2, writing ? "w" : "r" );
<    strcat(mode2,"b");   
< 
<    if (open_mode==0) {
<       if (path==NULL || strcmp(path,"")==0) {
<         fp = (writing ? stdout : stdin);
<       } else {
<         fp = fopen(path,mode2);
<       }
<    } else {
<       fp = fdopen(fd,mode2);
<    }
<    if (fp == NULL) return NULL;
< 
<    if (writing) {
<       
<       if (blockSize100k < 1) blockSize100k = 1;
<       if (blockSize100k > 9) blockSize100k = 9; 
<       bzfp = BZ2_bzWriteOpen(&bzerr,fp,blockSize100k,
<                              verbosity,workFactor);
<    } else {
<       bzfp = BZ2_bzReadOpen(&bzerr,fp,verbosity,smallMode,
<                             unused,nUnused);
<    }
<    if (bzfp == NULL) {
<       if (fp != stdin && fp != stdout) fclose(fp);
<       return NULL;
<    }
<    return bzfp;
< }
---
> ;
(72.1 %, 57228 bytes)
===< pass_clang_binsrch :: remove-unused-function >===
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1129,1136d1091
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1095,1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1254d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
1256,1257d1118
<    s->nMTF = wr;
< }
1264,1266d1124
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1142,1143
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
1662,1663c1519
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
446,447c446,448
< extern void 
< BZ2_blockSort ( EState* );
---
> 
> 
> ;
451,452d451
< extern void 
< BZ2_bsInitWrite ( EState* );
454,455d452
< extern void 
< BZ2_hbAssignCodes ( Int32*, UChar*, Int32, Int32, Int32 );
457,458c454
< extern void 
< BZ2_hbMakeCodeLengths ( UChar*, Int32*, Int32, Int32 );
---
> 
651,652c647
< extern Int32 
< BZ2_indexIntoF ( Int32, Int32* );
---
> 
657,659c652
< extern void 
< BZ2_hbCreateDecodeTables ( Int32*, Int32*, Int32*, UChar*,
<                            Int32,  Int32, Int32 );
---
> 
839,840c832
< void BZ2_blockSort ( EState* s )
< ;
---
> 
892,896d883
< void BZ2_hbMakeCodeLengths ( UChar *len, 
<                              Int32 *freq,
<                              Int32 alphaSize,
<                              Int32 maxLen )
< ;
900,905d886
< void BZ2_hbAssignCodes ( Int32 *code,
<                          UChar *length,
<                          Int32 minLen,
<                          Int32 maxLen,
<                          Int32 alphaSize )
< ;
909,916c890,892
< void BZ2_hbCreateDecodeTables ( Int32 *limit,
<                                 Int32 *base,
<                                 Int32 *perm,
<                                 UChar *length,
<                                 Int32 minLen,
<                                 Int32 maxLen,
<                                 Int32 alphaSize )
< ;
---
> 
> 
> 
1084,1088d1059
< void BZ2_bsInitWrite ( EState* s )
< {
<    s->bsLive = 0;
<    s->bsBuff = 0;
< }
1092,1101c1063,1064
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
> 
1662,1663c1625
< Int32 BZ2_indexIntoF ( Int32 indx, Int32 *cftab )
< ;
---
> 
1092,1101c1092
< static
< void bsFinishWrite ( EState* s )
< {
<    while (s->bsLive > 0) {
<       s->zbits[s->numZ] = (UChar)(s->bsBuff >> 24);
<       s->numZ++;
<       s->bsBuff <<= 8;
<       s->bsLive -= 8;
<    }
< }
---
> 
1129,1136d1119
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
1140,1144c1123,1124
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
> 
1166,1252d1145
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
< 
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
1254,1257d1146
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1264,1266d1152
< static
< void sendMTFValues ( EState* s )
< ;
1284,1286c1170,1171
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
> 
(72.8 %, 55792 bytes)
===< pass_clang :: remove-unused-function >===
1092,1099c1092
< static
< void bsPutUInt32 ( EState* s, UInt32 u )
< {
<    bsW ( s, 8, (u >> 24) & 0xffL );
<    bsW ( s, 8, (u >> 16) & 0xffL );
<    bsW ( s, 8, (u >>  8) & 0xffL );
<    bsW ( s, 8,  u        & 0xffL );
< }
---
> 
1103,1107c1103
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
(72.9 %, 55597 bytes)
1096,1100c1096
< static
< void bsPutUChar ( EState* s, UChar c )
< {
<    bsW( s, 8, (UInt32)c );
< }
---
> 
1122,1129d1121
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1131,1213d1122
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(72.9 %, 55521 bytes)
1081,1088c1081
< static
< __inline__
< void bsW ( EState* s, Int32 n, UInt32 v )
< {
<    bsNEEDW ( n );
<    s->bsBuff |= (v << (32 - s->bsLive - n));
<    s->bsLive += n;
< }
---
> 
1118,1125d1117
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1127,1209d1118
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(73.0 %, 55376 bytes)
1111,1118d1110
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1120,1202d1111
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1209,1211c1209
< static
< void sendMTFValues ( EState* s )
< ;
---
> 
1229,1231c1229
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55335 bytes)
1227,1229c1227
< static
< void makeMaps_d ( DState* s )
< ;
---
> 
(73.0 %, 55297 bytes)
===< pass_balanced :: curly >===
31,47c31
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>    struct  
255c255
<    { if (!(cond)) BZ2_bz__AssertH__fail ( errcode ); }
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
(73.0 %, 55246 bytes)
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    
257,261c257
<    { if (!(cond)) {       \
<       fprintf ( stderr,   \
<         "\n\nlibbzip2(debug build): internal error\n\t%s\n", msg );\
<       exit(1); \
<    }}
---
>    { if (!(cond)) }
318,322c318
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
(73.1 %, 55102 bytes)
314,318c314
<    if (s->rNToGo == 0) {                       \
<       s->rNToGo = BZ2_rNums[s->rTPos];         \
<       s->rTPos++;                              \
<       if (s->rTPos == 512) s->rTPos = 0;       \
<    }                                           \
---
>    if (s->rNToGo == 0)                                            \
328,330c328
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
333,335c333
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
(73.2 %, 54925 bytes)
324,326c324
< {                                              \
<    crcVar = 0xffffffffL;                       \
< }
---
> 
329,331c329
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
334,338c334
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.2 %, 54826 bytes)
327,329c327
< {                                              \
<    crcVar = ~(crcVar);                         \
< }
---
> 
332,336c332
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
(73.3 %, 54727 bytes)
330,334c330
< {                                              \
<    crcVar = (crcVar << 8) ^                    \
<             BZ2_crc32Table[(crcVar >> 24) ^    \
<                            ((UChar)cha)];      \
< }
---
> 
359,427c359
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
505,594c505
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
612,615c612
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
(73.4 %, 54530 bytes)
355,423c355
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       UInt32   avail_in_expect;
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       Int32    origPtr;
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       UInt32   state_in_ch;
<       Int32    state_in_len;
<       BZ_RAND_DECLS;
< 
<       
<       Int32    nblock;
<       Int32    nblockMAX;
<       Int32    numZ;
<       Int32    state_out_pos;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       UChar    unseqToSeq[256];
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       UInt32   blockCRC;
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       Int32    nMTF;
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
< 
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
< 
<    }
---
>    struct 
501,590c501
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       UChar    state_out_ch;
<       Int32    state_out_len;
<       Bool     blockRandomised;
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       Int32    blockSize100k;
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       Int32    origPtr;
<       UInt32   tPos;
<       Int32    k0;
<       Int32    unzftab[256];
<       Int32    nblock_used;
<       Int32    cftab[257];
<       Int32    cftabCopy[257];
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       UInt32   storedBlockCRC;
<       UInt32   storedCombinedCRC;
<       UInt32   calculatedBlockCRC;
<       UInt32   calculatedCombinedCRC;
< 
<       
<       Int32    nInUse;
<       Bool     inUse[256];
<       Bool     inUse16[16];
<       UChar    seqToUnseq[256];
< 
<       
<       UChar    mtfa   [MTFA_SIZE];
<       Int32    mtfbase[256 / MTFL_SIZE];
<       UChar    selector   [BZ_MAX_SELECTORS];
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
< 
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
<       Int32    minLens[BZ_N_GROUPS];
< 
<       
<       Int32    save_i;
<       Int32    save_j;
<       Int32    save_t;
<       Int32    save_alphaSize;
<       Int32    save_nGroups;
<       Int32    save_nSelectors;
<       Int32    save_EOB;
<       Int32    save_groupNo;
<       Int32    save_groupPos;
<       Int32    save_nextSym;
<       Int32    save_nblockMAX;
<       Int32    save_nblock;
<       Int32    save_es;
<       Int32    save_N;
<       Int32    save_curr;
<       Int32    save_zt;
<       Int32    save_zn; 
<       Int32    save_zvec;
<       Int32    save_zj;
<       Int32    save_gSel;
<       Int32    save_gMinlen;
<       Int32*   save_gLimit;
<       Int32*   save_gBase;
<       Int32*   save_gPerm;
< 
<    }
---
>    struct 
608,611c608
<    { if (((i) & 0x1) == 0)                                    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0xf0) | (n); else    \
<         s->ll4[(i) >> 1] = (s->ll4[(i) >> 1] & 0x0f) | ((n) << 4);  \
<    }
---
>    
617,619c617
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
664c664
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54325 bytes)
614,616c614
<    { s->ll16[i] = (UInt16)(n & 0x0000ffff);  \
<      SET_LL4(i, n >> 16);                    \
<    }
---
>    
661c661
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.5 %, 54230 bytes)
659c659
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
(73.6 %, 54184 bytes)
662,670c662
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
666,669c666
<    while (yyn > 0) {                  \
<       fswap(fmap[yyp1], fmap[yyp2]);  \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
675,677c675
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
(73.7 %, 53863 bytes)
667,669c667
< #define fpush(lz,hz) { stackLo[sp] = lz; \
<                        stackHi[sp] = hz; \
<                        sp++; }
---
> #define fpush(lz,hz) 
671,673c671
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
721,723c721
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
732c732
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53768 bytes)
669,671c669
< #define fpop(lz,hz) { sp--;              \
<                       lz = stackLo[sp];  \
<                       hz = stackHi[sp]; }
---
> #define fpop(lz,hz) 
719,721c719
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
730c730
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
(73.8 %, 53661 bytes)
717,719c717
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> Int32 incs[14] = ;
728c728
<    { Int32 zztmp = zz1; zz1 = zz2; zz2 = zztmp; }
---
>    
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(73.8 %, 53615 bytes)
731,739c731
< {                                     \
<    Int32 yyp1 = (zzp1);               \
<    Int32 yyp2 = (zzp2);               \
<    Int32 yyn  = (zzn);                \
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
< }
---
> 
735,738c735
<    while (yyn > 0) {                  \
<       mswap(ptr[yyp1], ptr[yyp2]);    \
<       yyp1++; yyp2++; yyn--;          \
<    }                                  \
---
>    while (yyn > 0)                                   \
(74.0 %, 53294 bytes)
737,740c737
< #define mpush(lz,hz,dz) { stackLo[sp] = lz; \
<                           stackHi[sp] = hz; \
<                           stackD [sp] = dz; \
<                           sp++; }
---
> #define mpush(lz,hz,dz) 
742,745c742
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
(74.1 %, 53147 bytes)
739,742c739
< #define mpop(lz,hz,dz) { sp--;             \
<                          lz = stackLo[sp]; \
<                          hz = stackHi[sp]; \
<                          dz = stackD [sp]; }
---
> #define mpop(lz,hz,dz) 
748,751c748
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
(74.1 %, 52991 bytes)
745,748c745
<    { Int32 tz;                                                  \
<      tz = nextLo[az]; nextLo[az] = nextLo[bz]; nextLo[bz] = tz; \
<      tz = nextHi[az]; nextHi[az] = nextHi[bz]; nextHi[bz] = tz; \
<      tz = nextD [az]; nextD [az] = nextD [bz]; nextD [bz] = tz; }
---
>    
808,816c808
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
(74.3 %, 52731 bytes)
805,813c805
< {                                                     \
<    Int32 zz, tmp;                                     \
<    zz = z; tmp = heap[zz];                            \
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
808,811c808
<    while (weight[tmp] < weight[heap[zz >> 1]]) {      \
<       heap[zz] = heap[zz >> 1];                       \
<       zz >>= 1;                                       \
<    }                                                  \
---
>    while (weight[tmp] < weight[heap[zz >> 1]])                                                   \
(74.5 %, 52282 bytes)
808,822c808
< {                                                     \
<    Int32 zz, yy, tmp;                                 \
<    zz = z; tmp = heap[zz];                            \
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
<    heap[zz] = tmp;                                    \
< }
---
> 
811,820c811
<    while (True) {                                     \
<       yy = zz << 1;                                   \
<       if (yy > nHeap) break;                          \
<       if (yy < nHeap &&                               \
<           weight[heap[yy+1]] < weight[heap[yy]])      \
<          yy++;                                        \
<       if (weight[tmp] < weight[heap[yy]]) break;      \
<       heap[zz] = heap[yy];                            \
<       zz = yy;                                        \
<    }                                                  \
---
>    while (True)                                                   \
849,917c849
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
(74.9 %, 51497 bytes)
835,903c835
< UInt32 BZ2_crc32Table[256] = {
< 
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
---
> UInt32 BZ2_crc32Table[256] = ;
917,970c917
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> Int32 BZ2_rNums[512] = ;
997,1005c997
< {                                             \
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
< }
---
> 
998,1004c998
<    while (s->bsLive >= 8) {                   \
<       s->zbits[s->numZ]                       \
<          = (UChar)(s->bsBuff >> 24);          \
<       s->numZ++;                              \
<       s->bsBuff <<= 8;                        \
<       s->bsLive -= 8;                         \
<    }                                          \
---
>    while (s->bsLive >= 8)                                           \
1027,1035c1027
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
(75.1 %, 51112 bytes)
1019,1027c1019
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
1023,1026c1023
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
---
>       if (s->inUse[i]) 
1033,1038d1032
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
1040,1122d1033
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    makeMaps_e ( s );
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1054,1101c1054
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
---
>    for (i = 0; i < s->nblock; i++) 
1061,1063c1061
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
---
>       if (yy[0] == ll_i)  else {
1063,1100c1063
<       } else {
< 
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
---
>       } else 
1065,1079c1065
<          if (zPend > 0) {
<             zPend--;
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
<             zPend = 0;
<          }
---
>          if (zPend > 0) 
1067,1077c1067
<             while (True) {
<                if (zPend & 1) {
<                   mtfv[wr] = BZ_RUNB; wr++; 
<                   s->mtfFreq[BZ_RUNB]++; 
<                } else {
<                   mtfv[wr] = BZ_RUNA; wr++; 
<                   s->mtfFreq[BZ_RUNA]++; 
<                }
<                if (zPend < 2) break;
<                zPend = (zPend - 2) / 2;
<             };
---
>             while (True) ;
(75.3 %, 50690 bytes)
1066,1084c1066
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
---
>          
1074,1080c1074
<             while ( rll_i != rtmp ) {
<                register UChar rtmp2;
<                ryy_j++;
<                rtmp2  = rtmp;
<                rtmp   = *ryy_j;
<                *ryy_j = rtmp2;
<             };
---
>             while ( rll_i != rtmp ) ;
1089,1103c1089
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
(75.3 %, 50521 bytes)
1083,1097c1083
<    if (zPend > 0) {
<       zPend--;
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
<       zPend = 0;
<    }
---
>    if (zPend > 0) 
1085,1095c1085
<       while (True) {
<          if (zPend & 1) {
<             mtfv[wr] = BZ_RUNB; wr++; 
<             s->mtfFreq[BZ_RUNB]++; 
<          } else {
<             mtfv[wr] = BZ_RUNA; wr++; 
<             s->mtfFreq[BZ_RUNA]++; 
<          }
<          if (zPend < 2) break;
<          zPend = (zPend - 2) / 2;
<       };
---
>       while (True) ;
(75.5 %, 50183 bytes)
1118c1118
<    { retVal = rrr; goto save_state_and_return; };
---
>    ;
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(75.5 %, 50138 bytes)
1122,1142c1122
<    while (True) {                                 \
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
<       if (s->strm->avail_in == 0) RETURN(BZ_OK);  \
<       s->bsBuff                                   \
<          = (s->bsBuff << 8) |                     \
<            ((UInt32)                              \
<               (*((UChar*)(s->strm->next_in))));   \
<       s->bsLive += 8;                             \
<       s->strm->next_in++;                         \
<       s->strm->avail_in--;                        \
<       s->strm->total_in_lo32++;                   \
<       if (s->strm->total_in_lo32 == 0)            \
<          s->strm->total_in_hi32++;                \
<    }
---
>    while (True) 
1123,1130c1123
<       if (s->bsLive >= nnn) {                     \
<          UInt32 v;                                \
<          v = (s->bsBuff >>                        \
<              (s->bsLive-nnn)) & ((1 << nnn)-1);   \
<          s->bsLive -= nnn;                        \
<          vvv = v;                                 \
<          break;                                   \
<       }                                           \
---
>       if (s->bsLive >= nnn)                                            \
(76.0 %, 49110 bytes)
1132,1159c1132
< {                                                 \
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
<    groupPos--;                                    \
<    zn = gMinlen;                                  \
<    GET_BITS(label1, zvec, zn);                    \
<    while (1) {                                    \
<       if (zn > 20 )         \
<          RETURN(BZ_DATA_ERROR);                   \
<       if (zvec <= gLimit[zn]) break;              \
<       zn++;                                       \
<       GET_BIT(label2, zj);                        \
<       zvec = (zvec << 1) | zj;                    \
<    };                                             \
<    if (zvec - gBase[zn] < 0                       \
<        || zvec - gBase[zn] >= BZ_MAX_ALPHA_SIZE)  \
<       RETURN(BZ_DATA_ERROR);                      \
<    lval = gPerm[zvec - gBase[zn]];                \
< }
---
> 
1133,1143c1133
<    if (groupPos == 0) {                           \
<       groupNo++;                                  \
<       if (groupNo >= nSelectors)                  \
<          RETURN(BZ_DATA_ERROR);                   \
<       groupPos = BZ_G_SIZE;                       \
<       gSel = s->selector[groupNo];                \
<       gMinlen = s->minLens[gSel];                 \
<       gLimit = &(s->limit[gSel][0]);              \
<       gPerm = &(s->perm[gSel][0]);                \
<       gBase = &(s->base[gSel][0]);                \
<    }                                              \
---
>    if (groupPos == 0)                                               \
(76.7 %, 47727 bytes)
1198,1200d1197
< {
<    Int32   n;
<    EState* s;
1202,1256d1198
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    init_RL ( s );
<    prepare_new_block ( s );
<    return BZ_OK;
< }
1226,1232c1226
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) {
<       if (s->arr1 != NULL) BZFREE(s->arr1);
<       if (s->arr2 != NULL) BZFREE(s->arr2);
<       if (s->ftab != NULL) BZFREE(s->ftab);
<       if (s       != NULL) BZFREE(s);
<       return BZ_MEM_ERROR;
<    }
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
1269,1292c1269
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1273,1280c1273
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
(76.8 %, 47524 bytes)
1263,1286c1263
< {                                                 \
<    UInt32 zchh = (UInt32)(zchh0);                 \
<               \
<    if (zchh != zs->state_in_ch &&                 \
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
<    else                                           \
<                  \
<    if (zchh != zs->state_in_ch ||                 \
<       zs->state_in_len == 255) {                  \
<       if (zs->state_in_ch < 256)                  \
<          add_pair_to_block ( zs );                \
<       zs->state_in_ch = zchh;                     \
<       zs->state_in_len = 1;                       \
<    } else {                                       \
<       zs->state_in_len++;                         \
<    }                                              \
< }
---
> 
1267,1274c1267
<        zs->state_in_len == 1) {                   \
<       UChar ch = (UChar)(zs->state_in_ch);        \
<       BZ_UPDATE_CRC( zs->blockCRC, ch );          \
<       zs->inUse[zs->state_in_ch] = True;          \
<       zs->block[zs->nblock] = (UChar)ch;          \
<       zs->nblock++;                               \
<       zs->state_in_ch = zchh;                     \
<    }                                              \
---
>        zs->state_in_len == 1)                                               \
(77.4 %, 46396 bytes)
1282,1288d1281
< {
<    Bool progress;
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1290,1338d1282
<    preswitch:
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
<    return BZ_OK; 
< }
1291,1336c1291
<    switch (s->mode) {
< 
<       case BZ_M_IDLE:
<          return BZ_SEQUENCE_ERROR;
< 
<       case BZ_M_RUNNING:
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
<          else
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
<          else
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
<          else 
<             return BZ_PARAM_ERROR;
< 
<       case BZ_M_FLUSHING:
<          if (action != BZ_FLUSH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FLUSH_OK;
<          s->mode = BZ_M_RUNNING;
<          return BZ_RUN_OK;
< 
<       case BZ_M_FINISHING:
<          if (action != BZ_FINISH) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect != s->strm->avail_in) 
<             return BZ_SEQUENCE_ERROR;
<          progress = handle_compress ( strm );
<          if (!progress) return BZ_SEQUENCE_ERROR;
<          if (s->avail_in_expect > 0 || !isempty_RL(s) ||
<              s->state_out_pos < s->numZ) return BZ_FINISH_OK;
<          s->mode = BZ_M_IDLE;
<          return BZ_STREAM_END;
<    }
---
>    switch (s->mode) 
1297,1300c1297
<          if (action == BZ_RUN) {
<             progress = handle_compress ( strm );
<             return progress ? BZ_RUN_OK : BZ_PARAM_ERROR;
<          } 
---
>          if (action == BZ_RUN)  
1302,1306c1302
< 	 if (action == BZ_FLUSH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FLUSHING;
<             goto preswitch;
<          }
---
> 	 if (action == BZ_FLUSH) 
1308,1312c1308
<          if (action == BZ_FINISH) {
<             s->avail_in_expect = strm->avail_in;
<             s->mode = BZ_M_FINISHING;
<             goto preswitch;
<          }
---
>          if (action == BZ_FINISH) 
1343,1348d1342
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1350,1358d1343
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1370,1371d1369
< {
<    DState* s;
1373,1402d1370
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1424,1429d1423
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1431,1471d1424
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1431,1466c1431
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
(78.1 %, 44901 bytes)
1298,1303d1297
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1305,1313d1298
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
1325,1326d1324
< {
<    DState* s;
1328,1357d1325
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
1379,1384d1378
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1386,1426d1379
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
< 
<    AssertH ( 0, 6001 );
< 
<    return 0;  
< }
1386,1421c1386
<    while (True) {
<       if (s->state == BZ_X_IDLE) return BZ_SEQUENCE_ERROR;
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
<       if (s->state >= BZ_X_MAGIC_1) {
<          Int32 r = BZ2_decompress ( s );
<          if (r == BZ_STREAM_END) {
<             if (s->verbosity >= 3)
<                VPrintf2 ( "\n    combined CRCs: stored = 0x%x, computed = 0x%x", 
<                           s->storedCombinedCRC, s->calculatedCombinedCRC );
<             if (s->calculatedCombinedCRC != s->storedCombinedCRC)
<                return BZ_DATA_ERROR;
<             return r;
<          }
<          if (s->state != BZ_X_OUTPUT) return r;
<       }
<    }
---
>    while (True) 
1388,1408c1388
<       if (s->state == BZ_X_OUTPUT) {
<          if (s->smallDecompress)
<             unRLE_obuf_to_output_SMALL ( s ); else
<             unRLE_obuf_to_output_FAST  ( s );
<          if (s->nblock_used == s->save_nblock+1 && s->state_out_len == 0) {
<             BZ_FINALISE_CRC ( s->calculatedBlockCRC );
<             if (s->verbosity >= 3) 
<                VPrintf2 ( " {0x%x, 0x%x}", s->storedBlockCRC, 
<                           s->calculatedBlockCRC );
<             if (s->verbosity >= 2) VPrintf0 ( "]" );
<             if (s->calculatedBlockCRC != s->storedBlockCRC)
<                return BZ_DATA_ERROR;
<             s->calculatedCombinedCRC 
<                = (s->calculatedCombinedCRC << 1) | 
<                     (s->calculatedCombinedCRC >> 31);
<             s->calculatedCombinedCRC ^= s->calculatedBlockCRC;
<             s->state = BZ_X_BLKHDR_1;
<          } else {
<             return BZ_OK;
<          }
<       }
---
>       if (s->state == BZ_X_OUTPUT) 
(78.8 %, 43431 bytes)
1396,1401d1395
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
1403,1411d1396
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
1419,1422c1419
< {                                         \
<    if (bzerror != NULL) *bzerror = eee;   \
<    if (bzf != NULL) bzf->lastErr = eee;   \
< }
---
> 
1425,1433c1425
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1448,1450d1447
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1452,1485d1448
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1458c1458
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43298 bytes)
1422,1430c1422
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>    struct 
1445,1447d1444
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
1449,1482d1445
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1455c1455
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
(78.9 %, 43255 bytes)
1458c1458
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(78.9 %, 43215 bytes)
1462c1462
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(78.9 %, 43174 bytes)
1477c1477
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(79.0 %, 43131 bytes)
1492,1494d1491
< {
<    Int32 n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1496,1528d1492
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
< }
1498c1498
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.0 %, 43093 bytes)
1500c1500
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43052 bytes)
1502c1502
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.0 %, 43017 bytes)
1505c1505
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
(79.0 %, 42988 bytes)
1510,1527c1510
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
<       if (ret != BZ_RUN_OK)
<          { BZ_SETERR(ret); return; };
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
< 
<       if (bzf->strm.avail_in == 0)
<          { BZ_SETERR(BZ_OK); return; };
<    }
---
>    while (True) 
1515c1515
<          { BZ_SETERR(ret); return; };
---
>          ;
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.0 %, 42961 bytes)
1517,1523c1517
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<          n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<          n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                        n, bzf->handle );
<          if (n != n2 || ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return; };
<       }
---
>       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
1522c1522
<             { BZ_SETERR(BZ_IO_ERROR); return; };
---
>             ;
1526c1526
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
(79.2 %, 42709 bytes)
1520c1520
<          { BZ_SETERR(BZ_OK); return; };
---
>          ;
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.2 %, 42680 bytes)
1532,1535c1532
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
> 
1546,1548d1545
< {
<    Int32   n, n2, ret;
<    bzFile* bzf = (bzFile*)b;
1550,1600d1546
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
<    if (!(bzf->writing))
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (ferror(bzf->handle))
<       { BZ_SETERR(BZ_IO_ERROR); return; };
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
< 
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
<    BZ2_bzCompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1551c1551
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.2 %, 42651 bytes)
1553c1553
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
(79.2 %, 42610 bytes)
1555c1555
<       { BZ_SETERR(BZ_IO_ERROR); return; };
---
>       ;
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
(79.2 %, 42575 bytes)
1562,1580c1562
<    if ((!abandon) && bzf->lastErr == BZ_OK) {
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
<    }
---
>    if ((!abandon) && bzf->lastErr == BZ_OK) 
1563,1579c1563
<       while (True) {
<          bzf->strm.avail_out = BZ_MAX_UNUSED;
<          bzf->strm.next_out = bzf->buf;
<          ret = BZ2_bzCompress ( &(bzf->strm), BZ_FINISH );
<          if (ret != BZ_FINISH_OK && ret != BZ_STREAM_END)
<             { BZ_SETERR(ret); return; };
< 
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
< 
<          if (ret == BZ_STREAM_END) break;
<       }
---
>       while (True) 
1568c1568
<             { BZ_SETERR(ret); return; };
---
>             ;
1570,1576c1570
<          if (bzf->strm.avail_out < BZ_MAX_UNUSED) {
<             n = BZ_MAX_UNUSED - bzf->strm.avail_out;
<             n2 = fwrite ( (void*)(bzf->buf), sizeof(UChar), 
<                           n, bzf->handle );
<             if (n != n2 || ferror(bzf->handle))
<                { BZ_SETERR(BZ_IO_ERROR); return; };
<          }
---
>          if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
(79.5 %, 41931 bytes)
1564,1568c1564
<    if ( !abandon && !ferror ( bzf->handle ) ) {
<       fflush ( bzf->handle );
<       if (ferror(bzf->handle))
<          { BZ_SETERR(BZ_IO_ERROR); return; };
<    }
---
>    if ( !abandon && !ferror ( bzf->handle ) ) 
1567c1567
<          { BZ_SETERR(BZ_IO_ERROR); return; };
---
>          ;
1593,1595d1592
< {
<    bzFile* bzf = NULL;
<    int     ret;
1597,1638d1593
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1604c1604
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
(79.6 %, 41818 bytes)
1589,1591d1588
< {
<    bzFile* bzf = NULL;
<    int     ret;
1593,1634d1589
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
< 
<    if (ferror(f))
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
<    if (ret != BZ_OK)
<       { BZ_SETERR(ret); free(bzf); return NULL; };
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
1600c1600
<       { BZ_SETERR(BZ_PARAM_ERROR); return NULL; };
---
>       ;
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
(79.6 %, 41775 bytes)
1603c1603
<       { BZ_SETERR(BZ_IO_ERROR); return NULL; };
---
>       ;
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
(79.6 %, 41735 bytes)
1607c1607
<       { BZ_SETERR(BZ_MEM_ERROR); return NULL; };
---
>       ;
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
(79.7 %, 41694 bytes)
1619,1623c1619
<    while (nUnused > 0) {
<       bzf->buf[bzf->bufN] = *((UChar*)(unused)); bzf->bufN++;
<       unused = ((void*)( 1 + ((UChar*)(unused))  ));
<       nUnused--;
<    }
---
>    while (nUnused > 0) 
1627c1627
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
(79.7 %, 41556 bytes)
1623c1623
<       { BZ_SETERR(ret); free(bzf); return NULL; };
---
>       ;
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
(79.7 %, 41513 bytes)
1635,1636d1634
< {
<    bzFile* bzf = (bzFile*)b;
1638,1648d1635
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_OK); return; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
< 
<    if (bzf->initialisedOk)
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
<    free ( bzf );
< }
1640c1640
<       { BZ_SETERR(BZ_OK); return; };
---
>       ;
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(79.8 %, 41484 bytes)
1643c1643
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
(79.8 %, 41443 bytes)
1657,1659d1656
< {
<    Int32   n, ret;
<    bzFile* bzf = (bzFile*)b;
1661,1708d1657
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
< 
<    if (bzf->writing)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
< 
<    if (len == 0)
<       { BZ_SETERR(BZ_OK); return 0; };
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
< 
<    return 0; 
< }
1664c1664
<       { BZ_SETERR(BZ_PARAM_ERROR); return 0; };
---
>       ;
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
(79.8 %, 41403 bytes)
1667c1667
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return 0; };
---
>       ;
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
(79.8 %, 41360 bytes)
1670c1670
<       { BZ_SETERR(BZ_OK); return 0; };
---
>       ;
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(79.8 %, 41329 bytes)
1675,1705c1675
<    while (True) {
< 
<       if (ferror(bzf->handle)) 
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
< 
<       if (bzf->strm.avail_in == 0 && !myfeof(bzf->handle)) {
<          n = fread ( bzf->buf, sizeof(UChar), 
<                      BZ_MAX_UNUSED, bzf->handle );
<          if (ferror(bzf->handle))
<             { BZ_SETERR(BZ_IO_ERROR); return 0; };
<          bzf->bufN = n;
<          bzf->strm.avail_in = bzf->bufN;
<          bzf->strm.next_in = bzf->buf;
<       }
< 
<       ret = BZ2_bzDecompress ( &(bzf->strm) );
< 
<       if (ret != BZ_OK && ret != BZ_STREAM_END)
<          { BZ_SETERR(ret); return 0; };
< 
<       if (ret == BZ_OK && myfeof(bzf->handle) && 
<           bzf->strm.avail_in == 0 && bzf->strm.avail_out > 0)
<          { BZ_SETERR(BZ_UNEXPECTED_EOF); return 0; };
< 
<       if (ret == BZ_STREAM_END)
<          { BZ_SETERR(BZ_STREAM_END);
<            return len - bzf->strm.avail_out; };
<       if (bzf->strm.avail_out == 0)
<          { BZ_SETERR(BZ_OK); return len; };
<       
<    }
---
>    while (True) 
1678c1678
<          { BZ_SETERR(BZ_IO_ERROR); return 0; };
---
>          ;
(80.3 %, 40376 bytes)
1687,1694d1686
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
<    if (bzf->lastErr != BZ_STREAM_END)
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
<    if (unused == NULL || nUnused == NULL)
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
1696,1699d1687
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
< }
1690c1690
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
(80.3 %, 40338 bytes)
1692c1692
<       { BZ_SETERR(BZ_SEQUENCE_ERROR); return; };
---
>       ;
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
(80.3 %, 40297 bytes)
1694c1694
<       { BZ_SETERR(BZ_PARAM_ERROR); return; };
---
>       ;
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
(80.4 %, 40259 bytes)
1715,1717d1714
< {
<    bz_stream strm;
<    int ret;
1719,1755d1715
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
<    if (ret == BZ_FINISH_OK) goto output_overflow;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow:
<    BZ2_bzCompressEnd ( &strm );
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    BZ2_bzCompressEnd ( &strm );
<    return ret;
< }
1766,1768d1765
< {
<    bz_stream strm;
<    int ret;
1770,1808d1766
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
<    if (ret != BZ_OK) return ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
< 
<    ret = BZ2_bzDecompress ( &strm );
<    if (ret == BZ_OK) goto output_overflow_or_eof;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    BZ2_bzDecompressEnd ( &strm );
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
< 
<    errhandler:
<    BZ2_bzDecompressEnd ( &strm );
<    return ret; 
< }
1797,1800c1797
<    if (strm.avail_out > 0) {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_UNEXPECTED_EOF;
<    } else {
---
>    if (strm.avail_out > 0)  else {
1800,1803c1800
<    } else {
<       BZ2_bzDecompressEnd ( &strm );
<       return BZ_OUTBUFF_FULL;
<    };      
---
>    } else ;      
1818,1820c1818
< {
<    return BZ_VERSION;
< }
---
> 
1839,1841c1839
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1848,1850c1848
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1855,1864c1855
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1859,1861c1859
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1861,1863c1861
<    } else {
<       return -1;
<    }
---
>    } else 
1869,1870d1868
< {
<    int bzerr;
1872,1878d1869
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1873,1875c1873
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1875,1877c1875
<    }else{
<       return -1;
<    }
---
>    }else
1883,1886c1883
< {
<    
<    return 0;
< }
---
> 
1891,1907c1891
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1895c1895
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
(80.4 %, 40186 bytes)
1815,1817c1815
< {
<    return BZ_VERSION;
< }
---
> 
1836,1838c1836
< {
<    return bzopen_or_bzdopen(path,-1,mode,0);
< }
---
> 
1845,1847c1845
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
> 
1852,1861c1852
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
> 
1856,1858c1856
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END)  else {
1858,1860c1858
<    } else {
<       return -1;
<    }
---
>    } else 
1866,1867d1865
< {
<    int bzerr;
1869,1875d1866
<    BZ2_bzWrite(&bzerr,b,buf,len);
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
1870,1872c1870
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    if(bzerr == BZ_OK)else{
1872,1874c1872
<    }else{
<       return -1;
<    }
---
>    }else
1880,1883c1880
< {
<    
<    return 0;
< }
---
> 
1888,1904c1888
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) {return;}
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
> 
1892c1892
<    if (b==NULL) {return;}
---
>    if (b==NULL) 
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
(80.4 %, 40177 bytes)
1893,1898c1893
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else{
---
>    if(((bzFile*)b)->writing)else{
1895,1897c1895
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>       if(bzerr != BZ_OK)
1898,1900c1898
<    }else{
<       BZ2_bzReadClose(&bzerr,b);
<    }
---
>    }else
1901,1903c1901
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1909,1926c1909
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1930,1931d1929
< {
<    int err = ((bzFile *)b)->lastErr;
1933,1936d1930
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1977c1977
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
(80.4 %, 40138 bytes)
1899,1901c1899
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp!=stdin && fp!=stdout)
1907,1924c1907
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
1928,1929d1927
< {
<    int err = ((bzFile *)b)->lastErr;
1931,1934d1928
<    if(err>0) err = 0;
<    *errnum = err;
<    return bzerrorstrings[err*-1];
< }
1975c1975
< #define ERROR_IF_EOF(i)       { if ((i) == EOF)  ioError(); }
---
> #define ERROR_IF_EOF(i)       
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40107 bytes)
1976c1976
< #define ERROR_IF_NOT_ZERO(i)  { if ((i) != 0)    ioError(); }
---
> #define ERROR_IF_NOT_ZERO(i)  
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
(80.4 %, 40076 bytes)
1977c1977
< #define ERROR_IF_MINUS_ONE(i) { if ((i) == (-1)) ioError(); }
---
> #define ERROR_IF_MINUS_ONE(i) 
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
(80.5 %, 40045 bytes)
2070c2070
<    struct { UChar b[8]; } 
---
>    struct  
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 40030 bytes)
2216c2216
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
>    = ;
2218c2218
<    = { "", "", ".tar", ".tar" };
---
>    = ;
2253,2256c2253
<    struct zzzz {
<       Char        *name;
<       struct zzzz *link;
<    }
---
>    struct zzzz 
(80.5 %, 39974 bytes)
===< pass_clang :: callexpr-to-value >===
1045c1045
<    makeMaps_e ( s );
---
>    ;
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1247c1247
<    init_RL ( s );
---
>    ;
(80.5 %, 39958 bytes)
1202c1202
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1247c1247
<    init_RL ( s );
---
>    ;
(80.5 %, 39945 bytes)
1247c1247
<    init_RL ( s );
---
>    ;
1248c1248
<    prepare_new_block ( s );
---
>    ;
(80.5 %, 39932 bytes)
1248c1248
<    prepare_new_block ( s );
---
>    ;
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
(80.5 %, 39909 bytes)
1328c1328
<    if (!bz_config_ok()) return BZ_CONFIG_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR;
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
(80.5 %, 39896 bytes)
1513c1513
<       ret = BZ2_bzCompress ( &(bzf->strm), BZ_RUN );
---
>       ret = 0;
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
(80.6 %, 39858 bytes)
1576c1576
<    BZ2_bzCompressEnd ( &(bzf->strm) );
---
>    0;
1577c1577
<    free ( bzf );
---
>    0;
(80.6 %, 39825 bytes)
1577c1577
<    free ( bzf );
---
>    0;
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
(80.6 %, 39814 bytes)
1646c1646
<       (void)BZ2_bzDecompressEnd ( &(bzf->strm) );
---
>       (void)0;
1647c1647
<    free ( bzf );
---
>    0;
(80.6 %, 39779 bytes)
1647c1647
<    free ( bzf );
---
>    0;
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
(80.6 %, 39768 bytes)
1730,1731c1730
<    ret = BZ2_bzCompressInit ( &strm, blockSize100k, 
<                               verbosity, workFactor );
---
>    ret = 0;
1739c1739
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
(80.6 %, 39672 bytes)
1738c1738
<    ret = BZ2_bzCompress ( &strm, BZ_FINISH );
---
>    ret = 0;
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39638 bytes)
1744c1744
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39612 bytes)
1748c1748
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
(80.7 %, 39586 bytes)
1752c1752
<    BZ2_bzCompressEnd ( &strm );
---
>    0;
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
(80.7 %, 39560 bytes)
1778c1778
<    ret = BZ2_bzDecompressInit ( &strm, verbosity, small );
---
>    ret = 0;
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.7 %, 39513 bytes)
1786c1786
<    ret = BZ2_bzDecompress ( &strm );
---
>    ret = 0;
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
(80.7 %, 39488 bytes)
1792c1792
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
(80.7 %, 39460 bytes)
1797c1797
<       BZ2_bzDecompressEnd ( &strm );
---
>       0;
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
(80.8 %, 39432 bytes)
1802c1802
<    BZ2_bzDecompressEnd ( &strm );
---
>    0;
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
(80.8 %, 39404 bytes)
1836c1836
<    return bzopen_or_bzdopen(path,-1,mode,0);
---
>    return 0;
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
(80.8 %, 39372 bytes)
1854c1854
<    nread = BZ2_bzRead(&bzerr,b,buf,len);
---
>    nread = 0;
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39345 bytes)
1868c1868
<    BZ2_bzWrite(&bzerr,b,buf,len);
---
>    ;
(80.8 %, 39316 bytes)
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-enum-member >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: remove-unused-var >===
301c301
< extern Int32 BZ2_rNums[512];
---
> 
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
(80.8 %, 39288 bytes)
321c321
< extern UInt32 BZ2_crc32Table[256];
---
> 
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
(80.8 %, 39254 bytes)
716,719c716
< static
< Int32 incs[14] = { 1, 4, 13, 40, 121, 364, 1093, 3280,
<                    9841, 29524, 88573, 265720,
<                    797161, 2391484 };
---
> 
835d834
< UInt32 BZ2_crc32Table[256] = {
837,903d835
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
(80.9 %, 39108 bytes)
832d831
< UInt32 BZ2_crc32Table[256] = {
834,900d832
<    
< 
<    0x00000000L, 0x04c11db7L, 0x09823b6eL, 0x0d4326d9L,
<    0x130476dcL, 0x17c56b6bL, 0x1a864db2L, 0x1e475005L,
<    0x2608edb8L, 0x22c9f00fL, 0x2f8ad6d6L, 0x2b4bcb61L,
<    0x350c9b64L, 0x31cd86d3L, 0x3c8ea00aL, 0x384fbdbdL,
<    0x4c11db70L, 0x48d0c6c7L, 0x4593e01eL, 0x4152fda9L,
<    0x5f15adacL, 0x5bd4b01bL, 0x569796c2L, 0x52568b75L,
<    0x6a1936c8L, 0x6ed82b7fL, 0x639b0da6L, 0x675a1011L,
<    0x791d4014L, 0x7ddc5da3L, 0x709f7b7aL, 0x745e66cdL,
<    0x9823b6e0L, 0x9ce2ab57L, 0x91a18d8eL, 0x95609039L,
<    0x8b27c03cL, 0x8fe6dd8bL, 0x82a5fb52L, 0x8664e6e5L,
<    0xbe2b5b58L, 0xbaea46efL, 0xb7a96036L, 0xb3687d81L,
<    0xad2f2d84L, 0xa9ee3033L, 0xa4ad16eaL, 0xa06c0b5dL,
<    0xd4326d90L, 0xd0f37027L, 0xddb056feL, 0xd9714b49L,
<    0xc7361b4cL, 0xc3f706fbL, 0xceb42022L, 0xca753d95L,
<    0xf23a8028L, 0xf6fb9d9fL, 0xfbb8bb46L, 0xff79a6f1L,
<    0xe13ef6f4L, 0xe5ffeb43L, 0xe8bccd9aL, 0xec7dd02dL,
<    0x34867077L, 0x30476dc0L, 0x3d044b19L, 0x39c556aeL,
<    0x278206abL, 0x23431b1cL, 0x2e003dc5L, 0x2ac12072L,
<    0x128e9dcfL, 0x164f8078L, 0x1b0ca6a1L, 0x1fcdbb16L,
<    0x018aeb13L, 0x054bf6a4L, 0x0808d07dL, 0x0cc9cdcaL,
<    0x7897ab07L, 0x7c56b6b0L, 0x71159069L, 0x75d48ddeL,
<    0x6b93dddbL, 0x6f52c06cL, 0x6211e6b5L, 0x66d0fb02L,
<    0x5e9f46bfL, 0x5a5e5b08L, 0x571d7dd1L, 0x53dc6066L,
<    0x4d9b3063L, 0x495a2dd4L, 0x44190b0dL, 0x40d816baL,
<    0xaca5c697L, 0xa864db20L, 0xa527fdf9L, 0xa1e6e04eL,
<    0xbfa1b04bL, 0xbb60adfcL, 0xb6238b25L, 0xb2e29692L,
<    0x8aad2b2fL, 0x8e6c3698L, 0x832f1041L, 0x87ee0df6L,
<    0x99a95df3L, 0x9d684044L, 0x902b669dL, 0x94ea7b2aL,
<    0xe0b41de7L, 0xe4750050L, 0xe9362689L, 0xedf73b3eL,
<    0xf3b06b3bL, 0xf771768cL, 0xfa325055L, 0xfef34de2L,
<    0xc6bcf05fL, 0xc27dede8L, 0xcf3ecb31L, 0xcbffd686L,
<    0xd5b88683L, 0xd1799b34L, 0xdc3abdedL, 0xd8fba05aL,
<    0x690ce0eeL, 0x6dcdfd59L, 0x608edb80L, 0x644fc637L,
<    0x7a089632L, 0x7ec98b85L, 0x738aad5cL, 0x774bb0ebL,
<    0x4f040d56L, 0x4bc510e1L, 0x46863638L, 0x42472b8fL,
<    0x5c007b8aL, 0x58c1663dL, 0x558240e4L, 0x51435d53L,
<    0x251d3b9eL, 0x21dc2629L, 0x2c9f00f0L, 0x285e1d47L,
<    0x36194d42L, 0x32d850f5L, 0x3f9b762cL, 0x3b5a6b9bL,
<    0x0315d626L, 0x07d4cb91L, 0x0a97ed48L, 0x0e56f0ffL,
<    0x1011a0faL, 0x14d0bd4dL, 0x19939b94L, 0x1d528623L,
<    0xf12f560eL, 0xf5ee4bb9L, 0xf8ad6d60L, 0xfc6c70d7L,
<    0xe22b20d2L, 0xe6ea3d65L, 0xeba91bbcL, 0xef68060bL,
<    0xd727bbb6L, 0xd3e6a601L, 0xdea580d8L, 0xda649d6fL,
<    0xc423cd6aL, 0xc0e2d0ddL, 0xcda1f604L, 0xc960ebb3L,
<    0xbd3e8d7eL, 0xb9ff90c9L, 0xb4bcb610L, 0xb07daba7L,
<    0xae3afba2L, 0xaafbe615L, 0xa7b8c0ccL, 0xa379dd7bL,
<    0x9b3660c6L, 0x9ff77d71L, 0x92b45ba8L, 0x9675461fL,
<    0x8832161aL, 0x8cf30badL, 0x81b02d74L, 0x857130c3L,
<    0x5d8a9099L, 0x594b8d2eL, 0x5408abf7L, 0x50c9b640L,
<    0x4e8ee645L, 0x4a4ffbf2L, 0x470cdd2bL, 0x43cdc09cL,
<    0x7b827d21L, 0x7f436096L, 0x7200464fL, 0x76c15bf8L,
<    0x68860bfdL, 0x6c47164aL, 0x61043093L, 0x65c52d24L,
<    0x119b4be9L, 0x155a565eL, 0x18197087L, 0x1cd86d30L,
<    0x029f3d35L, 0x065e2082L, 0x0b1d065bL, 0x0fdc1becL,
<    0x3793a651L, 0x3352bbe6L, 0x3e119d3fL, 0x3ad08088L,
<    0x2497d08dL, 0x2056cd3aL, 0x2d15ebe3L, 0x29d4f654L,
<    0xc5a92679L, 0xc1683bceL, 0xcc2b1d17L, 0xc8ea00a0L,
<    0xd6ad50a5L, 0xd26c4d12L, 0xdf2f6bcbL, 0xdbee767cL,
<    0xe3a1cbc1L, 0xe760d676L, 0xea23f0afL, 0xeee2ed18L,
<    0xf0a5bd1dL, 0xf464a0aaL, 0xf9278673L, 0xfde69bc4L,
<    0x89b8fd09L, 0x8d79e0beL, 0x803ac667L, 0x84fbdbd0L,
<    0x9abc8bd5L, 0x9e7d9662L, 0x933eb0bbL, 0x97ffad0cL,
<    0xafb010b1L, 0xab710d06L, 0xa6322bdfL, 0xa2f33668L,
<    0xbcb4666dL, 0xb8757bdaL, 0xb5365d03L, 0xb1f740b4L
< };
914,967c914
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
(82.7 %, 35550 bytes)
846,899c846
< Int32 BZ2_rNums[512] = { 
<    619, 720, 127, 481, 931, 816, 813, 233, 566, 247, 
<    985, 724, 205, 454, 863, 491, 741, 242, 949, 214, 
<    733, 859, 335, 708, 621, 574, 73, 654, 730, 472, 
<    419, 436, 278, 496, 867, 210, 399, 680, 480, 51, 
<    878, 465, 811, 169, 869, 675, 611, 697, 867, 561, 
<    862, 687, 507, 283, 482, 129, 807, 591, 733, 623, 
<    150, 238, 59, 379, 684, 877, 625, 169, 643, 105, 
<    170, 607, 520, 932, 727, 476, 693, 425, 174, 647, 
<    73, 122, 335, 530, 442, 853, 695, 249, 445, 515, 
<    909, 545, 703, 919, 874, 474, 882, 500, 594, 612, 
<    641, 801, 220, 162, 819, 984, 589, 513, 495, 799, 
<    161, 604, 958, 533, 221, 400, 386, 867, 600, 782, 
<    382, 596, 414, 171, 516, 375, 682, 485, 911, 276, 
<    98, 553, 163, 354, 666, 933, 424, 341, 533, 870, 
<    227, 730, 475, 186, 263, 647, 537, 686, 600, 224, 
<    469, 68, 770, 919, 190, 373, 294, 822, 808, 206, 
<    184, 943, 795, 384, 383, 461, 404, 758, 839, 887, 
<    715, 67, 618, 276, 204, 918, 873, 777, 604, 560, 
<    951, 160, 578, 722, 79, 804, 96, 409, 713, 940, 
<    652, 934, 970, 447, 318, 353, 859, 672, 112, 785, 
<    645, 863, 803, 350, 139, 93, 354, 99, 820, 908, 
<    609, 772, 154, 274, 580, 184, 79, 626, 630, 742, 
<    653, 282, 762, 623, 680, 81, 927, 626, 789, 125, 
<    411, 521, 938, 300, 821, 78, 343, 175, 128, 250, 
<    170, 774, 972, 275, 999, 639, 495, 78, 352, 126, 
<    857, 956, 358, 619, 580, 124, 737, 594, 701, 612, 
<    669, 112, 134, 694, 363, 992, 809, 743, 168, 974, 
<    944, 375, 748, 52, 600, 747, 642, 182, 862, 81, 
<    344, 805, 988, 739, 511, 655, 814, 334, 249, 515, 
<    897, 955, 664, 981, 649, 113, 974, 459, 893, 228, 
<    433, 837, 553, 268, 926, 240, 102, 654, 459, 51, 
<    686, 754, 806, 760, 493, 403, 415, 394, 687, 700, 
<    946, 670, 656, 610, 738, 392, 760, 799, 887, 653, 
<    978, 321, 576, 617, 626, 502, 894, 679, 243, 440, 
<    680, 879, 194, 572, 640, 724, 926, 56, 204, 700, 
<    707, 151, 457, 449, 797, 195, 791, 558, 945, 679, 
<    297, 59, 87, 824, 713, 663, 412, 693, 342, 606, 
<    134, 108, 571, 364, 631, 212, 174, 643, 304, 329, 
<    343, 97, 430, 751, 497, 314, 983, 374, 822, 928, 
<    140, 206, 73, 263, 980, 736, 876, 478, 430, 305, 
<    170, 514, 364, 692, 829, 82, 855, 953, 676, 246, 
<    369, 970, 294, 750, 807, 827, 150, 790, 288, 923, 
<    804, 378, 215, 828, 592, 281, 565, 555, 710, 82, 
<    896, 831, 547, 261, 524, 462, 293, 465, 502, 56, 
<    661, 821, 976, 991, 658, 869, 905, 758, 745, 193, 
<    768, 550, 608, 933, 378, 286, 215, 979, 792, 961, 
<    61, 688, 793, 644, 986, 403, 106, 366, 905, 644, 
<    372, 567, 466, 434, 645, 210, 389, 550, 919, 135, 
<    780, 773, 635, 389, 707, 100, 626, 958, 165, 504, 
<    920, 176, 193, 713, 857, 265, 203, 50, 668, 108, 
<    645, 990, 626, 197, 510, 357, 358, 850, 858, 364, 
<    936, 638
< };
---
> 
1212c1212
<    Bool progress;
---
>    
(84.0 %, 32784 bytes)
1159c1159
<    Bool progress;
---
>    
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
(84.0 %, 32770 bytes)
1369c1369
<    Int32 n, n2, ret;
---
>    Int32  n2, ret;
1369c1369
<    Int32 n, n2, ret;
---
>    Int32 n, ret;
(84.0 %, 32768 bytes)
1369c1369
<    Int32  n2, ret;
---
>    Int32   ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
(84.0 %, 32765 bytes)
1423c1423
<    Int32   n, n2, ret;
---
>    Int32    n2, ret;
1423c1423
<    Int32   n, n2, ret;
---
>    Int32   n, ret;
(84.0 %, 32763 bytes)
1423c1423
<    Int32    n2, ret;
---
>    Int32     ret;
1423c1423
<    Int32    n2, ret;
---
>    Int32    n2;
(84.0 %, 32760 bytes)
1423c1423
<    Int32     ret;
---
>    
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
(84.0 %, 32746 bytes)
1534c1534
<    Int32   n, ret;
---
>    Int32    ret;
1534c1534
<    Int32   n, ret;
---
>    Int32   n;
1896c1896
< Int32   verbosity;
---
> 
(84.0 %, 32744 bytes)
1534c1534
<    Int32    ret;
---
>    
1896c1896
< Int32   verbosity;
---
> 
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(84.0 %, 32731 bytes)
1896c1896
< Int32   verbosity;
---
> 
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
(84.0 %, 32713 bytes)
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode, deleteOutputOnInterrupt;
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, deleteOutputOnInterrupt;
1897c1897
< Bool    keepInputFiles, smallMode, deleteOutputOnInterrupt;
---
> Bool    keepInputFiles, smallMode;
(84.0 %, 32698 bytes)
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool      deleteOutputOnInterrupt;
1897c1897
< Bool     smallMode, deleteOutputOnInterrupt;
---
> Bool     smallMode;
(84.0 %, 32688 bytes)
1897c1897
< Bool      deleteOutputOnInterrupt;
---
> 
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
(84.1 %, 32654 bytes)
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, unzFailsExist, noisy;
1898c1898
< Bool    forceOverwrite, testFailsExist, unzFailsExist, noisy;
---
> Bool    forceOverwrite, unzFailsExist, noisy;
(84.1 %, 32639 bytes)
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool      unzFailsExist, noisy;
1898c1898
< Bool     testFailsExist, unzFailsExist, noisy;
---
> Bool     testFailsExist, noisy;
(84.1 %, 32624 bytes)
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool       noisy;
1898c1898
< Bool      unzFailsExist, noisy;
---
> Bool      unzFailsExist;
(84.1 %, 32610 bytes)
1898c1898
< Bool       noisy;
---
> 
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
(84.1 %, 32593 bytes)
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed, blockSize100k;
1899c1899
< Int32   numFileNames, numFilesProcessed, blockSize100k;
---
> Int32   numFileNames, blockSize100k;
(84.1 %, 32580 bytes)
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32     blockSize100k;
1899c1899
< Int32    numFilesProcessed, blockSize100k;
---
> Int32    numFilesProcessed;
(84.1 %, 32562 bytes)
1899c1899
< Int32     blockSize100k;
---
> 
1900c1900
< Int32   exitValue;
---
> 
(84.1 %, 32538 bytes)
1900c1900
< Int32   exitValue;
---
> 
1912c1912
< Int32   opMode;
---
> 
1913c1913
< Int32   srcMode;
---
> 
(84.1 %, 32520 bytes)
1912c1912
< Int32   opMode;
---
> 
1913c1913
< Int32   srcMode;
---
> 
(84.1 %, 32505 bytes)
1913c1913
< Int32   srcMode;
---
> 
1917c1917
< Int32   longestFileName;
---
> 
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
(84.1 %, 32489 bytes)
1917c1917
< Int32   longestFileName;
---
> 
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
(84.2 %, 32465 bytes)
1918c1918
< Char    inName [FILE_NAME_LEN];
---
> 
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
(84.2 %, 32434 bytes)
1919c1919
< Char    outName[FILE_NAME_LEN];
---
> 
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
(84.2 %, 32403 bytes)
1920c1920
< Char    tmpName[FILE_NAME_LEN];
---
> 
1921c1921
< Char    *progName;
---
> 
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(84.2 %, 32372 bytes)
1921c1921
< Char    *progName;
---
> 
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
(84.2 %, 32354 bytes)
1922c1922
< Char    progNameReally[FILE_NAME_LEN];
---
> 
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
(84.2 %, 32316 bytes)
1923c1923
< FILE    *outputHandleJustInCase;
---
> 
1924c1924
< Int32   workFactor;
---
> 
(84.2 %, 32284 bytes)
1924c1924
< Int32   workFactor;
---
> 
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
(84.3 %, 32265 bytes)
2073,2074c2073
< static 
< struct MY_STAT fileMetaInfo;
---
> 
2090,2091c2090
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
(84.3 %, 32229 bytes)
2089,2090c2089
< Char* zSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { ".bz2", ".bz", ".tbz2", ".tbz" };
---
> 
2091,2092c2091
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32155 bytes)
2090,2091c2090
< Char* unzSuffix[BZ_N_SUFFIX_PAIRS] 
<    = { "", "", ".tar", ".tar" };
---
> 
(84.3 %, 32087 bytes)
===< pass_special :: a >===
===< pass_special :: b >===
===< pass_special :: c >===
===< pass_ternary :: c >===
311c311
< #define BZ_RAND_MASK ((s->rNToGo == 1) ? 1 : 0)
---
> #define BZ_RAND_MASK (0)
(84.4 %, 32064 bytes)
===< pass_clang :: union-to-struct >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: remove-unused-function >===
253c253
< extern void BZ2_bz__AssertH__fail ( int errcode );
---
> 
1031,1032c1031
< void BZ2_bz__AssertH__fail ( int errcode )
< ;
---
> 
628,629c628
< extern Int32 
< BZ2_decompress ( DState* );
---
> 
1012,1013c1011
< Int32 BZ2_decompress ( DState* s )
< ;
---
> 
893,903c893
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
(84.4 %, 31970 bytes)
628,629c628
< extern Int32 
< BZ2_decompress ( DState* );
---
> 
1012,1013c1011
< Int32 BZ2_decompress ( DState* s )
< ;
---
> 
893,903c893
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
(84.4 %, 31893 bytes)
892,902c892
< static
< void makeMaps_e ( EState* s )
< {
<    Int32 i;
<    s->nInUse = 0;
<    for (i = 0; i < 256; i++)
<       if (s->inUse[i]) {
<          s->unseqToSeq[i] = s->nInUse;
<          s->nInUse++;
<       }
< }
---
> 
906,913d905
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
915,963d906
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
(84.5 %, 31700 bytes)
896,903d895
< static
< void generateMTFValues ( EState* s )
< {
<    UChar   yy[256];
<    Int32   i, j;
<    Int32   zPend;
<    Int32   wr;
<    Int32   EOB;
905,953d896
<    
<    UInt32* ptr   = s->ptr;
<    UChar* block  = s->block;
<    UInt16* mtfv  = s->mtfv;
< 
<    ;
<    EOB = s->nInUse+1;
< 
<    for (i = 0; i <= EOB; i++) s->mtfFreq[i] = 0;
< 
<    wr = 0;
<    zPend = 0;
<    for (i = 0; i < s->nInUse; i++) yy[i] = (UChar) i;
< 
<    for (i = 0; i < s->nblock; i++) {
<       UChar ll_i;
<       AssertD ( wr <= i, "generateMTFValues(1)" );
<       j = ptr[i]-1; if (j < 0) j += s->nblock;
<       ll_i = s->unseqToSeq[block[j]];
<       AssertD ( ll_i < s->nInUse, "generateMTFValues(2a)" );
< 
<       if (yy[0] == ll_i) { 
<          zPend++;
<       } else {
< 
<          if (zPend > 0) 
<          {
<             register UChar  rtmp;
<             register UChar* ryy_j;
<             register UChar  rll_i;
<             rtmp  = yy[1];
<             yy[1] = yy[0];
<             ryy_j = &(yy[1]);
<             rll_i = ll_i;
<             while ( rll_i != rtmp ) ;
<             yy[0] = rtmp;
<             j = ryy_j - &(yy[0]);
<             mtfv[wr] = j+1; wr++; s->mtfFreq[j+1]++;
<          }
< 
<       }
<    }
< 
<    if (zPend > 0) 
< 
<    mtfv[wr] = EOB; wr++; s->mtfFreq[EOB]++;
< 
<    s->nMTF = wr;
< }
1023,1025c1023
< static
< int bz_config_ok ( void )
< ;
---
> 
(85.1 %, 30495 bytes)
966,968c966
< static
< int bz_config_ok ( void )
< ;
---
> 
982,984c982
< static
< void prepare_new_block ( EState* s )
< ;
---
> 
(85.1 %, 30461 bytes)
980,982c980
< static
< void prepare_new_block ( EState* s )
< ;
---
> 
986,988c986
< static
< void init_RL ( EState* s )
< ;
---
> 
(85.2 %, 30416 bytes)
984,986c984
< static
< void init_RL ( EState* s )
< ;
---
> 
989,991c989
< static
< Bool isempty_RL ( EState* s )
< ;
---
> 
(85.2 %, 30381 bytes)
987,989c987
< static
< Bool isempty_RL ( EState* s )
< ;
---
> 
1075,1077c1075
< static
< Bool handle_compress ( bz_stream* strm )
< ;
---
> 
(85.2 %, 30343 bytes)
1073,1075c1073
< static
< Bool handle_compress ( bz_stream* strm )
< ;
---
> 
1159,1161c1159
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
---
> 
(85.2 %, 30294 bytes)
1157,1159c1157
< static
< void unRLE_obuf_to_output_FAST ( DState* s )
< ;
---
> 
1168,1170c1168
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
---
> 
(85.2 %, 30241 bytes)
1166,1168c1166
< static
< void unRLE_obuf_to_output_SMALL ( DState* s )
< ;
---
> 
(85.3 %, 30187 bytes)
===< pass_clang :: remove-unused-field >===
365c365
<       UInt32   avail_in_expect;
---
>       
371c371
<       Int32    origPtr;
---
>       
(85.3 %, 30162 bytes)
371c371
<       Int32    origPtr;
---
>       
383c383
<       UInt32   state_in_ch;
---
>       
(85.3 %, 30145 bytes)
383c383
<       UInt32   state_in_ch;
---
>       
384c384
<       Int32    state_in_len;
---
>       
(85.3 %, 30124 bytes)
384c384
<       Int32    state_in_len;
---
>       
388c388
<       Int32    nblock;
---
>       
(85.3 %, 30102 bytes)
388c388
<       Int32    nblock;
---
>       
390c390
<       Int32    numZ;
---
>       
(85.3 %, 30086 bytes)
390c390
<       Int32    numZ;
---
>       
391c391
<       Int32    state_out_pos;
---
>       
(85.3 %, 30072 bytes)
391c391
<       Int32    state_out_pos;
---
>       
394c394
<       Int32    nInUse;
---
>       
(85.3 %, 30049 bytes)
394c394
<       Int32    nInUse;
---
>       
395c395
<       Bool     inUse[256];
---
>       
(85.3 %, 30033 bytes)
395c395
<       Bool     inUse[256];
---
>       
396c396
<       UChar    unseqToSeq[256];
---
>       
(85.4 %, 30013 bytes)
396c396
<       UChar    unseqToSeq[256];
---
>       
399c399
<       UInt32   bsBuff;
---
>       
(85.4 %, 29988 bytes)
399c399
<       UInt32   bsBuff;
---
>       
400c400
<       Int32    bsLive;
---
>       
403c403
<       UInt32   blockCRC;
---
>       
(85.4 %, 29972 bytes)
400c400
<       Int32    bsLive;
---
>       
403c403
<       UInt32   blockCRC;
---
>       
(85.4 %, 29956 bytes)
403c403
<       UInt32   blockCRC;
---
>       
412c412
<       Int32    nMTF;
---
>       
(85.4 %, 29938 bytes)
412c412
<       Int32    nMTF;
---
>       
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       
(85.4 %, 29924 bytes)
413c413
<       Int32    mtfFreq    [BZ_MAX_ALPHA_SIZE];
---
>       
414c414
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       
(85.4 %, 29884 bytes)
414c414
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       
415c415
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       
417c417
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(85.4 %, 29845 bytes)
415c415
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       
417c417
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(85.5 %, 29806 bytes)
417c417
<       UChar    len     [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
418c418
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(85.5 %, 29756 bytes)
418c418
<       Int32    code    [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(85.5 %, 29706 bytes)
419c419
<       Int32    rfreq   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       
509c509
<       UChar    state_out_ch;
---
>       
(85.5 %, 29656 bytes)
421c421
<       UInt32   len_pack[BZ_MAX_ALPHA_SIZE][4];
---
>       
509c509
<       UChar    state_out_ch;
---
>       
(85.5 %, 29616 bytes)
509c509
<       UChar    state_out_ch;
---
>       
510c510
<       Int32    state_out_len;
---
>       
(85.6 %, 29594 bytes)
510c510
<       Int32    state_out_len;
---
>       
511c511
<       Bool     blockRandomised;
---
>       
(85.6 %, 29571 bytes)
511c511
<       Bool     blockRandomised;
---
>       
519c519
<       Int32    blockSize100k;
---
>       
(85.6 %, 29546 bytes)
519c519
<       Int32    blockSize100k;
---
>       
525c525
<       Int32    origPtr;
---
>       
(85.6 %, 29523 bytes)
525c525
<       Int32    origPtr;
---
>       
526c526
<       UInt32   tPos;
---
>       
(85.6 %, 29506 bytes)
526c526
<       UInt32   tPos;
---
>       
527c527
<       Int32    k0;
---
>       
(85.6 %, 29492 bytes)
527c527
<       Int32    k0;
---
>       
528c528
<       Int32    unzftab[256];
---
>       
(85.6 %, 29480 bytes)
528c528
<       Int32    unzftab[256];
---
>       
529c529
<       Int32    nblock_used;
---
>       
(85.6 %, 29458 bytes)
529c529
<       Int32    nblock_used;
---
>       
530c530
<       Int32    cftab[257];
---
>       
531c531
<       Int32    cftabCopy[257];
---
>       
(85.6 %, 29437 bytes)
sh: 0: getcwd() failed: No such file or directory
530c530
<       Int32    cftab[257];
---
>       
531c531
<       Int32    cftabCopy[257];
---
>       
(85.6 %, 29417 bytes)
531c531
<       Int32    cftabCopy[257];
---
>       
541c541
<       UInt32   storedBlockCRC;
---
>       
(85.7 %, 29393 bytes)
541c541
<       UInt32   storedBlockCRC;
---
>       
542c542
<       UInt32   storedCombinedCRC;
---
>       
(85.7 %, 29369 bytes)
542c542
<       UInt32   storedCombinedCRC;
---
>       
543c543
<       UInt32   calculatedBlockCRC;
---
>       
(85.7 %, 29342 bytes)
543c543
<       UInt32   calculatedBlockCRC;
---
>       
547c547
<       Int32    nInUse;
---
>       
(85.7 %, 29314 bytes)
547c547
<       Int32    nInUse;
---
>       
548c548
<       Bool     inUse[256];
---
>       
(85.7 %, 29298 bytes)
548c548
<       Bool     inUse[256];
---
>       
549c549
<       Bool     inUse16[16];
---
>       
(85.7 %, 29278 bytes)
549c549
<       Bool     inUse16[16];
---
>       
550c550
<       UChar    seqToUnseq[256];
---
>       
(85.7 %, 29257 bytes)
550c550
<       UChar    seqToUnseq[256];
---
>       
553c553
<       UChar    mtfa   [MTFA_SIZE];
---
>       
(85.7 %, 29232 bytes)
553c553
<       UChar    mtfa   [MTFA_SIZE];
---
>       
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       
(85.7 %, 29204 bytes)
554c554
<       Int32    mtfbase[256 / MTFL_SIZE];
---
>       
555c555
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       
556c556
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       
(85.8 %, 29170 bytes)
555c555
<       UChar    selector   [BZ_MAX_SELECTORS];
---
>       
556c556
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       
(85.8 %, 29131 bytes)
556c556
<       UChar    selectorMtf[BZ_MAX_SELECTORS];
---
>       
557c557
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(85.8 %, 29092 bytes)
557c557
<       UChar    len  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(85.8 %, 29045 bytes)
559c559
<       Int32    limit  [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
560c560
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(85.9 %, 28996 bytes)
560c560
<       Int32    base   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
(85.9 %, 28947 bytes)
561c561
<       Int32    perm   [BZ_N_GROUPS][BZ_MAX_ALPHA_SIZE];
---
>       
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>       
(85.9 %, 28898 bytes)
562c562
<       Int32    minLens[BZ_N_GROUPS];
---
>       
565c565
<       Int32    save_i;
---
>       
(85.9 %, 28868 bytes)
565c565
<       Int32    save_i;
---
>       
566c566
<       Int32    save_j;
---
>       
(85.9 %, 28852 bytes)
566c566
<       Int32    save_j;
---
>       
567c567
<       Int32    save_t;
---
>       
(85.9 %, 28836 bytes)
567c567
<       Int32    save_t;
---
>       
568c568
<       Int32    save_alphaSize;
---
>       
(85.9 %, 28820 bytes)
568c568
<       Int32    save_alphaSize;
---
>       
569c569
<       Int32    save_nGroups;
---
>       
570c570
<       Int32    save_nSelectors;
---
>       
(85.9 %, 28796 bytes)
569c569
<       Int32    save_nGroups;
---
>       
570c570
<       Int32    save_nSelectors;
---
>       
571c571
<       Int32    save_EOB;
---
>       
(86.0 %, 28774 bytes)
570c570
<       Int32    save_nSelectors;
---
>       
571c571
<       Int32    save_EOB;
---
>       
(86.0 %, 28749 bytes)
571c571
<       Int32    save_EOB;
---
>       
572c572
<       Int32    save_groupNo;
---
>       
(86.0 %, 28731 bytes)
572c572
<       Int32    save_groupNo;
---
>       
573c573
<       Int32    save_groupPos;
---
>       
(86.0 %, 28709 bytes)
573c573
<       Int32    save_groupPos;
---
>       
574c574
<       Int32    save_nextSym;
---
>       
(86.0 %, 28686 bytes)
574c574
<       Int32    save_nextSym;
---
>       
575c575
<       Int32    save_nblockMAX;
---
>       
(86.0 %, 28664 bytes)
575c575
<       Int32    save_nblockMAX;
---
>       
576c576
<       Int32    save_nblock;
---
>       
(86.0 %, 28640 bytes)
576c576
<       Int32    save_nblock;
---
>       
577c577
<       Int32    save_es;
---
>       
(86.0 %, 28619 bytes)
577c577
<       Int32    save_es;
---
>       
578c578
<       Int32    save_N;
---
>       
(86.0 %, 28602 bytes)
578c578
<       Int32    save_N;
---
>       
579c579
<       Int32    save_curr;
---
>       
(86.1 %, 28586 bytes)
579c579
<       Int32    save_curr;
---
>       
580c580
<       Int32    save_zt;
---
>       
(86.1 %, 28567 bytes)
580c580
<       Int32    save_zt;
---
>       
581c581
<       Int32    save_zn; 
---
>        
(86.1 %, 28550 bytes)
581c581
<       Int32    save_zn; 
---
>        
582c582
<       Int32    save_zvec;
---
>       
(86.1 %, 28533 bytes)
582c582
<       Int32    save_zvec;
---
>       
583c583
<       Int32    save_zj;
---
>       
(86.1 %, 28514 bytes)
583c583
<       Int32    save_zj;
---
>       
584c584
<       Int32    save_gSel;
---
>       
(86.1 %, 28497 bytes)
584c584
<       Int32    save_gSel;
---
>       
585c585
<       Int32    save_gMinlen;
---
>       
(86.1 %, 28478 bytes)
585c585
<       Int32    save_gMinlen;
---
>       
586c586
<       Int32*   save_gLimit;
---
>       
(86.1 %, 28456 bytes)
586c586
<       Int32*   save_gLimit;
---
>       
587c587
<       Int32*   save_gBase;
---
>       
(86.1 %, 28435 bytes)
587c587
<       Int32*   save_gBase;
---
>       
588c588
<       Int32*   save_gPerm;
---
>       
(86.1 %, 28415 bytes)
588c588
<       Int32*   save_gPerm;
---
>       
1215c1215
<       FILE*     handle;
---
>       
(86.1 %, 28395 bytes)
1215c1215
<       FILE*     handle;
---
>       
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: remove-pointer >===
===< pass_clang :: simplify-struct >===
===< pass_clang :: simplify-recursive-template-instantiation >===
===< pass_special :: b >===
===< pass_ints :: b >===
===< pass_clex :: rm-toks-13 >===
9,13c9
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
---
> BZ_FINISH            2
9,13c9
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
---
> #2
9,15c9
< #define _BZLIB_H
< 
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
---
> #define #define BZ_OK                0
11,15c11
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
---
> define BZ_OK                0
11,15c11
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
---
> #BZ_OK                0
11,15c11
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
---
> #define 0
11,16c11
< #define BZ_RUN               0
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define BZ_RUN               #define BZ_RUN_OK            1
12,16c12
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> define BZ_RUN_OK            1
12,16c12
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #BZ_RUN_OK            1
12,16c12
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
---
> #define 1
12,17c12
< #define BZ_FLUSH             1
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> #define BZ_FLUSH             #define BZ_FLUSH_OK          2
13,17c13
< #define BZ_FINISH            2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> define BZ_FLUSH_OK          2
(86.2 %, 28287 bytes)
9,14c9
< #2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> ##define BZ_FINISH_OK         3
11,14c11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> define BZ_FINISH_OK         3
11,14c11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #BZ_FINISH_OK         3
11,14c11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define 3
11,15c11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define BZ_OK                #define BZ_STREAM_END        4
12,15c12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
12,15c12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #BZ_STREAM_END        4
12,15c12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
---
> #define 4
12,16c12
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_RUN_OK            #define BZ_SEQUENCE_ERROR    (-1)
13,16c13
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> define BZ_SEQUENCE_ERROR    (-1)
13,16c13
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #BZ_SEQUENCE_ERROR    (-1)
13,16c13
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define (-1)
13,16c13
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_FLUSH_OK          -1)
14,16c14
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> 1)
14,16c14
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #)
14,17c14
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define #define BZ_PARAM_ERROR       (-2)
14,17c14
< #define BZ_FINISH_OK         3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_FINISH_OK         define BZ_PARAM_ERROR       (-2)
15,17c15
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> BZ_PARAM_ERROR       (-2)
15,17c15
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #(-2)
15,17c15
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define -2)
15,17c15
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_STREAM_END        2)
16,17c16
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> )
16,18c16
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> ##define BZ_MEM_ERROR         (-3)
16,18c16
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define define BZ_MEM_ERROR         (-3)
16,18c16
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_SEQUENCE_ERROR    BZ_MEM_ERROR         (-3)
16,18c16
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_SEQUENCE_ERROR    ((-3)
16,18c16
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_SEQUENCE_ERROR    (--3)
16,18c16
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> #define BZ_SEQUENCE_ERROR    (-13)
17,18c17
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
---
> )
17,19c17
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> ##define BZ_DATA_ERROR        (-4)
17,19c17
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define define BZ_DATA_ERROR        (-4)
17,19c17
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_PARAM_ERROR       BZ_DATA_ERROR        (-4)
17,19c17
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_PARAM_ERROR       ((-4)
17,19c17
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_PARAM_ERROR       (--4)
17,19c17
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> #define BZ_PARAM_ERROR       (-24)
18,19c18
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
---
> )
18,20c18
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> ##define BZ_DATA_ERROR_MAGIC  (-5)
18,20c18
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define define BZ_DATA_ERROR_MAGIC  (-5)
18,20c18
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
18,20c18
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_MEM_ERROR         ((-5)
18,20c18
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_MEM_ERROR         (--5)
18,20c18
< #define BZ_MEM_ERROR         (-3)
< #define BZ_DATA_ERROR        (-4)
< #define BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_MEM_ERROR         (-35)
(86.2 %, 28240 bytes)
18,20c18
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_MEM_ERROR         define BZ_UNEXPECTED_EOF    (-7)
18,20c18
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  BZ_UNEXPECTED_EOF    (-7)
18,20c18
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  ((-7)
18,20c18
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (--7)
18,20c18
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-57)
19,20c19
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> )
19,21c19
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> ##define BZ_OUTBUFF_FULL      (-8)
19,21c19
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define define BZ_OUTBUFF_FULL      (-8)
19,21c19
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_IO_ERROR          BZ_OUTBUFF_FULL      (-8)
19,21c19
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_IO_ERROR          ((-8)
19,21c19
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_IO_ERROR          (--8)
19,21c19
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_IO_ERROR          (-68)
20,21c20
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> )
20,22c20
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> ##define BZ_CONFIG_ERROR      (-9)
20,22c20
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define define BZ_CONFIG_ERROR      (-9)
20,22c20
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    BZ_CONFIG_ERROR      (-9)
20,22c20
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    ((-9)
20,22c20
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    (--9)
20,22c20
< #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_UNEXPECTED_EOF    (-79)
21,22c21
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
---
> )
21,24c21
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #typedef 
21,25c21
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define struct {
21,25c21
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_OUTBUFF_FULL      {
21,26c21
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      (char *next_in;
21,26c21
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      (-*next_in;
21,26c21
< #define BZ_OUTBUFF_FULL      (-8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_OUTBUFF_FULL      (-8next_in;
22,26c22
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> ;
22,27c22
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #unsigned int avail_in;
22,27c22
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define int avail_in;
22,27c22
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      avail_in;
22,27c22
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      (;
22,28c22
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-unsigned int total_in_lo32;
22,28c22
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-9int total_in_lo32;
24,28c24
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> total_in_lo32;
25,28c25
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    ;
25,29c25
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>    struct unsigned int total_in_hi32;
26,29c26
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       int total_in_hi32;
26,29c26
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char total_in_hi32;
26,29c26
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char *;
26,31c26
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       char *next_inchar *next_out;
27,31c27
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       *next_out;
27,31c27
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned next_out;
27,31c27
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned int ;
27,32c27
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int avail_inunsigned int avail_out;
28,32c28
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       int avail_out;
28,32c28
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned avail_out;
28,32c28
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int ;
28,33c28
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int total_in_lo32unsigned int total_out_lo32;
29,33c29
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       int total_out_lo32;
29,33c29
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned total_out_lo32;
29,33c29
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int ;
29,34c29
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       unsigned int total_in_hi32unsigned int total_out_hi32;
31,34c31
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       int total_out_hi32;
31,34c31
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char total_out_hi32;
31,34c31
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char *;
31,36c31
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       char *next_outvoid *state;
32,36c32
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       *state;
32,36c32
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned state;
32,36c32
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned int ;
32,38c32
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int avail_outvoid *(*bzalloc)(void *,int,int);
33,38c33
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       *(*bzalloc)(void *,int,int);
33,38c33
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned (*bzalloc)(void *,int,int);
33,38c33
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int *bzalloc)(void *,int,int);
33,38c33
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_lo32bzalloc)(void *,int,int);
34,38c34
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       )(void *,int,int);
34,38c34
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned (void *,int,int);
34,38c34
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int void *,int,int);
34,38c34
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_hi32*,int,int);
36,38c36
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       ,int,int);
36,38c36
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void int,int);
36,38c36
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *,int);
36,38c36
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *stateint);
38c38
<       void *(*bzalloc)(void *,int,int);
---
>       );
38c38
<       void *(*bzalloc)(void *,int,int);
---
>       void ;
38,39c38
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *void (*bzfree)(void *,void *);
38,39c38
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *((*bzfree)(void *,void *);
38,39c38
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(**bzfree)(void *,void *);
38,39c38
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzallocbzfree)(void *,void *);
38,39c38
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc))(void *,void *);
38,39c38
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)((void *,void *);
38,39c38
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void void *,void *);
38,39c38
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void **,void *);
38,39c38
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,,void *);
38,39c38
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,intvoid *);
38,39c38
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,*);
39d38
<       void (*bzfree)(void *,void *);
39d38
<       void (*bzfree)(void *,void *);
39d38
<       void (*bzfree)(void *,void *);
39d38
<       void (*bzfree)(void *,void *);
39,40c39
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (opaque;
39,40c39
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*;
39,41c39
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>       void (*bzfree} 
39,42c39
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bzfree)bz_stream;
39,42c39
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bzfree)(;
39,46c39
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void #include <stdio.h>
39,46c39
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *include <stdio.h>
39,46c39
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,<stdio.h>
39,46c39
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void stdio.h>
39,46c39
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void *.h>
39,46c39
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void *)h>
40,46c40
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       >
40,48c40
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void #   define BZ_API(func) func
40,48c40
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *define BZ_API(func) func
40,48c40
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *opaqueBZ_API(func) func
41,48c41
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    (func) func
42,48c42
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    func) func
42,48c42
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_stream) func
46,48c46
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> func
46,49c46
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> ##   define BZ_EXTERN extern
46,49c46
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include define BZ_EXTERN extern
46,49c46
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <BZ_EXTERN extern
46,49c46
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdioextern
46,54c46
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <stdio.BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
46,54c46
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #include <stdio.hint BZ_API(BZ2_bzCompressInit) ( 
48,54c48
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> BZ_API(BZ2_bzCompressInit) ( 
48,54c48
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   (BZ2_bzCompressInit) ( 
48,54c48
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ2_bzCompressInit) ( 
48,54c48
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_API) ( 
48,54c48
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
---
> #   define BZ_API(( 
48,55c48
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_API(funcbz_stream* strm, 
48,55c48
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   define BZ_API(func) * strm, 
49,55c49
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> strm, 
49,55c49
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
---
> #   , 
49,56c49
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   define int        blockSize100k, 
49,56c49
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> #   define BZ_EXTERN blockSize100k, 
54,56c54
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
---
> , 
54,57c54
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> BZ_EXTERN int        verbosity, 
54,57c54
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> BZ_EXTERN int verbosity, 
54,57c54
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
---
> BZ_EXTERN int BZ_API, 
54,58c54
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> BZ_EXTERN int BZ_API(int        workFactor 
54,58c54
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
54,59c54
< BZ_EXTERN int BZ_API(BZ2_bzCompressInit) ( 
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzCompressInit) );
55,59c55
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
---
>       ;
55,61c55
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_streamBZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
55,61c55
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_stream* int BZ_API(BZ2_bzCompress) ( 
55,61c55
<       bz_stream* strm, 
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       bz_stream* strmBZ_API(BZ2_bzCompress) ( 
56,61c56
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       (BZ2_bzCompress) ( 
56,61c56
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int        BZ2_bzCompress) ( 
56,61c56
<       int        blockSize100k, 
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       int        blockSize100k) ( 
57,61c57
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
---
>       ( 
57,62c57
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>       int        bz_stream* strm, 
57,62c57
<       int        verbosity, 
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>       int        verbosity* strm, 
58,62c58
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>       strm, 
58,62c58
<       int        workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
---
>       int        , 
(86.3 %, 28132 bytes)
55,59c55
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
---
>    int action 
55,59c55
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
---
>    )action 
57,60c57
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
---
> );
57,60c57
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
---
> BZ_EXTERN ;
57,62c57
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
57,62c57
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_APIint BZ_API(BZ2_bzCompressEnd) ( 
57,62c57
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ_API(BZ2_bzCompressEnd) ( 
57,62c57
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress(BZ2_bzCompressEnd) ( 
57,62c57
< BZ_EXTERN int BZ_API(BZ2_bzCompress) ( 
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
> BZ_EXTERN int BZ_API(BZ2_bzCompress) BZ2_bzCompressEnd) ( 
58,62c58
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>       ) ( 
58,62c58
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
---
>       bz_stream( 
58,63c58
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
---
>       bz_stream* bz_stream* strm 
58,63c58
<       bz_stream* strm, 
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
---
>       bz_stream* strm* strm 
59,63c59
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
---
>       strm 
59,64c59
<       int action 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
---
>       int );
(86.3 %, 28056 bytes)
57,63c57
< BZ_EXTERN ;
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
59,63c59
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> int BZ_API(BZ2_bzDecompressInit) ( 
59,63c59
< BZ_EXTERN int BZ_API(BZ2_bzCompressEnd) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzDecompressInit) ( 
(86.4 %, 27973 bytes)
59,62c59
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
---
> int       small
59,62c59
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
---
> int small
59,63c59
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
> int BZ_API);
59,63c59
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
---
> int BZ_API(;
59,65c59
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> int BZ_API(BZ2_bzDecompressInitBZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
59,65c59
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
> int BZ_API(BZ2_bzDecompressInit) int BZ_API(BZ2_bzDecompress) ( 
60,65c60
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       BZ_API(BZ2_bzDecompress) ( 
60,65c60
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream (BZ2_bzDecompress) ( 
60,65c60
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream *BZ2_bzDecompress) ( 
60,65c60
<       bz_stream *strm, 
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       bz_stream *strm) ( 
61,65c61
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
---
>       ( 
61,66c61
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>       int       bz_stream* strm 
61,66c61
<       int       verbosity, 
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>       int       verbosity* strm 
62,66c62
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
---
>       strm 
62,67c62
<       int       small
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
>       int       );
63,67c63
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
---
>    ;
63,69c63
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>    )BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
65,69c65
< BZ_EXTERN int BZ_API(BZ2_bzDecompress) ( 
<       bz_stream* strm 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> int BZ_API(BZ2_bzDecompressEnd) ( 
(86.4 %, 27892 bytes)
62,66c62
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
---
>       int       ;
62,72c62
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       int       )#define BZ_MAX_UNUSED 5000
64,72c64
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
64,72c64
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN BZ_MAX_UNUSED 5000
64,72c64
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> BZ_EXTERN int 5000
64,74c64
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_APItypedef void BZFILE;
64,74c64
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API(void BZFILE;
64,74c64
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEndBZFILE;
64,74c64
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ;
65,76c65
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
65,76c65
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       bz_stream BZFILE* BZ_API(BZ2_bzReadOpen) ( 
65,76c65
<       bz_stream *strm 
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       bz_stream ** BZ_API(BZ2_bzReadOpen) ( 
66,76c66
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>    BZ_API(BZ2_bzReadOpen) ( 
66,76c66
<    );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>    )(BZ2_bzReadOpen) ( 
72,76c72
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ2_bzReadOpen) ( 
72,76c72
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #) ( 
72,76c72
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define ( 
72,77c72
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> #define BZ_MAX_UNUSED int*  bzerror,   
74,77c74
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> *  bzerror,   
74,77c74
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef bzerror,   
74,77c74
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void ,   
74,78c74
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> typedef void BZFILEFILE* f, 
76,78c76
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> * f, 
76,78c76
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN f, 
76,78c76
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE, 
76,79c76
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* int   verbosity, 
76,79c76
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIverbosity, 
76,79c76
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(, 
76,80c76
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpenint   small,
76,80c76
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) small,
77,80c77
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       ,
77,81c77
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       intvoid* unused,    
77,81c77
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  * unused,    
77,81c77
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  bzerrorunused,    
78,81c78
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       ,    
78,82c78
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILEint   nUnused 
78,82c78
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* nUnused 
78,83c78
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       FILE* f);
79,83c79
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       ;
79,85c79
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
79,85c79
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   verbosityvoid BZ_API(BZ2_bzReadClose) ( 
80,85c80
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       BZ_API(BZ2_bzReadClose) ( 
80,85c80
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   (BZ2_bzReadClose) ( 
80,85c80
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       int   smallBZ2_bzReadClose) ( 
81,85c81
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       ) ( 
81,85c81
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
---
>       void( 
81,86c81
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       void* int*    bzerror, 
81,86c81
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       void* unused*    bzerror, 
82,86c82
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       bzerror, 
82,86c82
<       int   nUnused 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
---
>       int   , 
83,87c83
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>    BZFILE* b 
83,87c83
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
>    )* b 
85,87c85
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
---
> b 
85,88c85
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN );
85,88c85
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
---
> BZ_EXTERN void ;
85,90c85
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_APIBZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
85,90c85
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(void BZ_API(BZ2_bzReadGetUnused) ( 
85,90c85
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadCloseBZ_API(BZ2_bzReadGetUnused) ( 
85,90c85
< BZ_EXTERN void BZ_API(BZ2_bzReadClose) ( 
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadClose) (BZ2_bzReadGetUnused) ( 
86,90c86
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ2_bzReadGetUnused) ( 
86,90c86
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int) ( 
86,90c86
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int*    ( 
86,91c86
<       int*    bzerror, 
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       int*    bzerrorint*    bzerror, 
87,91c87
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       *    bzerror, 
87,91c87
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       BZFILEbzerror, 
87,91c87
<       BZFILE* b 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>       BZFILE* , 
(86.4 %, 27820 bytes)
85,89c85
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void * b, 
87,89c87
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> b, 
87,89c87
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN , 
87,90c87
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void void**  unused,  
87,90c87
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API**  unused,  
87,90c87
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(*  unused,  
87,90c87
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedunused,  
87,90c87
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ,  
88,90d87
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
88,90d87
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
88,90d87
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
88,92c88
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       int*    bzerror);
89,92c89
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       ;
89,94c89
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILEBZ_EXTERN int BZ_API(BZ2_bzRead) ( 
89,94c89
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILE* int BZ_API(BZ2_bzRead) ( 
89,94c89
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILE* bBZ_API(BZ2_bzRead) ( 
90,94c90
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       (BZ2_bzRead) ( 
90,94c90
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       voidBZ2_bzRead) ( 
90,94c90
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void*) ( 
90,94c90
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  ( 
90,95c90
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       void**  unusedint*    bzerror, 
91,95c91
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       *    bzerror, 
91,95c91
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       intbzerror, 
91,95c91
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       int*    , 
92,96c92
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    BZFILE* b, 
92,96c92
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )* b, 
94,96c94
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> b, 
94,96c94
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN , 
94,97c94
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int void*   buf, 
94,97c94
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API*   buf, 
94,97c94
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(buf, 
94,97c94
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead, 
94,98c94
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) int     len 
95,98c95
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       len 
95,99c95
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int);
95,99c95
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int*    ;
95,101c95
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int*    bzerrorBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
96,101c96
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
96,101c96
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
96,101c96
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
96,101c96
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* b(BZ2_bzWriteOpen) ( 
97,101c97
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ2_bzWriteOpen) ( 
97,101c97
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void) ( 
97,101c97
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   ( 
97,102c97
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       void*   bufint*  bzerror,      
98,102c98
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       *  bzerror,      
98,102c98
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       int     bzerror,      
99,102c99
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    ,      
99,103c99
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
>    )FILE* f, 
101,103c101
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> * f, 
101,103c101
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN f, 
101,103c101
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE, 
101,104c101
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* int   blockSize100k, 
101,104c101
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_APIblockSize100k, 
101,104c101
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(, 
101,105c101
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenint   verbosity, 
101,105c101
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) verbosity, 
102,105c102
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       , 
102,106c102
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       intint   workFactor 
102,106c102
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  workFactor 
102,107c102
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int*  bzerror);
103,107c103
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
103,109c103
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILEBZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
103,109c103
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILE* void BZ_API(BZ2_bzWrite) ( 
103,109c103
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILE* fBZ_API(BZ2_bzWrite) ( 
104,109c104
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       (BZ2_bzWrite) ( 
104,109c104
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   BZ2_bzWrite) ( 
104,109c104
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   blockSize100k) ( 
105,109c105
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       ( 
105,110c105
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   int*    bzerror, 
105,110c105
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   verbosity*    bzerror, 
106,110c106
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       bzerror, 
106,110c106
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   , 
107,111c107
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    BZFILE* b, 
107,111c107
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )* b, 
109,111c109
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> b, 
109,111c109
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN , 
109,112c109
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void void*   buf, 
109,112c109
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API*   buf, 
109,112c109
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(buf, 
109,112c109
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite, 
109,113c109
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) int     len 
110,113c110
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       len 
110,114c110
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int);
110,114c110
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int*    ;
110,116c110
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int*    bzerrorBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
111,116c111
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void BZ_API(BZ2_bzWriteClose) ( 
111,116c111
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILEBZ_API(BZ2_bzWriteClose) ( 
111,116c111
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* (BZ2_bzWriteClose) ( 
111,116c111
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* bBZ2_bzWriteClose) ( 
112,116c112
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       ) ( 
112,116c112
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void( 
112,117c112
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       void*   int*          bzerror, 
112,117c112
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       void*   buf*          bzerror, 
113,117c113
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       bzerror, 
113,117c113
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       int     , 
114,118c114
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    BZFILE*       b, 
114,118c114
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )*       b, 
116,118c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> b, 
116,118c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN , 
116,119c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void int           abandon, 
116,119c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIabandon, 
116,119c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(, 
116,120c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseunsigned int* nbytes_in, 
116,120c116
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) int* nbytes_in, 
117,120c117
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       * nbytes_in, 
117,120c117
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       intnbytes_in, 
117,120c117
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          , 
117,121c117
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int*          bzerrorunsigned int* nbytes_out 
118,121c118
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
118,121c118
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE* nbytes_out 
118,121c118
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       nbytes_out 
118,122c118
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       BZFILE*       b);
119,122c119
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       ;
119,124c119
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
119,124c119
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           abandonvoid BZ_API(BZ2_bzWriteClose64) ( 
120,124c120
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ_API(BZ2_bzWriteClose64) ( 
120,124c120
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned (BZ2_bzWriteClose64) ( 
120,124c120
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ2_bzWriteClose64) ( 
120,124c120
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* ) ( 
120,124c120
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_in( 
121,124d120
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
121,125c121
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned *          bzerror, 
121,125c121
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned intbzerror, 
121,125c121
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* , 
122,126c122
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    BZFILE*       b, 
122,126c122
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )*       b, 
124,126c124
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> b, 
124,126c124
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN , 
124,127c124
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void int           abandon, 
124,127c124
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIabandon, 
124,127c124
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(, 
124,128c124
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64unsigned int* nbytes_in_lo32, 
124,128c124
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) int* nbytes_in_lo32, 
125,128c125
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       * nbytes_in_lo32, 
125,128c125
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       intnbytes_in_lo32, 
125,128c125
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          , 
125,129c125
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int*          bzerrorunsigned int* nbytes_in_hi32, 
126,129c126
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
126,129c126
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE* nbytes_in_hi32, 
126,129c126
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       nbytes_in_hi32, 
127,129d126
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
127,129d126
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
127,130c127
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           int* nbytes_out_lo32, 
127,130c127
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           abandon* nbytes_out_lo32, 
128,130c128
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       nbytes_out_lo32, 
128,130c128
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned , 
128,131c128
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intunsigned int* nbytes_out_hi32
128,131c128
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* int* nbytes_out_hi32
128,131c128
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_lo32* nbytes_out_hi32
129,131c129
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       nbytes_out_hi32
129,132c129
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned );
129,132c129
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int;
129,137c129
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
129,137c129
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_in_hi32int BZ_API(BZ2_bzBuffToBuffCompress) ( 
130,137c130
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffCompress) ( 
130,137c130
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned (BZ2_bzBuffToBuffCompress) ( 
130,137c130
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ2_bzBuffToBuffCompress) ( 
130,137c130
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* ) ( 
130,137c130
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32( 
131,137d130
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
131,138c131
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned *         dest, 
131,138c131
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned intdest, 
131,138c131
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* , 
132,139c132
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    unsigned int* destLen,
132,139c132
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )int* destLen,
137,139c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> * destLen,
137,139c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN destLen,
137,139c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int ,
137,140c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIchar*         source, 
137,140c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(*         source, 
137,140c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompresssource, 
137,140c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) , 
138,140d137
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
138,141c138
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charint  sourceLen,
138,141c138
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceLen,
138,141c138
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         dest,
139,141d138
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
139,142c139
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned blockSize100k, 
139,142c139
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int, 
139,143c139
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* int           verbosity, 
139,143c139
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* destLenverbosity, 
140,143c140
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       , 
140,144c140
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       charint           workFactor 
140,144c140
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         workFactor 
140,145c140
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       char*         source);
141,145c141
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       ;
141,147c141
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
141,147c141
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
141,147c141
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  sourceLenBZ_API(BZ2_bzBuffToBuffDecompress) ( 
142,147c142
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       (BZ2_bzBuffToBuffDecompress) ( 
142,147c142
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ2_bzBuffToBuffDecompress) ( 
142,147c142
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100k) ( 
143,147c143
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ( 
143,148c143
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           char*         dest, 
143,148c143
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           verbosity*         dest, 
144,148c144
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       dest, 
144,148c144
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           , 
145,149c145
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    unsigned int* destLen,
145,149c145
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )int* destLen,
147,149c147
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> * destLen,
147,149c147
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN destLen,
147,149c147
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int ,
147,150c147
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_APIchar*         source, 
147,150c147
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(*         source, 
147,150c147
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompresssource, 
147,150c147
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) , 
148,150d147
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
148,151c148
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charint  sourceLen,
148,151c148
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceLen,
148,151c148
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         dest,
149,151d148
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
149,152c149
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned small, 
149,152c149
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int, 
149,153c149
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int* int           verbosity 
149,153c149
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
---
>       unsigned int* destLenverbosity 
150,154c150
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       );
150,154c150
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
---
>       char;
150,159c150
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
150,159c150
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char*         sourceconst char * BZ_API(BZ2_bzlibVersion) (
151,159c151
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       char * BZ_API(BZ2_bzlibVersion) (
151,159c151
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned * BZ_API(BZ2_bzlibVersion) (
151,159c151
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  BZ_API(BZ2_bzlibVersion) (
151,159c151
<       unsigned int  sourceLen,
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       unsigned int  sourceLen(BZ2_bzlibVersion) (
152,159c152
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       BZ2_bzlibVersion) (
152,159c152
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       int           ) (
152,159c152
<       int           small, 
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
---
>       int           small(
153,159d152
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
153,161c153
<       int           verbosity 
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>       int           );
154,161c154
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
---
>    ;
154,163c154
<    );
< 
< 
< 
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>    )BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
159,163c159
< BZ_EXTERN const char * BZ_API(BZ2_bzlibVersion) (
<       void
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
> BZFILE * BZ_API(BZ2_bzopen) (
(86.5 %, 27735 bytes)
153,156c153
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           path,
153,156c153
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           ),
155,157c155
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> const char *mode
155,157c155
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN char *mode
155,157c155
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE *mode
155,157c155
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * mode
155,158c155
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API);
155,158c155
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(;
155,160c155
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopenBZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
155,160c155
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) BZFILE * BZ_API(BZ2_bzdopen) (
156,160c156
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       * BZ_API(BZ2_bzdopen) (
156,160c156
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const BZ_API(BZ2_bzdopen) (
156,160c156
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char (BZ2_bzdopen) (
156,160c156
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char *BZ2_bzdopen) (
156,160c156
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char *path) (
157,160c157
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       (
157,161c157
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>       const int        fd,
157,161c157
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>       const char fd,
157,161c157
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>       const char *,
158,162c158
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
>    const char *mode
158,162c158
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
>    )char *mode
160,162c160
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> *mode
160,162c160
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN mode
160,163c160
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE );
160,163c160
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * ;
160,165c160
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_APIBZ_EXTERN int BZ_API(BZ2_bzread) (
160,165c160
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_API(int BZ_API(BZ2_bzread) (
160,165c160
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopenBZ_API(BZ2_bzread) (
160,165c160
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (BZ2_bzread) (
161,165c161
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>       BZ2_bzread) (
161,165c161
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>       int        ) (
161,165c161
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
---
>       int        fd(
162,165d161
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
162,166c162
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
>       const * b, 
162,166c162
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
>       const char b, 
162,166c162
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
---
>       const char *, 
163,167c163
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
>    void* buf, 
163,167c163
<    );
<          
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
>    )* buf, 
165,167c165
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> buf, 
165,167c165
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
---
> BZ_EXTERN , 
165,168c165
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
> BZ_EXTERN int int len 
165,168c165
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
---
> BZ_EXTERN int BZ_APIlen 
165,169c165
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int BZ_API();
165,169c165
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzread;
165,171c165
< BZ_EXTERN int BZ_API(BZ2_bzread) (
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
> BZ_EXTERN int BZ_API(BZ2_bzread) BZ_EXTERN int BZ_API(BZ2_bzwrite) (
166,171c166
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       int BZ_API(BZ2_bzwrite) (
166,171c166
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILEBZ_API(BZ2_bzwrite) (
166,171c166
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILE* (BZ2_bzwrite) (
166,171c166
<       BZFILE* b, 
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       BZFILE* bBZ2_bzwrite) (
167,171c167
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       ) (
167,171c167
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
---
>       void(
167,172c167
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
>       void* BZFILE* b, 
167,172c167
<       void* buf, 
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
>       void* buf* b, 
168,172c168
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
>       b, 
168,172c168
<       int len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
---
>       int , 
169,173c169
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
>    void*   buf, 
169,173c169
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
>    )*   buf, 
(86.5 %, 27667 bytes)
165,169c165
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(void*   buf, 
165,169c165
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API()*   buf, 
167,169c167
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> buf, 
167,169c167
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN , 
167,170c167
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int int     len 
167,170c167
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
> BZ_EXTERN int BZ_APIlen 
167,171c167
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API();
167,171c167
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite;
167,173c167
< BZ_EXTERN int BZ_API(BZ2_bzwrite) (
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
> BZ_EXTERN int BZ_API(BZ2_bzwrite) BZ_EXTERN int BZ_API(BZ2_bzflush) (
168,173c168
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       int BZ_API(BZ2_bzflush) (
168,173c168
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILEBZ_API(BZ2_bzflush) (
168,173c168
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILE* (BZ2_bzflush) (
168,173c168
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       BZFILE* bBZ2_bzflush) (
169,173c169
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       ) (
169,173c169
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
---
>       void(
169,174c169
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
---
>       void*   BZFILE* b
169,174c169
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
---
>       void*   buf* b
170,174c170
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
---
>       b
170,175c170
<       int     len 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
---
>       int     );
(86.5 %, 27592 bytes)
167,171c167
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
---
> BZ_EXTERN int BZ_API(;
167,173c167
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_API()BZ_EXTERN void BZ_API(BZ2_bzclose) (
169,173c169
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> void BZ_API(BZ2_bzclose) (
169,173c169
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN BZ_API(BZ2_bzclose) (
169,173c169
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int (BZ2_bzclose) (
169,173c169
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_APIBZ2_bzclose) (
169,173c169
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_API() (
169,173c169
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
---
> BZ_EXTERN int BZ_API(BZ2_bzflush(
169,174c169
< BZ_EXTERN int BZ_API(BZ2_bzflush) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
> BZ_EXTERN int BZ_API(BZ2_bzflush) BZFILE* b
170,174c170
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
>       * b
170,174c170
<       BZFILE* b
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzclose) (
<       BZFILE* b
---
>       BZFILEb
(86.6 %, 27523 bytes)
169,173c169
< void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> char * BZ_API(BZ2_bzerror) (
169,173c169
< void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> void * BZ_API(BZ2_bzerror) (
169,173c169
< void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> void BZ_APIBZ_API(BZ2_bzerror) (
169,173c169
< void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> void BZ_API((BZ2_bzerror) (
169,173c169
< void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> void BZ_API(BZ2_bzcloseBZ2_bzerror) (
169,173c169
< void BZ_API(BZ2_bzclose) (
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
> void BZ_API(BZ2_bzclose) ) (
170,173c170
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
---
>       (
170,174c170
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
>       BZFILEBZFILE *b, 
170,174c170
<       BZFILE* b
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
>       BZFILE* *b, 
171,174c171
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
>    b, 
171,174c171
<    );
< 
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
---
>    ), 
173,175c173
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> int    *errnum
173,175c173
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> BZ_EXTERN *errnum
173,175c173
< BZ_EXTERN const char * BZ_API(BZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> BZ_EXTERN const errnum
(86.6 %, 27466 bytes)
169,182c169
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> void BZ_API(BZ2_bzcloseBZ2_bzerror_BZLIB_PRIVATE_H
169,184c169
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> void BZ_API(BZ2_bzcloseBZ2_bzerror) #include <stdlib.h>
170,184c170
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       include <stdlib.h>
170,184c170
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE <stdlib.h>
170,184c170
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *stdlib.h>
170,184c170
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *b.h>
171,184c171
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       h>
171,184c171
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       int    >
171,189c171
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       int    *#define BZ_VERSION  "1.0.2, 30-Dec-2001"
172,189c172
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    define BZ_VERSION  "1.0.2, 30-Dec-2001"
172,189c172
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    )BZ_VERSION  "1.0.2, 30-Dec-2001"
182,189c182
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> "1.0.2, 30-Dec-2001"
182,191c182
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #typedef char            Char;
182,191c182
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define char            Char;
184,191c184
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> Char;
184,191c184
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #;
184,192c184
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include typedef unsigned char   Bool;
184,192c184
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <unsigned char   Bool;
184,192c184
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlibchar   Bool;
184,192c184
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlib.Bool;
184,192c184
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlib.h;
189,192d188
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
189,193c189
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #unsigned char   UChar;
189,193c189
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define char   UChar;
189,193c189
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define BZ_VERSION  UChar;
191,193c191
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> ;
191,194c191
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef typedef int             Int32;
191,194c191
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            int             Int32;
191,194c191
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            CharInt32;
192,194c192
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> ;
192,195c192
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef typedef unsigned int    UInt32;
192,195c192
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned unsigned int    UInt32;
192,195c192
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   int    UInt32;
192,195c192
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   BoolUInt32;
193,195c193
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> ;
193,196c193
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef typedef short           Int16;
193,196c193
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned short           Int16;
193,196c193
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   Int16;
194,196d193
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
194,196d193
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
194,196d193
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
194,197c194
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             short  UInt16;
194,197c194
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             Int32UInt16;
195,197c195
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> ;
195,199c195
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef #define True  ((Bool)1)
195,199c195
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned define True  ((Bool)1)
195,199c195
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    True  ((Bool)1)
195,199c195
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    UInt32((Bool)1)
196,199c196
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> (Bool)1)
196,199c196
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef Bool)1)
196,199c196
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           )1)
196,199c196
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           Int161)
197,199c197
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> )
197,200c197
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef #define False ((Bool)0)
197,200c197
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned define False ((Bool)0)
197,200c197
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  False ((Bool)0)
197,200c197
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  UInt16((Bool)0)
199,200c199
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> (Bool)0)
199,200c199
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #Bool)0)
199,200c199
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define )0)
199,200c199
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  0)
199,200c199
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  ()
199,202c199
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((#define __inline__  
199,202c199
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Booldefine __inline__  
199,202c199
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool)__inline__  
199,205c199
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> #define True  ((Bool)1#define AssertH(cond,errcode) \
200,205c200
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> define AssertH(cond,errcode) \
200,205c200
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> #AssertH(cond,errcode) \
200,205c200
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> #define (cond,errcode) \
200,205c200
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> #define False cond,errcode) \
200,205c200
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> #define False (,errcode) \
200,205c200
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> #define False ((errcode) \
200,205c200
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> #define False ((Bool) \
200,205c200
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
---
> #define False ((Bool)\
200,207c200
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #define False ((Bool)0#define AssertD(cond,msg) \
202,207c202
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> define AssertD(cond,msg) \
202,207c202
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #AssertD(cond,msg) \
202,207c202
< #define __inline__  
< 
< 
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #define (cond,msg) \
205,207c205
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> cond,msg) \
205,207c205
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #,msg) \
205,207c205
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #define msg) \
205,207c205
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #define AssertH) \
205,207c205
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
---
> #define AssertH(\
205,209c205
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH(cond#define VPrintf0(zf) \
205,209c205
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH(cond,define VPrintf0(zf) \
205,209c205
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH(cond,errcodeVPrintf0(zf) \
205,209c205
< #define AssertH(cond,errcode) \
<    
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define AssertH(cond,errcode) (zf) \
207,209c207
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> zf) \
207,209c207
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #) \
207,209c207
< #define AssertD(cond,msg) \
<    
< #define VPrintf0(zf) \
---
> #define \
(86.6 %, 27417 bytes)
205,208c205
< #define msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define ,zf)
205,208c205
< #define msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define msgzf)
205,208c205
< #define msg) \
<    
< #define VPrintf0(zf) \
<    fprintf(stderr,zf)
---
> #define msg) )
(86.6 %, 27368 bytes)
205,207c205
< #define msgzf)
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
---
> #define msgzf,zf,za1)
206,207c206
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
---
> zf,za1)
206,207c206
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
---
> #,za1)
206,207c206
< #define VPrintf1(zf,za1) \
<    fprintf(stderr,zf,za1)
---
> #define za1)
(86.7 %, 27322 bytes)
205,206c205
< #define msgzf,zf,za1)
< #define VPrintf2(zf,za1,za2) \
---
> #define msgzfza2) \
205,206c205
< #define msgzf,zf,za1)
< #define VPrintf2(zf,za1,za2) \
---
> #define msgzf,) \
(86.7 %, 27289 bytes)
205,207c205
< #define msgzfza2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define msgzfza2define VPrintf3(zf,za1,za2,za3) \
205,207c205
< #define msgzfza2) \
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
> #define msgzfza2) VPrintf3(zf,za1,za2,za3) \
206,207c206
<    fprintf(stderr,zf,za1,za2)
< #define VPrintf3(zf,za1,za2,za3) \
---
>    (zf,za1,za2,za3) \
(86.7 %, 27254 bytes)
205,206c205
< #define msgzfza2define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define msgzfza2define stderr,zf,za1,za2,za3)
205,206c205
< #define msgzfza2define VPrintf3(zf,za1,za2,za3) \
<    fprintf(stderr,zf,za1,za2,za3)
---
> #define msgzfza2define VPrintf3,zf,za1,za2,za3)
(86.7 %, 27216 bytes)
205,206c205
< #define msgzfza2define stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define msgzfza2define (zf,za1,za2,za3,za4) \
205,206c205
< #define msgzfza2define stderr,zf,za1,za2,za3)
< #define VPrintf4(zf,za1,za2,za3,za4) \
---
> #define msgzfza2define stderrzf,za1,za2,za3,za4) \
(86.7 %, 27177 bytes)
205,206c205
< #define msgzfza2define (zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define msgzfza2define (stderr,zf,za1,za2,za3,za4)
205,206c205
< #define msgzfza2define (zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define msgzfza2define (stderr,zf,za1,za2,za3,za4)
205,206c205
< #define msgzfza2define (zf,za1,za2,za3,za4) \
<    fprintf(stderr,zf,za1,za2,za3,za4)
---
> #define msgzfza2define (zf,zf,za1,za2,za3,za4)
(86.8 %, 27144 bytes)
205,206c205
< #define msgzfza2define (stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define msgzfza2define #define VPrintf5(zf,za1,za2,za3,za4,za5) \
205,206c205
< #define msgzfza2define (stderr,zf,za1,za2,za3,za4)
< #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define msgzfza2define (define VPrintf5(zf,za1,za2,za3,za4,za5) \
(86.8 %, 27116 bytes)
205c205
< #define msgzfza2define #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define msgzfza2define ,za5) \
205c205
< #define msgzfza2define #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define msgzfza2define #za5) \
205c205
< #define msgzfza2define #define VPrintf5(zf,za1,za2,za3,za4,za5) \
---
> #define msgzfza2define #define ) \
(86.8 %, 27081 bytes)
205,206c205
< #define msgzfza2define ,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define msgzfza2define ,za3,za4,za5)
205,206c205
< #define msgzfza2define ,za5) \
<    fprintf(stderr,zf,za1,za2,za3,za4,za5)
---
> #define msgzfza2define ,za3,za4,za5)
(86.8 %, 27045 bytes)
205,208c205
< #define msgzfza2define ,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define msgzfza2define (strm->bzalloc)(strm->opaque,(nnn),1)
205,208c205
< #define msgzfza2define ,za3,za4,za5)
< 
< 
< #define BZALLOC(nnn) (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define msgzfza2define ,strm->bzalloc)(strm->opaque,(nnn),1)
(86.8 %, 27008 bytes)
205c205
< #define msgzfza2define (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define msgzfza2define ,1)
205c205
< #define msgzfza2define (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define msgzfza2define (1)
205c205
< #define msgzfza2define (strm->bzalloc)(strm->opaque,(nnn),1)
---
> #define msgzfza2define (strm)
(86.8 %, 26974 bytes)
205,206c205
< #define msgzfza2define ,1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define msgzfza2define )(strm->opaque,(ppp))
205,206c205
< #define msgzfza2define ,1)
< #define BZFREE(ppp)  (strm->bzfree)(strm->opaque,(ppp))
---
> #define msgzfza2define ,(strm->opaque,(ppp))
(86.9 %, 26936 bytes)
205,210c205
< #define msgzfza2define )(strm->opaque,(ppp))
< 
< 
< 
< 
< #define BZ_HDR_B 0x42   
---
> #define msgzfza2define 0x42   
205,211c205
< #define msgzfza2define )(strm->opaque,(ppp))
< 
< 
< 
< 
< #define BZ_HDR_B 0x42   
< #define BZ_HDR_Z 0x5a   
---
> #define msgzfza2define )#define BZ_HDR_Z 0x5a   
(86.9 %, 26893 bytes)
205,212c205
< #define msgzfza2define 0x42   
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define msgzfza2define #define BZ_MAX_ALPHA_SIZE 258
206,212c206
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> define BZ_MAX_ALPHA_SIZE 258
206,212c206
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #BZ_MAX_ALPHA_SIZE 258
206,212c206
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
---
> #define 258
206,213c206
< #define BZ_HDR_Z 0x5a   
< #define BZ_HDR_h 0x68   
< #define BZ_HDR_0 0x30   
<   
< 
< 
< #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
---
> #define BZ_HDR_Z #define BZ_MAX_CODE_LEN    23
(86.9 %, 26805 bytes)
205,209c205
< #define msgzfza2define #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define msgzfza2define define BZ_RUNB 1
205,209c205
< #define msgzfza2define #define BZ_MAX_ALPHA_SIZE 258
< #define BZ_MAX_CODE_LEN    23
< 
< #define BZ_RUNA 0
< #define BZ_RUNB 1
---
> #define msgzfza2define #BZ_RUNB 1
(87.0 %, 26725 bytes)
205,209c205
< #define msgzfza2define define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define msgzfza2define BZ_N_ITERS  4
205,209c205
< #define msgzfza2define define BZ_RUNB 1
< 
< #define BZ_N_GROUPS 6
< #define BZ_G_SIZE   50
< #define BZ_N_ITERS  4
---
> #define msgzfza2define define 4
(87.0 %, 26654 bytes)
205,207c205
< #define msgzfza2define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
---
> #define msgzfza2define )
205,215c205
< #define msgzfza2define BZ_N_ITERS  4
< 
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define msgzfza2define BZ_N_ITERS  #define BZ_RAND_DECLS                          \
207,215c207
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> define BZ_RAND_DECLS                          \
207,215c207
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #BZ_RAND_DECLS                          \
207,215c207
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define \
207,216c207
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS Int32 rNToGo;                               \
207,216c207
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (rNToGo;                               \
207,216c207
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (2 ;                               \
207,216c207
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define BZ_MAX_SELECTORS (2 + \
207,217c207
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 + (Int32 rTPos                                 \
207,217c207
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 + (900000 rTPos                                 \
207,217c207
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / \
207,219c207
< #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE))
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define BZ_MAX_SELECTORS (2 + (900000 / BZ_G_SIZE#define BZ_RAND_INIT_MASK                      \
(87.0 %, 26589 bytes)
205,217c205
< #define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #define msgzfza2define define BZ_RAND_INIT_MASK                      \
213,217c213
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> BZ_RAND_INIT_MASK                      \
213,217c213
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
---
> #\
213,218c213
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define s->rNToGo = 0;                              \
213,218c213
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
> #define BZ_RAND_DECLS                          ->rNToGo = 0;                              \
214,218c214
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    rNToGo = 0;                              \
214,218c214
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 = 0;                              \
214,218c214
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 rNToGo0;                              \
214,218c214
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    Int32 rNToGo;                               ;                              \
215,218c215
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
---
>    \
215,219c215
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 s->rTPos  = 0                               \
215,219c215
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
>    Int32 rTPos                                 ->rTPos  = 0                               \
217,219c217
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> rTPos  = 0                               \
217,219c217
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> #= 0                               \
217,219c217
< #define BZ_RAND_INIT_MASK                      \
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
---
> #define 0                               \
218,219d217
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
218,221c218
<    s->rNToGo = 0;                              \
<    s->rTPos  = 0                               \
< 
< #define BZ_RAND_MASK (0)
---
>    #define BZ_RAND_MASK (0)
(87.1 %, 26491 bytes)
217,222c217
< #define BZ_RAND_INIT_MASK                      \
< 
< #define BZ_RAND_MASK (0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define BZ_RAND_INIT_MASK                      s->rNToGo == 0)                                            \
219,222c219
< #define BZ_RAND_MASK (0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> ->rNToGo == 0)                                            \
219,222c219
< #define BZ_RAND_MASK (0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #rNToGo == 0)                                            \
219,222c219
< #define BZ_RAND_MASK (0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define == 0)                                            \
219,222c219
< #define BZ_RAND_MASK (0)
< 
< #define BZ_RAND_UPD_MASK                       \
<    if (s->rNToGo == 0)                                            \
---
> #define BZ_RAND_MASK 0)                                            \
(87.1 %, 26406 bytes)
217,226c217
< #define BZ_RAND_INIT_MASK                      s->rNToGo == 0)                                            \
<    s->rNToGo--;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_RAND_INIT_MASK                      define BZ_INITIALISE_CRC(crcVar)              \
217,226c217
< #define BZ_RAND_INIT_MASK                      s->rNToGo == 0)                                            \
<    s->rNToGo--;
< 
< 
< 
< 
< 
< 
< 
< #define BZ_INITIALISE_CRC(crcVar)              \
---
> #define BZ_RAND_INIT_MASK                      sBZ_INITIALISE_CRC(crcVar)              \
(87.2 %, 26321 bytes)
217,223c217
< #define BZ_RAND_INIT_MASK                      define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
217,223c217
< #define BZ_RAND_INIT_MASK                      define BZ_INITIALISE_CRC(crcVar)              \
< 
< 
< #define BZ_FINALISE_CRC(crcVar)                \
< 
< 
< #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_RAND_INIT_MASK                      define define BZ_UPDATE_CRC(crcVar,cha)              \
(87.2 %, 26220 bytes)
217,225c217
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define BZ_RAND_INIT_MASK                      #define BZ_M_RUNNING   2
217,225c217
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define BZ_RAND_INIT_MASK                      #define BZ_M_RUNNING   2
217,225c217
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define BZ_RAND_INIT_MASK                      #define BZ_M_RUNNING   2
217,225c217
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
---
> #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC2
217,226c217
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(#define BZ_M_FLUSHING  3
217,226c217
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVardefine BZ_M_FLUSHING  3
217,226c217
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,BZ_M_FLUSHING  3
217,226c217
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
> #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha3
217,227c217
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              #define BZ_M_FINISHING 4
224,227c224
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> define BZ_M_FINISHING 4
224,227c224
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #BZ_M_FINISHING 4
224,227c224
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define 4
224,229c224
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define BZ_M_IDLE      #define BZ_S_OUTPUT    1
225,229c225
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> define BZ_S_OUTPUT    1
225,229c225
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #BZ_S_OUTPUT    1
225,229c225
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define 1
225,230c225
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define BZ_M_RUNNING   #define BZ_S_INPUT     2
226,230c226
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> define BZ_S_INPUT     2
226,230c226
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #BZ_S_INPUT     2
226,230c226
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
---
> #define 2
226,232c226
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define BZ_M_FLUSHING  #define BZ_N_RADIX 2
227,232c227
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> define BZ_N_RADIX 2
227,232c227
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #BZ_N_RADIX 2
227,232c227
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define 2
227,233c227
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_M_FINISHING #define BZ_N_QSORT 12
229,233c229
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> define BZ_N_QSORT 12
229,233c229
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #BZ_N_QSORT 12
229,233c229
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define 12
229,234c229
< #define BZ_S_OUTPUT    1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_S_OUTPUT    #define BZ_N_SHELL 18
230,234c230
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> define BZ_N_SHELL 18
230,234c230
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #BZ_N_SHELL 18
230,234c230
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define 18
230,235c230
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_S_INPUT     #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
232,235c232
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
232,235c232
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
232,235c232
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
232,235c232
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_RADIX BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
233,235c233
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> + BZ_N_QSORT + BZ_N_SHELL + 2)
233,235c233
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_QSORT + BZ_N_SHELL + 2)
233,235c233
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define + BZ_N_SHELL + 2)
233,235c233
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT BZ_N_SHELL + 2)
234,235c234
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> + 2)
234,235c234
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #2)
234,235c234
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define )
234,242c234
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
---
> #define BZ_N_SHELL typedef
235,243c235
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> struct {
235,243c235
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #{
235,245c235
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define bz_stream* strm;
235,245c235
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT * strm;
235,245c235
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (strm;
235,245c235
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX ;
235,249c235
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + Int32    mode;
235,249c235
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT mode;
235,249c235
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + ;
235,250c235
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL Int32    state;
235,250c235
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + state;
235,250c235
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2;
242,256c242
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
> UInt32*  arr1;
243,256c243
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>    *  arr1;
243,256c243
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>    struct arr1;
245,256c245
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       ;
245,257c245
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_streamUInt32*  arr2;
245,257c245
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* *  arr2;
245,257c245
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* strmarr2;
249,257c249
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       ;
249,258c249
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    UInt32*  ftab;
249,258c249
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    mode*  ftab;
250,258c250
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       ftab;
250,258c250
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    ;
250,262c250
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       Int32    stateUInt32*  ptr;
256,262c256
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       *  ptr;
256,262c256
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       UInt32ptr;
256,262c256
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
---
>       UInt32*  ;
256,263c256
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32*  arr1UChar*   block;
257,263c257
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       *   block;
257,263c257
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32block;
257,263c257
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32*  ;
257,264c257
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32*  arr2UInt16*  mtfv;
258,264c258
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       *  mtfv;
258,264c258
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32mtfv;
258,264c258
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32*  ;
258,265c258
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32*  ftabUChar*   zbits;
262,265c262
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       *   zbits;
262,265c262
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32zbits;
262,265c262
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32*  ;
262,268c262
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       UInt32*  ptrInt32    workFactor;
263,268c263
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       workFactor;
263,268c263
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       UChar;
263,273c263
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
---
>       UChar*   BZ_RAND_DECLS;
264,273d263
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
264,276d263
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
264,277c264
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
---
>       UInt16nblockMAX;
264,277c264
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
---
>       UInt16*  ;
264,292c264
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       UInt16*  mtfvUInt32   combinedCRC;
265,292c265
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       combinedCRC;
265,292c265
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       UChar;
265,295c265
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       UChar*   Int32    verbosity;
265,295c265
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       UChar*   zbitsverbosity;
268,295c268
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       ;
268,296c268
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       Int32    Int32    blockNo;
268,296c268
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       Int32    workFactorblockNo;
273,296c273
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       ;
273,297c273
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       BZ_RAND_DECLSInt32    blockSize100k;
277,297c277
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       blockSize100k;
277,297c277
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    ;
277,311c277
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
---
>       Int32    nblockMAX}
292,312c292
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
---
>       EState;
292,312c292
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
---
>       UInt32   ;
294,321d293
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
295,322c295
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
>       ;
295,332c295
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    #define BZ_X_IDLE        1
295,332c295
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    verbositydefine BZ_X_IDLE        1
296,332c296
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       BZ_X_IDLE        1
296,332c296
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    1
296,333c296
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    blockNo#define BZ_X_OUTPUT      2
297,333c297
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       define BZ_X_OUTPUT      2
297,333c297
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    BZ_X_OUTPUT      2
297,333c297
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    blockSize100k2
311,335c311
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    #define BZ_X_MAGIC_1     10
312,335c312
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    define BZ_X_MAGIC_1     10
312,335c312
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    EStateBZ_X_MAGIC_1     10
320,335c320
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
> 10
322,335d321
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
332,336c332
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
> define BZ_X_MAGIC_2     11
332,336c332
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
> #BZ_X_MAGIC_2     11
332,336c332
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
---
> #define 11
332,337c332
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> #define BZ_X_IDLE        #define BZ_X_MAGIC_3     12
333,337c333
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> define BZ_X_MAGIC_3     12
333,337c333
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> #BZ_X_MAGIC_3     12
333,337c333
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
---
> #define 12
333,338c333
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
---
> #define BZ_X_OUTPUT      #define BZ_X_MAGIC_4     13
335,338c335
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
---
> define BZ_X_MAGIC_4     13
335,338c335
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
---
> #BZ_X_MAGIC_4     13
335,338c335
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
---
> #define 13
335,339c335
< #define BZ_X_MAGIC_1     10
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
---
> #define BZ_X_MAGIC_1     #define BZ_X_BLKHDR_1    14
336,339c336
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
---
> define BZ_X_BLKHDR_1    14
336,339c336
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
---
> #BZ_X_BLKHDR_1    14
336,339c336
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
---
> #define 14
336,340c336
< #define BZ_X_MAGIC_2     11
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> #define BZ_X_MAGIC_2     #define BZ_X_BLKHDR_2    15
337,340c337
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> define BZ_X_BLKHDR_2    15
337,340c337
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> #BZ_X_BLKHDR_2    15
337,340c337
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
---
> #define 15
337,341c337
< #define BZ_X_MAGIC_3     12
< #define BZ_X_MAGIC_4     13
< #define BZ_X_BLKHDR_1    14
< #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
---
> #define BZ_X_MAGIC_3     #define BZ_X_BLKHDR_3    16
(87.2 %, 26133 bytes)
336,339c336
< #define BZ_X_MAGIC_2     #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_MAGIC_2     define BZ_X_BLKHDR_5    18
336,339c336
< #define BZ_X_MAGIC_2     #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_MAGIC_2     #BZ_X_BLKHDR_5    18
336,339c336
< #define BZ_X_MAGIC_2     #define BZ_X_BLKHDR_2    15
< #define BZ_X_BLKHDR_3    16
< #define BZ_X_BLKHDR_4    17
< #define BZ_X_BLKHDR_5    18
---
> #define BZ_X_MAGIC_2     #define 18
(87.3 %, 26048 bytes)
336,339c336
< #define BZ_X_MAGIC_2     define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_MAGIC_2     BZ_X_BCRC_2      21
336,339c336
< #define BZ_X_MAGIC_2     define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
---
> #define BZ_X_MAGIC_2     define 21
336,340c336
< #define BZ_X_MAGIC_2     define BZ_X_BLKHDR_5    18
< #define BZ_X_BLKHDR_6    19
< #define BZ_X_BCRC_1      20
< #define BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
---
> #define BZ_X_MAGIC_2     define BZ_X_BLKHDR_5    #define BZ_X_BCRC_3      22
(87.3 %, 25957 bytes)
336,339c336
< #define BZ_X_MAGIC_2     BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
---
> #define BZ_X_MAGIC_2     24
336,340c336
< #define BZ_X_MAGIC_2     BZ_X_BCRC_2      21
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
---
> #define BZ_X_MAGIC_2     BZ_X_BCRC_2      #define BZ_X_ORIGPTR_1   25
337,340c337
< #define BZ_X_BCRC_3      22
< #define BZ_X_BCRC_4      23
< #define BZ_X_RANDBIT     24
< #define BZ_X_ORIGPTR_1   25
---
> define BZ_X_ORIGPTR_1   25
(87.4 %, 25856 bytes)
336,340c336
< #define BZ_X_MAGIC_2     24
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
---
> #define BZ_X_MAGIC_2     #define BZ_X_MAPPING_1   28
337,340c337
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
---
> define BZ_X_MAPPING_1   28
337,340c337
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
---
> #BZ_X_MAPPING_1   28
337,340c337
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
---
> #define 28
337,341c337
< #define BZ_X_ORIGPTR_1   25
< #define BZ_X_ORIGPTR_2   26
< #define BZ_X_ORIGPTR_3   27
< #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
---
> #define BZ_X_ORIGPTR_1   #define BZ_X_MAPPING_2   29
(87.4 %, 25769 bytes)
336,339c336
< #define BZ_X_MAGIC_2     #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_MAGIC_2     define BZ_X_SELECTOR_2  31
336,339c336
< #define BZ_X_MAGIC_2     #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_MAGIC_2     #BZ_X_SELECTOR_2  31
336,339c336
< #define BZ_X_MAGIC_2     #define BZ_X_MAPPING_1   28
< #define BZ_X_MAPPING_2   29
< #define BZ_X_SELECTOR_1  30
< #define BZ_X_SELECTOR_2  31
---
> #define BZ_X_MAGIC_2     #define 31
(87.5 %, 25684 bytes)
336,339c336
< #define BZ_X_MAGIC_2     define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
---
> #define BZ_X_MAGIC_2     BZ_X_CODING_2    34
336,339c336
< #define BZ_X_MAGIC_2     define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
---
> #define BZ_X_MAGIC_2     define 34
336,340c336
< #define BZ_X_MAGIC_2     define BZ_X_SELECTOR_2  31
< #define BZ_X_SELECTOR_3  32
< #define BZ_X_CODING_1    33
< #define BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
---
> #define BZ_X_MAGIC_2     define BZ_X_SELECTOR_2  #define BZ_X_CODING_3    35
(87.5 %, 25593 bytes)
336,339c336
< #define BZ_X_MAGIC_2     BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
---
> #define BZ_X_MAGIC_2     37
336,340c336
< #define BZ_X_MAGIC_2     BZ_X_CODING_2    34
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
---
> #define BZ_X_MAGIC_2     BZ_X_CODING_2    #define BZ_X_MTF_3       38
337,340c337
< #define BZ_X_CODING_3    35
< #define BZ_X_MTF_1       36
< #define BZ_X_MTF_2       37
< #define BZ_X_MTF_3       38
---
> define BZ_X_MTF_3       38
(87.6 %, 25492 bytes)
336,340c336
< #define BZ_X_MAGIC_2     37
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
---
> #define BZ_X_MAGIC_2     #define BZ_X_MTF_6       41
337,340c337
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
---
> define BZ_X_MTF_6       41
337,340c337
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
---
> #BZ_X_MTF_6       41
337,340c337
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
---
> #define 41
337,341c337
< #define BZ_X_MTF_3       38
< #define BZ_X_MTF_4       39
< #define BZ_X_MTF_5       40
< #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
---
> #define BZ_X_MTF_3       #define BZ_X_ENDHDR_2    42
(87.6 %, 25405 bytes)
336,339c336
< #define BZ_X_MAGIC_2     #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_MAGIC_2     define BZ_X_ENDHDR_4    44
336,339c336
< #define BZ_X_MAGIC_2     #define BZ_X_MTF_6       41
< #define BZ_X_ENDHDR_2    42
< #define BZ_X_ENDHDR_3    43
< #define BZ_X_ENDHDR_4    44
---
> #define BZ_X_MAGIC_2     #BZ_X_ENDHDR_4    44
(87.6 %, 25320 bytes)
336,339c336
< #define BZ_X_MAGIC_2     define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_MAGIC_2     BZ_X_CCRC_1      47
336,339c336
< #define BZ_X_MAGIC_2     define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
---
> #define BZ_X_MAGIC_2     define 47
336,340c336
< #define BZ_X_MAGIC_2     define BZ_X_ENDHDR_4    44
< #define BZ_X_ENDHDR_5    45
< #define BZ_X_ENDHDR_6    46
< #define BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
---
> #define BZ_X_MAGIC_2     define BZ_X_ENDHDR_4    #define BZ_X_CCRC_2      48
(87.7 %, 25229 bytes)
336,339c336
< #define BZ_X_MAGIC_2     BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
---
> #define BZ_X_MAGIC_2     50
336,345c336
< #define BZ_X_MAGIC_2     BZ_X_CCRC_1      47
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> #define BZ_X_MAGIC_2     BZ_X_CCRC_1      #define MTFA_SIZE 4096
337,345c337
< #define BZ_X_CCRC_2      48
< #define BZ_X_CCRC_3      49
< #define BZ_X_CCRC_4      50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
---
> define MTFA_SIZE 4096
(87.7 %, 25128 bytes)
336,352c336
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_X_MAGIC_2     * strm;
342,352c342
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> strm;
342,352c342
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #;
342,355c342
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define Int32    state;
342,355c342
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define MTFA_SIZE state;
343,355c343
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> ;
343,361c343
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
---
> #BZ_RAND_DECLS;
343,361c343
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
---
> #define ;
343,364c343
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
> #define MTFL_SIZE UInt32   bsBuff;
349,364c349
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
> bsBuff;
350,364c350
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>    ;
350,365c350
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>    struct Int32    bsLive;
352,365c352
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       bsLive;
352,365c352
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       bz_stream;
352,369c352
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       bz_stream* Bool     smallDecompress;
352,369c352
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       bz_stream* strmsmallDecompress;
355,369c355
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       ;
355,370c355
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       Int32    Int32    currBlockNo;
355,370c355
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       Int32    statecurrBlockNo;
361,370c361
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
>       ;
361,371c361
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       BZ_RAND_DECLSInt32    verbosity;
364,371c364
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       verbosity;
364,371c364
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       UInt32   ;
364,383c364
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       UInt32   bsBuffUInt32   *tt;
365,383c365
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       *tt;
365,383c365
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       Int32    tt;
368,385d367
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
369,385d368
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
369,386c369
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
---
>       Bool     *ll16;
369,386c369
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
---
>       Bool     smallDecompressll16;
370,386c370
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
---
>       ;
370,387c370
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    UChar    *ll4;
370,387c370
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    currBlockNo*ll4;
371,387c371
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       ll4;
371,387c371
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    ;
371,393c371
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       Int32    verbosityUInt32   calculatedCombinedCRC;
383,393c383
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       calculatedCombinedCRC;
383,393c383
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       UInt32   ;
383,439c383
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
---
>       UInt32   *}
383,440c383
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       UInt32   *ttDState;
386,440c386
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       ;
386,446c386
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
---
>       UInt16   #define BZ_GET_FAST(cccc)                     \
386,446c386
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
---
>       UInt16   *define BZ_GET_FAST(cccc)                     \
386,446c386
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
---
>       UInt16   *ll16BZ_GET_FAST(cccc)                     \
387,446c387
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
---
>       (cccc)                     \
387,446c387
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
---
>       UChar    cccc)                     \
387,446c387
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
---
>       UChar    *)                     \
387,446c387
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
---
>       UChar    *ll4\
393,447c393
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       s->tPos = s->tt[s->tPos];                 \
393,447c393
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       UInt32   ->tPos = s->tt[s->tPos];                 \
393,447c393
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>       UInt32   calculatedCombinedCRCtPos = s->tt[s->tPos];                 \
439,447c439
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    = s->tt[s->tPos];                 \
440,447c440
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    s->tt[s->tPos];                 \
440,447c440
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
>    DState->tt[s->tPos];                 \
446,447c446
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> tt[s->tPos];                 \
446,447c446
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #[s->tPos];                 \
446,447c446
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define s->tPos];                 \
446,447c446
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define BZ_GET_FAST->tPos];                 \
446,447c446
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define BZ_GET_FAST(tPos];                 \
446,447c446
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define BZ_GET_FAST(cccc];                 \
446,447c446
< #define BZ_GET_FAST(cccc)                     \
<     s->tPos = s->tt[s->tPos];                 \
---
> #define BZ_GET_FAST(cccc)                     ;                 \
(87.8 %, 25078 bytes)
446,447c446
< #define BZ_GET_FAST->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
---
> #define BZ_GET_FASTtPos & 0xff);           \
446,447c446
< #define BZ_GET_FAST->tPos];                 \
<     cccc = (UChar)(s->tPos & 0xff);           \
---
> #define BZ_GET_FAST->& 0xff);           \
(87.8 %, 25029 bytes)
446,449c446
< #define BZ_GET_FASTtPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FASTtPos BZ_GET_FAST_C(cccc)                   \
446,449c446
< #define BZ_GET_FASTtPos & 0xff);           \
<     s->tPos >>= 8;
< 
< #define BZ_GET_FAST_C(cccc)                   \
---
> #define BZ_GET_FASTtPos & (cccc)                   \
(87.8 %, 24980 bytes)
446,448c446
< #define BZ_GET_FASTtPos BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
---
> #define BZ_GET_FASTtPos cccc = (UChar)(c_tPos & 0xff);            \
446,448c446
< #define BZ_GET_FASTtPos BZ_GET_FAST_C(cccc)                   \
<     c_tPos = c_tt[c_tPos];                    \
<     cccc = (UChar)(c_tPos & 0xff);            \
---
> #define BZ_GET_FASTtPos BZ_GET_FAST_C= (UChar)(c_tPos & 0xff);            \
(87.9 %, 24888 bytes)
446,447c446
< #define BZ_GET_FASTtPos cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
---
> #define BZ_GET_FASTtPos >>= 8;
446,447c446
< #define BZ_GET_FASTtPos cccc = (UChar)(c_tPos & 0xff);            \
<     c_tPos >>= 8;
---
> #define BZ_GET_FASTtPos cccc 8;
(87.9 %, 24833 bytes)
446,451c446
< #define BZ_GET_FASTtPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    
< 
< #define GET_LL4(i)                             \
---
> #define BZ_GET_FASTtPos define GET_LL4(i)                             \
446,451c446
< #define BZ_GET_FASTtPos >>= 8;
< 
< #define SET_LL4(i,n)                                          \
<    
< 
< #define GET_LL4(i)                             \
---
> #define BZ_GET_FASTtPos >>= GET_LL4(i)                             \
(87.9 %, 24755 bytes)
446,447c446
< #define BZ_GET_FASTtPos define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define BZ_GET_FASTtPos s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
446,447c446
< #define BZ_GET_FASTtPos define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define BZ_GET_FASTtPos define ->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
446,447c446
< #define BZ_GET_FASTtPos define GET_LL4(i)                             \
<    ((((UInt32)(s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define BZ_GET_FASTtPos define GET_LL4ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
(88.0 %, 24692 bytes)
446c446
< #define BZ_GET_FASTtPos s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define BZ_GET_FASTtPos (((i) << 2) & 0x4)) & 0xF)
446c446
< #define BZ_GET_FASTtPos s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define BZ_GET_FASTtPos s((i) << 2) & 0x4)) & 0xF)
446c446
< #define BZ_GET_FASTtPos s->ll4[(i) >> 1])) >> (((i) << 2) & 0x4)) & 0xF)
---
> #define BZ_GET_FASTtPos s->(i) << 2) & 0x4)) & 0xF)
(88.0 %, 24670 bytes)
446c446
< #define BZ_GET_FASTtPos (((i) << 2) & 0x4)) & 0xF)
---
> #define BZ_GET_FASTtPos 0xF)
446c446
< #define BZ_GET_FASTtPos (((i) << 2) & 0x4)) & 0xF)
---
> #define BZ_GET_FASTtPos ()
446,448c446
< #define BZ_GET_FASTtPos (((i) << 2) & 0x4)) & 0xF)
< 
< #define SET_LL(i,n)                          \
---
> #define BZ_GET_FASTtPos ((#define SET_LL(i,n)                          \
(88.0 %, 24648 bytes)
446,451c446
< #define BZ_GET_FASTtPos 0xF)
< 
< #define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
---
> #define BZ_GET_FASTtPos GET_LL(i) \
446,451c446
< #define BZ_GET_FASTtPos 0xF)
< 
< #define SET_LL(i,n)                          \
<    
< 
< #define GET_LL(i) \
---
> #define BZ_GET_FASTtPos 0xF(i) \
(88.0 %, 24582 bytes)
446,447c446
< #define BZ_GET_FASTtPos GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
> #define BZ_GET_FASTtPos [i]) | (GET_LL4(i) << 16))
446,447c446
< #define BZ_GET_FASTtPos GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
> #define BZ_GET_FASTtPos GET_LLi]) | (GET_LL4(i) << 16))
446,447c446
< #define BZ_GET_FASTtPos GET_LL(i) \
<    (((UInt32)s->ll16[i]) | (GET_LL4(i) << 16))
---
> #define BZ_GET_FASTtPos GET_LL(]) | (GET_LL4(i) << 16))
(88.0 %, 24550 bytes)
446c446
< #define BZ_GET_FASTtPos [i]) | (GET_LL4(i) << 16))
---
> #define BZ_GET_FASTtPos )
446,448c446
< #define BZ_GET_FASTtPos [i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_FASTtPos [#define BZ_GET_SMALL(cccc)                            \
446,448c446
< #define BZ_GET_FASTtPos [i]) | (GET_LL4(i) << 16))
< 
< #define BZ_GET_SMALL(cccc)                            \
---
> #define BZ_GET_FASTtPos [idefine BZ_GET_SMALL(cccc)                            \
(88.0 %, 24525 bytes)
446,449c446
< #define BZ_GET_FASTtPos )
< 
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define BZ_GET_FASTtPos ->tPos, s->cftab );    \
448,449c448
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> tPos, s->cftab );    \
448,449c448
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #, s->cftab );    \
448,449c448
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define s->cftab );    \
448,449c448
< #define BZ_GET_SMALL(cccc)                            \
<       cccc = BZ2_indexIntoF ( s->tPos, s->cftab );    \
---
> #define BZ_GET_SMALL->cftab );    \
(88.1 %, 24435 bytes)
446,447c446
< #define BZ_GET_FASTtPos ->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
---
> #define BZ_GET_FASTtPos GET_LL(s->tPos);
446,447c446
< #define BZ_GET_FASTtPos ->tPos, s->cftab );    \
<       s->tPos = GET_LL(s->tPos);
---
> #define BZ_GET_FASTtPos ->(s->tPos);
(88.1 %, 24394 bytes)
446,482c446
< #define BZ_GET_FASTtPos GET_LL(s->tPos);
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap(zz1, zz2) \
---
> #define BZ_GET_FASTtPos zz2) \
446,482c446
< #define BZ_GET_FASTtPos GET_LL(s->tPos);
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define fswap(zz1, zz2) \
---
> #define BZ_GET_FASTtPos GET_LL) \
(88.1 %, 24323 bytes)
446,449c446
< #define BZ_GET_FASTtPos zz2) \
<    
< 
< #define fvswap(zzp1, zzp2, zzn)       \
---
> #define BZ_GET_FASTtPos \
446,453c446
< #define BZ_GET_FASTtPos zz2) \
<    
< 
< #define fvswap(zzp1, zzp2, zzn)       \
< 
< 
< 
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define BZ_GET_FASTtPos zz2#define fmin(a,b) ((a) < (b)) ? (a) : (b)
(88.2 %, 24273 bytes)
446,450c446
< #define BZ_GET_FASTtPos \
< 
< 
< 
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define BZ_GET_FASTtPos < (b)) ? (a) : (b)
450c450
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> (b)) ? (a) : (b)
450c450
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #b)) ? (a) : (b)
450c450
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define )) ? (a) : (b)
450c450
< #define fmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define fmin) ? (a) : (b)
(88.2 %, 24245 bytes)
446,448c446
< #define BZ_GET_FASTtPos < (b)) ? (a) : (b)
< 
< #define fpush(lz,hz) 
---
> #define BZ_GET_FASTtPos #define fpush(lz,hz) 
446,448c446
< #define BZ_GET_FASTtPos < (b)) ? (a) : (b)
< 
< #define fpush(lz,hz) 
---
> #define BZ_GET_FASTtPos < define fpush(lz,hz) 
(88.2 %, 24225 bytes)
446,448c446
< #define BZ_GET_FASTtPos #define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
---
> #define BZ_GET_FASTtPos ,hz) 
446,448c446
< #define BZ_GET_FASTtPos #define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
---
> #define BZ_GET_FASTtPos #hz) 
446,448c446
< #define BZ_GET_FASTtPos #define fpush(lz,hz) 
< 
< #define fpop(lz,hz) 
---
> #define BZ_GET_FASTtPos #define ) 
(88.2 %, 24187 bytes)
446,454c446
< #define BZ_GET_FASTtPos ,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
---
> #define BZ_GET_FASTtPos fmin
446,455c446
< #define BZ_GET_FASTtPos ,hz) 
< 
< #define FALLBACK_QSORT_SMALL_THRESH 10
< #define FALLBACK_QSORT_STACK_SIZE   100
< 
< 
< 
< 
< #undef fmin
< #undef fpush
---
> #define BZ_GET_FASTtPos ,#undef fpush
(88.2 %, 24090 bytes)
446,451c446
< #define BZ_GET_FASTtPos fmin
< #undef fpush
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> #define BZ_GET_FASTtPos #undef FALLBACK_QSORT_SMALL_THRESH
447,451c447
< #undef fpush
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> undef FALLBACK_QSORT_SMALL_THRESH
447,451c447
< #undef fpush
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
---
> #FALLBACK_QSORT_SMALL_THRESH
447,452c447
< #undef fpush
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> #undef #undef FALLBACK_QSORT_STACK_SIZE
448,452c448
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> undef FALLBACK_QSORT_STACK_SIZE
448,452c448
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
---
> #FALLBACK_QSORT_STACK_SIZE
448,458c448
< #undef fpop
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #undef #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
449,458c449
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
449,458c449
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
449,458c449
< #undef fswap
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #undef (zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
450,458c450
< #undef fvswap
< #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
(88.3 %, 24033 bytes)
446,453c446
< #define BZ_GET_FASTtPos #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define BZ_GET_FASTtPos [(zz) >> 5] |= (1 << ((zz) & 31))
446,453c446
< #define BZ_GET_FASTtPos #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define BZ_GET_FASTtPos #(zz) >> 5] |= (1 << ((zz) & 31))
446,453c446
< #define BZ_GET_FASTtPos #undef FALLBACK_QSORT_SMALL_THRESH
< #undef FALLBACK_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define       SET_BH(zz)  bhtab[(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define BZ_GET_FASTtPos #undef zz) >> 5] |= (1 << ((zz) & 31))
(88.3 %, 23929 bytes)
446c446
< #define BZ_GET_FASTtPos [(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define BZ_GET_FASTtPos zz) & 31))
446c446
< #define BZ_GET_FASTtPos [(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define BZ_GET_FASTtPos [) & 31))
446c446
< #define BZ_GET_FASTtPos [(zz) >> 5] |= (1 << ((zz) & 31))
---
> #define BZ_GET_FASTtPos [(& 31))
(88.3 %, 23906 bytes)
446,447c446
< #define BZ_GET_FASTtPos zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define BZ_GET_FASTtPos [(zz) >> 5] &= ~(1 << ((zz) & 31))
446,447c446
< #define BZ_GET_FASTtPos zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define BZ_GET_FASTtPos zz(zz) >> 5] &= ~(1 << ((zz) & 31))
446,447c446
< #define BZ_GET_FASTtPos zz) & 31))
< #define     CLEAR_BH(zz)  bhtab[(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define BZ_GET_FASTtPos zz) zz) >> 5] &= ~(1 << ((zz) & 31))
(88.4 %, 23864 bytes)
446c446
< #define BZ_GET_FASTtPos [(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define BZ_GET_FASTtPos (zz) & 31))
446c446
< #define BZ_GET_FASTtPos [(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define BZ_GET_FASTtPos [zz) & 31))
446c446
< #define BZ_GET_FASTtPos [(zz) >> 5] &= ~(1 << ((zz) & 31))
---
> #define BZ_GET_FASTtPos [() & 31))
(88.4 %, 23841 bytes)
446,447c446
< #define BZ_GET_FASTtPos (zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define BZ_GET_FASTtPos (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
446,447c446
< #define BZ_GET_FASTtPos (zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define BZ_GET_FASTtPos (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
446,447c446
< #define BZ_GET_FASTtPos (zz) & 31))
< #define     ISSET_BH(zz)  (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define BZ_GET_FASTtPos (zz[(zz) >> 5] & (1 << ((zz) & 31)))
(88.4 %, 23803 bytes)
446c446
< #define BZ_GET_FASTtPos (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define BZ_GET_FASTtPos ((zz) & 31)))
446c446
< #define BZ_GET_FASTtPos (bhtab[(zz) >> 5] & (1 << ((zz) & 31)))
---
> #define BZ_GET_FASTtPos ((zz) & 31)))
(88.4 %, 23777 bytes)
446,447c446
< #define BZ_GET_FASTtPos ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define BZ_GET_FASTtPos zz)  bhtab[(zz) >> 5]
446,447c446
< #define BZ_GET_FASTtPos ((zz) & 31)))
< #define      WORD_BH(zz)  bhtab[(zz) >> 5]
---
> #define BZ_GET_FASTtPos ()  bhtab[(zz) >> 5]
(88.4 %, 23742 bytes)
446,447c446
< #define BZ_GET_FASTtPos zz)  bhtab[(zz) >> 5]
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define BZ_GET_FASTtPos (zz)  ((zz) & 0x01f)
446,447c446
< #define BZ_GET_FASTtPos zz)  bhtab[(zz) >> 5]
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define BZ_GET_FASTtPos zzzz)  ((zz) & 0x01f)
446,447c446
< #define BZ_GET_FASTtPos zz)  bhtab[(zz) >> 5]
< #define UNALIGNED_BH(zz)  ((zz) & 0x01f)
---
> #define BZ_GET_FASTtPos zz)  )  ((zz) & 0x01f)
(88.4 %, 23700 bytes)
446,451c446
< #define BZ_GET_FASTtPos (zz)  ((zz) & 0x01f)
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
---
> #define BZ_GET_FASTtPos #undef     CLEAR_BH
446,451c446
< #define BZ_GET_FASTtPos (zz)  ((zz) & 0x01f)
< 
< 
< 
< #undef       SET_BH
< #undef     CLEAR_BH
---
> #define BZ_GET_FASTtPos (undef     CLEAR_BH
(88.5 %, 23656 bytes)
446,472c446
< #define BZ_GET_FASTtPos #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
---
> #define BZ_GET_FASTtPos define mswap(zz1, zz2) \
446,472c446
< #define BZ_GET_FASTtPos #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
---
> #define BZ_GET_FASTtPos #mswap(zz1, zz2) \
446,472c446
< #define BZ_GET_FASTtPos #undef     CLEAR_BH
< #undef     ISSET_BH
< #undef      WORD_BH
< #undef UNALIGNED_BH
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define mswap(zz1, zz2) \
---
> #define BZ_GET_FASTtPos #undef     (zz1, zz2) \
(88.5 %, 23553 bytes)
446,449c446
< #define BZ_GET_FASTtPos define mswap(zz1, zz2) \
<    
< 
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define BZ_GET_FASTtPos , zzp2, zzn)       \
446,449c446
< #define BZ_GET_FASTtPos define mswap(zz1, zz2) \
<    
< 
< #define mvswap(zzp1, zzp2, zzn)       \
---
> #define BZ_GET_FASTtPos define zzp2, zzn)       \
(88.5 %, 23504 bytes)
446,451c446
< #define BZ_GET_FASTtPos , zzp2, zzn)       \
< 
< 
< 
< 
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define BZ_GET_FASTtPos ) ((a) < (b)) ? (a) : (b)
446,451c446
< #define BZ_GET_FASTtPos , zzp2, zzn)       \
< 
< 
< 
< 
< #define mmin(a,b) ((a) < (b)) ? (a) : (b)
---
> #define BZ_GET_FASTtPos , ((a) < (b)) ? (a) : (b)
(88.6 %, 23463 bytes)
446c446
< #define BZ_GET_FASTtPos ) ((a) < (b)) ? (a) : (b)
---
> #define BZ_GET_FASTtPos ) : (b)
446c446
< #define BZ_GET_FASTtPos ) ((a) < (b)) ? (a) : (b)
---
> #define BZ_GET_FASTtPos ) : (b)
(88.6 %, 23445 bytes)
446,448c446
< #define BZ_GET_FASTtPos ) : (b)
< 
< #define mpush(lz,hz,dz) 
---
> #define BZ_GET_FASTtPos dz) 
446,448c446
< #define BZ_GET_FASTtPos ) : (b)
< 
< #define mpush(lz,hz,dz) 
---
> #define BZ_GET_FASTtPos ) ) 
(88.6 %, 23416 bytes)
446,451c446
< #define BZ_GET_FASTtPos dz) 
< 
< #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define BZ_GET_FASTtPos define mnextsize(az) (nextHi[az]-nextLo[az])
446,451c446
< #define BZ_GET_FASTtPos dz) 
< 
< #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define BZ_GET_FASTtPos dzmnextsize(az) (nextHi[az]-nextLo[az])
448,451c448
< #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> (az) (nextHi[az]-nextLo[az])
448,451c448
< #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #az) (nextHi[az]-nextLo[az])
448,451c448
< #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define ) (nextHi[az]-nextLo[az])
448,451c448
< #define mpop(lz,hz,dz) 
< 
< 
< #define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define mpop(nextHi[az]-nextLo[az])
(88.6 %, 23383 bytes)
446c446
< #define BZ_GET_FASTtPos define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define BZ_GET_FASTtPos az])
446c446
< #define BZ_GET_FASTtPos define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define BZ_GET_FASTtPos define ])
446c446
< #define BZ_GET_FASTtPos define mnextsize(az) (nextHi[az]-nextLo[az])
---
> #define BZ_GET_FASTtPos define mnextsize)
(88.6 %, 23343 bytes)
446,452c446
< #define BZ_GET_FASTtPos az])
< 
< #define mnextswap(az,bz)                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define BZ_GET_FASTtPos define MAIN_QSORT_SMALL_THRESH 20
446,452c446
< #define BZ_GET_FASTtPos az])
< 
< #define mnextswap(az,bz)                                        \
<    
< 
< 
< #define MAIN_QSORT_SMALL_THRESH 20
---
> #define BZ_GET_FASTtPos azMAIN_QSORT_SMALL_THRESH 20
(88.6 %, 23264 bytes)
446,448c446
< #define BZ_GET_FASTtPos define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define BZ_GET_FASTtPos MAIN_QSORT_STACK_SIZE 100
446,448c446
< #define BZ_GET_FASTtPos define MAIN_QSORT_SMALL_THRESH 20
< #define MAIN_QSORT_DEPTH_THRESH (BZ_N_RADIX + BZ_N_QSORT)
< #define MAIN_QSORT_STACK_SIZE 100
---
> #define BZ_GET_FASTtPos define 100
(88.7 %, 23164 bytes)
446,453c446
< #define BZ_GET_FASTtPos MAIN_QSORT_STACK_SIZE 100
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
---
> #define BZ_GET_FASTtPos mpop
446,454c446
< #define BZ_GET_FASTtPos MAIN_QSORT_STACK_SIZE 100
< 
< 
< 
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
< #undef mmin
---
> #define BZ_GET_FASTtPos MAIN_QSORT_STACK_SIZE #undef mmin
450,454c450
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
< #undef mmin
---
> undef mmin
450,454c450
< #undef mswap
< #undef mvswap
< #undef mpush
< #undef mpop
< #undef mmin
---
> #mmin
(88.7 %, 23088 bytes)
446,451c446
< #define BZ_GET_FASTtPos mpop
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
> #define BZ_GET_FASTtPos #undef MAIN_QSORT_DEPTH_THRESH
447,451c447
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
> undef MAIN_QSORT_DEPTH_THRESH
447,451c447
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
---
> #MAIN_QSORT_DEPTH_THRESH
447,452c447
< #undef mmin
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
> #undef #undef MAIN_QSORT_STACK_SIZE
448,452c448
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
> undef MAIN_QSORT_STACK_SIZE
448,452c448
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
---
> #MAIN_QSORT_STACK_SIZE
448,458c448
< #undef mnextsize
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #undef #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
449,458c449
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
449,458c449
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
449,458c449
< #undef mnextswap
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #undef (b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
450,458c450
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
450,458c450
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #) (ftab[((b)+1) << 8] - ftab[(b) << 8])
450,458c450
< #undef MAIN_QSORT_SMALL_THRESH
< #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #undef (ftab[((b)+1) << 8] - ftab[(b) << 8])
(88.8 %, 23006 bytes)
446,453c446
< #define BZ_GET_FASTtPos #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BZ_GET_FASTtPos ftab[((b)+1) << 8] - ftab[(b) << 8])
446,453c446
< #define BZ_GET_FASTtPos #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BZ_GET_FASTtPos #[((b)+1) << 8] - ftab[(b) << 8])
446,453c446
< #define BZ_GET_FASTtPos #undef MAIN_QSORT_DEPTH_THRESH
< #undef MAIN_QSORT_STACK_SIZE
< 
< 
< 
< 
< 
< #define BIGFREQ(b) (ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BZ_GET_FASTtPos #undef ((b)+1) << 8] - ftab[(b) << 8])
(88.8 %, 22921 bytes)
446c446
< #define BZ_GET_FASTtPos ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BZ_GET_FASTtPos ftab[(b) << 8])
446c446
< #define BZ_GET_FASTtPos ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BZ_GET_FASTtPos ftab[(b) << 8])
446c446
< #define BZ_GET_FASTtPos ftab[((b)+1) << 8] - ftab[(b) << 8])
---
> #define BZ_GET_FASTtPos ftab[(b) << 8])
(88.8 %, 22900 bytes)
446,447c446
< #define BZ_GET_FASTtPos ftab[(b) << 8])
< #define SETMASK (1 << 21)
---
> #define BZ_GET_FASTtPos 1 << 21)
446,447c446
< #define BZ_GET_FASTtPos ftab[(b) << 8])
< #define SETMASK (1 << 21)
---
> #define BZ_GET_FASTtPos ftab<< 21)
(88.8 %, 22867 bytes)
446,451c446
< #define BZ_GET_FASTtPos 1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
---
> #define BZ_GET_FASTtPos #undef BIGFREQ
446,451c446
< #define BZ_GET_FASTtPos 1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
---
> #define BZ_GET_FASTtPos 1 undef BIGFREQ
446,451c446
< #define BZ_GET_FASTtPos 1 << 21)
< #define CLEARMASK (~(SETMASK))
< 
< 
< 
< #undef BIGFREQ
---
> #define BZ_GET_FASTtPos 1 << BIGFREQ
(88.9 %, 22824 bytes)
446,467c446
< #define BZ_GET_FASTtPos #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define BZ_GET_FASTtPos zz0)  ((zz0) & 0xffffff00)
446,467c446
< #define BZ_GET_FASTtPos #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define BZ_GET_FASTtPos #)  ((zz0) & 0xffffff00)
446,467c446
< #define BZ_GET_FASTtPos #undef BIGFREQ
< #undef SETMASK
< #undef CLEARMASK
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define WEIGHTOF(zz0)  ((zz0) & 0xffffff00)
---
> #define BZ_GET_FASTtPos #undef ((zz0) & 0xffffff00)
(88.9 %, 22742 bytes)
446,447c446
< #define BZ_GET_FASTtPos zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define BZ_GET_FASTtPos zz1)   ((zz1) & 0x000000ff)
446,447c446
< #define BZ_GET_FASTtPos zz0)  ((zz0) & 0xffffff00)
< #define DEPTHOF(zz1)   ((zz1) & 0x000000ff)
---
> #define BZ_GET_FASTtPos zz0)   ((zz1) & 0x000000ff)
(88.9 %, 22699 bytes)
446,447c446
< #define BZ_GET_FASTtPos zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define BZ_GET_FASTtPos zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
446,447c446
< #define BZ_GET_FASTtPos zz1)   ((zz1) & 0x000000ff)
< #define MYMAX(zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define BZ_GET_FASTtPos zz1,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
(88.9 %, 22657 bytes)
446c446
< #define BZ_GET_FASTtPos zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define BZ_GET_FASTtPos (zz2) : (zz3))
446c446
< #define BZ_GET_FASTtPos zz2,zz3) ((zz2) > (zz3) ? (zz2) : (zz3))
---
> #define BZ_GET_FASTtPos zz2zz2) : (zz3))
(89.0 %, 22631 bytes)
446,448c446
< #define BZ_GET_FASTtPos (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define BZ_GET_FASTtPos ,zw2)                           \
446,448c446
< #define BZ_GET_FASTtPos (zz2) : (zz3))
< 
< #define ADDWEIGHTS(zw1,zw2)                           \
---
> #define BZ_GET_FASTtPos (zw2)                           \
(89.0 %, 22593 bytes)
446,447c446
< #define BZ_GET_FASTtPos ,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define BZ_GET_FASTtPos )) |                    \
446,447c446
< #define BZ_GET_FASTtPos ,zw2)                           \
<    (WEIGHTOF(zw1)+WEIGHTOF(zw2)) |                    \
---
> #define BZ_GET_FASTtPos ,) |                    \
(89.0 %, 22529 bytes)
446,447c446
< #define BZ_GET_FASTtPos )) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
> #define BZ_GET_FASTtPos ,DEPTHOF(zw2)))
446,447c446
< #define BZ_GET_FASTtPos )) |                    \
<    (1 + MYMAX(DEPTHOF(zw1),DEPTHOF(zw2)))
---
> #define BZ_GET_FASTtPos )DEPTHOF(zw2)))
(89.0 %, 22477 bytes)
446,448c446
< #define BZ_GET_FASTtPos ,DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
---
> #define BZ_GET_FASTtPos \
446,451c446
< #define BZ_GET_FASTtPos ,DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
---
> #define BZ_GET_FASTtPos ,#define DOWNHEAP(z)                                   \
446,451c446
< #define BZ_GET_FASTtPos ,DEPTHOF(zw2)))
< 
< #define UPHEAP(z)                                     \
< 
< 
< #define DOWNHEAP(z)                                   \
---
> #define BZ_GET_FASTtPos ,DEPTHOFdefine DOWNHEAP(z)                                   \
(89.1 %, 22406 bytes)
446,517c446
< #define BZ_GET_FASTtPos \
< 
< 
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> #define BZ_GET_FASTtPos )                           \
449,517c449
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
---
> \
449,546c449
< #define DOWNHEAP(z)                                   \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define bsNEEDW(nz)                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_LESSER_ICOST  0
---
> ##define BZ_LESSER_ICOST  0
(89.1 %, 22261 bytes)
446,500c446
< #define BZ_GET_FASTtPos )                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
> #define BZ_GET_FASTtPos (rrr)                               \
446,500c446
< #define BZ_GET_FASTtPos )                           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_LESSER_ICOST  0
< #define BZ_GREATER_ICOST 15
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define RETURN(rrr)                               \
---
> #define BZ_GET_FASTtPos )                           rrr)                               \
(89.2 %, 22111 bytes)
446,449c446
< #define BZ_GET_FASTtPos (rrr)                               \
<    ;
< 
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define BZ_GET_FASTtPos nnn)                     \
446,449c446
< #define BZ_GET_FASTtPos (rrr)                               \
<    ;
< 
< #define GET_BITS(lll,vvv,nnn)                     \
---
> #define BZ_GET_FASTtPos ()                     \
(89.2 %, 22042 bytes)
446,448c446
< #define BZ_GET_FASTtPos nnn)                     \
<    case lll: s->state = lll;                      \
<    while (True) 
---
> #define BZ_GET_FASTtPos while (True) 
446,448c446
< #define BZ_GET_FASTtPos nnn)                     \
<    case lll: s->state = lll;                      \
<    while (True) 
---
> #define BZ_GET_FASTtPos nnn(True) 
(89.3 %, 21960 bytes)
446,449c446
< #define BZ_GET_FASTtPos while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define BZ_GET_FASTtPos GET_BITS(lll,uuu,8)
446,449c446
< #define BZ_GET_FASTtPos while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define BZ_GET_FASTtPos while (lll,uuu,8)
446,449c446
< #define BZ_GET_FASTtPos while (True) 
< 
< #define GET_UCHAR(lll,uuu)                        \
<    GET_BITS(lll,uuu,8)
---
> #define BZ_GET_FASTtPos while (lll,uuu,8)
(89.3 %, 21890 bytes)
446,448c446
< #define BZ_GET_FASTtPos GET_BITS(lll,uuu,8)
< 
< #define GET_BIT(lll,uuu)                          \
---
> #define BZ_GET_FASTtPos ,uuu)                          \
446,448c446
< #define BZ_GET_FASTtPos GET_BITS(lll,uuu,8)
< 
< #define GET_BIT(lll,uuu)                          \
---
> #define BZ_GET_FASTtPos GET_BITSuuu)                          \
446,448c446
< #define BZ_GET_FASTtPos GET_BITS(lll,uuu,8)
< 
< #define GET_BIT(lll,uuu)                          \
---
> #define BZ_GET_FASTtPos GET_BITS()                          \
(89.3 %, 21850 bytes)
446,450c446
< #define BZ_GET_FASTtPos ,uuu)                          \
<    GET_BITS(lll,uuu,1)
< 
< 
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
446,450c446
< #define BZ_GET_FASTtPos ,uuu)                          \
<    GET_BITS(lll,uuu,1)
< 
< 
< #define GET_MTF_VAL(label1,label2,lval)           \
---
> #define BZ_GET_FASTtPos ,GET_MTF_VAL(label1,label2,lval)           \
(89.4 %, 21791 bytes)
446,478c446
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos default_bzalloc ( void* opaque, Int32 items, Int32 size )
446,478c446
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define ( void* opaque, Int32 items, Int32 size )
446,478c446
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define GET_MTF_VALvoid* opaque, Int32 items, Int32 size )
446,478c446
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define GET_MTF_VAL(* opaque, Int32 items, Int32 size )
446,478c446
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define GET_MTF_VAL(label1opaque, Int32 items, Int32 size )
446,478c446
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,, Int32 items, Int32 size )
446,478c446
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2Int32 items, Int32 size )
446,478c446
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,items, Int32 size )
446,478c446
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval, Int32 size )
446,478c446
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           Int32 size )
477,478c477
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> size )
478c478
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> )
478,479c478
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
---
> void;
478,481c478
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
---
> void* static
478,482c478
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc void default_bzfree ( void* opaque, void* addr )
478,482c478
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( default_bzfree ( void* opaque, void* addr )
478,482c478
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void( void* opaque, void* addr )
478,482c478
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* void* opaque, void* addr )
478,482c478
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque* opaque, void* addr )
478,482c478
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, opaque, void* addr )
478,482c478
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 , void* addr )
478,482c478
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 itemsvoid* addr )
478,482c478
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 items, * addr )
478,482c478
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 items, Int32 addr )
481,484d480
< static
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
481,484d480
< static
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
481,497d480
< static
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
482,498c482
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> BZ_API(BZ2_bzCompressInit) 
482,498c482
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void (BZ2_bzCompressInit) 
482,498c482
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void default_bzfree BZ2_bzCompressInit) 
482,498c482
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void default_bzfree ( ) 
482,499c482
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree ( void( bz_stream* strm, 
482,499c482
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree ( void* bz_stream* strm, 
482,499c482
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree ( void* opaque* strm, 
482,499c482
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree ( void* opaque, strm, 
482,499c482
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree ( void* opaque, void, 
482,500c482
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> void default_bzfree ( void* opaque, void* int        blockSize100k,
482,500c482
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> void default_bzfree ( void* opaque, void* addr blockSize100k,
483,500c483
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> ,
498,501c498
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int        verbosity,
498,501c498
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int verbosity,
498,501c498
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_API,
498,502c498
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int BZ_API(int        workFactor )
498,502c498
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int BZ_API(BZ2_bzCompressInitworkFactor )
499,502c499
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     )
499,503c499
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
---
>                     ( {
499,504c499
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_streamInt32   n;
499,504c499
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* n;
499,504c499
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* strm;
500,505c500
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      EState* s;
500,505c500
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        * s;
500,505c500
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        blockSize100ks;
501,505c501
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      ;
501,507c501
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        if (!0) return BZ_CONFIG_ERROR;
501,507c501
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        verbosity(!0) return BZ_CONFIG_ERROR;
502,507c502
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      !0) return BZ_CONFIG_ERROR;
502,507c502
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        0) return BZ_CONFIG_ERROR;
502,507c502
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      int        workFactor ) return BZ_CONFIG_ERROR;
503,507c503
< {
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
> return BZ_CONFIG_ERROR;
504,507c504
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>    BZ_CONFIG_ERROR;
504,507c504
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>    Int32   ;
504,509c504
<    Int32   n;
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    Int32   nif (strm == NULL || 
505,509c505
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    (strm == NULL || 
505,509c505
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    EStatestrm == NULL || 
505,509c505
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    EState* == NULL || 
505,509c505
<    EState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    EState* sNULL || 
507,509c507
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
---
>    || 
507,510c507
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if blockSize100k < 1 || blockSize100k > 9 ||
507,510c507
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (< 1 || blockSize100k > 9 ||
507,510c507
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (!1 || blockSize100k > 9 ||
507,510c507
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (!0|| blockSize100k > 9 ||
507,510c507
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (!0) blockSize100k > 9 ||
507,510c507
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL || 
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (!0) return > 9 ||
(89.4 %, 21716 bytes)
507,508c507
<    if (!1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
---
>    if (!)
507,509c507
<    if (!1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
---
>    if (!1 return BZ_PARAM_ERROR;
507,509c507
<    if (!1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
---
>    if (!1 || BZ_PARAM_ERROR;
507,509c507
<    if (!1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
---
>    if (!1 || blockSize100k ;
507,511c507
<    if (!1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    if (!1 || blockSize100k > if (workFactor == 0) workFactor = 30;
507,511c507
<    if (!1 || blockSize100k > 9 ||
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    if (!1 || blockSize100k > 9 (workFactor == 0) workFactor = 30;
508,511c508
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>        workFactor == 0) workFactor = 30;
508,511c508
<        workFactor < 0 || workFactor > 250)
<      return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>        workFactor == 0) workFactor = 30;
(89.4 %, 21644 bytes)
508,509c508
<        workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>        == NULL) strm->bzalloc = default_bzalloc;
508,509c508
<        workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>        workFactor NULL) strm->bzalloc = default_bzalloc;
508,509c508
<        workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>        workFactor == ) strm->bzalloc = default_bzalloc;
508,509c508
<        workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>        workFactor == 0strm->bzalloc = default_bzalloc;
508,509c508
<        workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>        workFactor == 0) ->bzalloc = default_bzalloc;
508,509c508
<        workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>        workFactor == 0) workFactor bzalloc = default_bzalloc;
508,509c508
<        workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>        workFactor == 0) workFactor = = default_bzalloc;
508,509c508
<        workFactor == 0) workFactor = 30;
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>        workFactor == 0) workFactor = 30default_bzalloc;
509c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    ;
509,510c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
509,510c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if ((strm->bzfree == NULL) strm->bzfree = default_bzfree;
509,510c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strmstrm->bzfree == NULL) strm->bzfree = default_bzfree;
509,510c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->->bzfree == NULL) strm->bzfree = default_bzfree;
509,510c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc bzfree == NULL) strm->bzfree = default_bzfree;
509,510c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == == NULL) strm->bzfree = default_bzfree;
509,510c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULLNULL) strm->bzfree = default_bzfree;
509,510c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) ) strm->bzfree = default_bzfree;
509,510c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) strmstrm->bzfree = default_bzfree;
509,510c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) strm->->bzfree = default_bzfree;
509,510c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) strm->bzalloc bzfree = default_bzfree;
509,510c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) strm->bzalloc = = default_bzfree;
509,510c509
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (strm->bzalloc == NULL) strm->bzalloc = default_bzallocdefault_bzfree;
510c510
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    ;
(89.5 %, 21586 bytes)
509,510c509
<    ;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    default_bzfree;
510c510
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    ;
(89.5 %, 21540 bytes)
509,512c509
<    default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    (s == NULL) return BZ_MEM_ERROR;
509,512c509
<    default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    default_bzfrees == NULL) return BZ_MEM_ERROR;
511,512c511
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    == NULL) return BZ_MEM_ERROR;
511,512c511
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    s NULL) return BZ_MEM_ERROR;
511,512c511
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    s = ) return BZ_MEM_ERROR;
511,512c511
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    s = BZALLOCreturn BZ_MEM_ERROR;
511,512c511
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    s = BZALLOC( BZ_MEM_ERROR;
511,512c511
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    s = BZALLOC( sizeof;
511,513c511
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
---
>    s = BZALLOC( sizeof(s->strm = strm;
511,513c511
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
---
>    s = BZALLOC( sizeof(EState->strm = strm;
511,513c511
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
---
>    s = BZALLOC( sizeof(EState) strm = strm;
511,513c511
<    s = BZALLOC( sizeof(EState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
---
>    s = BZALLOC( sizeof(EState) )= strm;
512,513c512
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
---
>    strm;
512,513c512
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
---
>    if ;
512,515c512
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
---
>    if (s->arr1 = NULL;
512,515c512
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
---
>    if (s ->arr1 = NULL;
512,515c512
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
---
>    if (s == arr1 = NULL;
512,515c512
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
---
>    if (s == NULL= NULL;
512,515c512
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm = strm;
< 
<    s->arr1 = NULL;
---
>    if (s == NULL) NULL;
(89.5 %, 21491 bytes)
512,515c512
<    strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
---
>    ;
512,516c512
<    strm;
< 
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    strms->ftab = NULL;
514,516c514
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    ->ftab = NULL;
514,516c514
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    sftab = NULL;
514,516c514
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    s->= NULL;
514,516c514
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    s->arr1 NULL;
514,516c514
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
---
>    s->arr1 = ;
514,518c514
<    s->arr1 = NULL;
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
---
>    s->arr1 = NULLn       = 100000 * blockSize100k;
515,518c515
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
---
>    = 100000 * blockSize100k;
515,518c515
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
---
>    s100000 * blockSize100k;
515,518c515
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
---
>    s->* blockSize100k;
515,518c515
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
---
>    s->arr2 blockSize100k;
515,518c515
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
---
>    s->arr2 = ;
515,519c515
<    s->arr2 = NULL;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->arr2 = NULLs->arr1 = BZALLOC( n                  * sizeof(UInt32) );
516,519c516
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    ->arr1 = BZALLOC( n                  * sizeof(UInt32) );
516,519c516
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    sarr1 = BZALLOC( n                  * sizeof(UInt32) );
(89.5 %, 21448 bytes)
512,515d511
<    ;
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
513,516c513
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    ->arr1 = BZALLOC( n                  * sizeof(UInt32) );
513,516c513
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    sarr1 = BZALLOC( n                  * sizeof(UInt32) );
513,516c513
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->= BZALLOC( n                  * sizeof(UInt32) );
513,516c513
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->ftab BZALLOC( n                  * sizeof(UInt32) );
513,516c513
<    s->ftab = NULL;
< 
<    n       = 100000 * blockSize100k;
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    s->ftab = ( n                  * sizeof(UInt32) );
(89.6 %, 21386 bytes)
512c512
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
---
>    ;
512,513c512
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    ss->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
512,513c512
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
512,513c512
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr1 arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
512,513c512
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr1 = = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
512,513c512
<    s->arr1 = BZALLOC( n                  * sizeof(UInt32) );
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr1 = BZALLOCBZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
(89.6 %, 21330 bytes)
512,513c512
<    ;
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sizeof(UInt32) );
513c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    (UInt32) );
513c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sUInt32) );
513c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->) );
513c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 );
513c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    s->arr2 = ;
513,514c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOCs->ftab = BZALLOC( 65537              * sizeof(UInt32) );
513,514c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( ->ftab = BZALLOC( 65537              * sizeof(UInt32) );
513,514c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (ftab = BZALLOC( 65537              * sizeof(UInt32) );
513,514c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n= BZALLOC( 65537              * sizeof(UInt32) );
513,514c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZALLOC( 65537              * sizeof(UInt32) );
513,514c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT( 65537              * sizeof(UInt32) );
513,514c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) 65537              * sizeof(UInt32) );
513,514c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * * sizeof(UInt32) );
513,514c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeofsizeof(UInt32) );
513,514c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof((UInt32) );
513,514c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32UInt32) );
513,514c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ) );
513,514c513
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) ));
514c514
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
---
>    ;
514,516c514
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    sif (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
514,516c514
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->(s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
514,516c514
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
514,516c514
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = ->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
514,516c514
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOCarr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
514,516c514
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( == NULL || s->arr2 == NULL || s->ftab == NULL) 
514,516c514
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              NULL || s->arr2 == NULL || s->ftab == NULL) 
514,516c514
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * || s->arr2 == NULL || s->ftab == NULL) 
514,516c514
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * sizeofs->arr2 == NULL || s->ftab == NULL) 
514,516c514
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * sizeof(->arr2 == NULL || s->ftab == NULL) 
514,516c514
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * sizeof(UInt32arr2 == NULL || s->ftab == NULL) 
514,516c514
<    s->ftab = BZALLOC( 65537              * sizeof(UInt32) );
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    s->ftab = BZALLOC( 65537              * sizeof(UInt32) == NULL || s->ftab == NULL) 
(89.6 %, 21274 bytes)
514,516c514
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    NULL || s->ftab == NULL) 
516c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    || s->ftab == NULL) 
516c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if s->ftab == NULL) 
516c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (->ftab == NULL) 
516c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (sftab == NULL) 
516c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->== NULL) 
516c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->arr1 NULL) 
516c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->arr1 == ) 
516,518c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL s->blockNo           = 0;
516,518c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || ->blockNo           = 0;
516,518c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || sblockNo           = 0;
516,518c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || s->= 0;
516,518c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || s->arr2 0;
516,518c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
---
>    if (s->arr1 == NULL || s->arr2 == ;
516,519c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL s->state             = BZ_S_INPUT;
516,519c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || ->state             = BZ_S_INPUT;
516,519c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || sstate             = BZ_S_INPUT;
516,519c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->= BZ_S_INPUT;
516,519c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab BZ_S_INPUT;
516,519c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == ;
516,520c516
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULLs->mode              = BZ_M_RUNNING;
518,520c518
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    ->mode              = BZ_M_RUNNING;
518,520c518
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    smode              = BZ_M_RUNNING;
518,520c518
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    s->= BZ_M_RUNNING;
518,520c518
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    s->blockNo           BZ_M_RUNNING;
518,520c518
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
---
>    s->blockNo           = ;
518,521c518
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s->blockNo           = 0s->combinedCRC       = 0;
519,521c519
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    ->combinedCRC       = 0;
519,521c519
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    scombinedCRC       = 0;
519,521c519
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s->= 0;
519,521c519
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s->state             0;
519,521c519
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
---
>    s->state             = ;
519,522c519
<    s->state             = BZ_S_INPUT;
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    s->state             = BZ_S_INPUTs->blockSize100k     = blockSize100k;
520,522c520
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    ->blockSize100k     = blockSize100k;
520,522c520
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    sblockSize100k     = blockSize100k;
520,522c520
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    s->= blockSize100k;
520,522c520
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    s->mode              blockSize100k;
520,522c520
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
---
>    s->mode              = ;
520,523c520
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->mode              = BZ_M_RUNNINGs->nblockMAX         = 100000 * blockSize100k - 19;
521,523c521
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    ->nblockMAX         = 100000 * blockSize100k - 19;
521,523c521
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    snblockMAX         = 100000 * blockSize100k - 19;
521,523c521
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->= 100000 * blockSize100k - 19;
521,523c521
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->combinedCRC       100000 * blockSize100k - 19;
521,523c521
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->combinedCRC       = * blockSize100k - 19;
521,523c521
<    s->combinedCRC       = 0;
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->combinedCRC       = 0blockSize100k - 19;
522,523c522
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    - 19;
522,523c522
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s19;
522,523c522
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
---
>    s->;
522,524c522
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
---
>    s->blockSize100k     s->verbosity         = verbosity;
522,524c522
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
---
>    s->blockSize100k     = ->verbosity         = verbosity;
522,524c522
<    s->blockSize100k     = blockSize100k;
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
---
>    s->blockSize100k     = blockSize100kverbosity         = verbosity;
523,524c523
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
---
>    = verbosity;
523,524c523
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
---
>    sverbosity;
523,524c523
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
---
>    s->;
523,525c523
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
---
>    s->nblockMAX         s->workFactor        = workFactor;
523,525c523
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
---
>    s->nblockMAX         = ->workFactor        = workFactor;
523,525c523
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
---
>    s->nblockMAX         = 100000 workFactor        = workFactor;
523,525c523
<    s->nblockMAX         = 100000 * blockSize100k - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
---
>    s->nblockMAX         = 100000 * = workFactor;
(89.7 %, 21187 bytes)
522,524c522
<    - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
---
>    workFactor;
522,524c522
<    - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
---
>    - ;
522,526c522
<    - 19;
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    - 19s->block             = (UChar*)s->arr2;
523,526c523
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    ->block             = (UChar*)s->arr2;
523,526c523
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    sblock             = (UChar*)s->arr2;
523,526c523
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->= (UChar*)s->arr2;
523,526c523
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->verbosity         (UChar*)s->arr2;
523,526c523
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->verbosity         = UChar*)s->arr2;
523,526c523
<    s->verbosity         = verbosity;
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->verbosity         = verbosity*)s->arr2;
524,526c524
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    )s->arr2;
524,526c524
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    ss->arr2;
524,526c524
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->->arr2;
524,526c524
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->workFactor        arr2;
524,526c524
<    s->workFactor        = workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    s->workFactor        = ;
(89.7 %, 21118 bytes)
522,524c522
<    workFactor;
< 
<    s->block             = (UChar*)s->arr2;
---
>    ;
522,525c522
<    workFactor;
< 
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    workFactors->mtfv              = (UInt16*)s->arr1;
524,525c524
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    ->mtfv              = (UInt16*)s->arr1;
524,525c524
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    smtfv              = (UInt16*)s->arr1;
524,525c524
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->= (UInt16*)s->arr1;
524,525c524
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->block             (UInt16*)s->arr1;
524,525c524
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->block             = UInt16*)s->arr1;
524,525c524
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->block             = (*)s->arr1;
524,525c524
<    s->block             = (UChar*)s->arr2;
<    s->mtfv              = (UInt16*)s->arr1;
---
>    s->block             = (UChar)s->arr1;
(89.7 %, 21064 bytes)
522,523d521
<    ;
<    s->mtfv              = (UInt16*)s->arr1;
523,524c523
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    ->zbits             = NULL;
523,524c523
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    szbits             = NULL;
523,524c523
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    s->= NULL;
523,524c523
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    s->mtfv              NULL;
523,524c523
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
---
>    s->mtfv              = ;
523,525c523
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (s->ptr               = (UInt32*)s->arr1;
523,525c523
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (UInt16->ptr               = (UInt32*)s->arr1;
523,525c523
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (UInt16*ptr               = (UInt32*)s->arr1;
523,525c523
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (UInt16*)= (UInt32*)s->arr1;
523,525c523
<    s->mtfv              = (UInt16*)s->arr1;
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->mtfv              = (UInt16*)s(UInt32*)s->arr1;
(89.7 %, 21015 bytes)
522,523c522
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    )s->arr1;
522,523c522
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    ss->arr1;
522,523c522
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->->arr1;
522,523c522
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->zbits             arr1;
522,523c522
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->zbits             = ;
522,525c522
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->zbits             = NULLstrm->state          = s;
523,525c523
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    ->state          = s;
523,525c523
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    sstate          = s;
523,525c523
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->= s;
523,525c523
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->ptr               s;
523,525c523
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
---
>    s->ptr               = ;
523,526c523
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (strm->total_in_lo32  = 0;
523,526c523
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32->total_in_lo32  = 0;
523,526c523
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*total_in_lo32  = 0;
523,526c523
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*)= 0;
523,526c523
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*)s0;
523,526c523
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
---
>    s->ptr               = (UInt32*)s->;
523,527c523
<    s->ptr               = (UInt32*)s->arr1;
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    s->ptr               = (UInt32*)s->arr1strm->total_in_hi32  = 0;
525,527c525
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    ->total_in_hi32  = 0;
525,527c525
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    strmtotal_in_hi32  = 0;
525,527c525
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    strm->= 0;
525,527c525
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    strm->state          0;
525,527c525
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
---
>    strm->state          = ;
525,528c525
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm->state          = sstrm->total_out_lo32 = 0;
526,528c526
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    ->total_out_lo32 = 0;
526,528c526
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strmtotal_out_lo32 = 0;
526,528c526
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm->= 0;
526,528c526
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm->total_in_lo32  0;
526,528c526
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
---
>    strm->total_in_lo32  = ;
526,529c526
<    strm->total_in_lo32  = 0;
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm->total_in_lo32  = 0strm->total_out_hi32 = 0;
527,529c527
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    ->total_out_hi32 = 0;
527,529c527
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strmtotal_out_hi32 = 0;
527,529c527
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm->= 0;
527,529c527
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm->total_in_hi32  0;
527,529c527
<    strm->total_in_hi32  = 0;
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
---
>    strm->total_in_hi32  = ;
528,530d527
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
528,530d527
<    strm->total_out_lo32 = 0;
<    strm->total_out_hi32 = 0;
<    ;
(89.8 %, 20952 bytes)
527,542c527
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    strm->total_in_hi32  = 0)               \
528,542c528
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    \
529,559c529
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
529,559c529
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
529,559c529
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return BZ_OK(BZ2_bzCompress) ( bz_stream *strm, int action )
530,559c530
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ2_bzCompress) ( bz_stream *strm, int action )
542,559c542
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> ) ( bz_stream *strm, int action )
542,559c542
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #( bz_stream *strm, int action )
542,559c542
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define bz_stream *strm, int action )
542,559c542
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK*strm, int action )
542,559c542
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(strm, int action )
542,559c542
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs, int action )
542,559c542
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,int action )
542,559c542
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,zchh0action )
542,559c542
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,zchh0)               )
559d558
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
559,562c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int EState* s;
559,562c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API* s;
559,562c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(s;
559,562c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompress;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) if (strm == NULL) return BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( (strm == NULL) return BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream strm == NULL) return BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *== NULL) return BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strmNULL) return BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, ) return BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int return BZ_PARAM_ERROR;
559,563c559
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action BZ_PARAM_ERROR;
560,563c560
< {
<    
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> ;
562,563d561
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
562,564c562
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    EState= strm->state;
562,564c562
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    EState* strm->state;
562,564c562
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    EState* s->state;
563,564c563
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    state;
563,564c563
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    if ;
563,565c563
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (if (s == NULL) return BZ_PARAM_ERROR;
563,565c563
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (strm (s == NULL) return BZ_PARAM_ERROR;
563,565c563
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (strm == s == NULL) return BZ_PARAM_ERROR;
563,565c563
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (strm == NULL== NULL) return BZ_PARAM_ERROR;
(89.8 %, 20896 bytes)
563,564c563
<    if (strm == s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (strm == strm) return BZ_PARAM_ERROR;
563,564c563
<    if (strm == s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (strm == s ) return BZ_PARAM_ERROR;
(89.8 %, 20844 bytes)
563,567c563
<    if (strm == strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
---
>    if (strm == return BZ_OK; 
563,567c563
<    if (strm == strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
---
>    if (strm == strmBZ_OK; 
563,567c563
<    if (strm == strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
---
>    if (strm == strm) ; 
563,568c563
<    if (strm == strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
---
>    if (strm == strm) return }
563,572c563
<    if (strm == strm) return BZ_PARAM_ERROR;
< 
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    if (strm == strm) return BZ_PARAM_ERRORint BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
565,572c565
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
565,572c565
<    preswitch:
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    preswitch(BZ2_bzCompressEnd)  ( bz_stream *strm )
566,572c566
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    BZ2_bzCompressEnd)  ( bz_stream *strm )
566,572c566
<    switch (s->mode) 
<    return BZ_OK; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
---
>    switch )  ( bz_stream *strm )
(89.9 %, 20770 bytes)
563,570c563
<    if (strm == strm) ; 
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
---
>    if (strm == strm) EState* s;
564,570c564
< }
< 
< 
< 
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
---
> * s;
568,570c568
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
---
> s;
568,570c568
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
---
> int ;
568,571c568
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_APIif (strm == NULL) return BZ_PARAM_ERROR;
568,571c568
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API((strm == NULL) return BZ_PARAM_ERROR;
568,571c568
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEndstrm == NULL) return BZ_PARAM_ERROR;
568,571c568
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEnd)  == NULL) return BZ_PARAM_ERROR;
568,571c568
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEnd)  ( NULL) return BZ_PARAM_ERROR;
568,571c568
< int BZ_API(BZ2_bzCompressEnd)  ( bz_stream *strm )
< {
<    EState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzCompressEnd)  ( bz_stream ) return BZ_PARAM_ERROR;
(89.9 %, 20703 bytes)
564,566c564
< * s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> = strm->state;
564,566c564
< * s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> * strm->state;
564,566c564
< * s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> * s->state;
565,566c565
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    state;
565,566c565
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    if ;
565,567c565
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (if (s == NULL) return BZ_PARAM_ERROR;
565,567c565
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (strm (s == NULL) return BZ_PARAM_ERROR;
565,567c565
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (strm == s == NULL) return BZ_PARAM_ERROR;
(89.9 %, 20649 bytes)
564,566c564
< * strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> * if (s->strm != strm) return BZ_PARAM_ERROR;
564,566c564
< * strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> * strm(s->strm != strm) return BZ_PARAM_ERROR;
564,566c564
< * strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> * strm->s->strm != strm) return BZ_PARAM_ERROR;
564,566c564
< * strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> * strm->state->strm != strm) return BZ_PARAM_ERROR;
565,566c565
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    strm != strm) return BZ_PARAM_ERROR;
565,566c565
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if != strm) return BZ_PARAM_ERROR;
565,566c565
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (strm) return BZ_PARAM_ERROR;
565,566c565
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s ) return BZ_PARAM_ERROR;
565,566c565
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s == return BZ_PARAM_ERROR;
565,566c565
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s == NULLBZ_PARAM_ERROR;
565,566c565
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s == NULL) ;
(89.9 %, 20597 bytes)
565,567c565
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (BZFREE(s->arr1);
565,567c565
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (strm(s->arr1);
565,567c565
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (strm) s->arr1);
565,567c565
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (strm) return ->arr1);
565,567c565
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if (strm) return BZ_PARAM_ERRORarr1);
567c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    );
567c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
---
>    if ;
567,568c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (if (s->arr2 != NULL) BZFREE(s->arr2);
567,568c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s(s->arr2 != NULL) BZFREE(s->arr2);
567,568c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->s->arr2 != NULL) BZFREE(s->arr2);
567,568c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr1 ->arr2 != NULL) BZFREE(s->arr2);
567,568c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr1 != arr2 != NULL) BZFREE(s->arr2);
567,568c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr1 != NULL!= NULL) BZFREE(s->arr2);
567,568c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr1 != NULL) NULL) BZFREE(s->arr2);
567,568c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr1 != NULL) BZFREE) BZFREE(s->arr2);
567,568c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr1 != NULL) BZFREE(BZFREE(s->arr2);
567,568c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr1 != NULL) BZFREE(s(s->arr2);
567,568c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr1 != NULL) BZFREE(s->s->arr2);
567,568c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr1 != NULL) BZFREE(s->arr1->arr2);
567,568c567
<    if (s->arr1 != NULL) BZFREE(s->arr1);
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    if (s->arr1 != NULL) BZFREE(s->arr1)arr2);
568c568
<    if (s->arr2 != NULL) BZFREE(s->arr2);
---
>    );
(90.0 %, 20563 bytes)
567,568c567
<    if (s->arr1 != NULL!= NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->arr1 != NULL->ftab != NULL) BZFREE(s->ftab);
567,568c567
<    if (s->arr1 != NULL!= NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->arr1 != NULL!= ftab != NULL) BZFREE(s->ftab);
567,568c567
<    if (s->arr1 != NULL!= NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->arr1 != NULL!= NULL!= NULL) BZFREE(s->ftab);
567,568c567
<    if (s->arr1 != NULL!= NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->arr1 != NULL!= NULL) NULL) BZFREE(s->ftab);
567,568c567
<    if (s->arr1 != NULL!= NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->arr1 != NULL!= NULL) BZFREE) BZFREE(s->ftab);
567,568c567
<    if (s->arr1 != NULL!= NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->arr1 != NULL!= NULL) BZFREE(BZFREE(s->ftab);
567,568c567
<    if (s->arr1 != NULL!= NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->arr1 != NULL!= NULL) BZFREE(s(s->ftab);
567,568c567
<    if (s->arr1 != NULL!= NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->arr1 != NULL!= NULL) BZFREE(s->s->ftab);
567,568c567
<    if (s->arr1 != NULL!= NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->arr1 != NULL!= NULL) BZFREE(s->arr2->ftab);
567,568c567
<    if (s->arr1 != NULL!= NULL) BZFREE(s->arr2);
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if (s->arr1 != NULL!= NULL) BZFREE(s->arr2)ftab);
568c568
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    );
568c568
<    if (s->ftab != NULL) BZFREE(s->ftab);
---
>    if ;
568,569c568
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
---
>    if (BZFREE(strm->state);
568,569c568
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
---
>    if (s(strm->state);
568,569c568
<    if (s->ftab != NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
---
>    if (s->strm->state);
(90.0 %, 20529 bytes)
567,568c567
<    if (s->arr1 != NULL!= NULL!= NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
---
>    if (s->arr1 != NULL!= NULL->state);
567,568c567
<    if (s->arr1 != NULL!= NULL!= NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
---
>    if (s->arr1 != NULL!= NULL!= state);
567,568c567
<    if (s->arr1 != NULL!= NULL!= NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
---
>    if (s->arr1 != NULL!= NULL!= NULL);
567,568c567
<    if (s->arr1 != NULL!= NULL!= NULL) BZFREE(s->ftab);
<    BZFREE(strm->state);
---
>    if (s->arr1 != NULL!= NULL!= NULL) ;
(90.0 %, 20489 bytes)
567,580c567
<    if (s->arr1 != NULL!= NULL!= NULL);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    if (s->arr1 != NULL!= NULL!= NULLBZ_API(BZ2_bzDecompressInit) 
567,580c567
<    if (s->arr1 != NULL!= NULL!= NULL);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    if (s->arr1 != NULL!= NULL!= NULL)(BZ2_bzDecompressInit) 
569,580c569
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZ2_bzDecompressInit) 
569,580c569
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    strm) 
569,581c569
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->( bz_stream* strm, 
569,581c569
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->state bz_stream* strm, 
569,581c569
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->state = * strm, 
569,581c569
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->state = NULLstrm, 
571,581c571
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    , 
571,582c571
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>    return int        verbosity,
571,582c571
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>    return BZ_OKverbosity,
572,582c572
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> ,
580,583c580
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int        small )
580,583c580
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int small )
580,583c580
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API)
580,584c580
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
---
> int BZ_API({
580,585c580
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
> int BZ_API(BZ2_bzDecompressInitDState* s;
581,585c581
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      * s;
581,585c581
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( s;
581,585c581
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_stream;
581,587c581
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      ( bz_stream* if (!0) return BZ_CONFIG_ERROR;
581,587c581
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      ( bz_stream* strm(!0) return BZ_CONFIG_ERROR;
582,587c582
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        !0) return BZ_CONFIG_ERROR;
582,587c582
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        int        0) return BZ_CONFIG_ERROR;
582,587c582
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        int        verbosity) return BZ_CONFIG_ERROR;
583,587c583
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        return BZ_CONFIG_ERROR;
583,587c583
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        int        BZ_CONFIG_ERROR;
583,587c583
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        int        small ;
584,589c584
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> if (strm == NULL) return BZ_PARAM_ERROR;
585,589c585
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    (strm == NULL) return BZ_PARAM_ERROR;
585,589c585
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    DStatestrm == NULL) return BZ_PARAM_ERROR;
585,589c585
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    DState* == NULL) return BZ_PARAM_ERROR;
585,589c585
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    DState* sNULL) return BZ_PARAM_ERROR;
587,589c587
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    ) return BZ_PARAM_ERROR;
587,589c587
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if return BZ_PARAM_ERROR;
587,589c587
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (BZ_PARAM_ERROR;
587,589c587
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
>    if (!;
587,590c587
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!0if (small != 0 && small != 1) return BZ_PARAM_ERROR;
587,590c587
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!0) (small != 0 && small != 1) return BZ_PARAM_ERROR;
587,590c587
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!0) return small != 0 && small != 1) return BZ_PARAM_ERROR;
587,590c587
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (!0) return BZ_CONFIG_ERROR!= 0 && small != 1) return BZ_PARAM_ERROR;
589,590c589
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    0 && small != 1) return BZ_PARAM_ERROR;
589,590c589
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if && small != 1) return BZ_PARAM_ERROR;
589,590c589
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (small != 1) return BZ_PARAM_ERROR;
589,590c589
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    if (small != 0 && small != 1) return BZ_PARAM_ERROR;
---
>    if (strm != 1) return BZ_PARAM_ERROR;
(90.0 %, 20431 bytes)
589,590c589
<    if (small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (verbosity > 4) return BZ_PARAM_ERROR;
589,590c589
<    if (small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (small > 4) return BZ_PARAM_ERROR;
589,590c589
<    if (small != 1) return BZ_PARAM_ERROR;
<    if (verbosity < 0 || verbosity > 4) return BZ_PARAM_ERROR;
---
>    if (small != 4) return BZ_PARAM_ERROR;
(90.1 %, 20372 bytes)
589,591c589
<    if (verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (NULL) strm->bzalloc = default_bzalloc;
589,591c589
<    if (verbosity > 4) return BZ_PARAM_ERROR;
< 
<    if (strm->bzalloc == NULL) strm->bzalloc = default_bzalloc;
---
>    if (verbosity ) strm->bzalloc = default_bzalloc;
(90.1 %, 20309 bytes)
589,590c589
<    if (NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (== NULL) strm->bzfree = default_bzfree;
589,590c589
<    if (NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (NULLNULL) strm->bzfree = default_bzfree;
589,590c589
<    if (NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (NULL) ) strm->bzfree = default_bzfree;
589,590c589
<    if (NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (NULL) strmstrm->bzfree = default_bzfree;
589,590c589
<    if (NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (NULL) strm->->bzfree = default_bzfree;
589,590c589
<    if (NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (NULL) strm->bzalloc bzfree = default_bzfree;
589,590c589
<    if (NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (NULL) strm->bzalloc = = default_bzfree;
589,590c589
<    if (NULL) strm->bzalloc = default_bzalloc;
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    if (NULL) strm->bzalloc = default_bzallocdefault_bzfree;
590c590
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
---
>    ;
590,592c590
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if s = BZALLOC( sizeof(DState) );
590,592c590
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (= BZALLOC( sizeof(DState) );
590,592c590
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strmBZALLOC( sizeof(DState) );
590,592c590
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->( sizeof(DState) );
590,592c590
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->bzfree sizeof(DState) );
590,592c590
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->bzfree == (DState) );
590,592c590
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->bzfree == NULLDState) );
590,592c590
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->bzfree == NULL) ) );
590,592c590
<    if (strm->bzfree == NULL) strm->bzfree = default_bzfree;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    if (strm->bzfree == NULL) strm);
(90.1 %, 20254 bytes)
590,593c590
<    ;
< 
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    s == NULL) return BZ_MEM_ERROR;
592,593c592
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    == NULL) return BZ_MEM_ERROR;
592,593c592
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    s NULL) return BZ_MEM_ERROR;
592,593c592
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    s = ) return BZ_MEM_ERROR;
592,593c592
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    s = BZALLOCreturn BZ_MEM_ERROR;
592,593c592
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    s = BZALLOC( BZ_MEM_ERROR;
592,593c592
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
---
>    s = BZALLOC( sizeof;
592,594c592
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
---
>    s = BZALLOC( sizeof(s->strm                  = strm;
592,594c592
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
---
>    s = BZALLOC( sizeof(DState->strm                  = strm;
592,594c592
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
---
>    s = BZALLOC( sizeof(DState) strm                  = strm;
592,594c592
<    s = BZALLOC( sizeof(DState) );
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
---
>    s = BZALLOC( sizeof(DState) )= strm;
593,594c593
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
---
>    strm;
593,594c593
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
---
>    if ;
593,595c593
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
---
>    if (strm->state              = s;
593,595c593
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
---
>    if (s ->state              = s;
593,595c593
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
---
>    if (s == state              = s;
593,595c593
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
---
>    if (s == NULL= s;
593,595c593
<    if (s == NULL) return BZ_MEM_ERROR;
<    s->strm                  = strm;
<    strm->state              = s;
---
>    if (s == NULL) s;
(90.1 %, 20188 bytes)
593,595c593
<    strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
---
>    ;
593,596c593
<    strm;
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strms->bsLive                = 0;
594,596c594
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    ->bsLive                = 0;
594,596c594
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strmbsLive                = 0;
594,596c594
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strm->= 0;
594,596c594
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strm->state              0;
594,596c594
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
---
>    strm->state              = ;
594,597c594
<    strm->state              = s;
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    strm->state              = ss->bsBuff                = 0;
595,597c595
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    ->bsBuff                = 0;
595,597c595
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    sbsBuff                = 0;
595,597c595
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    s->= 0;
595,597c595
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    s->state                 0;
595,597c595
<    s->state                 = BZ_X_MAGIC_1;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
---
>    s->state                 = ;
(90.2 %, 20107 bytes)
593,595d592
<    ;
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
594,596c594
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    ->calculatedCombinedCRC = 0;
594,596c594
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    scalculatedCombinedCRC = 0;
594,596c594
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->= 0;
594,596c594
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->bsLive                0;
594,596c594
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
---
>    s->bsLive                = ;
594,597c594
<    s->bsLive                = 0;
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsLive                = 0strm->total_in_lo32      = 0;
595,597c595
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    ->total_in_lo32      = 0;
595,597c595
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    stotal_in_lo32      = 0;
595,597c595
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->= 0;
595,597c595
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsBuff                0;
595,597c595
<    s->bsBuff                = 0;
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
---
>    s->bsBuff                = ;
(90.2 %, 20036 bytes)
593,595c593
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    ->total_in_hi32      = 0;
593,595c593
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    stotal_in_hi32      = 0;
593,595c593
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->= 0;
593,595c593
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->calculatedCombinedCRC 0;
593,595c593
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
---
>    s->calculatedCombinedCRC = ;
593,596c593
<    s->calculatedCombinedCRC = 0;
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    s->calculatedCombinedCRC = 0strm->total_out_lo32     = 0;
594,596c594
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    ->total_out_lo32     = 0;
594,596c594
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    strmtotal_out_lo32     = 0;
594,596c594
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    strm->= 0;
594,596c594
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    strm->total_in_lo32      0;
594,596c594
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
---
>    strm->total_in_lo32      = ;
594,597c594
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm->total_in_lo32      = 0strm->total_out_hi32     = 0;
595,597c595
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    ->total_out_hi32     = 0;
595,597c595
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strmtotal_out_hi32     = 0;
595,597c595
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm->= 0;
595,597c595
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm->total_in_hi32      0;
595,597c595
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
---
>    strm->total_in_hi32      = ;
595,598c595
<    strm->total_in_hi32      = 0;
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_in_hi32      = 0s->smallDecompress       = (Bool)small;
596,598c596
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    ->smallDecompress       = (Bool)small;
596,598c596
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strmsmallDecompress       = (Bool)small;
596,598c596
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->= (Bool)small;
596,598c596
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_out_lo32     (Bool)small;
596,598c596
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_out_lo32     = Bool)small;
596,598c596
<    strm->total_out_lo32     = 0;
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm->total_out_lo32     = 0)small;
597,598c597
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    small;
597,598c597
<    strm->total_out_hi32     = 0;
<    s->smallDecompress       = (Bool)small;
---
>    strm;
(90.3 %, 19970 bytes)
597,599c597
<    small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
---
>    ;
597,600c597
<    small;
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    smalls->tt                    = NULL;
598,600c598
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    ->tt                    = NULL;
598,600c598
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    stt                    = NULL;
598,600c598
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    s->= NULL;
598,600c598
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    s->ll4                   NULL;
598,600c598
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
---
>    s->ll4                   = ;
598,601c598
<    s->ll4                   = NULL;
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s->ll4                   = NULLs->currBlockNo           = 0;
599,601c599
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    ->currBlockNo           = 0;
599,601c599
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    scurrBlockNo           = 0;
599,601c599
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s->= 0;
599,601c599
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s->ll16                  0;
599,601c599
<    s->ll16                  = NULL;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
---
>    s->ll16                  = ;
(90.3 %, 19893 bytes)
597,599d596
<    ;
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
598,600c598
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    ->verbosity             = verbosity;
598,600c598
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    sverbosity             = verbosity;
598,600c598
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    s->= verbosity;
598,600c598
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    s->tt                    verbosity;
598,600c598
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
---
>    s->tt                    = ;
598,602c598
<    s->tt                    = NULL;
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
---
>    s->tt                    = NULLreturn BZ_OK;
599,602c599
<    s->currBlockNo           = 0;
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
---
>    BZ_OK;
(90.3 %, 19819 bytes)
597,617c597
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    BZ2_bzDecompress) ( bz_stream *strm )
597,617c597
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s) ( bz_stream *strm )
597,617c597
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->( bz_stream *strm )
597,617c597
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->verbosity             bz_stream *strm )
597,617c597
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->verbosity             = *strm )
597,617c597
<    s->verbosity             = verbosity;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    s->verbosity             = verbositystrm )
599,617c599
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
---
>    )
599,618c599
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
---
>    return {
599,619c599
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
>    return BZ_OKDState* s;
600,619c600
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> * s;
617,619c617
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> s;
617,619c617
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
---
> int ;
617,620c617
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_APIif (strm == NULL) return BZ_PARAM_ERROR;
617,620c617
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API((strm == NULL) return BZ_PARAM_ERROR;
617,620c617
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressstrm == NULL) return BZ_PARAM_ERROR;
617,620c617
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompress) == NULL) return BZ_PARAM_ERROR;
617,620c617
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompress) ( NULL) return BZ_PARAM_ERROR;
617,620c617
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream ) return BZ_PARAM_ERROR;
617,620c617
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream *return BZ_PARAM_ERROR;
617,620c617
< int BZ_API(BZ2_bzDecompress) ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompress) ( bz_stream *strm BZ_PARAM_ERROR;
618,620c618
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> ;
619,620d618
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
(90.4 %, 19741 bytes)
600,602c600
< * s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> = strm->state;
600,602c600
< * s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> * strm->state;
600,602c600
< * s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> * s->state;
601,602c601
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    state;
601,602c601
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    if ;
601,603c601
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (if (s == NULL) return BZ_PARAM_ERROR;
601,603c601
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (strm (s == NULL) return BZ_PARAM_ERROR;
601,603c601
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (strm == s == NULL) return BZ_PARAM_ERROR;
(90.4 %, 19687 bytes)
600,602c600
< * strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> * if (s->strm != strm) return BZ_PARAM_ERROR;
600,602c600
< * strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> * strm(s->strm != strm) return BZ_PARAM_ERROR;
600,602c600
< * strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> * strm->s->strm != strm) return BZ_PARAM_ERROR;
600,602c600
< * strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> * strm->state->strm != strm) return BZ_PARAM_ERROR;
601,602c601
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    strm != strm) return BZ_PARAM_ERROR;
601,602c601
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if != strm) return BZ_PARAM_ERROR;
601,602c601
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (strm) return BZ_PARAM_ERROR;
601,602c601
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s ) return BZ_PARAM_ERROR;
(90.4 %, 19635 bytes)
601,605c601
<    if (strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
---
>    if (6001 );
601,605c601
<    if (strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
---
>    if (strm);
601,605c601
<    if (strm) return BZ_PARAM_ERROR;
< 
<    while (True) 
< 
<    AssertH ( 0, 6001 );
---
>    if (strm) ;
(90.5 %, 19571 bytes)
601,608c601
<    if (6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    if (bz_stream *strm )
601,608c601
<    if (6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    if (6001 *strm )
601,608c601
<    if (6001 );
< 
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    if (6001 )strm )
603,608c603
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
---
>    )
603,609c603
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
---
>    return {
603,610c603
<    return 0;  
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
---
>    return 0DState* s;
604,610c604
< }
< 
< 
< 
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
---
> * s;
608,610c608
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
---
> s;
608,610c608
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
---
> int ;
608,611c608
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_APIif (strm == NULL) return BZ_PARAM_ERROR;
608,611c608
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API((strm == NULL) return BZ_PARAM_ERROR;
608,611c608
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEndstrm == NULL) return BZ_PARAM_ERROR;
608,611c608
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEnd)  == NULL) return BZ_PARAM_ERROR;
608,611c608
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEnd)  ( NULL) return BZ_PARAM_ERROR;
608,611c608
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream ) return BZ_PARAM_ERROR;
608,611c608
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *return BZ_PARAM_ERROR;
608,611c608
< int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm )
< {
<    DState* s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
---
> int BZ_API(BZ2_bzDecompressEnd)  ( bz_stream *strm BZ_PARAM_ERROR;
(90.5 %, 19502 bytes)
604,606c604
< * s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> = strm->state;
604,606c604
< * s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> * strm->state;
604,606c604
< * s;
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
> * s->state;
605,606c605
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    state;
605,606c605
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
---
>    if ;
605,607c605
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (if (s == NULL) return BZ_PARAM_ERROR;
605,607c605
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (strm (s == NULL) return BZ_PARAM_ERROR;
605,607c605
<    if (strm == NULL) return BZ_PARAM_ERROR;
<    s = strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
---
>    if (strm == s == NULL) return BZ_PARAM_ERROR;
(90.5 %, 19448 bytes)
604,606c604
< * strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> * if (s->strm != strm) return BZ_PARAM_ERROR;
604,606c604
< * strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> * strm(s->strm != strm) return BZ_PARAM_ERROR;
604,606c604
< * strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> * strm->s->strm != strm) return BZ_PARAM_ERROR;
604,606c604
< * strm->state;
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
> * strm->state->strm != strm) return BZ_PARAM_ERROR;
605,606c605
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    strm != strm) return BZ_PARAM_ERROR;
605,606c605
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if != strm) return BZ_PARAM_ERROR;
605,606c605
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (strm) return BZ_PARAM_ERROR;
605,606c605
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s ) return BZ_PARAM_ERROR;
605,606c605
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s == return BZ_PARAM_ERROR;
605,606c605
<    if (s == NULL) return BZ_PARAM_ERROR;
<    if (s->strm != strm) return BZ_PARAM_ERROR;
---
>    if (s == NULLBZ_PARAM_ERROR;
(90.5 %, 19396 bytes)
605,607c605
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (BZFREE(s->tt);
605,607c605
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (strm(s->tt);
605,607c605
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (strm) s->tt);
605,607c605
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (strm) return ->tt);
605,607c605
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if (strm) return BZ_PARAM_ERRORtt);
607c607
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    );
607c607
<    if (s->tt   != NULL) BZFREE(s->tt);
---
>    if ;
607,608c607
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (if (s->ll16 != NULL) BZFREE(s->ll16);
607,608c607
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s(s->ll16 != NULL) BZFREE(s->ll16);
607,608c607
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->s->ll16 != NULL) BZFREE(s->ll16);
607,608c607
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->tt   ->ll16 != NULL) BZFREE(s->ll16);
607,608c607
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->tt   != ll16 != NULL) BZFREE(s->ll16);
607,608c607
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->tt   != NULL!= NULL) BZFREE(s->ll16);
607,608c607
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->tt   != NULL) NULL) BZFREE(s->ll16);
607,608c607
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->tt   != NULL) BZFREE) BZFREE(s->ll16);
607,608c607
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->tt   != NULL) BZFREE(BZFREE(s->ll16);
607,608c607
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->tt   != NULL) BZFREE(s(s->ll16);
607,608c607
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->tt   != NULL) BZFREE(s->s->ll16);
607,608c607
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->tt   != NULL) BZFREE(s->tt->ll16);
607,608c607
<    if (s->tt   != NULL) BZFREE(s->tt);
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if (s->tt   != NULL) BZFREE(s->tt)ll16);
608c608
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    );
608c608
<    if (s->ll16 != NULL) BZFREE(s->ll16);
---
>    if ;
608,609c608
<    if (s->ll16 != NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (if (s->ll4  != NULL) BZFREE(s->ll4);
(90.6 %, 19364 bytes)
607,608c607
<    if (s->tt   != NULL!= NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->tt   != NULL->ll4  != NULL) BZFREE(s->ll4);
607,608c607
<    if (s->tt   != NULL!= NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->tt   != NULL!= ll4  != NULL) BZFREE(s->ll4);
607,608c607
<    if (s->tt   != NULL!= NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->tt   != NULL!= NULL!= NULL) BZFREE(s->ll4);
607,608c607
<    if (s->tt   != NULL!= NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->tt   != NULL!= NULL) NULL) BZFREE(s->ll4);
607,608c607
<    if (s->tt   != NULL!= NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->tt   != NULL!= NULL) BZFREE) BZFREE(s->ll4);
607,608c607
<    if (s->tt   != NULL!= NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->tt   != NULL!= NULL) BZFREE(BZFREE(s->ll4);
607,608c607
<    if (s->tt   != NULL!= NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->tt   != NULL!= NULL) BZFREE(s(s->ll4);
607,608c607
<    if (s->tt   != NULL!= NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->tt   != NULL!= NULL) BZFREE(s->s->ll4);
607,608c607
<    if (s->tt   != NULL!= NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->tt   != NULL!= NULL) BZFREE(s->ll16->ll4);
607,608c607
<    if (s->tt   != NULL!= NULL) BZFREE(s->ll16);
<    if (s->ll4  != NULL) BZFREE(s->ll4);
---
>    if (s->tt   != NULL!= NULL) BZFREE(s->ll16)ll4);
(90.6 %, 19330 bytes)
607,609c607
<    if (s->tt   != NULL!= NULL!= NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
---
>    if (s->tt   != NULL!= NULL->state);
607,609c607
<    if (s->tt   != NULL!= NULL!= NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
---
>    if (s->tt   != NULL!= NULL!= state);
607,609c607
<    if (s->tt   != NULL!= NULL!= NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
---
>    if (s->tt   != NULL!= NULL!= NULL);
607,609c607
<    if (s->tt   != NULL!= NULL!= NULL) BZFREE(s->ll4);
< 
<    BZFREE(strm->state);
---
>    if (s->tt   != NULL!= NULL!= NULL) ;
(90.6 %, 19290 bytes)
607,618c607
<    if (s->tt   != NULL!= NULL!= NULL);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    if (s->tt   != NULL!= NULL!= NULLdefine BZ_SETERR(eee)                    \
607,618c607
<    if (s->tt   != NULL!= NULL!= NULL);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    if (s->tt   != NULL!= NULL!= NULL)BZ_SETERR(eee)                    \
608,618c608
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    (eee)                    \
608,618c608
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    strmeee)                    \
608,618c608
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    strm->)                    \
608,618c608
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    strm->state \
608,621c608
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
---
>    strm->state = typedef 
608,622c608
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
>    strm->state = NULLstruct {
610,622c610
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
>    {
610,623c610
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    return FILE*     handle;
610,623c610
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    return BZ_OK*     handle;
611,623c611
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> handle;
618,623c618
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> ;
618,624c618
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #Char      buf[BZ_MAX_UNUSED];
618,624c618
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define buf[BZ_MAX_UNUSED];
618,624c618
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR[BZ_MAX_UNUSED];
618,624c618
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(BZ_MAX_UNUSED];
618,624c618
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eee];
618,624c618
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eee)                    ;
621,625c621
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
> Int32     bufN;
622,625c622
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    bufN;
622,625c622
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    struct ;
623,625d622
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
623,626c623
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILEwriting;
623,626c623
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILE*     ;
623,627c623
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       FILE*     handlebz_stream strm;
624,627c624
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       strm;
624,627c624
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      ;
624,628c624
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      bufInt32     lastErr;
624,628c624
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf[lastErr;
624,628c624
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf[BZ_MAX_UNUSED;
624,629c624
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Char      buf[BZ_MAX_UNUSED]Bool      initialisedOk;
625,629c625
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       initialisedOk;
625,629c625
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     ;
625,630c625
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       Int32     bufN}
626,631c626
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       bzFile;
626,631c626
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      ;
626,639c626
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      writingBZFILE* BZ_API(BZ2_bzWriteOpen) 
627,639c627
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       * BZ_API(BZ2_bzWriteOpen) 
627,639c627
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream BZ_API(BZ2_bzWriteOpen) 
627,639c627
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strm(BZ2_bzWriteOpen) 
628,639c628
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZ2_bzWriteOpen) 
628,639c628
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     ) 
628,640c628
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Int32     lastErr( int*  bzerror,      
629,640c629
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       int*  bzerror,      
629,640c629
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      *  bzerror,      
629,640c629
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      initialisedOkbzerror,      
630,640c630
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    ,      
631,641c631
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    FILE* f, 
631,641c631
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFile* f, 
639,641c639
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> f, 
639,641c639
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE, 
639,642c639
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* int   blockSize100k, 
639,642c639
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_APIblockSize100k, 
639,642c639
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(, 
639,643c639
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzWriteOpenint   verbosity,
640,643c640
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     verbosity,
640,643c640
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( ,
640,644c640
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( intint   workFactor )
640,644c640
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  workFactor )
640,644c640
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerror)
641,645c641
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       {
641,646c641
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILEInt32   ret;
641,646c641
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* ret;
641,646c641
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* f;
642,647c642
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       bzFile* bzf = NULL;
642,647c642
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   * bzf = NULL;
642,647c642
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   blockSize100kbzf = NULL;
643,647c643
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       = NULL;
643,647c643
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   NULL;
643,647c643
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   verbosity;
644,649c644
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       BZ_SETERR(BZ_OK);
644,649c644
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   (BZ_OK);
644,649c644
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   workFactor BZ_OK);
645,649c645
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
> );
646,649c646
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    ;
646,651c646
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    Int32   if (f == NULL ||
646,651c646
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    Int32   ret(f == NULL ||
647,651c647
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    f == NULL ||
647,651c647
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile== NULL ||
647,651c647
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* NULL ||
647,651c647
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf ||
647,652c647
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    bzFile* bzf = (blockSize100k < 1 || blockSize100k > 9) ||
647,652c647
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    bzFile* bzf = NULLblockSize100k < 1 || blockSize100k > 9) ||
649,652c649
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    < 1 || blockSize100k > 9) ||
649,652c649
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR1 || blockSize100k > 9) ||
649,652c649
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR(|| blockSize100k > 9) ||
649,652c649
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR(BZ_OKblockSize100k > 9) ||
649,652c649
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR(BZ_OK)> 9) ||
651,652c651
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    9) ||
651,652c651
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    if ) ||
651,652c651
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    if (||
651,653c651
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>    if (f (workFactor < 0 || workFactor > 250) ||
651,653c651
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>    if (f == workFactor < 0 || workFactor > 250) ||
651,653c651
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>    if (f == NULL < 0 || workFactor > 250) ||
652,653c652
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>        0 || workFactor > 250) ||
652,653c652
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>        (|| workFactor > 250) ||
652,653c652
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>        (blockSize100k workFactor > 250) ||
652,653c652
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>        (blockSize100k < > 250) ||
652,653c652
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>        (blockSize100k < 1 250) ||
652,653c652
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>        (blockSize100k < 1 || ) ||
652,653c652
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>        (blockSize100k < 1 || blockSize100k ||
652,654c652
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (blockSize100k < 1 || blockSize100k > (verbosity < 0 || verbosity > 4))
652,654c652
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (blockSize100k < 1 || blockSize100k > 9verbosity < 0 || verbosity > 4))
652,654c652
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (blockSize100k < 1 || blockSize100k > 9) < 0 || verbosity > 4))
653,654c653
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        0 || verbosity > 4))
653,654c653
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (|| verbosity > 4))
653,654c653
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (workFactor verbosity > 4))
653,654c653
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (workFactor < > 4))
653,654c653
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (workFactor < 0 4))
653,654c653
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (workFactor < 0 || ))
653,654c653
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
---
>        (workFactor < 0 || workFactor )
653,655c653
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
---
>        (workFactor < 0 || workFactor > ;
653,657c653
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        (workFactor < 0 || workFactor > 250if (ferror(f))
653,657c653
<        (workFactor < 0 || workFactor > 250) ||
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        (workFactor < 0 || workFactor > 250) (ferror(f))
654,657c654
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        ferror(f))
654,657c654
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        ((f))
654,657c654
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        (verbosity f))
654,657c654
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        (verbosity < ))
654,657c654
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
---
>        (verbosity < 0 )
654,658c654
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
---
>        (verbosity < 0 || ;
654,660c654
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (verbosity < 0 || verbosity bzf = malloc ( sizeof(bzFile) );
654,660c654
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (verbosity < 0 || verbosity > = malloc ( sizeof(bzFile) );
654,660c654
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (verbosity < 0 || verbosity > 4malloc ( sizeof(bzFile) );
654,660c654
<        (verbosity < 0 || verbosity > 4))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (verbosity < 0 || verbosity > 4)( sizeof(bzFile) );
655,660c655
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>       sizeof(bzFile) );
657,660c657
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    (bzFile) );
(90.6 %, 19240 bytes)
654,657c654
<        ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        ) );
654,657c654
<        ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        ferror);
654,657c654
<        ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        ferror(;
654,658c654
<        ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>        ferror(fif (bzf == NULL)
654,658c654
<        ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>        ferror(f)(bzf == NULL)
655,658c655
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>       bzf == NULL)
657,658c657
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>    == NULL)
657,658c657
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>    bzf NULL)
657,658c657
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
---
>    bzf = )
657,659c657
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL)
<       ;
---
>    bzf = malloc ;
(90.6 %, 19193 bytes)
654,658c654
<        ferror);
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
---
>        ferror;
654,659c654
<        ferror);
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
---
>        ferror)bzf->initialisedOk = False;
655,659c655
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
---
>    ->initialisedOk = False;
655,659c655
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
---
>    if initialisedOk = False;
655,659c655
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
---
>    if (= False;
655,659c655
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
---
>    if (bzf False;
655,659c655
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
---
>    if (bzf == ;
655,660c655
<    if (bzf == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    if (bzf == NULLbzf->bufN          = 0;
656,660c656
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>       ->bufN          = 0;
658,660c658
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    bufN          = 0;
658,660c658
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    BZ_SETERR= 0;
658,660c658
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    BZ_SETERR(0;
658,660c658
<    BZ_SETERR(BZ_OK);
<    bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    BZ_SETERR(BZ_OK;
(90.7 %, 19138 bytes)
654,656c654
<        ferror)bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>        ferror)->handle        = f;
654,656c654
<        ferror)bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>        ferror)bzfhandle        = f;
654,656c654
<        ferror)bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>        ferror)bzf->= f;
654,656c654
<        ferror)bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>        ferror)bzf->initialisedOk f;
654,656c654
<        ferror)bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>        ferror)bzf->initialisedOk = ;
654,657c654
<        ferror)bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>        ferror)bzf->initialisedOk = Falsebzf->writing       = True;
655,657c655
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    ->writing       = True;
655,657c655
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    bzfwriting       = True;
655,657c655
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    bzf->= True;
655,657c655
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    bzf->bufN          True;
655,657c655
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
---
>    bzf->bufN          = ;
655,658c655
<    bzf->bufN          = 0;
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->bufN          = 0bzf->strm.bzalloc  = NULL;
656,658c656
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    ->strm.bzalloc  = NULL;
656,658c656
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzfstrm.bzalloc  = NULL;
656,658c656
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->.bzalloc  = NULL;
656,658c656
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->handle        bzalloc  = NULL;
656,658c656
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->handle        = = NULL;
656,658c656
<    bzf->handle        = f;
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->handle        = fNULL;
657,658c657
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
---
>    ;
657,659c657
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzfbzf->strm.bzfree   = NULL;
657,659c657
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->->strm.bzfree   = NULL;
657,659c657
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       strm.bzfree   = NULL;
657,659c657
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       = .bzfree   = NULL;
657,659c657
<    bzf->writing       = True;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       = Truebzfree   = NULL;
658,659c658
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    = NULL;
658,659c658
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzfNULL;
658,659c658
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->;
658,660c658
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strmbzf->strm.opaque   = NULL;
658,660c658
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.->strm.opaque   = NULL;
658,660c658
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm.bzalloc  strm.opaque   = NULL;
(90.7 %, 19083 bytes)
657,659c657
<    ;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    opaque   = NULL;
658,659c658
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    = NULL;
658,659c658
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzfNULL;
658,659c658
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->;
658,661c658
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    bzf->strmif (workFactor == 0) workFactor = 30;
658,661c658
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    bzf->strm.(workFactor == 0) workFactor = 30;
658,661c658
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    bzf->strm.bzfree   workFactor == 0) workFactor = 30;
658,661c658
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    bzf->strm.bzfree   = == 0) workFactor = 30;
658,661c658
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    bzf->strm.bzfree   = NULL0) workFactor = 30;
659,661c659
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    ) workFactor = 30;
659,661c659
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    bzfworkFactor = 30;
659,661c659
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    bzf->= 30;
659,661c659
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    bzf->strm30;
659,661c659
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
---
>    bzf->strm.;
659,662c659
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    bzf->strm.opaque   ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
659,662c659
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    bzf->strm.opaque   = = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
659,662c659
<    bzf->strm.opaque   = NULL;
< 
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
661,662c661
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    ( &(bzf->strm), blockSize100k, 
661,662c661
<    if (workFactor == 0) workFactor = 30;
<    ret = BZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
---
>    if &(bzf->strm), blockSize100k, 
(90.7 %, 19030 bytes)
659,660c659
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    bzf->strm.opaque   = NULLBZ2_bzCompressInit );
659,660c659
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
---
>    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( ;
659,661c659
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &if (ret != BZ_OK)
659,661c659
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &((ret != BZ_OK)
659,661c659
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzfret != BZ_OK)
659,661c659
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->!= BZ_OK)
659,661c659
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strmBZ_OK)
659,661c659
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
---
>    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
659,662c659
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
---
>    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm), ;
659,664c659
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm), blockSize100k, 
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm), blockSize100kbzf->strm.avail_in = 0;
660,664c660
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>                               ->strm.avail_in = 0;
660,664c660
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>                               verbositystrm.avail_in = 0;
660,664c660
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>                               verbosity, .avail_in = 0;
660,664c660
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>                               verbosity, workFactor avail_in = 0;
660,664c660
<                               verbosity, workFactor );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>                               verbosity, workFactor )= 0;
661,664c661
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = 0;
---
>    0;
(90.8 %, 18938 bytes)
659,663c659
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
---
>    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm)= True;
660,663c660
<       ;
< 
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
---
>       True;
662,663c662
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
---
>    ;
662,664c662
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
---
>    bzfreturn bzf;   
662,664c662
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
---
>    bzf->bzf;   
662,664c662
<    bzf->strm.avail_in = 0;
<    bzf->initialisedOk = True;
<    return bzf;   
---
>    bzf->strm;   
(90.8 %, 18886 bytes)
662,670c662
<    ;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzerror, 
663,670c663
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    , 
663,671c663
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    return BZFILE* b, 
663,671c663
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    return bzf* b, 
664,671c664
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> b, 
669,671c669
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> , 
669,672c669
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void void*   buf, 
669,672c669
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API*   buf, 
669,672c669
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(buf, 
669,672c669
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(BZ2_bzWrite, 
670,673c670
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              int     len )
670,673c670
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( len )
670,673c670
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int)
670,674c670
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
---
>              ( int*    {
670,675c670
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>              ( int*    bzerrorInt32   ret;
671,675c671
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                ret;
671,675c671
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                BZFILE;
671,676c671
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* bzFile* bzf = (bzFile*)b;
671,676c671
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* b* bzf = (bzFile*)b;
672,676c672
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                bzf = (bzFile*)b;
672,676c672
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void= (bzFile*)b;
672,676c672
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   (bzFile*)b;
672,676c672
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   bufbzFile*)b;
673,676c673
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                *)b;
673,676c673
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     )b;
673,676c673
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     len b;
674,676c674
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
> ;
675,677d674
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
675,678c675
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    Int32   (BZ_OK);
675,678c675
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    Int32   retBZ_OK);
676,678c676
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    );
676,678c676
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile;
676,679c676
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* if (bzf == NULL || buf == NULL || len < 0)
676,679c676
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf (bzf == NULL || buf == NULL || len < 0)
676,679c676
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = bzf == NULL || buf == NULL || len < 0)
676,679c676
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (== NULL || buf == NULL || len < 0)
676,679c676
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFileNULL || buf == NULL || len < 0)
676,679c676
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*|| buf == NULL || len < 0)
676,679c676
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)buf == NULL || len < 0)
676,679c676
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)b== NULL || len < 0)
678,679c678
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    NULL || len < 0)
678,679c678
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR|| len < 0)
678,679c678
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(len < 0)
678,679c678
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(BZ_OK< 0)
678,679c678
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(BZ_OK)0)
679c679
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    )
(90.8 %, 18841 bytes)
678,680c678
<    BZ_SETERR(len < 0)
<       ;
<    if (!(bzf->writing))
---
>    BZ_SETERR()
678,681c678
<    BZ_SETERR(len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
---
>    BZ_SETERR(len ;
678,682c678
<    BZ_SETERR(len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    BZ_SETERR(len < if (ferror(bzf->handle))
678,682c678
<    BZ_SETERR(len < 0)
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    BZ_SETERR(len < 0(ferror(bzf->handle))
679,682c679
<       ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>       ferror(bzf->handle))
680,682c680
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    (bzf->handle))
680,682c680
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if bzf->handle))
680,682c680
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (->handle))
680,682c680
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (!handle))
680,682c680
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (!())
680,682c680
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (!(bzf)
680,683c680
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
---
>    if (!(bzf->;
680,685c680
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
---
>    if (!(bzf->writingif (len == 0)
(90.8 %, 18802 bytes)
678,683c678
<    BZ_SETERR()
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
---
>    BZ_SETERR((len == 0)
679,683c679
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
---
>       len == 0)
680,683c680
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
---
>    == 0)
680,683c680
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
---
>    if 0)
680,683c680
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
---
>    if ()
680,684c680
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
---
>    if (ferror;
680,686c680
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    if (ferror(bzf->strm.avail_in = len;
680,686c680
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    if (ferror(bzf->strm.avail_in = len;
680,686c680
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    if (ferror(bzf->strm.avail_in = len;
680,686c680
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    if (ferror(bzf->handle.avail_in = len;
680,686c680
<    if (ferror(bzf->handle))
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    if (ferror(bzf->handle)avail_in = len;
681,686c681
<       ;
< 
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>       = len;
683,686c683
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    len;
683,686c683
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
---
>    if ;
683,687c683
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    if (bzf->strm.next_in  = buf;
683,687c683
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    if (len ->strm.next_in  = buf;
683,687c683
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    if (len == strm.next_in  = buf;
683,687c683
<    if (len == 0)
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    if (len == 0.next_in  = buf;
684,687c684
<       ;
< 
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>       next_in  = buf;
686,687c686
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    = buf;
686,687c686
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    bzfbuf;
686,687c686
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
---
>    bzf->;
686,689c686
<    bzf->strm.avail_in = len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
---
>    bzf->strmwhile (True) {
(90.8 %, 18755 bytes)
683,686c683
<    len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
---
>    ) {
683,686c683
<    len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
---
>    len{
684,687c684
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm.avail_out = BZ_MAX_UNUSED;
684,687c684
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm.avail_out = BZ_MAX_UNUSED;
684,687c684
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm.avail_out = BZ_MAX_UNUSED;
684,687c684
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm.avail_out = BZ_MAX_UNUSED;
684,687c684
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm.avail_out = BZ_MAX_UNUSED;
684,687c684
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm.next_in  = BZ_MAX_UNUSED;
684,687c684
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm.next_in  = BZ_MAX_UNUSED;
685,687d684
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
686,688c686
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    bzf->strm.next_out = bzf->buf;
686,688c686
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    while ->strm.next_out = bzf->buf;
686,688c686
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    while (strm.next_out = bzf->buf;
686,688c686
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    while (True.next_out = bzf->buf;
686,688c686
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>    while (True) next_out = bzf->buf;
687,688c687
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       = bzf->buf;
687,688c687
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       bzfbzf->buf;
687,688c687
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       bzf->->buf;
687,688c687
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       bzf->strmbuf;
687,688c687
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
---
>       bzf->strm.;
687,689c687
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
---
>       bzf->strm.avail_out ret = 0;
687,689c687
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
---
>       bzf->strm.avail_out = = 0;
687,689c687
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
---
>       bzf->strm.avail_out = BZ_MAX_UNUSED0;
688,689c688
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
---
>       ;
688,690c688
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
<       if (ret != BZ_RUN_OK)
---
>       bzfif (ret != BZ_RUN_OK)
688,690c688
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
<       if (ret != BZ_RUN_OK)
---
>       bzf->(ret != BZ_RUN_OK)
688,690c688
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
<       if (ret != BZ_RUN_OK)
---
>       bzf->strmret != BZ_RUN_OK)
688,690c688
<       bzf->strm.next_out = bzf->buf;
<       ret = 0;
<       if (ret != BZ_RUN_OK)
---
>       bzf->strm.!= BZ_RUN_OK)
(90.9 %, 18711 bytes)
688,692c688
<       ;
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       .avail_out < BZ_MAX_UNUSED) 
689,692c689
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       avail_out < BZ_MAX_UNUSED) 
689,692c689
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if < BZ_MAX_UNUSED) 
689,692c689
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (BZ_MAX_UNUSED) 
689,692c689
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
---
>       if (ret ) 
689,694c689
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       if (ret != if (bzf->strm.avail_in == 0)
689,694c689
<       if (ret != BZ_RUN_OK)
<          ;
< 
<       if (bzf->strm.avail_out < BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       if (ret != BZ_RUN_OK(bzf->strm.avail_in == 0)
(90.9 %, 18649 bytes)
689,693c689
<       if (BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
---
>       if (}
689,694c689
<       if (BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
>       if (BZ_MAX_UNUSED}
691,698c691
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       void BZ_API(BZ2_bzWriteClose)
691,698c691
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       if BZ_API(BZ2_bzWriteClose)
691,698c691
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       if ((BZ2_bzWriteClose)
691,698c691
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       if (bzfBZ2_bzWriteClose)
691,698c691
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       if (bzf->)
691,699c691
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       if (bzf->strm( int*          bzerror, 
691,699c691
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       if (bzf->strm.int*          bzerror, 
691,699c691
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       if (bzf->strm.avail_in *          bzerror, 
691,699c691
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       if (bzf->strm.avail_in == bzerror, 
691,699c691
<       if (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       if (bzf->strm.avail_in == 0, 
692,700c692
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>          BZFILE*       b, 
693,700c693
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    *       b, 
694,700c694
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
698,700c698
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> , 
698,701c698
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void int           abandon,
698,701c698
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIabandon,
698,701c698
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(,
698,702c698
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
> void BZ_API(BZ2_bzWriteCloseunsigned int* nbytes_in,
699,702c699
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   int* nbytes_in,
699,702c699
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( * nbytes_in,
699,702c699
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( intnbytes_in,
699,702c699
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          ,
699,703c699
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                   ( int*          bzerrorunsigned int* nbytes_out )
700,703c700
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
700,703c700
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE* nbytes_out )
700,703c700
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       nbytes_out )
700,703c700
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       b)
701,704c701
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     {
701,705c701
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     int           BZ2_bzWriteClose64 ( bzerror, b, abandon, 
701,705c701
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     int           abandon( bzerror, b, abandon, 
702,705c702
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     bzerror, b, abandon, 
702,705c702
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned , b, abandon, 
702,705c702
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned intb, abandon, 
702,705c702
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* , abandon, 
702,705c702
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* nbytes_inabandon, 
703,705c703
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     , 
703,706c703
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned nbytes_in, NULL, nbytes_out, NULL );
703,706c703
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int, NULL, nbytes_out, NULL );
703,706c703
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int* NULL, nbytes_out, NULL );
703,706c703
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int* nbytes_out , nbytes_out, NULL );
704,706c704
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
> nbytes_out, NULL );
705,706c705
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    , NULL );
705,706c705
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 NULL );
705,706c705
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( );
705,706c705
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror;
705,707c705
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
>    BZ2_bzWriteClose64 ( bzerror, }
705,710c705
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, bvoid BZ_API(BZ2_bzWriteClose64)
705,710c705
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, b, BZ_API(BZ2_bzWriteClose64)
705,710c705
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, b, abandon(BZ2_bzWriteClose64)
706,710c706
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         BZ2_bzWriteClose64)
706,710c706
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in)
706,711c706
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, ( int*          bzerror, 
706,711c706
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULLint*          bzerror, 
706,711c706
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, *          bzerror, 
706,711c706
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, nbytes_outbzerror, 
706,711c706
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, nbytes_out, , 
706,712c706
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                         nbytes_in, NULL, nbytes_out, NULL BZFILE*       b, 
706,712c706
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                         nbytes_in, NULL, nbytes_out, NULL )*       b, 
707,712c707
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
710,712c710
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> , 
710,713c710
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void int           abandon,
710,713c710
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIabandon,
710,713c710
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(,
710,714c710
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
> void BZ_API(BZ2_bzWriteClose64unsigned int* nbytes_in_lo32,
711,714c711
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   int* nbytes_in_lo32,
711,714c711
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( * nbytes_in_lo32,
711,714c711
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( intnbytes_in_lo32,
711,714c711
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          ,
711,715c711
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                   ( int*          bzerrorunsigned int* nbytes_in_hi32,
712,715c712
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
712,715c712
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE* nbytes_in_hi32,
712,715c712
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       nbytes_in_hi32,
712,715c712
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       b,
713,715d712
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
713,716c713
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           int* nbytes_out_lo32,
713,716c713
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           abandon* nbytes_out_lo32,
714,716c714
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     nbytes_out_lo32,
714,716c714
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned ,
714,717c714
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intunsigned int* nbytes_out_hi32 )
714,717c714
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* int* nbytes_out_hi32 )
714,717c714
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32* nbytes_out_hi32 )
715,717c715
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     nbytes_out_hi32 )
715,717c715
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned )
715,718c715
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int{
715,720c715
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* bzFile* bzf = (bzFile*)b;
715,720c715
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* nbytes_in_hi32* bzf = (bzFile*)b;
716,720c716
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     bzf = (bzFile*)b;
716,720c716
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned = (bzFile*)b;
716,720c716
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int(bzFile*)b;
716,720c716
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* bzFile*)b;
716,720c716
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int* nbytes_out_lo32*)b;
717,720c717
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     )b;
717,720c717
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned b;
717,720c717
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>                     unsigned int;
717,722c717
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>                     unsigned int* if (bzf == NULL)
717,722c717
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>                     unsigned int* nbytes_out_hi32 (bzf == NULL)
718,722c718
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
> bzf == NULL)
720,722c720
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>    == NULL)
720,722c720
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>    bzFileNULL)
720,722c720
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
---
>    bzFile* )
720,723c720
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
---
>    bzFile* bzf ;
720,724c720
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = if (!(bzf->writing))
720,724c720
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = ((!(bzf->writing))
720,724c720
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = (bzFile!(bzf->writing))
720,724c720
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = (bzFile*(bzf->writing))
720,724c720
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = (bzFile*)bzf->writing))
720,724c720
<    bzFile* bzf = (bzFile*)b;
< 
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    bzFile* bzf = (bzFile*)b->writing))
722,724c722
<    if (bzf == NULL)
<       ;
<    if (!(bzf->writing))
---
>    writing))
(90.9 %, 18608 bytes)
720,723c720
<    bzFile* bzf ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf ferror(bzf->handle))
721,723c721
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    (bzf->handle))
721,723c721
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if bzf->handle))
721,723c721
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (->handle))
721,723c721
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (!handle))
721,723c721
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (!())
721,723c721
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (!(bzf)
721,724c721
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
---
>    if (!(bzf->;
721,726c721
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (!(bzf->writingif (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
721,726c721
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (!(bzf->writing)(nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
722,726c722
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>       nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
723,726c723
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    != NULL) *nbytes_in_lo32 = 0;
723,726c723
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if NULL) *nbytes_in_lo32 = 0;
723,726c723
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if () *nbytes_in_lo32 = 0;
723,726c723
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (ferror*nbytes_in_lo32 = 0;
723,726c723
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (ferror(nbytes_in_lo32 = 0;
723,726c723
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (ferror(bzf= 0;
723,726c723
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (ferror(bzf->0;
723,726c723
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
---
>    if (ferror(bzf->handle;
723,727c723
<    if (ferror(bzf->handle))
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (ferror(bzf->handle)if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
724,727c724
<       ;
< 
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>       (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
726,727c726
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
726,727c726
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if != NULL) *nbytes_in_hi32 = 0;
726,727c726
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (NULL) *nbytes_in_hi32 = 0;
726,727c726
<    if (nbytes_in_lo32 != NULL) *nbytes_in_lo32 = 0;
<    if (nbytes_in_hi32 != NULL) *nbytes_in_hi32 = 0;
---
>    if (nbytes_in_lo32 ) *nbytes_in_hi32 = 0;
(91.0 %, 18538 bytes)
726,727c726
<    if (NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (*nbytes_out_lo32 = 0;
726,727c726
<    if (NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (NULLnbytes_out_lo32 = 0;
726,727c726
<    if (NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (NULL) = 0;
726,727c726
<    if (NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (NULL) *0;
726,727c726
<    if (NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
---
>    if (NULL) *nbytes_in_hi32 ;
726,728c726
<    if (NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (NULL) *nbytes_in_hi32 = if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
726,728c726
<    if (NULL) *nbytes_in_hi32 = 0;
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (NULL) *nbytes_in_hi32 = 0(nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
727,728c727
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
727,728c727
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if != NULL) *nbytes_out_hi32 = 0;
727,728c727
<    if (nbytes_out_lo32 != NULL) *nbytes_out_lo32 = 0;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (NULL) *nbytes_out_hi32 = 0;
(91.0 %, 18481 bytes)
726,729c726
<    if (NULL) *nbytes_in_hi32 ;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (NULL) *nbytes_in_hi32 ((!abandon) && bzf->lastErr == BZ_OK) 
727,729c727
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    (!abandon) && bzf->lastErr == BZ_OK) 
727,729c727
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if !abandon) && bzf->lastErr == BZ_OK) 
727,729c727
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (abandon) && bzf->lastErr == BZ_OK) 
727,729c727
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 ) && bzf->lastErr == BZ_OK) 
727,729c727
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != && bzf->lastErr == BZ_OK) 
727,729c727
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != NULLbzf->lastErr == BZ_OK) 
727,729c727
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != NULL) ->lastErr == BZ_OK) 
727,729c727
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != NULL) *lastErr == BZ_OK) 
727,729c727
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 == BZ_OK) 
727,729c727
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = BZ_OK) 
727,729c727
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
< 
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
---
>    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0) 
729,730d728
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
729,730d728
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
729,731c729
<    if ((!abandon) && bzf->lastErr == BZ_OK) 
< 
<    if ( !abandon && !ferror ( bzf->handle ) ) 
---
>    if (!abandon && !ferror ( bzf->handle ) ) 
(91.0 %, 18435 bytes)
729,730d728
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
729,730d728
<    if ( !abandon && !ferror ( bzf->handle ) ) 
< 
(91.0 %, 18387 bytes)
729,730c729
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>    total_in_lo32;
729,730c729
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
---
>    if ;
729,731c729
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
---
>    if (if (nbytes_in_hi32 != NULL)
729,731c729
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
---
>    if (nbytes_in_lo32 (nbytes_in_hi32 != NULL)
729,731c729
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != NULL)
729,731c729
<    if (nbytes_in_lo32 != NULL)
<       *nbytes_in_lo32 = bzf->strm.total_in_lo32;
<    if (nbytes_in_hi32 != NULL)
---
>    if (nbytes_in_lo32 != NULL!= NULL)
(91.1 %, 18325 bytes)
729,731c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
---
>    if (nbytes_in_lo32 != if (nbytes_out_lo32 != NULL)
729,731c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 (nbytes_out_lo32 != NULL)
729,731c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != NULL)
729,731c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != NULL)
<       *nbytes_in_hi32 = bzf->strm.total_in_hi32;
<    if (nbytes_out_lo32 != NULL)
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != NULL!= NULL)
(91.1 %, 18263 bytes)
729,731c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != if (nbytes_out_hi32 != NULL)
729,731c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 (nbytes_out_hi32 != NULL)
729,731c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != NULL)
729,731c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != NULL)
<       *nbytes_out_lo32 = bzf->strm.total_out_lo32;
<    if (nbytes_out_hi32 != NULL)
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != NULL!= NULL)
(91.1 %, 18199 bytes)
729,732c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != BZ_SETERR(BZ_OK);
729,732c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 (BZ_OK);
729,732c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
729,732c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != NULL)
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != NULL);
730,732c730
<       *nbytes_out_hi32 = bzf->strm.total_out_hi32;
< 
<    BZ_SETERR(BZ_OK);
---
>       ;
(91.2 %, 18128 bytes)
729,736c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != ) 
729,737c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK( int*  bzerror, 
729,737c729
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK)int*  bzerror, 
730,737c730
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    *  bzerror, 
730,737c730
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    0bzerror, 
731,737c731
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    , 
731,738c731
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>    0FILE* f, 
732,738c732
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> * f, 
736,738c736
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> f, 
736,738c736
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE, 
736,739c736
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* int   verbosity,
736,739c736
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_APIverbosity,
736,739c736
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(,
736,740c736
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
> BZFILE* BZ_API(BZ2_bzReadOpenint   small,
737,740c737
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    small,
737,740c737
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( ,
737,741c737
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( intvoid* unused,
737,741c737
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  * unused,
737,741c737
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  bzerrorunused,
738,741c738
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      ,
738,742c738
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILEint   nUnused )
738,742c738
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* nUnused )
738,742c738
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* f)
739,743c739
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      {
739,744c739
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   bzFile* bzf = NULL;
739,744c739
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   verbosity* bzf = NULL;
740,744c740
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      bzf = NULL;
740,744c740
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   = NULL;
740,744c740
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   smallNULL;
741,744c741
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      ;
741,745c741
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      voidint     ret;
741,745c741
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* ret;
741,745c741
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* unused;
742,747c742
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      BZ_SETERR(BZ_OK);
742,747c742
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   (BZ_OK);
742,747c742
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   nUnused BZ_OK);
743,747c743
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
> );
744,747c744
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    ;
744,749c744
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFileif (f == NULL || 
744,749c744
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* (f == NULL || 
744,749c744
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf f == NULL || 
744,749c744
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = == NULL || 
744,749c744
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = NULLNULL || 
745,749c745
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    || 
745,750c745
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    int     (small != 0 && small != 1) ||
745,750c745
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    int     retsmall != 0 && small != 1) ||
747,750c747
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    != 0 && small != 1) ||
747,750c747
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR0 && small != 1) ||
747,750c747
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(&& small != 1) ||
747,750c747
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OKsmall != 1) ||
747,750c747
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OK)!= 1) ||
749,750c749
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    1) ||
749,750c749
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if ) ||
749,750c749
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if (||
749,751c749
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f (verbosity < 0 || verbosity > 4) ||
749,751c749
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == verbosity < 0 || verbosity > 4) ||
749,751c749
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == NULL < 0 || verbosity > 4) ||
750,751c750
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        0 || verbosity > 4) ||
750,751c750
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (|| verbosity > 4) ||
750,751c750
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small verbosity > 4) ||
750,751c750
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != > 4) ||
750,751c750
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != 0 4) ||
750,751c750
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != 0 && ) ||
750,751c750
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>        (small != 0 && small ||
750,752c750
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != (unused == NULL && nUnused != 0) ||
750,752c750
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != 1unused == NULL && nUnused != 0) ||
750,752c750
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (small != 0 && small != 1) == NULL && nUnused != 0) ||
751,752c751
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        NULL && nUnused != 0) ||
751,752c751
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (&& nUnused != 0) ||
751,752c751
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity nUnused != 0) ||
751,752c751
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < != 0) ||
751,752c751
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < 0 0) ||
751,752c751
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < 0 || ) ||
751,752c751
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity < 0 || verbosity ||
751,753c751
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
751,753c751
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > 4unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
751,753c751
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (verbosity < 0 || verbosity > 4) != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
752,753c752
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
752,753c752
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (&& (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
752,753c752
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
752,753c752
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
752,753c752
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL < 0 || nUnused > BZ_MAX_UNUSED)))
752,753c752
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && 0 || nUnused > BZ_MAX_UNUSED)))
752,753c752
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused || nUnused > BZ_MAX_UNUSED)))
752,753c752
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != nUnused > BZ_MAX_UNUSED)))
752,753c752
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != 0> BZ_MAX_UNUSED)))
752,753c752
<        (unused == NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused == NULL && nUnused != 0) BZ_MAX_UNUSED)))
753c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        )))
753c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ())
753c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused )
753,754c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
---
>        (unused != ;
753,756c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL if (ferror(f))
753,756c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (ferror(f))
753,756c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (ferror(f))
753,756c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (nUnused (f))
753,756c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (nUnused < f))
753,756c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (nUnused < 0 ))
753,756c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
---
>        (unused != NULL && (nUnused < 0 || )
753,757c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
---
>        (unused != NULL && (nUnused < 0 || nUnused ;
753,759c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused > bzf = malloc ( sizeof(bzFile) );
753,759c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED= malloc ( sizeof(bzFile) );
753,759c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)malloc ( sizeof(bzFile) );
753,759c753
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED))( sizeof(bzFile) );
754,759c754
<       ;
< 
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>       sizeof(bzFile) );
756,759c756
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    (bzFile) );
756,759c756
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    if bzFile) );
756,759c756
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    if () );
756,759c756
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    if (ferror);
756,759c756
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
---
>    if (ferror(;
756,760c756
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    if (ferror(fif (bzf == NULL) 
756,760c756
<    if (ferror(f))
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    if (ferror(f)(bzf == NULL) 
757,760c757
<       ;
< 
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>       bzf == NULL) 
759,760c759
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    == NULL) 
759,760c759
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    bzf NULL) 
759,760c759
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
---
>    bzf = ) 
759,761c759
<    bzf = malloc ( sizeof(bzFile) );
<    if (bzf == NULL) 
<       ;
---
>    bzf = malloc ;
(91.2 %, 18081 bytes)
756,760c756
<    if (ferror);
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
---
>    if (ferror;
756,762c756
<    if (ferror);
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
---
>    if (ferror)bzf->initialisedOk = False;
757,762c757
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
---
>    ->initialisedOk = False;
757,762c757
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
---
>    if initialisedOk = False;
757,762c757
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
---
>    if (= False;
757,762c757
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
---
>    if (bzf False;
757,762c757
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
---
>    if (bzf == ;
757,763c757
<    if (bzf == NULL) 
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    if (bzf == NULLbzf->handle        = f;
758,763c758
<       ;
< 
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>       ->handle        = f;
760,763c760
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    handle        = f;
760,763c760
<    BZ_SETERR(BZ_OK);
< 
<    bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    BZ_SETERR= f;
(91.2 %, 18024 bytes)
756,758c756
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    if (ferror)->bufN          = 0;
756,758c756
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    if (ferror)bzfbufN          = 0;
756,758c756
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    if (ferror)bzf->= 0;
756,758c756
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    if (ferror)bzf->initialisedOk 0;
756,758c756
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    if (ferror)bzf->initialisedOk = ;
756,759c756
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    if (ferror)bzf->initialisedOk = Falsebzf->writing       = False;
757,759c757
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    ->writing       = False;
757,759c757
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    bzfwriting       = False;
757,759c757
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    bzf->= False;
757,759c757
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    bzf->handle        False;
757,759c757
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
---
>    bzf->handle        = ;
757,760c757
<    bzf->handle        = f;
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->handle        = fbzf->strm.bzalloc  = NULL;
758,760c758
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    ->strm.bzalloc  = NULL;
758,760c758
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzfstrm.bzalloc  = NULL;
758,760c758
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->.bzalloc  = NULL;
758,760c758
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->bufN          bzalloc  = NULL;
758,760c758
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->bufN          = = NULL;
758,760c758
<    bzf->bufN          = 0;
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    bzf->bufN          = 0NULL;
759,760c759
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
---
>    ;
759,761c759
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzfbzf->strm.bzfree   = NULL;
759,761c759
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->->strm.bzfree   = NULL;
759,761c759
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       strm.bzfree   = NULL;
759,761c759
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       = .bzfree   = NULL;
759,761c759
<    bzf->writing       = False;
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->writing       = Falsebzfree   = NULL;
760,761c760
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    = NULL;
760,761c760
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzfNULL;
760,761c760
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
---
>    bzf->;
760,762c760
<    bzf->strm.bzalloc  = NULL;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strmbzf->strm.opaque   = NULL;
(91.2 %, 17968 bytes)
759,761c759
<    ;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    opaque   = NULL;
760,761c760
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    = NULL;
760,761c760
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzfNULL;
760,761c760
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->;
760,763c760
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
---
>    bzf->strmwhile (nUnused > 0) 
760,763c760
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
---
>    bzf->strm.(nUnused > 0) 
760,763c760
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
---
>    bzf->strm.bzfree   nUnused > 0) 
760,763c760
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
---
>    bzf->strm.bzfree   = > 0) 
760,763c760
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
---
>    bzf->strm.bzfree   = NULL0) 
761,763c761
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
---
>    ) 
761,765c761
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    bzfret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
761,765c761
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    bzf->= BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
761,765c761
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    bzf->strmBZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
761,765c761
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    bzf->strm.( &(bzf->strm), verbosity, small );
761,765c761
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    bzf->strm.opaque   &(bzf->strm), verbosity, small );
761,765c761
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    bzf->strm.opaque   = (bzf->strm), verbosity, small );
761,765c761
<    bzf->strm.opaque   = NULL;
<    
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    bzf->strm.opaque   = NULLbzf->strm), verbosity, small );
763,765c763
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    ->strm), verbosity, small );
763,765c763
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    while strm), verbosity, small );
763,765c763
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    while (), verbosity, small );
763,765c763
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    while (nUnused , verbosity, small );
763,765c763
<    while (nUnused > 0) 
< 
<    ret = BZ2_bzDecompressInit ( &(bzf->strm), verbosity, small );
---
>    while (nUnused > verbosity, small );
(91.3 %, 17917 bytes)
763,767c763
<    while (nUnused , verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    while (nUnused bzf->strm.avail_in = bzf->bufN;
763,767c763
<    while (nUnused , verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    while (nUnused , ->strm.avail_in = bzf->bufN;
763,767c763
<    while (nUnused , verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    while (nUnused , verbositystrm.avail_in = bzf->bufN;
763,767c763
<    while (nUnused , verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    while (nUnused , verbosity, .avail_in = bzf->bufN;
763,767c763
<    while (nUnused , verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    while (nUnused , verbosity, small avail_in = bzf->bufN;
763,767c763
<    while (nUnused , verbosity, small );
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    while (nUnused , verbosity, small )= bzf->bufN;
764,767c764
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    bzf->bufN;
764,767c764
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    if ->bufN;
764,767c764
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    if (bufN;
764,767c764
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
---
>    if (ret ;
764,768c764
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    if (ret != bzf->strm.next_in  = bzf->buf;
764,768c764
<    if (ret != BZ_OK)
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    if (ret != BZ_OK->strm.next_in  = bzf->buf;
765,768c765
<       ;
< 
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>       strm.next_in  = bzf->buf;
767,768c767
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    .next_in  = bzf->buf;
767,768c767
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    bzfnext_in  = bzf->buf;
767,768c767
<    bzf->strm.avail_in = bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    bzf->= bzf->buf;
(91.3 %, 17866 bytes)
764,765c764
<    bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
---
>    ;
764,767c764
<    bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzfbzf->initialisedOk = True;
764,767c764
<    bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzf->->initialisedOk = True;
764,767c764
<    bzf->bufN;
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzf->bufNinitialisedOk = True;
765,767c765
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    = True;
765,767c765
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzfTrue;
765,767c765
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
---
>    bzf->;
765,768c765
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
---
>    bzf->strmreturn bzf;   
765,768c765
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
---
>    bzf->strm.bzf;   
765,768c765
<    bzf->strm.next_in  = bzf->buf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
---
>    bzf->strm.next_in  ;   
(91.3 %, 17823 bytes)
764,772c764
<    ;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
766,772c766
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
766,772c766
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzf) ( int *bzerror, BZFILE *b )
766,772c766
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzf->( int *bzerror, BZFILE *b )
766,772c766
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzf->initialisedOk int *bzerror, BZFILE *b )
766,772c766
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzf->initialisedOk = *bzerror, BZFILE *b )
766,772c766
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzf->initialisedOk = Truebzerror, BZFILE *b )
767,772c767
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    , BZFILE *b )
767,772c767
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return BZFILE *b )
767,772c767
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return bzf*b )
768,772c768
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> b )
772c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> )
772,773c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
---
> void {
772,774c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_APIbzFile* bzf = (bzFile*)b;
772,774c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(* bzf = (bzFile*)b;
772,774c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClosebzf = (bzFile*)b;
772,774c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) = (bzFile*)b;
772,774c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( (bzFile*)b;
772,774c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( int bzFile*)b;
772,774c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( int **)b;
772,774c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror)b;
772,774c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, b;
772,774c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE ;
772,776c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *BZ_SETERR(BZ_OK);
772,776c772
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b (BZ_OK);
773,776c773
< {
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> BZ_OK);
774,776c774
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    );
774,776c774
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile;
774,777c774
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* if (bzf == NULL)
774,777c774
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* bzf (bzf == NULL)
774,777c774
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* bzf = bzf == NULL)
774,777c774
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* bzf = (== NULL)
774,777c774
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* bzf = (bzFileNULL)
774,777c774
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
---
>    bzFile* bzf = (bzFile*)
774,778c774
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
---
>    bzFile* bzf = (bzFile*);
774,780c774
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    bzFile* bzf = (bzFile*)bif (bzf->writing)
776,780c776
<    BZ_SETERR(BZ_OK);
<    if (bzf == NULL)
<       ;
< 
<    if (bzf->writing)
---
>    (bzf->writing)
(91.3 %, 17767 bytes)
774,778c774
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
---
>    bzFile* bzf = (bzFile*)bif void)0;
774,778c774
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
---
>    bzFile* bzf = (bzFile*)bif ()0;
774,778c774
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
---
>    bzFile* bzf = (bzFile*)bif (bzf0;
774,778c774
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
---
>    bzFile* bzf = (bzFile*)bif (bzf->;
774,779c774
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< 
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
---
>    bzFile* bzf = (bzFile*)bif (bzf->writing0;
776,779d775
< 
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
777,780c777
<    if (bzf->initialisedOk)
<       (void)0;
<    0;
< }
---
>    }
(91.4 %, 17718 bytes)
775,782c775
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>       * b, 
776,782c776
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> b, 
780,782c780
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> , 
780,783c780
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int void*   buf, 
780,783c780
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API*   buf, 
780,783c780
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(buf, 
780,783c780
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(BZ2_bzRead, 
781,784c781
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            int     len )
781,784c781
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( len )
781,784c781
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int)
781,785c781
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>            ( int*    {
781,787c781
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>            ( int*    bzerrorbzFile* bzf = (bzFile*)b;
782,787c782
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              * bzf = (bzFile*)b;
782,787c782
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILEbzf = (bzFile*)b;
782,787c782
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* = (bzFile*)b;
782,787c782
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* b(bzFile*)b;
783,787c783
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              bzFile*)b;
783,787c783
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*)b;
783,787c783
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   )b;
783,787c783
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   bufb;
784,787c784
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              ;
784,789c784
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              int     BZ_SETERR(BZ_OK);
784,789c784
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>              int     len (BZ_OK);
785,789c785
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
> BZ_OK);
787,789c787
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    );
787,789c787
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile;
787,791c787
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* if (bzf == NULL || buf == NULL || len < 0)
787,791c787
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf (bzf == NULL || buf == NULL || len < 0)
787,791c787
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = bzf == NULL || buf == NULL || len < 0)
787,791c787
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (== NULL || buf == NULL || len < 0)
787,791c787
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFileNULL || buf == NULL || len < 0)
787,791c787
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*|| buf == NULL || len < 0)
787,791c787
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)buf == NULL || len < 0)
787,791c787
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    bzFile* bzf = (bzFile*)b== NULL || len < 0)
789,791c789
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    NULL || len < 0)
789,791c789
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR|| len < 0)
789,791c789
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(len < 0)
789,791c789
<    BZ_SETERR(BZ_OK);
< 
<    if (bzf == NULL || buf == NULL || len < 0)
---
>    BZ_SETERR(BZ_OK< 0)
(91.4 %, 17672 bytes)
789,795c789
<    BZ_SETERR(len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
---
>    BZ_SETERR((len == 0)
789,795c789
<    BZ_SETERR(len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
---
>    BZ_SETERR(len len == 0)
789,795c789
<    BZ_SETERR(len < 0)
<       ;
< 
<    if (bzf->writing)
<       ;
< 
<    if (len == 0)
---
>    BZ_SETERR(len < == 0)
(91.4 %, 17621 bytes)
789,793c789
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ_SETERR(len bzf->strm.next_out = buf;
789,793c789
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ_SETERR(len len ->strm.next_out = buf;
789,793c789
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ_SETERR(len len == strm.next_out = buf;
789,793c789
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    BZ_SETERR(len len == 0.next_out = buf;
790,793c790
<       ;
< 
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>       next_out = buf;
792,793c792
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    = buf;
792,793c792
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzfbuf;
792,793c792
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
---
>    bzf->;
792,795c792
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
---
>    bzf->strmwhile (True) 
792,795c792
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
---
>    bzf->strm.(True) 
792,795c792
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
---
>    bzf->strm.avail_out True) 
792,795c792
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
---
>    bzf->strm.avail_out = ) 
792,797c792
<    bzf->strm.avail_out = len;
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
---
>    bzf->strm.avail_out = lenreturn 0; 
793,797c793
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
---
>    0; 
793,797c793
<    bzf->strm.next_out = buf;
< 
<    while (True) 
< 
<    return 0; 
---
>    bzf; 
(91.4 %, 17566 bytes)
793,800c793
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    BZFILE* b, 
793,800c793
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    0* b, 
794,800c794
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> b, 
798,800c798
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> , 
798,801c798
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void void**  unused, 
798,801c798
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API**  unused, 
798,801c798
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(*  unused, 
798,801c798
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnusedunused, 
799,801c799
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      , 
799,802c799
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
799,802c799
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
799,802c799
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    nUnused )
799,802c799
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerror)
800,803c800
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        {
800,804c800
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILEbzFile* bzf = (bzFile*)b;
800,804c800
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILE* * bzf = (bzFile*)b;
800,804c800
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        BZFILE* bbzf = (bzFile*)b;
801,804c801
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        = (bzFile*)b;
801,804c801
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void(bzFile*)b;
801,804c801
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void*bzFile*)b;
801,804c801
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void**  *)b;
801,804c801
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        void**  unused)b;
802,804c802
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        b;
802,804c802
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
---
>                        int;
802,805c802
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>                        int*    if (bzf == NULL)
802,805c802
<                        int*    nUnused )
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>                        int*    nUnused (bzf == NULL)
803,805c803
< {
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
> bzf == NULL)
804,805c804
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>    == NULL)
804,805c804
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>    bzFileNULL)
804,805c804
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
---
>    bzFile* )
804,806c804
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
---
>    bzFile* bzf ;
804,807c804
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = if (bzf->lastErr != BZ_STREAM_END)
804,807c804
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = ((bzf->lastErr != BZ_STREAM_END)
804,807c804
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (bzFilebzf->lastErr != BZ_STREAM_END)
804,807c804
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (bzFile*->lastErr != BZ_STREAM_END)
804,807c804
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (bzFile*)lastErr != BZ_STREAM_END)
804,807c804
<    bzFile* bzf = (bzFile*)b;
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    bzFile* bzf = (bzFile*)b!= BZ_STREAM_END)
805,807c805
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    BZ_STREAM_END)
805,807c805
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
---
>    if )
805,808c805
<    if (bzf == NULL)
<       ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
---
>    if (;
(91.4 %, 17526 bytes)
804,807c804
<    bzFile* bzf ;
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    bzFile* bzf == NULL || nUnused == NULL)
805,807c805
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    NULL || nUnused == NULL)
805,807c805
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if || nUnused == NULL)
805,807c805
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if (nUnused == NULL)
805,807c805
<    if (bzf->lastErr != BZ_STREAM_END)
<       ;
<    if (unused == NULL || nUnused == NULL)
---
>    if (bzf== NULL)
(91.5 %, 17462 bytes)
805,809c805
<    if (nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (bzf->strm.avail_in;
805,809c805
<    if (nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (nUnused ->strm.avail_in;
805,809c805
<    if (nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (nUnused == strm.avail_in;
805,809c805
<    if (nUnused == NULL)
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    if (nUnused == NULL.avail_in;
806,809c806
<       ;
< 
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>       avail_in;
808,809c808
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
---
>    ;
808,810c808
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    BZ_SETERR*unused = bzf->strm.next_in;
808,810c808
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    BZ_SETERR(unused = bzf->strm.next_in;
808,810c808
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    BZ_SETERR(BZ_OK= bzf->strm.next_in;
808,810c808
<    BZ_SETERR(BZ_OK);
<    *nUnused = bzf->strm.avail_in;
<    *unused = bzf->strm.next_in;
---
>    BZ_SETERR(BZ_OK)bzf->strm.next_in;
(91.5 %, 17412 bytes)
808,818c808
<    ;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    (BZ2_bzBuffToBuffCompress) 
809,818c809
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    BZ2_bzBuffToBuffCompress) 
809,818c809
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    *) 
809,819c809
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *unused ( char*         dest, 
809,819c809
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *unused = char*         dest, 
809,819c809
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *unused = bzf*         dest, 
809,819c809
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *unused = bzf->dest, 
809,819c809
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *unused = bzf->strm, 
809,820c809
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>    *unused = bzf->strm.unsigned int* destLen,
809,820c809
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>    *unused = bzf->strm.next_inint* destLen,
810,820c810
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> * destLen,
818,820c818
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> destLen,
818,820c818
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int ,
818,821c818
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_APIchar*         source, 
818,821c818
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(*         source, 
818,821c818
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffCompresssource, 
819,821c819
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          , 
819,822c819
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( unsigned int  sourceLen,
819,822c819
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( charint  sourceLen,
819,822c819
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         sourceLen,
819,822c819
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         dest,
820,822d819
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
820,823c820
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned blockSize100k, 
820,823c820
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int, 
820,824c820
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* int           verbosity, 
820,824c820
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* destLenverbosity, 
821,824c821
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            , 
821,825c821
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            charint           workFactor )
821,825c821
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         workFactor )
821,825c821
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         source)
822,826c822
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            {
822,827c822
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned bz_stream strm;
822,827c822
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  strm;
822,827c822
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  sourceLen;
823,828c823
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int ret;
823,828c823
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           ret;
823,828c823
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           blockSize100k;
824,830c824
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            if (dest == NULL || destLen == NULL || 
824,830c824
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           (dest == NULL || destLen == NULL || 
824,830c824
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           verbositydest == NULL || destLen == NULL || 
825,830c825
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            == NULL || destLen == NULL || 
825,830c825
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           NULL || destLen == NULL || 
825,830c825
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           workFactor || destLen == NULL || 
826,830c826
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> destLen == NULL || 
827,830c827
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    == NULL || 
827,830c827
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream NULL || 
827,830c827
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream strm|| 
828,831c828
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    source == NULL ||
828,831c828
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int == NULL ||
828,831c828
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int retNULL ||
830,831c830
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    ||
830,832c830
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if blockSize100k < 1 || blockSize100k > 9 ||
830,832c830
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (< 1 || blockSize100k > 9 ||
830,832c830
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest 1 || blockSize100k > 9 ||
830,832c830
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == || blockSize100k > 9 ||
830,832c830
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL blockSize100k > 9 ||
830,832c830
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL || > 9 ||
830,832c830
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL || destLen 9 ||
830,832c830
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest == NULL || destLen == ||
830,833c830
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>    if (dest == NULL || destLen == NULL verbosity < 0 || verbosity > 4 ||
831,833c831
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        < 0 || verbosity > 4 ||
831,833c831
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        source 0 || verbosity > 4 ||
831,833c831
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        source == || verbosity > 4 ||
831,833c831
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        source == NULL verbosity > 4 ||
832,833c832
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        > 4 ||
832,833c832
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        blockSize100k 4 ||
832,833c832
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>        blockSize100k < ||
832,834c832
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        blockSize100k < 1 workFactor < 0 || workFactor > 250) 
832,834c832
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        blockSize100k < 1 || < 0 || workFactor > 250) 
832,834c832
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        blockSize100k < 1 || blockSize100k 0 || workFactor > 250) 
832,834c832
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        blockSize100k < 1 || blockSize100k > || workFactor > 250) 
832,834c832
<        blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        blockSize100k < 1 || blockSize100k > 9 workFactor > 250) 
833,834c833
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        > 250) 
833,834c833
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        verbosity 250) 
833,834c833
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
---
>        verbosity < ) 
833,835c833
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
---
>        verbosity < 0 return BZ_PARAM_ERROR;
833,835c833
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
---
>        verbosity < 0 || BZ_PARAM_ERROR;
833,835c833
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
---
>        verbosity < 0 || verbosity ;
833,837c833
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>        verbosity < 0 || verbosity > if (workFactor == 0) workFactor = 30;
833,837c833
<        verbosity < 0 || verbosity > 4 ||
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>        verbosity < 0 || verbosity > 4 (workFactor == 0) workFactor = 30;
834,837c834
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>        workFactor == 0) workFactor = 30;
834,837c834
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>        workFactor == 0) workFactor = 30;
834,837c834
<        workFactor < 0 || workFactor > 250) 
<       return BZ_PARAM_ERROR;
< 
<    if (workFactor == 0) workFactor = 30;
---
>        workFactor < 0) workFactor = 30;
(91.5 %, 17338 bytes)
834,835c834
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
---
>        ;
834,836c834
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        workFactor strm.bzfree = NULL;
834,836c834
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        workFactor == .bzfree = NULL;
834,836c834
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        workFactor == 0bzfree = NULL;
834,836c834
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        workFactor == 0) = NULL;
834,836c834
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        workFactor == 0) workFactor NULL;
834,836c834
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        workFactor == 0) workFactor = ;
834,837c834
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>        workFactor == 0) workFactor = 30strm.opaque = NULL;
835,837c835
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    .opaque = NULL;
835,837c835
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    strmopaque = NULL;
835,837c835
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    strm.= NULL;
835,837c835
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    strm.bzalloc NULL;
835,837c835
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    strm.bzalloc = ;
835,838c835
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.bzalloc = NULLret = 0;
836,838c836
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    = 0;
836,838c836
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm0;
836,838c836
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
---
>    strm.;
836,839c836
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strm.bzfree if (ret != BZ_OK) return ret;
836,839c836
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strm.bzfree = (ret != BZ_OK) return ret;
836,839c836
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strm.bzfree = NULLret != BZ_OK) return ret;
837,839c837
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    != BZ_OK) return ret;
837,839c837
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strmBZ_OK) return ret;
837,839c837
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strm.) return ret;
837,839c837
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strm.opaque return ret;
837,839c837
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strm.opaque = ret;
838,839d837
<    ret = 0;
<    if (ret != BZ_OK) return ret;
(91.6 %, 17292 bytes)
837,840c837
<    strm.opaque = ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
---
>    strm.opaque = ;
837,841c837
<    strm.opaque = ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.opaque = retstrm.avail_in = sourceLen;
839,841c839
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    .avail_in = sourceLen;
839,841c839
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strmavail_in = sourceLen;
839,841c839
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.= sourceLen;
839,841c839
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.next_in sourceLen;
839,841c839
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.next_in = ;
839,842c839
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in = sourcestrm.avail_out = *destLen;
840,842c840
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    .avail_out = *destLen;
840,842c840
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strmavail_out = *destLen;
840,842c840
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.= *destLen;
840,842c840
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_out *destLen;
840,842c840
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_out = destLen;
841,842d840
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
(91.6 %, 17235 bytes)
840,843c840
<    strm.next_out = destLen;
< 
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
---
>    strm.next_out = output_overflow;
841,843d840
< 
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
842,843d841
<    ret = 0;
<    if (ret == BZ_FINISH_OK) goto output_overflow;
(91.6 %, 17172 bytes)
840,844c840
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
---
>    strm.next_out = destLenstrm.avail_out;   
841,844c841
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
---
>    .avail_out;   
841,844c841
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
---
>    if avail_out;   
841,844c841
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
---
>    if (;   
841,845c841
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
---
>    if (ret 0;
841,845c841
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
---
>    if (ret != ;
841,846c841
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
---
>    if (ret != BZ_STREAM_ENDreturn BZ_OK;
841,846c841
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
---
>    if (ret != BZ_STREAM_END) BZ_OK;
841,846c841
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
---
>    if (ret != BZ_STREAM_END) goto ;
841,848c841
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
---
>    if (ret != BZ_STREAM_END) goto errhandleroutput_overflow:
844,848c844
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
---
>    :
844,849c844
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
---
>    *0;
844,849c844
<    *destLen -= strm.avail_out;   
<    0;
<    return BZ_OK;
< 
<    output_overflow:
<    0;
---
>    *destLen ;
(91.7 %, 17100 bytes)
841,849c841
<    if (ret != BZ_STREAM_END) BZ_OK;
< 
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
---
>    if (ret != BZ_STREAM_END) return ret;
841,849c841
<    if (ret != BZ_STREAM_END) BZ_OK;
< 
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
---
>    if (ret != BZ_STREAM_END) BZ_OKret;
843,849c843
<    output_overflow:
<    0;
<    return BZ_OUTBUFF_FULL;
< 
<    errhandler:
<    0;
<    return ret;
---
>    ;
(91.7 %, 17014 bytes)
841,847c841
<    if (ret != BZ_STREAM_END) return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    if (ret != BZ_STREAM_END) , 
841,848c841
<    if (ret != BZ_STREAM_END) return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    if (ret != BZ_STREAM_END) return unsigned int* destLen,
841,848c841
<    if (ret != BZ_STREAM_END) return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    if (ret != BZ_STREAM_END) return retint* destLen,
842,848c842
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> * destLen,
846,848c846
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> destLen,
846,848c846
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int ,
846,849c846
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_APIchar*         source, 
846,849c846
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(*         source, 
846,849c846
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompresssource, 
847,849c847
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            , 
847,850c847
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( unsigned int  sourceLen,
847,850c847
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( charint  sourceLen,
847,850c847
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         sourceLen,
847,850c847
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         dest,
848,850d847
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
848,851c848
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned small,
848,851c848
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int,
848,852c848
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* int           verbosity )
848,852c848
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* destLenverbosity )
849,852c849
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              )
849,853c849
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
---
>                              char{
849,854c849
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              char*         bz_stream strm;
849,854c849
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              char*         sourcestrm;
850,854c850
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              ;
850,855c850
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int ret;
850,855c850
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  ret;
850,855c850
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  sourceLen;
851,857c851
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              if (dest == NULL || destLen == NULL || 
851,857c851
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           (dest == NULL || destLen == NULL || 
851,857c851
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           smalldest == NULL || destLen == NULL || 
852,857c852
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              == NULL || destLen == NULL || 
852,857c852
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           NULL || destLen == NULL || 
852,857c852
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           verbosity || destLen == NULL || 
853,857c853
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> destLen == NULL || 
854,857c854
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    == NULL || 
854,857c854
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream NULL || 
854,857c854
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream strm|| 
855,858c855
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    source == NULL ||
855,858c855
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int == NULL ||
855,858c855
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int retNULL ||
857,858c857
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    ||
857,859c857
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (small != 0 && small != 1) ||
857,859c857
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (small != 0 && small != 1) ||
857,859c857
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest != 0 && small != 1) ||
857,859c857
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == 0 && small != 1) ||
857,859c857
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL && small != 1) ||
857,859c857
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || small != 1) ||
857,859c857
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen != 1) ||
857,859c857
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == 1) ||
857,859c857
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == NULL ) ||
858,859c858
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>        ||
858,860c858
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source verbosity < 0 || verbosity > 4) 
858,860c858
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source == < 0 || verbosity > 4) 
858,860c858
<        source == NULL ||
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        source == NULL 0 || verbosity > 4) 
859,860c859
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        || verbosity > 4) 
859,860c859
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (verbosity > 4) 
859,860c859
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (small > 4) 
859,860c859
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (small != 4) 
859,860c859
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>        (small != 0 ) 
859,861c859
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
---
>        (small != 0 && return BZ_PARAM_ERROR;
859,861c859
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
---
>        (small != 0 && small BZ_PARAM_ERROR;
859,861c859
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
---
>        (small != 0 && small != ;
859,863c859
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        (small != 0 && small != 1strm.bzalloc = NULL;
859,863c859
<        (small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        (small != 0 && small != 1) .bzalloc = NULL;
860,863c860
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        bzalloc = NULL;
860,863c860
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        verbosity = NULL;
860,863c860
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        verbosity < NULL;
860,863c860
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
---
>        verbosity < 0 ;
860,864c860
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || strm.bzfree = NULL;
860,864c860
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity .bzfree = NULL;
860,864c860
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > bzfree = NULL;
860,864c860
<        verbosity < 0 || verbosity > 4) 
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        verbosity < 0 || verbosity > 4= NULL;
861,864c861
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>           NULL;
861,864c861
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>           return ;
861,865c861
<           return BZ_PARAM_ERROR;
< 
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>           return BZ_PARAM_ERRORstrm.opaque = NULL;
863,865c863
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
<    strm.opaque = NULL;
---
>    .opaque = NULL;
(91.7 %, 16949 bytes)
861,864c861
<           NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>           (ret != BZ_OK) return ret;
861,864c861
<           NULL;
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>           NULLret != BZ_OK) return ret;
862,864c862
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    != BZ_OK) return ret;
862,864c862
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strmBZ_OK) return ret;
862,864c862
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strm.) return ret;
862,864c862
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strm.opaque return ret;
862,864c862
<    strm.opaque = NULL;
<    ret = 0;
<    if (ret != BZ_OK) return ret;
---
>    strm.opaque = ret;
863,864d862
<    ret = 0;
<    if (ret != BZ_OK) return ret;
(91.8 %, 16903 bytes)
862,865c862
<    strm.opaque = ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
---
>    strm.opaque = ;
862,866c862
<    strm.opaque = ret;
< 
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.opaque = retstrm.avail_in = sourceLen;
864,866c864
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    .avail_in = sourceLen;
864,866c864
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strmavail_in = sourceLen;
864,866c864
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.= sourceLen;
864,866c864
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.next_in sourceLen;
864,866c864
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
---
>    strm.next_in = ;
864,867c864
<    strm.next_in = source;
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_in = sourcestrm.avail_out = *destLen;
865,867c865
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    .avail_out = *destLen;
865,867c865
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strmavail_out = *destLen;
865,867c865
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.= *destLen;
865,867c865
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_out *destLen;
865,867c865
<    strm.next_out = dest;
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
---
>    strm.next_out = destLen;
866,867d865
<    strm.avail_in = sourceLen;
<    strm.avail_out = *destLen;
(91.8 %, 16846 bytes)
865,868c865
<    strm.next_out = destLen;
< 
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
---
>    strm.next_out = output_overflow_or_eof;
866,868d865
< 
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
867,868d866
<    ret = 0;
<    if (ret == BZ_OK) goto output_overflow_or_eof;
(91.8 %, 16783 bytes)
865,869c865
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
---
>    strm.next_out = destLenstrm.avail_out;
866,869c866
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
---
>    .avail_out;
866,869c866
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
---
>    if avail_out;
866,869c866
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
---
>    if (;
866,870c866
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
---
>    if (ret 0;
866,870c866
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
---
>    if (ret != ;
866,871c866
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
---
>    if (ret != BZ_STREAM_ENDreturn BZ_OK;
866,871c866
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
---
>    if (ret != BZ_STREAM_END) BZ_OK;
866,871c866
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
---
>    if (ret != BZ_STREAM_END) goto ;
866,873c866
<    if (ret != BZ_STREAM_END) goto errhandler;
< 
<    
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
---
>    if (ret != BZ_STREAM_END) goto errhandleroutput_overflow_or_eof:
869,873c869
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
---
>    :
869,874c869
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *if (strm.avail_out > 0) {
869,874c869
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen (strm.avail_out > 0) {
869,874c869
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen -= strm.avail_out > 0) {
869,874c869
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen -= strm.avail_out > 0) {
869,874c869
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen -= strm.avail_out > 0) {
869,874c869
<    *destLen -= strm.avail_out;
<    0;
<    return BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
---
>    *destLen -= strm.avail_out> 0) {
(91.8 %, 16714 bytes)
866,870c866
<    if (ret != BZ_STREAM_END) BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       0;
---
>    if (ret != BZ_STREAM_END) 0;
867,870d866
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       0;
868,871c868
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
---
>    return BZ_UNEXPECTED_EOF;
868,871c868
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
---
>    output_overflow_or_eofBZ_UNEXPECTED_EOF;
869,871c869
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
---
>    ;
869,872c869
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    if } else ;      
869,872c869
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    if (else ;      
869,872c869
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
---
>    if (strm;      
869,874c869
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
---
>    if (strm.errhandler:
869,874c869
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
---
>    if (strm.avail_out :
869,875c869
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
---
>    if (strm.avail_out > 0;
869,875c869
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
---
>    if (strm.avail_out > 0;
869,876c869
<    if (strm.avail_out > 0) {
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
---
>    if (strm.avail_out > 0) return ret; 
870,876c870
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
---
>       ret; 
870,876c870
<       0;
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
---
>       0; 
871,877c871
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
---
>       }
871,886c871
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>       return const char * BZ_API(BZ2_bzlibVersion)(void)
871,886c871
<       return BZ_UNEXPECTED_EOF;
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>       return BZ_UNEXPECTED_EOFchar * BZ_API(BZ2_bzlibVersion)(void)
872,886c872
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    * BZ_API(BZ2_bzlibVersion)(void)
872,886c872
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    } BZ_API(BZ2_bzlibVersion)(void)
872,886c872
<    } else ;      
< 
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    } else (BZ2_bzlibVersion)(void)
874,886c874
<    errhandler:
<    0;
<    return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    BZ2_bzlibVersion)(void)
(91.9 %, 16628 bytes)
869,879c869
<    if (strm.avail_out > 0) return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
---
>    if (strm.avail_out > 0) )
869,880c869
<    if (strm.avail_out > 0) return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
---
>    if (strm.avail_out > 0) return {
869,881c869
<    if (strm.avail_out > 0) return ret; 
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
---
>    if (strm.avail_out > 0) return retreturn BZ_VERSION;
870,881c870
< }
< 
< 
< 
< 
< 
< 
< 
< 
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
---
> BZ_VERSION;
879,881c879
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
---
> ;
879,882c879
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
---
> const }
879,887c879
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
< static
---
> const char static
879,888c879
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
> const char * BZFILE * bzopen_or_bzdopen
879,888c879
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
> const char * BZ_API* bzopen_or_bzdopen
879,888c879
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
> const char * BZ_API(bzopen_or_bzdopen
879,889c879
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
> const char * BZ_API(BZ2_bzlibVersion( const char *path,   
879,889c879
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
> const char * BZ_API(BZ2_bzlibVersion)const char *path,   
879,889c879
< const char * BZ_API(BZ2_bzlibVersion)(void)
< {
<    return BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
> const char * BZ_API(BZ2_bzlibVersion)(char *path,   
(91.9 %, 16562 bytes)
870,879c870
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
---
> int fd,             
870,879c870
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
---
> BZ_VERSIONfd,             
871,879c871
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
---
> ,             
876,880c876
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> const char *mode,
877,880c877
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> char *mode,
877,880c877
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> BZFILE *mode,
877,880c877
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> BZFILE * mode,
878,880c878
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
>                ,
878,881c878
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                ( int open_mode)      
878,881c878
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                ( const open_mode)      
878,881c878
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                ( const char )      
878,882c878
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
---
>                ( const char *;
878,887c878
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( const char *pathBZFILE * BZ_API(BZ2_bzopen)
879,887c879
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  * BZ_API(BZ2_bzopen)
879,887c879
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  int BZ_API(BZ2_bzopen)
879,887c879
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  int fd(BZ2_bzopen)
880,887c880
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  BZ2_bzopen)
880,887c880
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  const )
880,888c880
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  const char ( const char *path,
880,888c880
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  const char *const char *path,
880,888c880
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  const char *modechar *path,
881,888c881
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  *path,
881,888c881
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  int path,
881,888c881
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  int open_mode,
882,889c882
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> const char *mode )
887,889c887
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> char *mode )
887,889c887
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE *mode )
887,889c887
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * mode )
887,889c887
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API)
887,890c887
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
---
> BZFILE * BZ_API({
887,891c887
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
> BZFILE * BZ_API(BZ2_bzopenreturn 0;
888,891c888
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                0;
888,891c888
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( ;
888,892c888
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
---
>                ( const }
888,896c888
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char BZFILE * BZ_API(BZ2_bzdopen)
888,896c888
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char ** BZ_API(BZ2_bzdopen)
888,896c888
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *pathBZ_API(BZ2_bzdopen)
889,896c889
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  (BZ2_bzdopen)
889,896c889
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const BZ2_bzdopen)
889,896c889
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char )
889,897c889
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char *( int fd,
889,897c889
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char *mode int fd,
890,897c890
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> fd,
891,897c891
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    ,
891,898c891
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    return const char *mode )
891,898c891
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    return 0char *mode )
892,898c892
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> *mode )
896,898c896
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> mode )
896,898c896
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE )
896,899c896
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
---
> BZFILE * {
896,900c896
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_APIreturn bzopen_or_bzdopen(NULL,fd,mode,1);
896,900c896
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(bzopen_or_bzdopen(NULL,fd,mode,1);
896,900c896
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(BZ2_bzdopen(NULL,fd,mode,1);
897,900c897
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                NULL,fd,mode,1);
897,900c897
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( ,fd,mode,1);
897,900c897
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int fd,mode,1);
897,900c897
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int fd,mode,1);
898,900c898
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  mode,1);
898,900c898
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const ,1);
898,900c898
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char 1);
898,900c898
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *);
898,900c898
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *mode ;
899,900d898
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
900,905c900
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
900,905c900
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
900,905c900
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(BZ2_bzread) (BZFILE* b, void* buf, int len )
900,905c900
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(BZ2_bzread) (BZFILE* b, void* buf, int len )
900,905c900
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL) (BZFILE* b, void* buf, int len )
900,905c900
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,(BZFILE* b, void* buf, int len )
900,905c900
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fdBZFILE* b, void* buf, int len )
900,905c900
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,* b, void* buf, int len )
900,905c900
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,modeb, void* buf, int len )
900,905c900
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,, void* buf, int len )
900,905c900
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1void* buf, int len )
900,905c900
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1)* buf, int len )
901,905c901
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> buf, int len )
905c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> , int len )
905c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int int len )
905c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIlen )
905c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API()
905,906c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzread{
905,907c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) int bzerr, nread;
905,907c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (bzerr, nread;
905,907c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE, nread;
905,907c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* nread;
905,907c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b;
905,908c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
905,908c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void(((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
905,908c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* ((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
905,908c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf(bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
905,908c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
905,908c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int *)b)->lastErr == BZ_STREAM_END) return 0;
905,908c905
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )b)->lastErr == BZ_STREAM_END) return 0;
906,908c906
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
> b)->lastErr == BZ_STREAM_END) return 0;
907,908c907
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    )->lastErr == BZ_STREAM_END) return 0;
907,908c907
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int ->lastErr == BZ_STREAM_END) return 0;
907,908c907
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerrlastErr == BZ_STREAM_END) return 0;
907,908c907
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, == BZ_STREAM_END) return 0;
907,908c907
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    int bzerr, nreadBZ_STREAM_END) return 0;
908c908
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    ) return 0;
908c908
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if return 0;
908c908
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if (0;
908c908
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
---
>    if ((;
908,909c908
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((nread = 0;
908,909c908
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile= 0;
908,909c908
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile*0;
908,909c908
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
---
>    if (((bzFile*);
908,910c908
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (((bzFile*)bif (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
908,910c908
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (((bzFile*)b)(bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
908,910c908
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (((bzFile*)b)->bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
908,910c908
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
908,910c908
<    if (((bzFile*)b)->lastErr == BZ_STREAM_END) return 0;
<    nread = 0;
<    if (bzerr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
(91.9 %, 16507 bytes)
908,910c908
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (((bzFile*)b)->lastErr {
908,911c908
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (((bzFile*)b)->lastErr == return -1;
908,911c908
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (((bzFile*)b)->lastErr == BZ_OK -1;
908,911c908
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (((bzFile*)b)->lastErr == BZ_OK || 1;
908,911c908
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr ;
908,912c908
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == }
908,913c908
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END}
908,917c908
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
909,917c909
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
909,917c909
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
909,917c909
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return nreadBZ2_bzwrite) (BZFILE* b, void* buf, int len )
910,917c910
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    ) (BZFILE* b, void* buf, int len )
910,917c910
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    } (BZFILE* b, void* buf, int len )
910,917c910
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    } else BZFILE* b, void* buf, int len )
911,917c911
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       * b, void* buf, int len )
911,917c911
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return b, void* buf, int len )
911,917c911
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return -, void* buf, int len )
911,917c911
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return -1void* buf, int len )
912,917c912
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    * buf, int len )
913,917c913
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> buf, int len )
917c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> , int len )
917c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int int len )
917c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIlen )
917c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API()
917,918c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzwrite{
917,919c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) int bzerr;
917,919c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (bzerr;
917,919c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (BZFILE;
917,921c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* ;
917,922c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* bif(bzerr == BZ_OK){
917,922c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, (bzerr == BZ_OK){
917,922c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, voidbzerr == BZ_OK){
917,922c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* == BZ_OK){
917,922c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* bufBZ_OK){
917,922c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, ){
917,922c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int {
917,923c917
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len return len;
918,923c918
< {
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
---
> len;
919,920d918
<    int bzerr;
< 
922,923d919
<    if(bzerr == BZ_OK){
<       return len;
919,924c919
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    int }else{
919,924c919
<    int bzerr;
< 
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    int bzerrelse{
921,924c921
<    ;
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
---
>    {
922,925c922
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
---
>    return -1;
922,925c922
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
---
>    if-1;
922,925c922
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
---
>    if(1;
922,925c922
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
---
>    if(bzerr ;
922,926c922
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
---
>    if(bzerr == }
922,927c922
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
---
>    if(bzerr == BZ_OK}
922,931c922
<    if(bzerr == BZ_OK){
<       return len;
<    }else{
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>    if(bzerr == BZ_OK)int BZ_API(BZ2_bzflush) (BZFILE *b)
(92.0 %, 16456 bytes)
921,928c921
<    {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>    BZFILE *b)
922,928c922
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>       *b)
922,928c922
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>       return b)
922,928c922
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
---
>       return -)
922,929c922
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
---
>       return -1{
923,930d922
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
924,931c924
< }
< 
< 
< 
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
---
> 0;
928,931c928
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
---
> ;
928,932c928
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
---
> int }
928,936c928
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_APIvoid BZ_API(BZ2_bzclose) (BZFILE* b)
928,936c928
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ_API(BZ2_bzclose) (BZFILE* b)
928,936c928
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ2_bzflush(BZ2_bzclose) (BZFILE* b)
928,936c928
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ2_bzflush) BZ2_bzclose) (BZFILE* b)
928,936c928
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ2_bzflush) () (BZFILE* b)
928,936c928
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ2_bzflush) (BZFILE (BZFILE* b)
928,936c928
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ2_bzflush) (BZFILE *BZFILE* b)
928,936c928
< int BZ_API(BZ2_bzflush) (BZFILE *b)
< {
<    
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> int BZ_API(BZ2_bzflush) (BZFILE *b* b)
929,936c929
< {
<    
<    return 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
---
> b)
(92.0 %, 16399 bytes)
924,929d923
< 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
924,931c924
< 0;
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
---
> 0int bzerr;
925,931c925
< }
< 
< 
< 
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
---
> bzerr;
929,931c929
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
---
> ;
929,932c929
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void FILE *fp = ((bzFile *)b)->handle;
929,932c929
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API*fp = ((bzFile *)b)->handle;
929,932c929
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(fp = ((bzFile *)b)->handle;
929,932c929
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(BZ2_bzclose= ((bzFile *)b)->handle;
929,932c929
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(BZ2_bzclose) ((bzFile *)b)->handle;
929,932c929
< void BZ_API(BZ2_bzclose) (BZFILE* b)
< {
<    int bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> void BZ_API(BZ2_bzclose) ((bzFile *)b)->handle;
(92.0 %, 16348 bytes)
925,926c925
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> ->handle;
925,926c925
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> bzerrhandle;
926c926
<    FILE *fp = ((bzFile *)b)->handle;
---
>    ;
926,928c926
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE if (b==NULL) 
926,928c926
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *(b==NULL) 
926,928c926
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *fp b==NULL) 
926,928c926
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *fp = ==NULL) 
926,928c926
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *fp = (NULL) 
926,928c926
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *fp = (() 
926,929c926
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    FILE *fp = ((bzFile if(((bzFile*)b)->writing){
926,929c926
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    FILE *fp = ((bzFile *(((bzFile*)b)->writing){
926,929c926
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    FILE *fp = ((bzFile *)((bzFile*)b)->writing){
926,929c926
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    FILE *fp = ((bzFile *)b(bzFile*)b)->writing){
926,929c926
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    FILE *fp = ((bzFile *)b)bzFile*)b)->writing){
926,929c926
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    FILE *fp = ((bzFile *)b)->*)b)->writing){
926,929c926
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    FILE *fp = ((bzFile *)b)->handle)b)->writing){
928,929c928
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    b)->writing){
928,929c928
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if )->writing){
928,929c928
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (->writing){
928,929c928
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (bwriting){
928,929c928
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (b==){
928,929c928
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (b==NULL{
929,930c929
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
929,930c929
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(&bzerr,b,0,NULL,NULL);
929,930c929
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(&bzerr,b,0,NULL,NULL);
929,930c929
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if((bzerr,b,0,NULL,NULL);
929,930c929
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((,b,0,NULL,NULL);
929,930c929
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFileb,0,NULL,NULL);
929,930c929
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*,0,NULL,NULL);
929,930c929
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)0,NULL,NULL);
929,930c929
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b,NULL,NULL);
929,930c929
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b)NULL,NULL);
929,930c929
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b)->,NULL);
929,930c929
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b)->writingNULL);
929,930c929
<    if(((bzFile*)b)->writing){
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>    if(((bzFile*)b)->writing));
930c930
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
---
>       ;
930,931c930
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteCloseif(bzerr != BZ_OK){
930,931c930
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose((bzerr != BZ_OK){
930,931c930
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(&bzerr != BZ_OK){
930,931c930
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(&bzerr!= BZ_OK){
930,931c930
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(&bzerr,BZ_OK){
930,931c930
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(&bzerr,b){
930,931c930
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
---
>       BZ2_bzWriteClose(&bzerr,b,{
930,932c930
<       BZ2_bzWriteClose(&bzerr,b,0,NULL,NULL);
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       BZ2_bzWriteClose(&bzerr,b,0BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
(92.0 %, 16310 bytes)
930,932c930
<       ;
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       ,1,NULL,NULL);
931,932c931
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       1,NULL,NULL);
931,932c931
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if,NULL,NULL);
931,932c931
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(NULL,NULL);
931,932c931
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(bzerr ,NULL);
931,932c931
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(bzerr != NULL);
931,932c931
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(bzerr != BZ_OK);
931,932c931
<       if(bzerr != BZ_OK){
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
---
>       if(bzerr != BZ_OK);
932,933c932
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
---
>          }
932,934c932
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>          BZ2_bzWriteClose}else
932,934c932
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
---
>          BZ2_bzWriteClose(else
932,935c932
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULLif(fp!=stdin && fp!=stdout){
932,935c932
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,(fp!=stdin && fp!=stdout){
932,935c932
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,bfp!=stdin && fp!=stdout){
932,935c932
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,!=stdin && fp!=stdout){
932,935c932
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,1stdin && fp!=stdout){
932,935c932
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,1,&& fp!=stdout){
932,935c932
<          BZ2_bzWriteClose(NULL,b,1,NULL,NULL);
<       }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          BZ2_bzWriteClose(NULL,b,1,NULLfp!=stdout){
(92.1 %, 16266 bytes)
932,934c932
<          }
<    }else
<    if(fp!=stdin && fp!=stdout){
---
>          {
933,935c933
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>    fclose(fp);
933,935c933
<    }else
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>    }(fp);
934,935c934
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>    fp);
934,935c934
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>    if);
934,935c934
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
---
>    if(;
934,936c934
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
---
>    if(fp}
934,937c934
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
---
>    if(fp!=}
934,942c934
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin static char *bzerrorstrings[] = {
934,942c934
<    if(fp!=stdin && fp!=stdout){
<       fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if(fp!=stdin && char *bzerrorstrings[] = {
(92.1 %, 16222 bytes)
933,940c933
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    = {
933,940c933
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    fclose{
933,941c933
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
---
>    fclose("OK"
933,942c933
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
---
>    fclose(fp,"SEQUENCE_ERROR"
933,942c933
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
---
>    fclose(fp)"SEQUENCE_ERROR"
934,943c934
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
---
>    ,"PARAM_ERROR"
935,943c935
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
---
> "PARAM_ERROR"
940,944c940
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
---
> ,"MEM_ERROR"
940,944c940
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
---
> static "MEM_ERROR"
940,945c940
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
---
> static char ,"DATA_ERROR"
940,945c940
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
---
> static char *"DATA_ERROR"
940,946c940
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
---
> static char *bzerrorstrings,"DATA_ERROR_MAGIC"
940,946c940
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
---
> static char *bzerrorstrings["DATA_ERROR_MAGIC"
940,947c940
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
---
> static char *bzerrorstrings[] ,"IO_ERROR"
940,947c940
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
---
> static char *bzerrorstrings[] = "IO_ERROR"
941,948c941
<        "OK"
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
---
>        ,"UNEXPECTED_EOF"
942,948c942
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
---
>       "UNEXPECTED_EOF"
942,949c942
<       ,"SEQUENCE_ERROR"
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
---
>       ,,"OUTBUFF_FULL"
943,949c943
<       ,"PARAM_ERROR"
<       ,"MEM_ERROR"
<       ,"DATA_ERROR"
<       ,"DATA_ERROR_MAGIC"
<       ,"IO_ERROR"
<       ,"UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
---
>       "OUTBUFF_FULL"
(92.1 %, 16093 bytes)
942,948d941
<       "UNEXPECTED_EOF"
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
943,949c943
<       ,"OUTBUFF_FULL"
<       ,"CONFIG_ERROR"
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
<       ,"???"   
---
>       "???"   
(92.2 %, 15962 bytes)
942,947c942
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       (BZFILE *b, int *errnum)
942,947c942
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,BZFILE *b, int *errnum)
943,947c943
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       *b, int *errnum)
943,947c943
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,b, int *errnum)
944,947c944
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> , int *errnum)
944,947c944
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> }int *errnum)
947c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> *errnum)
947c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const errnum)
947c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char )
947,948c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
---
> const char * {
947,949c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_APIint err = ((bzFile *)b)->lastErr;
947,949c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(err = ((bzFile *)b)->lastErr;
947,949c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror= ((bzFile *)b)->lastErr;
947,949c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) ((bzFile *)b)->lastErr;
947,949c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) ((bzFile *)b)->lastErr;
947,949c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE bzFile *)b)->lastErr;
947,949c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE **)b)->lastErr;
947,949c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b)b)->lastErr;
947,949c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, b)->lastErr;
947,949c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int )->lastErr;
947,949c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *->lastErr;
947,949c947
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnumlastErr;
948,949c948
< {
<    int err = ((bzFile *)b)->lastErr;
---
> ;
949,950d948
<    int err = ((bzFile *)b)->lastErr;
< 
949,951c949
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int (err>0) err = 0;
949,951c949
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err err>0) err = 0;
949,951c949
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = >0) err = 0;
949,951c949
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = (0) err = 0;
949,951c949
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = (() err = 0;
949,951c949
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = ((bzFile err = 0;
949,951c949
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = ((bzFile *= 0;
949,951c949
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = ((bzFile *)0;
949,951c949
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
---
>    int err = ((bzFile *)b;
949,952c949
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
---
>    int err = ((bzFile *)b)*errnum = err;
949,952c949
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
---
>    int err = ((bzFile *)b)->errnum = err;
949,952c949
<    int err = ((bzFile *)b)->lastErr;
< 
<    if(err>0) err = 0;
<    *errnum = err;
---
>    int err = ((bzFile *)b)->lastErr= err;
951,952c951
<    if(err>0) err = 0;
<    *errnum = err;
---
>    err;
(92.2 %, 15926 bytes)
949,980c949
<    int err = ((bzFile *)b)->lastErr= err;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    int err = ((bzFile *)b)->lastErr#define BZ_UNIX      1
949,980c949
<    int err = ((bzFile *)b)->lastErr= err;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    int err = ((bzFile *)b)->lastErr= define BZ_UNIX      1
949,980c949
<    int err = ((bzFile *)b)->lastErr= err;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    int err = ((bzFile *)b)->lastErr= errBZ_UNIX      1
950,980c950
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    1
950,983c950
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
>    return #define BZ_LCCWIN32  0
950,983c950
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
>    return bzerrorstringsdefine BZ_LCCWIN32  0
950,983c950
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
>    return bzerrorstrings[BZ_LCCWIN32  0
950,983c950
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
---
>    return bzerrorstrings[err0
950,989c950
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[err*#include <signal.h>
950,989c950
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[err*-include <signal.h>
950,989c950
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[err*-1<signal.h>
950,989c950
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
>    return bzerrorstrings[err*-1]signal.h>
951,989c951
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> .h>
980,989c980
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> h>
980,989c980
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
---
> #>
980,990c980
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #define #include <errno.h>
980,990c980
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #define BZ_UNIX      include <errno.h>
983,990c983
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> <errno.h>
983,990c983
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #errno.h>
983,990c983
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #define .h>
983,990c983
< #define BZ_LCCWIN32  0
< 
< 
< 
< 
< 
< #include <signal.h>
< #include <errno.h>
---
> #define BZ_LCCWIN32  h>
989,990c989
< #include <signal.h>
< #include <errno.h>
---
> >
989,992c989
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
> ##define ERROR_IF_EOF(i)       
989,992c989
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
> #include define ERROR_IF_EOF(i)       
989,992c989
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
> #include <ERROR_IF_EOF(i)       
989,992c989
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
> #include <signal(i)       
989,992c989
< #include <signal.h>
< #include <errno.h>
< 
< #define ERROR_IF_EOF(i)       
---
> #include <signal.i)       
(92.2 %, 15883 bytes)
983,986c983
< #define BZ_LCCWIN32  h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
---
> #define BZ_LCCWIN32  )  
983,987c983
< #define BZ_LCCWIN32  h>
< 
< #define ERROR_IF_EOF(i)       
< #define ERROR_IF_NOT_ZERO(i)  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define BZ_LCCWIN32  h#define ERROR_IF_MINUS_ONE(i) 
(92.3 %, 15821 bytes)
983,991c983
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define BZ_LCCWIN32  fcntl.h>
984,991c984
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> .h>
984,991c984
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #h>
984,991c984
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define >
984,992c984
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define ERROR_IF_MINUS_ONE#   include <utime.h>
984,992c984
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define ERROR_IF_MINUS_ONE(include <utime.h>
984,992c984
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define ERROR_IF_MINUS_ONE(i<utime.h>
990,992c990
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> utime.h>
990,992c990
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #.h>
990,992c990
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #if h>
991,992c991
< #   include <fcntl.h>
< #   include <utime.h>
---
> >
991,994c991
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #   #   define PATH_SEP    '/'
991,994c991
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #   include define PATH_SEP    '/'
991,994c991
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #   include <PATH_SEP    '/'
991,994c991
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
---
> #   include <fcntl'/'
991,995c991
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
---
> #   include <fcntl.#   define MY_LSTAT    lstat
991,995c991
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
---
> #   include <fcntl.hdefine MY_LSTAT    lstat
992,995c992
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
---
> MY_LSTAT    lstat
992,995c992
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
---
> #   lstat
992,996c992
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
---
> #   include #   define MY_STAT     stat
992,996c992
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
---
> #   include <define MY_STAT     stat
992,996c992
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
---
> #   include <utimeMY_STAT     stat
992,996c992
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
---
> #   include <utime.stat
992,997c992
< #   include <utime.h>
< 
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
---
> #   include <utime.h#   define MY_S_ISREG  S_ISREG
994,997c994
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
---
> define MY_S_ISREG  S_ISREG
994,997c994
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
---
> #   MY_S_ISREG  S_ISREG
994,997c994
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
---
> #   define S_ISREG
994,998c994
< #   define PATH_SEP    '/'
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> #   define PATH_SEP    #   define MY_S_ISDIR  S_ISDIR
995,998c995
< #   define MY_LSTAT    lstat
< #   define MY_STAT     stat
< #   define MY_S_ISREG  S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
---
> define MY_S_ISDIR  S_ISDIR
(92.3 %, 15725 bytes)
994,997c994
< #   define S_ISREG
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
---
> #   define \
995,998c995
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> root=snocString((root), (name))
995,998c995
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> #   =snocString((root), (name))
995,998c995
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> #   define snocString((root), (name))
995,998c995
< #   define MY_S_ISDIR  S_ISDIR
< 
< #   define APPEND_FILESPEC(root, name) \
<       root=snocString((root), (name))
---
> #   define MY_S_ISDIR  ((root), (name))
(92.4 %, 15646 bytes)
994,997c994
< #   define \
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
> #   define #   define APPEND_FLAG(root, name) \
995,997c995
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
>       define APPEND_FLAG(root, name) \
995,997c995
<       root=snocString((root), (name))
< 
< #   define APPEND_FLAG(root, name) \
---
>       rootAPPEND_FLAG(root, name) \
(92.4 %, 15609 bytes)
995,996c995
<       define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
---
>       root), (name))
995,996c995
<       define APPEND_FLAG(root, name) \
<       root=snocString((root), (name))
---
>       define ), (name))
(92.4 %, 15553 bytes)
995,999c995
<       root), (name))
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
---
>       #      define NORETURN 
995,999c995
<       root), (name))
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
---
>       rootdefine NORETURN 
995,999c995
<       root), (name))
< 
< #   define SET_BINARY_MODE(fd) 
< 
< #      define NORETURN 
---
>       root)NORETURN 
(92.4 %, 15501 bytes)
995,1005c995
<       rootdefine NORETURN 
< 
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
>       rootdefine define False ((Bool)0)
997,1005c997
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> False ((Bool)0)
997,1005c997
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #((Bool)0)
1004,1005c1004
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> (Bool)0)
1004,1005c1004
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #Bool)0)
1004,1005c1004
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define )0)
1004,1005c1004
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  0)
1004,1005c1004
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  ()
(92.5 %, 15470 bytes)
1004,1022c1004
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
---
> #define True  2
1004,1023c1004
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> #define True  0#define SM_F2F           3
1007,1023c1007
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> define SM_F2F           3
1007,1023c1007
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> typedef SM_F2F           3
1007,1023c1007
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
---
> typedef int 3
1007,1026c1007
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> typedef int IntNative#define OM_Z             1
1021,1026c1021
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> define OM_Z             1
1021,1026c1021
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> #OM_Z             1
1021,1026c1021
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
---
> #define 1
1021,1027c1021
< #define SM_I2O           1
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define SM_I2O           #define OM_UNZ           2
1022,1027c1022
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> define OM_UNZ           2
1022,1027c1022
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #OM_UNZ           2
1022,1027c1022
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
---
> #define 2
1022,1028c1022
< #define SM_F2O           2
< #define SM_F2F           3
< 
< 
< #define OM_Z             1
< #define OM_UNZ           2
< #define OM_TEST          3
---
> #define SM_F2O           #define OM_TEST          3
(92.5 %, 15385 bytes)
1021,1057c1021
< #define SM_I2O           #define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
---
> #define SM_I2O           struct  
1021,1058c1021
< #define SM_I2O           #define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
---
> #define SM_I2O           #UInt64;
1021,1058c1021
< #define SM_I2O           #define OM_UNZ           2
< #define OM_TEST          3
< 
< 
< 
< 
< #define FILE_NAME_LEN 1034
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct  
<    UInt64;
---
> #define SM_I2O           #define ;
(92.6 %, 15261 bytes)
1021,1201c1021
< #define SM_I2O           struct  
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
---
> #define SM_I2O           struct zzzz 
1022,1201c1022
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
---
>    zzzz 
1022,1202c1022
<    UInt64;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
<    Cell;
---
>    UInt64Cell;
1148,1202c1148
< #if BZ_UNIX
< 
< #endif
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_N_SUFFIX_PAIRS 4
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct zzzz 
<    Cell;
---
> ;
(92.7 %, 15009 bytes)
1021,1042c1021
< #define SM_I2O           struct zzzz 
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define SM_I2O           aa->name, (s))==0)
1021,1042c1021
< #define SM_I2O           struct zzzz 
<    Cell;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ISFLAG(s) (strcmp(aa->name, (s))==0)
---
> #define SM_I2O           struct ->name, (s))==0)
(92.7 %, 14942 bytes)
1021,1023c1021
< #define SM_I2O           aa->name, (s))==0)
< 
< IntNative main ( IntNative argc, Char *argv[] )
---
> #define SM_I2O           ( IntNative argc, Char *argv[] )
1021,1023c1021
< #define SM_I2O           aa->name, (s))==0)
< 
< IntNative main ( IntNative argc, Char *argv[] )
---
> #define SM_I2O           aaIntNative argc, Char *argv[] )
1021,1023c1021
< #define SM_I2O           aa->name, (s))==0)
< 
< IntNative main ( IntNative argc, Char *argv[] )
---
> #define SM_I2O           aa->argc, Char *argv[] )
(92.7 %, 14907 bytes)
1021,1027c1021
< #define SM_I2O           ( IntNative argc, Char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define SM_I2O           
\ No newline at end of file
1021,1027c1021
< #define SM_I2O           ( IntNative argc, Char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define SM_I2O           ( 
\ No newline at end of file
1021,1027c1021
< #define SM_I2O           ( IntNative argc, Char *argv[] )
< ;
< 
< 
< 
< 
<  
\ No newline at end of file
---
> #define SM_I2O           ( IntNative 
\ No newline at end of file
(92.7 %, 14867 bytes)
===< pass_clex :: rm-toks-12 >===
9,13c9
< #2
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
---
> BZ_FLUSH_OK          2
10,13d9
< 
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
11,13d10
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
11,13d10
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
11,13d10
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
11,14c11
< #define BZ_OK                0
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
---
> #define BZ_OK                3
12,14d11
< #define BZ_RUN_OK            1
< #define BZ_FLUSH_OK          2
< #define BZ_FINISH_OK         3
(92.8 %, 14774 bytes)
11,14c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_OK                #define BZ_PARAM_ERROR       (-2)
12,14c12
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> define BZ_PARAM_ERROR       (-2)
12,14c12
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #BZ_PARAM_ERROR       (-2)
12,14c12
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define (-2)
12,14c12
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_STREAM_END        -2)
13,14c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> 2)
13,14c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #)
13,15c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
---
> #define #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
13,15c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_SEQUENCE_ERROR    define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
13,15c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_SEQUENCE_ERROR    (BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
13,15c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_SEQUENCE_ERROR    (-BZ_DATA_ERROR_MAGIC  (-5)
13,15c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
---
> #define BZ_SEQUENCE_ERROR    (-1(-5)
14,15c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
---
> -5)
14,15c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
---
> #5)
14,15c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
---
> #define )
14,16c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_PARAM_ERROR       #define BZ_IO_ERROR          (-6)
14,16c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_PARAM_ERROR       (define BZ_IO_ERROR          (-6)
14,16c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_PARAM_ERROR       (-BZ_IO_ERROR          (-6)
14,16c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #define BZ_PARAM_ERROR       (-2(-6)
15,16c15
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> -6)
15,16c15
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #6)
15,16c15
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
---
> #define )
15,17c15
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_MEM_ERROR         #define BZ_UNEXPECTED_EOF    (-7)
15,17c15
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  define BZ_UNEXPECTED_EOF    (-7)
15,17c15
< #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (-5)
< #define BZ_IO_ERROR          (-6)
< #define BZ_UNEXPECTED_EOF    (-7)
---
> #define BZ_MEM_ERROR         BZ_DATA_ERROR_MAGIC  (BZ_UNEXPECTED_EOF    (-7)
(92.8 %, 14714 bytes)
15,16c15
< #define BZ_MEM_ERROR         #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_MEM_ERROR         8)
15,16c15
< #define BZ_MEM_ERROR         #define BZ_UNEXPECTED_EOF    (-7)
< #define BZ_OUTBUFF_FULL      (-8)
---
> #define BZ_MEM_ERROR         #)
(92.9 %, 14649 bytes)
15,20c15
< #define BZ_MEM_ERROR         8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_MEM_ERROR         char *next_in;
15,20c15
< #define BZ_MEM_ERROR         8)
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_MEM_ERROR         8*next_in;
16,20c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> next_in;
16,20c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #;
16,21c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define unsigned int avail_in;
16,21c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      int avail_in;
16,21c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      (avail_in;
16,21c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_CONFIG_ERROR      (-;
16,22c16
< #define BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> #define BZ_CONFIG_ERROR      (-9unsigned int total_in_lo32;
18,22c18
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> int total_in_lo32;
19,22c19
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    total_in_lo32;
19,22c19
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    struct ;
20,22d19
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
20,23c20
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char int total_in_hi32;
20,23c20
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char *total_in_hi32;
21,23d20
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
21,24d20
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
21,25c21
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned *next_out;
21,25c21
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned int next_out;
22,25d21
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
22,25d21
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
22,25d21
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
22,25d21
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
23,26d22
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
23,26d22
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
23,26d22
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
23,26d22
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
24,27d23
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
25,27d24
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
25,28c25
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char int total_out_hi32;
25,28c25
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char *total_out_hi32;
26,28d25
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
26,29d25
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
26,30c26
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned *state;
26,30c26
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned int state;
27,30d26
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
27,31d26
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
27,32c27
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned *(*bzalloc)(void *,int,int);
27,32c27
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int (*bzalloc)(void *,int,int);
27,32c27
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_lo32*bzalloc)(void *,int,int);
28,32c28
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       bzalloc)(void *,int,int);
28,32c28
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned )(void *,int,int);
28,32c28
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int (void *,int,int);
28,32c28
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_hi32void *,int,int);
30,32c30
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       *,int,int);
30,32c30
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void ,int,int);
30,32c30
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *int,int);
30,32c30
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *state,int);
32c32
<       void *(*bzalloc)(void *,int,int);
---
>       int);
32c32
<       void *(*bzalloc)(void *,int,int);
---
>       void );
32c32
<       void *(*bzalloc)(void *,int,int);
---
>       void *;
32,33c32
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(void (*bzfree)(void *,void *);
32,33c32
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*(*bzfree)(void *,void *);
32,33c32
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc*bzfree)(void *,void *);
32,33c32
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)bzfree)(void *,void *);
32,33c32
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)()(void *,void *);
32,33c32
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void (void *,void *);
32,33c32
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *void *,void *);
32,33c32
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,*,void *);
32,33c32
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,void *);
32,33c32
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,void *);
32,33c32
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int*);
32,33c32
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int,int));
33c33
<       void (*bzfree)(void *,void *);
---
>       ;
33,34c33
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void void *opaque;
33,34c33
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*opaque;
33,34c33
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*opaque;
33,34c33
<       void (*bzfree)(void *,void *);
<       void *opaque;
---
>       void (*bzfree;
33,35c33
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
---
>       void (*bzfree)} 
33,36c33
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bzfree)(bz_stream;
33,36c33
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void (*bzfree)(void ;
33,40c33
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *#include <stdio.h>
33,40c33
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,include <stdio.h>
33,40c33
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void <stdio.h>
33,40c33
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void *stdio.h>
33,40c33
<       void (*bzfree)(void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzfree)(void *,void *).h>
34,40c34
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       h>
34,40c34
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void >
34,42c34
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *#   define BZ_API(func) func
34,42c34
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *opaquedefine BZ_API(func) func
35,42c35
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    BZ_API(func) func
36,42c36
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    (func) func
36,42c36
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_streamfunc) func
40,42c40
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> ) func
40,42c40
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #func
40,43c40
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include #   define BZ_EXTERN extern
40,43c40
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <define BZ_EXTERN extern
40,43c40
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdioBZ_EXTERN extern
40,43c40
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.extern
40,48c40
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> #include <stdio.hBZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
42,48c42
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> int BZ_API(BZ2_bzCompressInitworkFactor 
42,48c42
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> #   BZ_API(BZ2_bzCompressInitworkFactor 
42,48c42
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> #   define (BZ2_bzCompressInitworkFactor 
42,48c42
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> #   define BZ_APIBZ2_bzCompressInitworkFactor 
42,49c42
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
---
> #   define BZ_API();
42,49c42
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
---
> #   define BZ_API(func;
42,51c42
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
---
> #   define BZ_API(func) BZ_EXTERN ;
43,51c43
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
---
> ;
43,53c43
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> #   int BZ_API(BZ2_bzDecompressInit) ( 
43,53c43
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> #   define BZ_API(BZ2_bzDecompressInit) ( 
43,53c43
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> #   define BZ_EXTERN (BZ2_bzDecompressInit) ( 
48,53c48
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ2_bzDecompressInit) ( 
48,53c48
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN ) ( 
48,53c48
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int ( 
48,54c48
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> BZ_EXTERN int BZ_APIbz_stream *strm, 
48,54c48
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> BZ_EXTERN int BZ_API(*strm, 
49,54c49
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
>    strm, 
49,54c49
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
>    ), 
51,55c51
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> int       verbosity, 
51,55c51
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> BZ_EXTERN verbosity, 
53,55c53
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> , 
53,56c53
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
> int int       );
53,56c53
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
> int BZ_API);
53,56c53
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
> int BZ_API(;
53,58c53
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> int BZ_API(BZ2_bzDecompressInitBZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
53,58c53
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
> int BZ_API(BZ2_bzDecompressInit) int BZ_API(BZ2_bzDecompressEnd) ( 
54,58c54
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       BZ_API(BZ2_bzDecompressEnd) ( 
54,58c54
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       bz_stream (BZ2_bzDecompressEnd) ( 
54,58c54
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       bz_stream *BZ2_bzDecompressEnd) ( 
54,58c54
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       bz_stream *strm) ( 
55,58c55
<       int       verbosity, 
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
---
>       ( 
55,59c55
<       int       verbosity, 
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
>       int       bz_stream *strm 
55,59c55
<       int       verbosity, 
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
>       int       verbosity*strm 
56,59c56
<       int       );
< 
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
---
>       strm 
58,61d57
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
58,61d57
< BZ_EXTERN int BZ_API(BZ2_bzDecompressEnd) ( 
<       bz_stream *strm 
<    );
< 
(92.9 %, 14574 bytes)
56,66c56
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       int       * BZ_API(BZ2_bzReadOpen) ( 
56,66c56
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       int       )BZ_API(BZ2_bzReadOpen) ( 
62,66c62
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> (BZ2_bzReadOpen) ( 
62,66c62
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #BZ2_bzReadOpen) ( 
62,66c62
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define ) ( 
62,66c62
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED ( 
64,67c64
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> int*  bzerror,   
64,67c64
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef *  bzerror,   
64,67c64
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void bzerror,   
64,67c64
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void BZFILE,   
66,68c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> FILE* f, 
66,68c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN * f, 
66,68c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILEf, 
66,68c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* , 
66,69c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_APIint   verbosity, 
66,69c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(verbosity, 
66,69c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen, 
66,70c66
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) int   small,
67,70c67
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       small,
67,70c67
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int,
67,71c67
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  void* unused,    
67,71c67
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  bzerror* unused,    
68,71c68
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       unused,    
68,71c68
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE,    
68,72c68
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* int   nUnused 
68,72c68
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* fnUnused 
69,73c69
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       );
69,73c69
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   ;
69,75c69
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       int   verbosityBZ_EXTERN void ;
70,75c70
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void ;
70,75c70
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       int   ;
70,77c70
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   smallBZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
71,77c71
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void BZ_API(BZ2_bzReadGetUnused) ( 
71,77c71
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       voidBZ_API(BZ2_bzReadGetUnused) ( 
71,77c71
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* (BZ2_bzReadGetUnused) ( 
71,77c71
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* unusedBZ2_bzReadGetUnused) ( 
72,77c72
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       ) ( 
72,77c72
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   ( 
73,78c73
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    int*    bzerror, 
73,78c73
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    )*    bzerror, 
75,78c75
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> bzerror, 
75,78c75
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN , 
75,79c75
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZFILE* b, 
77,79c77
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
77,79c77
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN b, 
77,79c77
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void , 
77,80c77
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_APIvoid**  unused,  
77,80c77
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(**  unused,  
77,80c77
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused*  unused,  
77,80c77
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) unused,  
78,80c78
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       ,  
78,81c78
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       intint*    nUnused 
78,81c78
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    *    nUnused 
78,81c78
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    bzerrornUnused 
79,82c79
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       );
79,82c79
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE;
79,84c79
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILE* BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
79,84c79
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILE* bint BZ_API(BZ2_bzRead) ( 
80,84c80
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZ_API(BZ2_bzRead) ( 
80,84c80
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void(BZ2_bzRead) ( 
80,84c80
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void*BZ2_bzRead) ( 
80,84c80
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  ) ( 
80,84c80
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  unused( 
81,84d80
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
81,84d80
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
81,84d80
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
82,85c82
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>    , 
82,86c82
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )BZFILE* b, 
84,86c84
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
84,86c84
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN b, 
84,86c84
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int , 
84,87c84
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_APIvoid*   buf, 
84,87c84
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(*   buf, 
84,87c84
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzReadbuf, 
84,87c84
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) , 
85,87d84
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
85,88c85
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       intlen 
85,89c85
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int*    );
85,89c85
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int*    bzerror;
86,91c86
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
86,91c86
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILEBZFILE* BZ_API(BZ2_bzWriteOpen) ( 
86,91c86
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* * BZ_API(BZ2_bzWriteOpen) ( 
86,91c86
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* bBZ_API(BZ2_bzWriteOpen) ( 
87,91c87
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       (BZ2_bzWriteOpen) ( 
87,91c87
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       voidBZ2_bzWriteOpen) ( 
87,91c87
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   ) ( 
87,91c87
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   buf( 
88,91d87
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
88,92c88
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       int     *  bzerror,      
89,92c89
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    bzerror,      
89,92c89
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    ),      
91,93c91
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> FILE* f, 
91,93c91
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN * f, 
91,93c91
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILEf, 
91,93c91
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* , 
91,94c91
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_APIint   blockSize100k, 
91,94c91
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(blockSize100k, 
91,94c91
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen, 
91,95c91
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) int   verbosity, 
92,95c92
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       verbosity, 
92,95c92
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int, 
92,96c92
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  int   workFactor 
92,96c92
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  bzerrorworkFactor 
93,97c93
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       );
93,97c93
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE;
93,99c93
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILE* BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
93,99c93
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILE* fvoid BZ_API(BZ2_bzWrite) ( 
94,99c94
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       BZ_API(BZ2_bzWrite) ( 
94,99c94
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   (BZ2_bzWrite) ( 
94,99c94
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   blockSize100kBZ2_bzWrite) ( 
95,99c95
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       ) ( 
95,99c95
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   ( 
95,100c95
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   verbosityint*    bzerror, 
96,100c96
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       *    bzerror, 
96,100c96
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   bzerror, 
97,100c97
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>    , 
97,101c97
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
>    )BZFILE* b, 
99,101c99
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> * b, 
99,101c99
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN b, 
99,101c99
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void , 
99,102c99
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_APIvoid*   buf, 
99,102c99
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(*   buf, 
99,102c99
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWritebuf, 
99,102c99
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) , 
100,102d99
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
100,103c100
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       intlen 
100,104c100
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int*    );
100,104c100
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int*    bzerror;
101,106c101
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
101,106c101
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILEvoid BZ_API(BZ2_bzWriteClose) ( 
101,106c101
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteClose) ( 
101,106c101
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* b(BZ2_bzWriteClose) ( 
102,106c102
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZ2_bzWriteClose) ( 
102,106c102
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void) ( 
102,106c102
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   ( 
102,107c102
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       void*   bufint*          bzerror, 
103,107c103
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       *          bzerror, 
103,107c103
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       int     bzerror, 
104,107c104
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    , 
104,108c104
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )BZFILE*       b, 
106,108c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> *       b, 
106,108c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN b, 
106,108c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void , 
106,109c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIint           abandon, 
106,109c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(abandon, 
106,109c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose, 
106,110c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) unsigned int* nbytes_in, 
107,110c107
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int* nbytes_in, 
107,110c107
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int* nbytes_in, 
107,110c107
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          nbytes_in, 
108,110d107
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
108,110d107
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
108,111c108
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILEint* nbytes_out 
108,111c108
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       * nbytes_out 
108,111c108
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       bnbytes_out 
109,112c109
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       );
109,112c109
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       int           ;
109,114c109
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       int           abandonBZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
110,114c110
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       void BZ_API(BZ2_bzWriteClose64) ( 
110,114c110
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned BZ_API(BZ2_bzWriteClose64) ( 
110,114c110
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int(BZ2_bzWriteClose64) ( 
110,114c110
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* BZ2_bzWriteClose64) ( 
110,114c110
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_in) ( 
111,114c111
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       ( 
111,115c111
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int*          bzerror, 
111,115c111
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int*          bzerror, 
111,115c111
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* bzerror, 
112,115c112
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    , 
112,116c112
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
>    )BZFILE*       b, 
114,116c114
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> *       b, 
114,116c114
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN b, 
114,116c114
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void , 
114,117c114
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_APIint           abandon, 
114,117c114
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(abandon, 
114,117c114
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64, 
114,118c114
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) unsigned int* nbytes_in_lo32, 
115,118c115
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int* nbytes_in_lo32, 
115,118c115
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int* nbytes_in_lo32, 
115,118c115
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          nbytes_in_lo32, 
116,118d115
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
116,118d115
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
116,119c116
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILEint* nbytes_in_hi32, 
116,119c116
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       * nbytes_in_hi32, 
116,119c116
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       bnbytes_in_hi32, 
117,119c117
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       , 
117,120c117
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           unsigned int* nbytes_out_lo32, 
117,120c117
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           abandonint* nbytes_out_lo32, 
118,120c118
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       * nbytes_out_lo32, 
118,120c118
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned nbytes_out_lo32, 
118,120c118
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int, 
118,121c118
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* unsigned int* nbytes_out_hi32
118,121c118
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_lo32int* nbytes_out_hi32
119,121c119
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       * nbytes_out_hi32
119,121c119
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned nbytes_out_hi32
119,122c119
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int);
119,122c119
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* ;
119,127c119
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_in_hi32BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
120,127c120
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffCompress) ( 
120,127c120
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned BZ_API(BZ2_bzBuffToBuffCompress) ( 
120,127c120
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int(BZ2_bzBuffToBuffCompress) ( 
120,127c120
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ2_bzBuffToBuffCompress) ( 
120,127c120
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32) ( 
121,127c121
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       ( 
121,128c121
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned char*         dest, 
121,128c121
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int*         dest, 
121,128c121
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* dest, 
122,128c122
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    , 
122,129c122
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )unsigned int* destLen,
127,129c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> int* destLen,
127,129c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN * destLen,
127,129c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int destLen,
127,129c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API,
127,130c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(char*         source, 
127,130c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress*         source, 
127,130c127
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) source, 
128,130c128
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       , 
128,131c128
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charunsigned int  sourceLen,
128,131c128
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         int  sourceLen,
128,131c128
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destsourceLen,
129,131c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       ,
129,132c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int           blockSize100k, 
129,132c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned intblockSize100k, 
129,132c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* , 
129,133c129
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int* destLenint           verbosity, 
130,133c130
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       verbosity, 
130,133c130
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char, 
130,134c130
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         int           workFactor 
130,134c130
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         sourceworkFactor 
131,135c131
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       );
131,135c131
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned ;
131,137c131
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
131,137c131
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  sourceLenint BZ_API(BZ2_bzBuffToBuffDecompress) ( 
132,137c132
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffDecompress) ( 
132,137c132
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           (BZ2_bzBuffToBuffDecompress) ( 
132,137c132
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100kBZ2_bzBuffToBuffDecompress) ( 
133,137c133
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       ) ( 
133,137c133
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           ( 
133,138c133
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           verbositychar*         dest, 
134,138c134
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       *         dest, 
134,138c134
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           dest, 
135,138c135
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    , 
135,139c135
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
>    )unsigned int* destLen,
137,139c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> int* destLen,
137,139c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN * destLen,
137,139c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int destLen,
137,139c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API,
137,140c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(char*         source, 
137,140c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress*         source, 
137,140c137
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) source, 
138,140c138
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       , 
138,141c138
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charunsigned int  sourceLen,
138,141c138
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         int  sourceLen,
138,141c138
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destsourceLen,
139,141c139
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       ,
139,142c139
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int           small, 
139,142c139
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned intsmall, 
139,142c139
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* , 
139,143c139
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int* destLenint           );
140,143c140
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       );
140,143c140
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char;
140,145c140
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       char*         BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
140,145c140
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       char*         sourceBZFILE * BZ_API(BZ2_bzopen) (
141,145c141
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       * BZ_API(BZ2_bzopen) (
141,145c141
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned BZ_API(BZ2_bzopen) (
141,145c141
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  (BZ2_bzopen) (
141,145c141
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  sourceLenBZ2_bzopen) (
142,145c142
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       ) (
142,145c142
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           (
142,146c142
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           smallconst char *path,
143,146c143
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       char *path,
143,146c143
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           *path,
143,146c143
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           )path,
145,146c145
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> ,
145,147c145
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN const char *mode
145,147c145
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE char *mode
145,147c145
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * *mode
145,147c145
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_APImode
145,148c145
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API();
145,148c145
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen;
145,150c145
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
146,150c146
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       BZFILE * BZ_API(BZ2_bzdopen) (
146,150c146
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const * BZ_API(BZ2_bzdopen) (
146,150c146
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char BZ_API(BZ2_bzdopen) (
146,150c146
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char *(BZ2_bzdopen) (
146,150c146
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const char *pathBZ2_bzdopen) (
147,150c147
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       ) (
147,150c147
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
---
>       const (
147,151c147
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>       const char int        fd,
147,151c147
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>       const char *fd,
148,151c148
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
---
>    ,
148,152c148
<    );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
>    )const char *mode
150,152c150
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> char *mode
150,152c150
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN *mode
150,152c150
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
---
> BZ_EXTERN BZFILE mode
150,153c150
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * );
150,153c150
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API;
150,155c150
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
---
> BZ_EXTERN BZFILE * BZ_API(BZ_EXTERN int BZ_API();
150,155c150
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopenint BZ_API();
150,155c150
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) (
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzdopen) BZ_API();
151,155c151
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
---
>       ();
151,155c151
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
---
>       int        );
151,155c151
<       int        fd,
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
---
>       int        fd;
152,157c152
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
---
>       BZ_EXTERN int BZ_API();
152,157c152
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
---
>       const int BZ_API();
152,157c152
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
---
>       const char BZ_API();
152,157c152
<       const char *mode
<    );
<          
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
---
>       const char *();
(92.9 %, 14510 bytes)
151,154d150
<          
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
152,155d151
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
< 
152,156c152
< BZ_EXTERN int BZ_API();
< 
< BZ_EXTERN int BZ_API();
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> BZ_EXTERN BZ_API(BZ2_bzcloseBZ2_bzerror) (
(92.9 %, 14451 bytes)
150,154c150
< BZ_EXTERN BZFILE * BZ_API;
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> BZ_EXTERN BZFILE * BZ_API*errnum
152,154c152
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> errnum
152,155c152
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> void );
152,155c152
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> void BZ_API;
152,165c152
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> void BZ_API(#define _BZLIB_PRIVATE_H
152,165c152
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> void BZ_API(BZ2_bzcloseBZ2_bzerrordefine _BZLIB_PRIVATE_H
152,165c152
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> void BZ_API(BZ2_bzcloseBZ2_bzerror) _BZLIB_PRIVATE_H
153,167c153
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       #include <stdlib.h>
153,167c153
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE include <stdlib.h>
153,167c153
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *<stdlib.h>
153,167c153
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *bstdlib.h>
154,167c154
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       .h>
154,167c154
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       int    h>
154,167c154
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       int    *>
155,172c155
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    #define BZ_VERSION  "1.0.2, 30-Dec-2001"
155,172c155
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    )define BZ_VERSION  "1.0.2, 30-Dec-2001"
165,172c165
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_VERSION  "1.0.2, 30-Dec-2001"
165,172c165
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #"1.0.2, 30-Dec-2001"
165,174c165
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define typedef char            Char;
167,174c167
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> char            Char;
167,174c167
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #Char;
167,174c167
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #include ;
167,175c167
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <typedef unsigned char   Bool;
167,175c167
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlibunsigned char   Bool;
167,175c167
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlib.char   Bool;
167,175c167
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlib.hBool;
172,175c172
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> ;
172,176c172
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #typedef unsigned char   UChar;
172,176c172
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define unsigned char   UChar;
172,176c172
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define BZ_VERSION  char   UChar;
174,176c174
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> UChar;
174,176c174
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef ;
174,177c174
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            typedef int             Int32;
174,177c174
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            Charint             Int32;
175,177c175
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> Int32;
175,177c175
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef ;
175,178c175
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned typedef unsigned int    UInt32;
175,178c175
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   unsigned int    UInt32;
175,178c175
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   Boolint    UInt32;
176,178c176
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> UInt32;
176,178c176
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef ;
176,179c176
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned typedef short           Int16;
176,179c176
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   short           Int16;
176,179c176
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   UCharInt16;
177,179c177
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> ;
177,180c177
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef typedef unsigned short  UInt16;
177,180c177
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             unsigned short  UInt16;
177,180c177
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             Int32short  UInt16;
178,180c178
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> UInt16;
178,180c178
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef ;
178,182c178
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned #define True  ((Bool)1)
178,182c178
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    define True  ((Bool)1)
178,182c178
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    UInt32True  ((Bool)1)
179,182c179
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> ((Bool)1)
179,182c179
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef (Bool)1)
179,182c179
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           Bool)1)
179,182c179
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           Int16)1)
180,182c180
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> 1)
180,182c180
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef )
180,183c180
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned #define False ((Bool)0)
180,183c180
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  define False ((Bool)0)
180,183c180
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  UInt16False ((Bool)0)
182,183c182
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> ((Bool)0)
182,183c182
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #(Bool)0)
182,183c182
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define Bool)0)
182,183c182
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  )0)
182,183c182
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  (0)
182,183c182
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  (()
182,185c182
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool#define __inline__  
182,185c182
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool)define __inline__  
182,185c182
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool)1__inline__  
183,187d182
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
183,187d182
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
183,187d182
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
183,188c183
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define msgzfza2define )
---
> #define False )
183,196c183
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define False (#define BZ_RAND_DECLS                          \
183,196c183
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define False ((define BZ_RAND_DECLS                          \
183,196c183
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define False ((BoolBZ_RAND_DECLS                          \
183,196c183
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define False ((Bool)\
183,197c183
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define False ((Bool)0Int32 rNToGo;                               \
185,197c185
< #define __inline__  
< 
< 
< #define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> rNToGo;                               \
185,197c185
< #define __inline__  
< 
< 
< #define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #;                               \
185,197c185
< #define __inline__  
< 
< 
< #define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define \
188,198c188
< #define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> Int32 rTPos                                 \
188,198c188
< #define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #rTPos                                 \
188,198c188
< #define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define \
188,200c188
< #define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define msgzfza2define #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
196,200c196
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
196,200c196
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
196,200c196
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define #define BZ_UPDATE_CRC(crcVar,cha)              \
196,200c196
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
---
> #define BZ_RAND_DECLS                          define BZ_UPDATE_CRC(crcVar,cha)              \
197,200c197
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>    BZ_UPDATE_CRC(crcVar,cha)              \
197,200c197
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>    Int32 (crcVar,cha)              \
197,200c197
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>    Int32 rNToGocrcVar,cha)              \
197,200c197
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>    Int32 rNToGo;                               ,cha)              \
198,200c198
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>    cha)              \
198,200c198
<    Int32 rTPos                                 \
< 
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
---
>    Int32 )              \
200,201d199
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
200,206d199
< #define BZ_RAND_INIT_MASK                      #define BZ_UPDATE_CRC(crcVar,cha)              \
< 
< 
< 
< 
< 
< 
(93.0 %, 14354 bytes)
198,207c198
<    Int32 rTPos                                 \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
---
>    Int32 rTPos                                 3
205,207d204
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
205,207d204
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
205,207d204
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
205,208c205
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
---
> #define BZ_M_IDLE      4
206,209d205
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
206,209d205
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
206,209d205
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
206,210c206
< #define BZ_M_RUNNING   2
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
---
> #define BZ_M_RUNNING   1
207,210d206
< #define BZ_M_FLUSHING  3
< #define BZ_M_FINISHING 4
< 
< #define BZ_S_OUTPUT    1
(93.0 %, 14278 bytes)
206,210c206
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_M_RUNNING   12
207,210d206
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
207,210d206
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
207,210d206
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
207,211c207
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_S_INPUT     18
209,211d208
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
209,211d208
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
209,211d208
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
209,212c209
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_RADIX (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
210,212c210
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
210,212c210
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #+ BZ_N_QSORT + BZ_N_SHELL + 2)
210,212c210
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT + BZ_N_SHELL + 2)
210,212c210
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT + BZ_N_SHELL + 2)
211,212c211
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> BZ_N_SHELL + 2)
211,212c211
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #+ 2)
211,212c211
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define 2)
211,212c211
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL )
212,218d211
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
212,220c212
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #struct {
212,220c212
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define {
212,222c212
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT bz_stream* strm;
212,222c212
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (* strm;
212,222c212
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX strm;
212,222c212
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + ;
212,226c212
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT Int32    mode;
212,226c212
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + mode;
212,226c212
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL ;
212,227c212
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + Int32    state;
212,227c212
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2state;
219,227c219
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> ;
220,233c220
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>    UInt32*  arr1;
220,233c220
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>    struct *  arr1;
222,233c222
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       arr1;
222,233c222
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       bz_stream;
222,234c222
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* UInt32*  arr2;
222,234c222
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* strm*  arr2;
226,234c226
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       arr2;
226,234c226
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       Int32    ;
226,235c226
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    modeUInt32*  ftab;
227,235c227
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       *  ftab;
227,235c227
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
---
>       Int32    ftab;
228,235d227
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
233,238d232
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
233,238d232
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
233,238d232
<       UInt32*  arr1;
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
234,239d233
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
234,239d233
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
234,240c234
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32*   block;
234,240c234
<       UInt32*  arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       UInt32*  block;
235,240d234
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
235,240d234
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
235,241c235
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32*  mtfv;
235,241c235
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32*  mtfv;
236,241d235
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
239,241d238
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
239,242c239
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32*   zbits;
239,242c239
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32*  zbits;
240,242d239
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
240,244d239
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
240,245c240
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       UCharworkFactor;
240,245c240
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
---
>       UChar*   ;
240,250c240
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
---
>       UChar*   blockBZ_RAND_DECLS;
241,250c241
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
---
>       ;
241,254c241
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
---
>       UInt16Int32    nblockMAX;
241,254c241
<       UInt16*  mtfv;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
---
>       UInt16*  nblockMAX;
242,254d241
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
242,268d241
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
242,269c242
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       UCharcombinedCRC;
242,269c242
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       UChar*   ;
242,272c242
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       UChar*   zbitsInt32    verbosity;
245,272c245
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       verbosity;
245,272c245
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
---
>       Int32    ;
245,273c245
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       Int32    workFactorInt32    blockNo;
250,273c250
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
---
>       blockNo;
251,273d250
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
254,273d253
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
254,273d253
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
255,274d254
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
269,288c269
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
---
>       }
269,289c269
<       UInt32   combinedCRC;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
---
>       UInt32   EState;
271,290d270
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
272,297c272
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
>       ;
272,299c272
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
>       Int32    ;
272,309c272
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    verbosity#define BZ_X_IDLE        1
273,309c273
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       define BZ_X_IDLE        1
273,309c273
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    BZ_X_IDLE        1
273,309c273
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
---
>       Int32    blockNo1
274,310c274
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       #define BZ_X_OUTPUT      2
274,310c274
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    define BZ_X_OUTPUT      2
274,310c274
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>       Int32    blockSize100kBZ_X_OUTPUT      2
288,310c288
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
---
>    2
289,312c289
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    #define BZ_X_MAGIC_1     10
289,312c289
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
>    EStatedefine BZ_X_MAGIC_1     10
297,312c297
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
> BZ_X_MAGIC_1     10
299,312c299
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
---
> 10
309,312d308
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
309,312d308
< #define BZ_X_IDLE        1
< #define BZ_X_OUTPUT      2
< 
< #define BZ_X_MAGIC_1     10
(93.1 %, 14195 bytes)
309,321d308
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
309,323c309
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #struct {
309,323c309
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define {
309,325c309
< #define BZ_X_MAGIC_2     50
< 
< 
< 
< 
< 
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_X_MAGIC_2     bz_stream* strm;
315,325c315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> * strm;
315,325c315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #strm;
315,325c315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define ;
315,328c315
< #define MTFA_SIZE 4096
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #define MTFA_SIZE Int32    state;
316,328c316
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> state;
316,328c316
< #define MTFL_SIZE 16
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
---
> #;
(93.1 %, 14113 bytes)
309,324c309
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
> UInt32   bsBuff;
310,324c310
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>    bsBuff;
310,324c310
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
---
>    struct ;
312,324d311
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
312,325c312
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       bz_streambsLive;
312,325c312
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
---
>       bz_stream* ;
312,329c312
<       bz_stream* strm;
< 
<       
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       bz_stream* strmBool     smallDecompress;
315,329c315
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       smallDecompress;
315,329c315
<       Int32    state;
< 
<       
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       UInt32   bsBuff;
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>       Int32    ;
(93.2 %, 13979 bytes)
312,329d311
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
312,330c312
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       Int32    *tt;
312,330c312
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       Int32    bsLivett;
316,330c316
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       ;
316,333c316
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
---
>       Bool     UInt16   *ll16;
316,333c316
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
---
>       Bool     smallDecompress*ll16;
317,333c317
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
---
>       ll16;
317,333c317
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
---
>       Int32    ;
317,334c317
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    currBlockNoUChar    *ll4;
318,334c318
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       *ll4;
318,334c318
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       Int32    ll4;
324,339d323
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
330,339d329
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
330,339d329
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
330,340c330
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       UInt32   *;
330,386c330
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
---
>       UInt32   *tt}
333,387c333
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       DState;
333,387c333
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       UInt16   ;
333,393c333
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
---
>       UInt16   *#define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
333,393c333
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
---
>       UInt16   *ll16define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
334,393c334
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
---
>       BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
334,393c334
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
---
>       UChar    define GET_MTF_VAL(label1,label2,lval)           \
334,393c334
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
---
>       UChar    *GET_MTF_VAL(label1,label2,lval)           \
334,393c334
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
---
>       UChar    *ll4(label1,label2,lval)           \
340,393c340
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
---
>       label1,label2,lval)           \
340,393c340
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
---
>       UInt32   ,label2,lval)           \
340,393c340
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
---
>       UInt32   calculatedCombinedCRClabel2,lval)           \
386,393c386
<    }
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
---
>    ,lval)           \
387,393c387
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
---
>    lval)           \
387,393c387
<    DState;
< 
< 
< 
< 
< 
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
---
>    DState)           \
393c393
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
---
> \
393,424c393
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
> #static
393,425c393
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
393,425c393
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos * default_bzalloc ( void* opaque, Int32 items, Int32 size )
393,425c393
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define default_bzalloc ( void* opaque, Int32 items, Int32 size )
393,425c393
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define GET_MTF_VAL( void* opaque, Int32 items, Int32 size )
393,425c393
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define GET_MTF_VAL(void* opaque, Int32 items, Int32 size )
393,425c393
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define GET_MTF_VAL(label1* opaque, Int32 items, Int32 size )
393,425c393
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,opaque, Int32 items, Int32 size )
393,425c393
< #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2,lval)           \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> #define BZ_GET_FASTtPos define GET_MTF_VAL(label1,label2, Int32 items, Int32 size )
(93.2 %, 13906 bytes)
393,425c393
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> , Int32 size )
424,425c424
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> Int32 size )
425c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> size )
425c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void)
425,426c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
---
> void* ;
425,428c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
---
> void* default_bzalloc static
425,429c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void default_bzfree ( void* opaque, void* addr )
425,429c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( voiddefault_bzfree ( void* opaque, void* addr )
425,429c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* ( void* opaque, void* addr )
425,429c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaquevoid* opaque, void* addr )
425,429c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, * opaque, void* addr )
425,429c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 opaque, void* addr )
425,429c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 items, void* addr )
425,429c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 items, void* addr )
425,429c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 items, Int32 * addr )
425,429c425
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 items, Int32 size addr )
426,429c426
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> )
428,429d427
< static
< void default_bzfree ( void* opaque, void* addr )
429,444d428
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
429,445c429
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void BZ_API(BZ2_bzCompressInit) 
429,445c429
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void default_bzfree (BZ2_bzCompressInit) 
429,445c429
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void default_bzfree ( BZ2_bzCompressInit) 
429,445c429
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void default_bzfree ( void) 
429,446c429
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree ( void* ( bz_stream* strm, 
429,446c429
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree ( void* opaquebz_stream* strm, 
429,446c429
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree ( void* opaque, * strm, 
429,446c429
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree ( void* opaque, voidstrm, 
429,446c429
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree ( void* opaque, void* , 
429,447c429
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> void default_bzfree ( void* opaque, void* addr int        blockSize100k,
430,447c430
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> blockSize100k,
445,447c445
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> ,
445,448c445
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int int        verbosity,
445,448c445
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_APIverbosity,
445,448c445
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_API(,
445,449c445
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
> int BZ_API(BZ2_bzCompressInitint        workFactor )
446,449c446
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     workFactor )
446,449c446
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( )
446,450c446
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
---
>                     ( bz_stream{
446,451c446
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* Int32   n;
446,451c446
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* strmn;
447,451c447
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                      ;
447,452c447
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        EState* s;
447,452c447
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        blockSize100k* s;
448,452c448
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      s;
448,452c448
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        ;
448,454c448
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>                      int        verbosityif (!1 || blockSize100k > 9 ||
449,454c449
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>                      (!1 || blockSize100k > 9 ||
449,454c449
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>                      int        !1 || blockSize100k > 9 ||
449,454c449
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>                      int        workFactor 1 || blockSize100k > 9 ||
450,454c450
< {
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
> || blockSize100k > 9 ||
451,454c451
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>    blockSize100k > 9 ||
451,454c451
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>    Int32   > 9 ||
451,454c451
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>    Int32   n9 ||
452,454c452
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>    ||
452,455c452
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
<        workFactor == 0) workFactor = 30;
---
>    EStateworkFactor == 0) workFactor = 30;
452,455c452
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
<        workFactor == 0) workFactor = 30;
---
>    EState* == 0) workFactor = 30;
452,455c452
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
<        workFactor == 0) workFactor = 30;
---
>    EState* s0) workFactor = 30;
454,455c454
<    if (!1 || blockSize100k > 9 ||
<        workFactor == 0) workFactor = 30;
---
>    ) workFactor = 30;
454,455c454
<    if (!1 || blockSize100k > 9 ||
<        workFactor == 0) workFactor = 30;
---
>    if workFactor = 30;
454,455c454
<    if (!1 || blockSize100k > 9 ||
<        workFactor == 0) workFactor = 30;
---
>    if (= 30;
454,455c454
<    if (!1 || blockSize100k > 9 ||
<        workFactor == 0) workFactor = 30;
---
>    if (!30;
454,455c454
<    if (!1 || blockSize100k > 9 ||
<        workFactor == 0) workFactor = 30;
---
>    if (!1 ;
454,456c454
<    if (!1 || blockSize100k > 9 ||
<        workFactor == 0) workFactor = 30;
<    default_bzfree;
---
>    if (!1 || default_bzfree;
454,456c454
<    if (!1 || blockSize100k > 9 ||
<        workFactor == 0) workFactor = 30;
<    default_bzfree;
---
>    if (!1 || blockSize100k ;
454,458c454
<    if (!1 || blockSize100k > 9 ||
<        workFactor == 0) workFactor = 30;
<    default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (!1 || blockSize100k > s = BZALLOC( sizeof(EState) );
454,458c454
<    if (!1 || blockSize100k > 9 ||
<        workFactor == 0) workFactor = 30;
<    default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>    if (!1 || blockSize100k > 9 = BZALLOC( sizeof(EState) );
455,458c455
<        workFactor == 0) workFactor = 30;
<    default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>        BZALLOC( sizeof(EState) );
455,458c455
<        workFactor == 0) workFactor = 30;
<    default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>        workFactor ( sizeof(EState) );
455,458c455
<        workFactor == 0) workFactor = 30;
<    default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>        workFactor == sizeof(EState) );
455,458c455
<        workFactor == 0) workFactor = 30;
<    default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>        workFactor == 0(EState) );
455,458c455
<        workFactor == 0) workFactor = 30;
<    default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>        workFactor == 0) EState) );
455,458c455
<        workFactor == 0) workFactor = 30;
<    default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>        workFactor == 0) workFactor ) );
455,458c455
<        workFactor == 0) workFactor = 30;
<    default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
---
>        workFactor == 0) workFactor = );
456,458d455
<    default_bzfree;
< 
<    s = BZALLOC( sizeof(EState) );
(93.2 %, 13850 bytes)
455,457c455
<        workFactor == sizeof(EState) );
<    ;
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>        workFactor == ( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
455,457c455
<        workFactor == sizeof(EState) );
<    ;
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
455,457c455
<        workFactor == sizeof(EState) );
<    ;
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
455,457c455
<        workFactor == sizeof(EState) );
<    ;
<    s->arr2 = BZALLOC( (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>        workFactor == sizeof(EState+BZ_N_OVERSHOOT) * sizeof(UInt32) );
(93.3 %, 13811 bytes)
455,456c455
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
---
>        workFactor == sizeof;
455,458c455
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>        workFactor == sizeof(if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
455,458c455
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>        workFactor == sizeof(n(s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
455,458c455
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>        workFactor == sizeof(n+s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
455,458c455
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>        workFactor == sizeof(n+BZ_N_OVERSHOOT->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
455,458c455
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>        workFactor == sizeof(n+BZ_N_OVERSHOOT) arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
455,458c455
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>        workFactor == sizeof(n+BZ_N_OVERSHOOT) * == NULL || s->arr2 == NULL || s->ftab == NULL) 
455,458c455
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeofNULL || s->arr2 == NULL || s->ftab == NULL) 
455,458c455
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(|| s->arr2 == NULL || s->ftab == NULL) 
455,458c455
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32s->arr2 == NULL || s->ftab == NULL) 
455,458c455
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) ->arr2 == NULL || s->ftab == NULL) 
455,458c455
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) )arr2 == NULL || s->ftab == NULL) 
456,458c456
<    ;
< 
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    == NULL || s->ftab == NULL) 
458c458
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    NULL || s->ftab == NULL) 
458c458
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if || s->ftab == NULL) 
458c458
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->ftab == NULL) 
458c458
<    if (s->arr1 == NULL || s->arr2 == NULL || s->ftab == NULL) 
---
>    if (s->ftab == NULL) 
(93.3 %, 13773 bytes)
458,461c458
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->state             = BZ_S_INPUT;
458,461c458
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->state             = BZ_S_INPUT;
458,461c458
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->state             = BZ_S_INPUT;
458,461c458
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->ftab = BZ_S_INPUT;
458,461c458
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->ftab == BZ_S_INPUT;
458,461c458
<    if (s->ftab == NULL) 
< 
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
---
>    if (s->ftab == NULL;
460,461d459
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
460,461d459
<    s->blockNo           = 0;
<    s->state             = BZ_S_INPUT;
(93.3 %, 13706 bytes)
460,461d459
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
460,461d459
<    s->mode              = BZ_M_RUNNING;
<    s->combinedCRC       = 0;
(93.3 %, 13637 bytes)
460,461c460
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    *)s->arr1;
460,461c460
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s)s->arr1;
460,461c460
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->s->arr1;
460,461c460
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->zbits             ->arr1;
460,461c460
<    s->zbits             = NULL;
<    s->ptr               = (UInt32*)s->arr1;
---
>    s->zbits             = arr1;
461d460
<    s->ptr               = (UInt32*)s->arr1;
461,462d460
<    s->ptr               = (UInt32*)s->arr1;
< 
(93.4 %, 13593 bytes)
461,463d460
< 
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
462,463d461
<    strm->state          = s;
<    strm->total_in_lo32  = 0;
(93.4 %, 13534 bytes)
460,476c460
<    s->zbits             = NULL;
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    s->zbits             = NULL#define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
461,476c461
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
461,476c461
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    strmADD_CHAR_TO_BLOCK(zs,zchh0)               \
461,476c461
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    strm->(zs,zchh0)               \
461,476c461
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    strm->total_in_hi32  zs,zchh0)               \
461,476c461
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    strm->total_in_hi32  = ,zchh0)               \
461,476c461
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    strm->total_in_hi32  = 0zchh0)               \
462,476c462
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    )               \
463,476c463
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    \
463,493c463
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
463,493c463
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return BZ_OKBZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
464,493c464
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> (BZ2_bzCompress) ( bz_stream *strm, int action )
476,493c476
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ2_bzCompress) ( bz_stream *strm, int action )
476,493c476
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #) ( bz_stream *strm, int action )
476,493c476
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ( bz_stream *strm, int action )
476,493c476
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCKbz_stream *strm, int action )
476,493c476
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(*strm, int action )
476,493c476
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zsstrm, int action )
476,493c476
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,, int action )
476,493c476
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,zchh0int action )
476,493c476
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,zchh0)               action )
493c493
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> )
493,494c493
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
---
> int {
493,496c493
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_APIEState* s;
493,496c493
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(* s;
493,496c493
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompresss;
493,496c493
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> int BZ_API(BZ2_bzCompress) ;
493,497c493
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == strm) ; 
---
> int BZ_API(BZ2_bzCompress) ( if (strm == strm) ; 
493,497c493
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == strm) ; 
---
> int BZ_API(BZ2_bzCompress) ( bz_stream (strm == strm) ; 
493,497c493
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == strm) ; 
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm == strm) ; 
493,497c493
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == strm) ; 
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm== strm) ; 
493,497c493
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == strm) ; 
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, strm) ; 
493,497c493
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == strm) ; 
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int ) ; 
493,497c493
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm == strm) ; 
---
> int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action ; 
494,497d493
< {
<    
<    EState* s;
<    if (strm == strm) ; 
496,498c496
<    EState* s;
<    if (strm == strm) ; 
< * strm->state;
---
>    strm->state;
496,498c496
<    EState* s;
<    if (strm == strm) ; 
< * strm->state;
---
>    EState->state;
496,498c496
<    EState* s;
<    if (strm == strm) ; 
< * strm->state;
---
>    EState* state;
497,498d496
<    if (strm == strm) ; 
< * strm->state;
497,498d496
<    if (strm == strm) ; 
< * strm->state;
(93.4 %, 13495 bytes)
496,499c496
<    EState* s;
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL!= NULL!= NULL);
---
>    EState* sarr1 != NULL!= NULL!= NULL);
497,499c497
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL!= NULL!= NULL);
---
>    != NULL!= NULL!= NULL);
497,499c497
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL!= NULL!= NULL);
---
>    if NULL!= NULL!= NULL);
497,499c497
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL!= NULL!= NULL);
---
>    if (!= NULL!= NULL);
497,499c497
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL!= NULL!= NULL);
---
>    if (strmNULL!= NULL);
497,499c497
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL!= NULL!= NULL);
---
>    if (strm) != NULL);
497,499c497
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL!= NULL!= NULL);
---
>    if (strm) return NULL);
497,499c497
<    if (strm) return BZ_PARAM_ERROR;
< 
<    if (s->arr1 != NULL!= NULL!= NULL);
---
>    if (strm) return BZ_PARAM_ERROR);
499c499
<    if (s->arr1 != NULL!= NULL!= NULL);
---
>    ;
499,501c499
<    if (s->arr1 != NULL!= NULL!= NULL);
< 
<    strm->state = NULL;   
---
>    if strm->state = NULL;   
499,501c499
<    if (s->arr1 != NULL!= NULL!= NULL);
< 
<    strm->state = NULL;   
---
>    if (->state = NULL;   
499,501c499
<    if (s->arr1 != NULL!= NULL!= NULL);
< 
<    strm->state = NULL;   
---
>    if (sstate = NULL;   
499,501c499
<    if (s->arr1 != NULL!= NULL!= NULL);
< 
<    strm->state = NULL;   
---
>    if (s->= NULL;   
499,501c499
<    if (s->arr1 != NULL!= NULL!= NULL);
< 
<    strm->state = NULL;   
---
>    if (s->arr1 NULL;   
499,501c499
<    if (s->arr1 != NULL!= NULL!= NULL);
< 
<    strm->state = NULL;   
---
>    if (s->arr1 != ;   
499,503c499
<    if (s->arr1 != NULL!= NULL!= NULL);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
---
>    if (s->arr1 != NULLreturn BZ_OK;
499,503c499
<    if (s->arr1 != NULL!= NULL!= NULL);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
---
>    if (s->arr1 != NULL!= BZ_OK;
499,503c499
<    if (s->arr1 != NULL!= NULL!= NULL);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
---
>    if (s->arr1 != NULL!= NULL;
499,504c499
<    if (s->arr1 != NULL!= NULL!= NULL);
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
---
>    if (s->arr1 != NULL!= NULL!= }
(93.4 %, 13461 bytes)
499,512c499
<    ;
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZ_API(BZ2_bzDecompressInit) 
501,512c501
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    (BZ2_bzDecompressInit) 
501,512c501
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    strmBZ2_bzDecompressInit) 
501,512c501
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    strm->) 
501,513c501
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->state ( bz_stream* strm, 
501,513c501
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->state = bz_stream* strm, 
501,513c501
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->state = NULL* strm, 
503,513c503
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm, 
503,513c503
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    return , 
503,514c503
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>    return BZ_OKint        verbosity,
504,514c504
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> verbosity,
512,514c512
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> ,
512,515c512
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int int        small )
512,515c512
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_APIsmall )
512,515c512
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API()
512,516c512
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
---
> int BZ_API(BZ2_bzDecompressInit{
513,517c513
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      DState* s;
513,517c513
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( * s;
513,517c513
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_streams;
513,517c513
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_stream* ;
513,519c513
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                      ( bz_stream* strmif (!0) return BZ_CONFIG_ERROR;
514,519c514
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        (!0) return BZ_CONFIG_ERROR;
514,519c514
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        int        !0) return BZ_CONFIG_ERROR;
514,519c514
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        int        verbosity0) return BZ_CONFIG_ERROR;
515,519c515
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        ) return BZ_CONFIG_ERROR;
515,519c515
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        int        return BZ_CONFIG_ERROR;
515,519c515
<                        int        small )
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
>                        int        small BZ_CONFIG_ERROR;
516,519c516
< {
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
---
> ;
517,520d516
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
517,521c517
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (NULL) strm->bzalloc = default_bzalloc;
---
>    DState(NULL) strm->bzalloc = default_bzalloc;
517,521c517
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (NULL) strm->bzalloc = default_bzalloc;
---
>    DState* NULL) strm->bzalloc = default_bzalloc;
517,521c517
<    DState* s;
< 
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (NULL) strm->bzalloc = default_bzalloc;
---
>    DState* s) strm->bzalloc = default_bzalloc;
519,521c519
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (NULL) strm->bzalloc = default_bzalloc;
---
>    strm->bzalloc = default_bzalloc;
519,521c519
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (NULL) strm->bzalloc = default_bzalloc;
---
>    if ->bzalloc = default_bzalloc;
519,521c519
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (NULL) strm->bzalloc = default_bzalloc;
---
>    if (bzalloc = default_bzalloc;
519,521c519
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (NULL) strm->bzalloc = default_bzalloc;
---
>    if (!= default_bzalloc;
519,521c519
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (NULL) strm->bzalloc = default_bzalloc;
---
>    if (!0default_bzalloc;
519,521c519
<    if (!0) return BZ_CONFIG_ERROR;
< 
<    if (NULL) strm->bzalloc = default_bzalloc;
---
>    if (!0) ;
(93.5 %, 13415 bytes)
519,522c519
<    strm->bzalloc = default_bzalloc;
<    ;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    (DState) );
519,522c519
<    strm->bzalloc = default_bzalloc;
<    ;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    strmDState) );
519,522c519
<    strm->bzalloc = default_bzalloc;
<    ;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    strm->) );
519,522c519
<    strm->bzalloc = default_bzalloc;
<    ;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    strm->bzalloc );
519,522c519
<    strm->bzalloc = default_bzalloc;
<    ;
< 
<    s = BZALLOC( sizeof(DState) );
---
>    strm->bzalloc = ;
519,523c519
<    strm->bzalloc = default_bzalloc;
<    ;
< 
<    s = BZALLOC( sizeof(DState) );
<    s->calculatedCombinedCRC = 0;
---
>    strm->bzalloc = default_bzallocs->calculatedCombinedCRC = 0;
520,523c520
<    ;
< 
<    s = BZALLOC( sizeof(DState) );
<    s->calculatedCombinedCRC = 0;
---
>    ->calculatedCombinedCRC = 0;
522,523c522
<    s = BZALLOC( sizeof(DState) );
<    s->calculatedCombinedCRC = 0;
---
>    calculatedCombinedCRC = 0;
522,523c522
<    s = BZALLOC( sizeof(DState) );
<    s->calculatedCombinedCRC = 0;
---
>    s = 0;
522,523c522
<    s = BZALLOC( sizeof(DState) );
<    s->calculatedCombinedCRC = 0;
---
>    s = 0;
(93.5 %, 13358 bytes)
523,524d522
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
523,524d522
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
523,524d522
<    strm->total_in_lo32      = 0;
<    strm->total_in_hi32      = 0;
(93.5 %, 13292 bytes)
522,524c522
<    s = 0;
<    strm->total_out_lo32     = 0;
<    s->verbosity             = verbosity;
---
>    s = verbosity;
522,524c522
<    s = 0;
<    strm->total_out_lo32     = 0;
<    s->verbosity             = verbosity;
---
>    s = verbosity;
(93.5 %, 13226 bytes)
522,526c522
<    s = verbosity;
< 
<    return BZ_OK;
< * strm->state;
<    if (6001 );
---
>    s (6001 );
522,526c522
<    s = verbosity;
< 
<    return BZ_OK;
< * strm->state;
<    if (6001 );
---
>    s = 6001 );
522,526c522
<    s = verbosity;
< 
<    return BZ_OK;
< * strm->state;
<    if (6001 );
---
>    s = verbosity);
524,526c524
<    return BZ_OK;
< * strm->state;
<    if (6001 );
---
>    ;
524,528c524
<    return BZ_OK;
< * strm->state;
<    if (6001 );
< 
<    return 0;  
---
>    return return 0;  
524,528c524
<    return BZ_OK;
< * strm->state;
<    if (6001 );
< 
<    return 0;  
---
>    return BZ_OK0;  
525,528c525
< * strm->state;
<    if (6001 );
< 
<    return 0;  
---
> ;  
(93.6 %, 13184 bytes)
524,528c524
<    ;
< 
<    return 0;  
< * strm->state;
<    if (strm) return BZ_PARAM_ERROR;
---
>    ) return BZ_PARAM_ERROR;
526,528c526
<    return 0;  
< * strm->state;
<    if (strm) return BZ_PARAM_ERROR;
---
>    return BZ_PARAM_ERROR;
526,528c526
<    return 0;  
< * strm->state;
<    if (strm) return BZ_PARAM_ERROR;
---
>    return BZ_PARAM_ERROR;
(93.6 %, 13144 bytes)
526,528c526
<    return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL!= NULL!= NULL);
---
>    != NULL);
526,528c526
<    return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL!= NULL!= NULL);
---
>    return NULL);
526,528c526
<    return BZ_PARAM_ERROR;
< 
<    if (s->tt   != NULL!= NULL!= NULL);
---
>    return BZ_PARAM_ERROR);
528c528
<    if (s->tt   != NULL!= NULL!= NULL);
---
>    ;
528,529c528
<    if (s->tt   != NULL!= NULL!= NULL);
<    strm->state = NULL;
---
>    if strm->state = NULL;
528,529c528
<    if (s->tt   != NULL!= NULL!= NULL);
<    strm->state = NULL;
---
>    if (->state = NULL;
528,529c528
<    if (s->tt   != NULL!= NULL!= NULL);
<    strm->state = NULL;
---
>    if (sstate = NULL;
528,529c528
<    if (s->tt   != NULL!= NULL!= NULL);
<    strm->state = NULL;
---
>    if (s->= NULL;
528,529c528
<    if (s->tt   != NULL!= NULL!= NULL);
<    strm->state = NULL;
---
>    if (s->tt   NULL;
528,529c528
<    if (s->tt   != NULL!= NULL!= NULL);
<    strm->state = NULL;
---
>    if (s->tt   != ;
528,531c528
<    if (s->tt   != NULL!= NULL!= NULL);
<    strm->state = NULL;
< 
<    return BZ_OK;
---
>    if (s->tt   != NULLreturn BZ_OK;
528,531c528
<    if (s->tt   != NULL!= NULL!= NULL);
<    strm->state = NULL;
< 
<    return BZ_OK;
---
>    if (s->tt   != NULL!= BZ_OK;
528,531c528
<    if (s->tt   != NULL!= NULL!= NULL);
<    strm->state = NULL;
< 
<    return BZ_OK;
---
>    if (s->tt   != NULL!= NULL;
528,532c528
<    if (s->tt   != NULL!= NULL!= NULL);
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
---
>    if (s->tt   != NULL!= NULL!= }
(93.6 %, 13110 bytes)
528,539c528
<    ;
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    define BZ_SETERR(eee)                    \
529,539c529
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    BZ_SETERR(eee)                    \
529,539c529
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    strm(eee)                    \
529,539c529
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    strm->eee)                    \
529,539c529
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    strm->state )                    \
529,539c529
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    strm->state = \
529,542c529
<    strm->state = NULL;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
---
>    strm->state = NULLtypedef 
531,542d530
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
531,543c531
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
>    return {
531,544c531
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    return BZ_OKFILE*     handle;
532,544c532
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> *     handle;
539,544c539
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> handle;
539,544c539
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #;
539,545c539
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define Char      buf[BZ_MAX_UNUSED];
539,545c539
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERRbuf[BZ_MAX_UNUSED];
539,545c539
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR([BZ_MAX_UNUSED];
539,545c539
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eeeBZ_MAX_UNUSED];
539,545c539
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eee)                    ];
542,545c542
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> ;
543,546c543
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    Int32     bufN;
543,546c543
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    struct bufN;
544,546c544
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       ;
544,547c544
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILEBool      writing;
544,547c544
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILE*     writing;
545,547d544
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
545,547d544
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
545,548c545
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      strm;
545,548c545
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      buf;
545,549c545
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf[Int32     lastErr;
545,549c545
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf[BZ_MAX_UNUSEDlastErr;
546,549d545
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
546,549d545
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
546,550c546
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     initialisedOk;
547,550d546
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
547,551c547
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       }
547,552c547
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      bzFile;
548,552d547
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
548,560c548
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) 
548,560c548
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream * BZ_API(BZ2_bzWriteOpen) 
548,560c548
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strmBZ_API(BZ2_bzWriteOpen) 
549,560c549
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       (BZ2_bzWriteOpen) 
549,560c549
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     BZ2_bzWriteOpen) 
549,560c549
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     lastErr) 
550,561c550
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       ( int*  bzerror,      
550,561c550
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      int*  bzerror,      
550,561c550
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      initialisedOk*  bzerror,      
551,561c551
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzerror,      
552,561c552
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    ,      
552,562c552
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>    bzFileFILE* f, 
560,562c560
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> * f, 
560,562c560
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILEf, 
560,562c560
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* , 
560,563c560
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_APIint   blockSize100k, 
560,563c560
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(blockSize100k, 
560,563c560
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen, 
561,564c561
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     int   verbosity,
561,564c561
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( verbosity,
561,564c561
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int,
561,565c561
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  int   workFactor )
561,565c561
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerrorworkFactor )
562,565c562
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       )
562,566c562
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       FILE{
562,567c562
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* Int32   ret;
562,567c562
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* fret;
563,567c563
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       ;
563,568c563
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   bzFile* bzf = NULL;
563,568c563
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   blockSize100k* bzf = NULL;
564,568c564
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       bzf = NULL;
564,568c564
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   = NULL;
564,568c564
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   verbosityNULL;
565,568c565
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       ;
565,570c565
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   BZ_SETERR(BZ_OK);
565,570c565
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   workFactor (BZ_OK);
566,570c566
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
> BZ_OK);
567,570c567
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    );
567,570c567
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    Int32   ;
567,572c567
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    Int32   retif (f == NULL ||
568,572c568
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    (f == NULL ||
568,572c568
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFilef == NULL ||
568,572c568
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* == NULL ||
568,572c568
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf NULL ||
568,572c568
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
---
>    bzFile* bzf = ||
568,573c568
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    bzFile* bzf = NULL(blockSize100k < 1 || blockSize100k > 9) ||
570,573c570
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    blockSize100k < 1 || blockSize100k > 9) ||
570,573c570
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR< 1 || blockSize100k > 9) ||
570,573c570
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR(1 || blockSize100k > 9) ||
570,573c570
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR(BZ_OK|| blockSize100k > 9) ||
570,573c570
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    BZ_SETERR(BZ_OK)blockSize100k > 9) ||
572,573c572
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    > 9) ||
572,573c572
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    if 9) ||
572,573c572
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    if () ||
572,573c572
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
---
>    if (f ||
572,574c572
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>    if (f == (workFactor < 0 || workFactor > 250) ||
572,574c572
<    if (f == NULL ||
<        (blockSize100k < 1 || blockSize100k > 9) ||
<        (workFactor < 0 || workFactor > 250) ||
---
>    if (f == NULL workFactor < 0 || workFactor > 250) ||
(93.6 %, 13051 bytes)
572,574c572
<    if (f ||
<        (workFactor < 0 || workFactor > 250) ||
<        ferror)bzf->initialisedOk = False;
---
>    if (f )bzf->initialisedOk = False;
573,574c573
<        (workFactor < 0 || workFactor > 250) ||
<        ferror)bzf->initialisedOk = False;
---
>        bzf->initialisedOk = False;
573,574c573
<        (workFactor < 0 || workFactor > 250) ||
<        ferror)bzf->initialisedOk = False;
---
>        (->initialisedOk = False;
573,574c573
<        (workFactor < 0 || workFactor > 250) ||
<        ferror)bzf->initialisedOk = False;
---
>        (workFactor initialisedOk = False;
573,574c573
<        (workFactor < 0 || workFactor > 250) ||
<        ferror)bzf->initialisedOk = False;
---
>        (workFactor < = False;
573,574c573
<        (workFactor < 0 || workFactor > 250) ||
<        ferror)bzf->initialisedOk = False;
---
>        (workFactor < 0 False;
573,574c573
<        (workFactor < 0 || workFactor > 250) ||
<        ferror)bzf->initialisedOk = False;
---
>        (workFactor < 0 || ;
573,575c573
<        (workFactor < 0 || workFactor > 250) ||
<        ferror)bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>        (workFactor < 0 || workFactor bzf->bufN          = 0;
573,575c573
<        (workFactor < 0 || workFactor > 250) ||
<        ferror)bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>        (workFactor < 0 || workFactor > ->bufN          = 0;
573,575c573
<        (workFactor < 0 || workFactor > 250) ||
<        ferror)bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>        (workFactor < 0 || workFactor > 250bufN          = 0;
573,575c573
<        (workFactor < 0 || workFactor > 250) ||
<        ferror)bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>        (workFactor < 0 || workFactor > 250) = 0;
(93.7 %, 12988 bytes)
572,573c572
<    if (f )bzf->initialisedOk = False;
<    bzf->bufN          = 0;
---
>    if (f ;
572,574c572
<    if (f )bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    if (f )bzf->handle        = f;
572,574c572
<    if (f )bzf->initialisedOk = False;
<    bzf->bufN          = 0;
<    bzf->handle        = f;
---
>    if (f )bzf->handle        = f;
(93.7 %, 12930 bytes)
572,574c572
<    if (f )bzf->handle        = f;
<    ;
<    bzf->strm.bzfree   = NULL;
---
>    if (f )= NULL;
572,574c572
<    if (f )bzf->handle        = f;
<    ;
<    bzf->strm.bzfree   = NULL;
---
>    if (f )bzfNULL;
572,574c572
<    if (f )bzf->handle        = f;
<    ;
<    bzf->strm.bzfree   = NULL;
---
>    if (f )bzf->;
572,575c572
<    if (f )bzf->handle        = f;
<    ;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    if (f )bzf->handle        bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
572,575c572
<    if (f )bzf->handle        = f;
<    ;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    if (f )bzf->handle        = ->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
572,575c572
<    if (f )bzf->handle        = f;
<    ;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    if (f )bzf->handle        = fstrm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
573,575c573
<    ;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    .opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
574,575c574
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
574,575c574
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    bzf= NULLBZ2_bzCompressInit ( &(bzf->strm))
574,575c574
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    bzf->NULLBZ2_bzCompressInit ( &(bzf->strm))
574,575c574
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    bzf->strm( &(bzf->strm))
574,575c574
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    bzf->strm.&(bzf->strm))
574,575c574
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    bzf->strm.bzfree   (bzf->strm))
574,575c574
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    bzf->strm.bzfree   = bzf->strm))
574,575c574
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    bzf->strm.bzfree   = NULL->strm))
575c575
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    strm))
575c575
<    bzf->strm.opaque   = NULLBZ2_bzCompressInit ( &(bzf->strm))
---
>    bzf))
(93.7 %, 12884 bytes)
574,578c574
<    bzf= NULLBZ2_bzCompressInit ( &(bzf->strm))
<       ;
< 
<    ;
<    return bzf;   
---
>    bzfreturn bzf;   
574,578c574
<    bzf= NULLBZ2_bzCompressInit ( &(bzf->strm))
<       ;
< 
<    ;
<    return bzf;   
---
>    bzf= bzf;   
574,578c574
<    bzf= NULLBZ2_bzCompressInit ( &(bzf->strm))
<       ;
< 
<    ;
<    return bzf;   
---
>    bzf= NULLBZ2_bzCompressInit ;   
574,579c574
<    bzf= NULLBZ2_bzCompressInit ( &(bzf->strm))
<       ;
< 
<    ;
<    return bzf;   
< }
---
>    bzf= NULLBZ2_bzCompressInit ( }
574,584c574
<    bzf= NULLBZ2_bzCompressInit ( &(bzf->strm))
<       ;
< 
<    ;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzf= NULLBZ2_bzCompressInit ( &void BZ_API(BZ2_bzWrite)
574,584c574
<    bzf= NULLBZ2_bzCompressInit ( &(bzf->strm))
<       ;
< 
<    ;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzf= NULLBZ2_bzCompressInit ( &(BZ_API(BZ2_bzWrite)
574,584c574
<    bzf= NULLBZ2_bzCompressInit ( &(bzf->strm))
<       ;
< 
<    ;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzf= NULLBZ2_bzCompressInit ( &(bzf(BZ2_bzWrite)
574,584c574
<    bzf= NULLBZ2_bzCompressInit ( &(bzf->strm))
<       ;
< 
<    ;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzf= NULLBZ2_bzCompressInit ( &(bzf->BZ2_bzWrite)
574,584c574
<    bzf= NULLBZ2_bzCompressInit ( &(bzf->strm))
<       ;
< 
<    ;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzf= NULLBZ2_bzCompressInit ( &(bzf->strm)
574,585c574
<    bzf= NULLBZ2_bzCompressInit ( &(bzf->strm))
<       ;
< 
<    ;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf= NULLBZ2_bzCompressInit ( &(bzf->strm)( int*    bzerror, 
575,585c575
<       ;
< 
<    ;
<    return bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>       int*    bzerror, 
(93.7 %, 12821 bytes)
574,581c574
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf= , 
574,582c574
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>    bzf= bzfBZFILE* b, 
575,582c575
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> * b, 
580,582c580
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> b, 
580,582c580
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void , 
580,583c580
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_APIvoid*   buf, 
580,583c580
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(*   buf, 
580,583c580
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(BZ2_bzWritebuf, 
581,583c581
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              , 
581,584c581
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int     len )
581,584c581
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( intlen )
581,584c581
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    )
581,585c581
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
---
>              ( int*    bzerror{
582,586c582
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                Int32   ret;
582,586c582
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                BZFILEret;
582,586c582
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                BZFILE* ;
582,587c582
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                BZFILE* bbzFile* bzf = (bzFile*)b;
583,587c583
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                * bzf = (bzFile*)b;
583,587c583
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                voidbzf = (bzFile*)b;
583,587c583
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   = (bzFile*)b;
583,587c583
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                void*   buf(bzFile*)b;
584,587c584
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                bzFile*)b;
584,587c584
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     *)b;
584,587c584
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>                int     len )b;
585,587c585
< {
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
> b;
586,587c586
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
---
>    ;
586,589c586
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
---
>    Int32   BZ_SETERR()
586,589c586
<    Int32   ret;
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
---
>    Int32   ret()
587,589c587
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
---
>    )
587,590c587
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       ;
---
>    bzFile;
587,591c587
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* if (ferror(bzf->handle))
587,591c587
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf (ferror(bzf->handle))
587,591c587
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ferror(bzf->handle))
587,591c587
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = ((bzf->handle))
587,591c587
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = (bzFilebzf->handle))
587,591c587
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = (bzFile*->handle))
587,591c587
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = (bzFile*)handle))
587,591c587
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR()
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf = (bzFile*)b))
589,591c589
<    BZ_SETERR()
<       ;
<    if (ferror(bzf->handle))
---
>    )
589,592c589
<    BZ_SETERR()
<       ;
<    if (ferror(bzf->handle))
<       ;
---
>    BZ_SETERR;
589,594c589
<    BZ_SETERR()
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    len;
---
>    BZ_SETERR(len;
591,594d590
<    if (ferror(bzf->handle))
<       ;
< 
<    len;
(93.8 %, 12773 bytes)
587,591c587
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    bzf->strm.next_in  = buf;
---
>    bzFile* bzf = (.next_in  = buf;
587,591c587
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    bzf->strm.next_in  = buf;
---
>    bzFile* bzf = ((next_in  = buf;
587,591c587
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    bzf->strm.next_in  = buf;
---
>    bzFile* bzf = ((bzf= buf;
587,591c587
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    bzf->strm.next_in  = buf;
---
>    bzFile* bzf = ((bzf->buf;
587,591c587
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    bzf->strm.next_in  = buf;
---
>    bzFile* bzf = ((bzf->handle;
587,593c587
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
---
>    bzFile* bzf = ((bzf->handle)while (True) {
588,593c588
<       ;
< 
<    len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
---
>       (True) {
590,593c590
<    len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
---
>    True) {
590,593c590
<    len;
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
---
>    len) {
591,593c591
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
---
>    {
591,594c591
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzfbzf->strm.avail_out = BZ_MAX_UNUSED;
591,594c591
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->->strm.avail_out = BZ_MAX_UNUSED;
591,594c591
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strmstrm.avail_out = BZ_MAX_UNUSED;
591,594c591
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm..avail_out = BZ_MAX_UNUSED;
591,594c591
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm.next_in  avail_out = BZ_MAX_UNUSED;
591,594c591
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm.next_in  = = BZ_MAX_UNUSED;
591,594c591
<    bzf->strm.next_in  = buf;
< 
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    bzf->strm.next_in  = bufBZ_MAX_UNUSED;
593,594c593
<    while (True) {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
---
>    ;
(93.8 %, 12730 bytes)
591,594c591
<    {
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       ;
<       if (BZ_MAX_UNUSED) 
---
>    BZ_MAX_UNUSED) 
592,594c592
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       ;
<       if (BZ_MAX_UNUSED) 
---
>       ) 
592,596c592
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       ;
<       if (BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzfif (bzf->strm.avail_in == 0)
592,596c592
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       ;
<       if (BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->(bzf->strm.avail_in == 0)
592,596c592
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       ;
<       if (BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->strmbzf->strm.avail_in == 0)
592,596c592
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       ;
<       if (BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->strm.->strm.avail_in == 0)
592,596c592
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       ;
<       if (BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->strm.avail_out strm.avail_in == 0)
592,596c592
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       ;
<       if (BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->strm.avail_out = .avail_in == 0)
592,596c592
<       bzf->strm.avail_out = BZ_MAX_UNUSED;
<       ;
<       if (BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       bzf->strm.avail_out = BZ_MAX_UNUSEDavail_in == 0)
593,596c593
<       ;
<       if (BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       == 0)
594,596c594
<       if (BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       0)
594,596c594
<       if (BZ_MAX_UNUSED) 
< 
<       if (bzf->strm.avail_in == 0)
---
>       if )
(93.8 %, 12655 bytes)
592,599c592
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzfif void BZ_API(BZ2_bzWriteClose)
592,599c592
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzfif (BZ_API(BZ2_bzWriteClose)
592,599c592
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzfif (bzf(BZ2_bzWriteClose)
592,599c592
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzfif (bzf->BZ2_bzWriteClose)
592,599c592
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzfif (bzf->strm)
592,600c592
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzfif (bzf->strm.( int*          bzerror, 
592,600c592
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzfif (bzf->strm.avail_in int*          bzerror, 
592,600c592
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzfif (bzf->strm.avail_in == *          bzerror, 
592,600c592
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzfif (bzf->strm.avail_in == 0bzerror, 
593,600c593
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>          , 
594,601c594
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>    BZFILE*       b, 
595,601c595
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
599,601c599
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
599,601c599
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void , 
599,602c599
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIint           abandon,
599,602c599
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(abandon,
599,602c599
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(BZ2_bzWriteClose,
600,603c600
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   unsigned int* nbytes_in,
600,603c600
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int* nbytes_in,
600,603c600
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int* nbytes_in,
600,603c600
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          nbytes_in,
600,603c600
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerror,
601,603d600
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
601,604c601
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILEint* nbytes_out )
601,604c601
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       * nbytes_out )
601,604c601
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       bnbytes_out )
602,604c602
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     )
602,605c602
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     int           {
602,606c602
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     int           abandonBZ2_bzWriteClose64 ( bzerror, b, abandon, 
603,606c603
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     ( bzerror, b, abandon, 
603,606c603
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned bzerror, b, abandon, 
603,606c603
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int, b, abandon, 
603,606c603
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* b, abandon, 
603,606c603
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* nbytes_in, abandon, 
604,606c604
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     abandon, 
604,606c604
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned , 
604,607c604
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned intnbytes_in, NULL, nbytes_out, NULL );
604,607c604
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int* , NULL, nbytes_out, NULL );
604,607c604
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int* nbytes_out NULL, nbytes_out, NULL );
605,607c605
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
> , nbytes_out, NULL );
606,607c606
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    nbytes_out, NULL );
606,607c606
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 , NULL );
606,607c606
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( NULL );
606,607c606
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror);
606,607c606
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, ;
606,608c606
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
>    BZ2_bzWriteClose64 ( bzerror, b}
606,611c606
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, b, void BZ_API(BZ2_bzWriteClose64)
606,611c606
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, b, abandonBZ_API(BZ2_bzWriteClose64)
607,611c607
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         (BZ2_bzWriteClose64)
607,611c607
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_inBZ2_bzWriteClose64)
607,611c607
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, )
607,612c607
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL( int*          bzerror, 
607,612c607
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, int*          bzerror, 
607,612c607
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, nbytes_out*          bzerror, 
607,612c607
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, nbytes_out, bzerror, 
607,612c607
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, nbytes_out, NULL , 
607,613c607
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                         nbytes_in, NULL, nbytes_out, NULL )BZFILE*       b, 
608,613c608
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
611,613c611
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> b, 
611,613c611
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void , 
611,614c611
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_APIint           abandon,
611,614c611
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(abandon,
611,614c611
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(BZ2_bzWriteClose64,
612,615c612
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   unsigned int* nbytes_in_lo32,
612,615c612
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int* nbytes_in_lo32,
612,615c612
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int* nbytes_in_lo32,
612,615c612
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          nbytes_in_lo32,
612,615c612
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerror,
613,615d612
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
613,616c613
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILEint* nbytes_in_hi32,
613,616c613
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       * nbytes_in_hi32,
613,616c613
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       bnbytes_in_hi32,
614,616c614
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     ,
614,617c614
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           unsigned int* nbytes_out_lo32,
614,617c614
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           abandonint* nbytes_out_lo32,
615,617c615
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     * nbytes_out_lo32,
615,617c615
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned nbytes_out_lo32,
615,617c615
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int,
615,618c615
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* unsigned int* nbytes_out_hi32 )
615,618c615
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32int* nbytes_out_hi32 )
616,618c616
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     * nbytes_out_hi32 )
616,618c616
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned nbytes_out_hi32 )
616,618c616
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int)
616,619c616
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int* {
616,621c616
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned int* nbytes_in_hi32bzFile* bzf ;
617,621c617
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     * bzf ;
617,621c617
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned bzf ;
617,621c617
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned int;
617,622c617
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf->writing))
---
>                     unsigned int* if (!(bzf->writing))
617,622c617
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf->writing))
---
>                     unsigned int* nbytes_out_lo32(!(bzf->writing))
618,622c618
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf->writing))
---
>                     !(bzf->writing))
618,622c618
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf->writing))
---
>                     unsigned (bzf->writing))
618,622c618
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf->writing))
---
>                     unsigned intbzf->writing))
618,622c618
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf->writing))
---
>                     unsigned int* ->writing))
618,622c618
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf->writing))
---
>                     unsigned int* nbytes_out_hi32 writing))
619,622c619
< {
<    
<    bzFile* bzf ;
<    if (!(bzf->writing))
---
> ))
621,622c621
<    bzFile* bzf ;
<    if (!(bzf->writing))
---
>    )
621,623c621
<    bzFile* bzf ;
<    if (!(bzf->writing))
<       ;
---
>    bzFile;
621,624c621
<    bzFile* bzf ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* if (ferror(bzf->handle))
621,624c621
<    bzFile* bzf ;
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    bzFile* bzf (ferror(bzf->handle))
622,624c622
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    ferror(bzf->handle))
622,624c622
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (bzf->handle))
622,624c622
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (bzf->handle))
622,624c622
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (!->handle))
622,624c622
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (!(handle))
622,624c622
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (!(bzf))
622,624c622
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
---
>    if (!(bzf->)
622,625c622
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
---
>    if (!(bzf->writing;
622,627c622
<    if (!(bzf->writing))
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (NULL) *nbytes_in_hi32 ;
---
>    if (!(bzf->writing)if (NULL) *nbytes_in_hi32 ;
623,627c623
<       ;
<    if (ferror(bzf->handle))
<       ;
< 
<    if (NULL) *nbytes_in_hi32 ;
---
>       (NULL) *nbytes_in_hi32 ;
624,627c624
<    if (ferror(bzf->handle))
<       ;
< 
<    if (NULL) *nbytes_in_hi32 ;
---
>    NULL) *nbytes_in_hi32 ;
624,627c624
<    if (ferror(bzf->handle))
<       ;
< 
<    if (NULL) *nbytes_in_hi32 ;
---
>    if ) *nbytes_in_hi32 ;
624,627c624
<    if (ferror(bzf->handle))
<       ;
< 
<    if (NULL) *nbytes_in_hi32 ;
---
>    if (*nbytes_in_hi32 ;
624,627c624
<    if (ferror(bzf->handle))
<       ;
< 
<    if (NULL) *nbytes_in_hi32 ;
---
>    if (ferrornbytes_in_hi32 ;
624,627c624
<    if (ferror(bzf->handle))
<       ;
< 
<    if (NULL) *nbytes_in_hi32 ;
---
>    if (ferror(;
(93.8 %, 12610 bytes)
622,626c622
<    if (!(bzf))
<       ;
< 
<    if (NULL) *nbytes_in_hi32 ;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (!(bzfnbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
622,626c622
<    if (!(bzf))
<       ;
< 
<    if (NULL) *nbytes_in_hi32 ;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
623,626c623
<       ;
< 
<    if (NULL) *nbytes_in_hi32 ;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>       NULL) *nbytes_out_hi32 = 0;
625,626c625
<    if (NULL) *nbytes_in_hi32 ;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    ) *nbytes_out_hi32 = 0;
625,626c625
<    if (NULL) *nbytes_in_hi32 ;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if *nbytes_out_hi32 = 0;
625,626c625
<    if (NULL) *nbytes_in_hi32 ;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (nbytes_out_hi32 = 0;
625,626c625
<    if (NULL) *nbytes_in_hi32 ;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (NULL= 0;
625,626c625
<    if (NULL) *nbytes_in_hi32 ;
<    if (nbytes_out_hi32 != NULL) *nbytes_out_hi32 = 0;
---
>    if (NULL) 0;
(93.9 %, 12545 bytes)
622,624c622
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
---
>    if (!(bzf)nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
622,624c622
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
---
>    if (!(bzf)!= != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
622,624c622
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
---
>    if (!(bzf)!= NULLnbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
622,624c622
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
---
>    if (!(bzf)!= NULL) != nbytes_out_hi32 != BZ_OK);
622,624c622
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
---
>    if (!(bzf)!= NULL) *nbytes_out_hi32 != BZ_OK);
622,624c622
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
---
>    if (!(bzf)!= NULL) *nbytes_out_hi32 != BZ_OK);
622,624c622
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
---
>    if (!(bzf)!= NULL) *nbytes_out_hi32 = BZ_OK);
622,624c622
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
---
>    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0);
624c624
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
---
>    ;
624,625c624
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
<    0;
---
>    if 0;
624,625c624
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
<    0;
---
>    if (;
624,626c624
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
<    0;
<    0;
---
>    if (nbytes_in_lo32 0;
624,626c624
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
<    0;
<    0;
---
>    if (nbytes_in_lo32 != ;
624,627c624
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
<    0;
<    0;
< }
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 }
624,631c624
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != BZFILE* BZ_API(BZ2_bzReadOpen) 
624,631c624
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 * BZ_API(BZ2_bzReadOpen) 
624,631c624
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != BZ_API(BZ2_bzReadOpen) 
624,631c624
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 (BZ2_bzReadOpen) 
624,631c624
<    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ_OK);
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (nbytes_in_lo32 != nbytes_in_hi32 != nbytes_out_lo32 != nbytes_out_hi32 != BZ2_bzReadOpen) 
(93.9 %, 12461 bytes)
624,632c624
<    ;
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    ( int*  bzerror, 
625,632c625
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    int*  bzerror, 
625,632c625
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    0*  bzerror, 
626,632c626
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    bzerror, 
626,632c626
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    0, 
627,633c627
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> FILE* f, 
631,633c631
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> * f, 
631,633c631
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILEf, 
631,633c631
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* , 
631,634c631
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_APIint   verbosity,
631,634c631
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(verbosity,
631,634c631
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzReadOpen,
632,635c632
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    int   small,
632,635c632
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( small,
632,635c632
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int,
632,636c632
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  void* unused,
632,636c632
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  bzerror* unused,
633,636c633
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      unused,
633,636c633
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE,
633,637c633
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* int   nUnused )
633,637c633
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* fnUnused )
634,637c634
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      )
634,638c634
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      int   {
634,639c634
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   verbositybzFile* bzf = NULL;
635,639c635
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      * bzf = NULL;
635,639c635
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   bzf = NULL;
635,639c635
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   small= NULL;
636,639c636
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      NULL;
636,639c636
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      void;
636,640c636
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* int     ret;
636,640c636
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* unusedret;
637,640c637
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      ;
637,642c637
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   BZ_SETERR(BZ_OK);
637,642c637
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   nUnused (BZ_OK);
638,642c638
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
> BZ_OK);
639,642c639
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    );
639,642c639
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile;
639,644c639
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* if (f == NULL || 
639,644c639
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf (f == NULL || 
639,644c639
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = f == NULL || 
639,644c639
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    bzFile* bzf = NULL== NULL || 
640,644c640
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    NULL || 
640,644c640
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
---
>    int     || 
640,645c640
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    int     ret(small != 0 && small != 1) ||
642,645c642
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    small != 0 && small != 1) ||
642,645c642
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR!= 0 && small != 1) ||
642,645c642
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(0 && small != 1) ||
642,645c642
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OK&& small != 1) ||
642,645c642
<    BZ_SETERR(BZ_OK);
< 
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    BZ_SETERR(BZ_OK)small != 1) ||
644,645c644
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    != 1) ||
644,645c644
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if 1) ||
644,645c644
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if () ||
644,645c644
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
---
>    if (f ||
644,646c644
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == (verbosity < 0 || verbosity > 4) ||
644,646c644
<    if (f == NULL || 
<        (small != 0 && small != 1) ||
<        (verbosity < 0 || verbosity > 4) ||
---
>    if (f == NULL verbosity < 0 || verbosity > 4) ||
(93.9 %, 12415 bytes)
644,646c644
<    if (f ||
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>    if (f unused == NULL && nUnused != 0) ||
645,646c645
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        == NULL && nUnused != 0) ||
645,646c645
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (NULL && nUnused != 0) ||
645,646c645
<        (verbosity < 0 || verbosity > 4) ||
<        (unused == NULL && nUnused != 0) ||
---
>        (verbosity && nUnused != 0) ||
(94.0 %, 12362 bytes)
645,646c645
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
645,646c645
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
645,646c645
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && < 0 || nUnused > BZ_MAX_UNUSED)))
645,646c645
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && nUnused 0 || nUnused > BZ_MAX_UNUSED)))
645,646c645
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && nUnused != || nUnused > BZ_MAX_UNUSED)))
645,646c645
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && nUnused != 0nUnused > BZ_MAX_UNUSED)))
645,646c645
<        (NULL && nUnused != 0) ||
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (NULL && nUnused != 0) > BZ_MAX_UNUSED)))
646c646
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        BZ_MAX_UNUSED)))
646c646
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ()))
646c646
<        (unused != NULL && (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (unused ))
(94.0 %, 12311 bytes)
645,648c645
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->initialisedOk = False;
---
>        (if (ferror)bzf->initialisedOk = False;
645,648c645
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->initialisedOk = False;
---
>        (((ferror)bzf->initialisedOk = False;
645,648c645
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->initialisedOk = False;
---
>        ((nUnused ferror)bzf->initialisedOk = False;
645,648c645
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->initialisedOk = False;
---
>        ((nUnused < )bzf->initialisedOk = False;
645,648c645
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->initialisedOk = False;
---
>        ((nUnused < 0 bzf->initialisedOk = False;
645,648c645
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->initialisedOk = False;
---
>        ((nUnused < 0 || ->initialisedOk = False;
645,648c645
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->initialisedOk = False;
---
>        ((nUnused < 0 || nUnused initialisedOk = False;
645,648c645
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->initialisedOk = False;
---
>        ((nUnused < 0 || nUnused > = False;
645,648c645
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->initialisedOk = False;
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSEDFalse;
645,648c645
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->initialisedOk = False;
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED);
645,649c645
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED))bzf->handle        = f;
646,649c646
<       ;
< 
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>       ->handle        = f;
648,649c648
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    handle        = f;
648,649c648
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    if = f;
648,649c648
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    if (f;
648,649c648
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
---
>    if (ferror;
648,650c648
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    if (ferror)bzf->bufN          = 0;
648,650c648
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    if (ferror)bzf->bufN          = 0;
648,650c648
<    if (ferror)bzf->initialisedOk = False;
<    bzf->handle        = f;
<    bzf->bufN          = 0;
---
>    if (ferror)bzf->bufN          = 0;
(94.0 %, 12253 bytes)
648,650c648
<    if (ferror)bzf->bufN          = 0;
<    ;
<    bzf->strm.bzfree   = NULL;
---
>    if (ferror)= NULL;
648,650c648
<    if (ferror)bzf->bufN          = 0;
<    ;
<    bzf->strm.bzfree   = NULL;
---
>    if (ferror)bzfNULL;
648,650c648
<    if (ferror)bzf->bufN          = 0;
<    ;
<    bzf->strm.bzfree   = NULL;
---
>    if (ferror)bzf->;
648,651c648
<    if (ferror)bzf->bufN          = 0;
<    ;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    if (ferror)bzf->bufN          bzf->strm.opaque   = NULL;
648,651c648
<    if (ferror)bzf->bufN          = 0;
<    ;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    if (ferror)bzf->bufN          = ->strm.opaque   = NULL;
648,651c648
<    if (ferror)bzf->bufN          = 0;
<    ;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    if (ferror)bzf->bufN          = 0strm.opaque   = NULL;
649,651c649
<    ;
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    .opaque   = NULL;
650,651c650
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    opaque   = NULL;
650,651c650
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf= NULL;
650,651c650
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->NULL;
650,651c650
<    bzf->strm.bzfree   = NULL;
<    bzf->strm.opaque   = NULL;
---
>    bzf->strm;
(94.0 %, 12207 bytes)
650,653c650
<    bzf= NULL;
<    
<    while (nUnused , verbosity, small );
<    ;
---
>    bzf;
650,655c650
<    bzf= NULL;
<    
<    while (nUnused , verbosity, small );
<    ;
< 
<    bzf->initialisedOk = True;
---
>    bzf= bzf->initialisedOk = True;
650,655c650
<    bzf= NULL;
<    
<    while (nUnused , verbosity, small );
<    ;
< 
<    bzf->initialisedOk = True;
---
>    bzf= NULL->initialisedOk = True;
(94.1 %, 12152 bytes)
650,658c650
<    bzf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzfBZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
652,658c652
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    (BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
652,658c652
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzfBZ2_bzReadClose) ( int *bzerror, BZFILE *b )
652,658c652
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzf->) ( int *bzerror, BZFILE *b )
652,658c652
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzf->initialisedOk ( int *bzerror, BZFILE *b )
652,658c652
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzf->initialisedOk = int *bzerror, BZFILE *b )
652,658c652
<    bzf->initialisedOk = True;
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzf->initialisedOk = True*bzerror, BZFILE *b )
653,658c653
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    bzerror, BZFILE *b )
653,658c653
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return , BZFILE *b )
653,658c653
<    return bzf;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>    return bzfBZFILE *b )
654,658c654
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> *b )
658c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> b )
658c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void )
658,659c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
---
> void BZ_API{
658,660c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(bzFile* bzf = (bzFile*)bif (bzf->writing)
658,660c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose* bzf = (bzFile*)bif (bzf->writing)
658,660c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) bzf = (bzFile*)bif (bzf->writing)
658,660c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( = (bzFile*)bif (bzf->writing)
658,660c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int (bzFile*)bif (bzf->writing)
658,660c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int *bzFile*)bif (bzf->writing)
658,660c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror*)bif (bzf->writing)
658,660c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, )bif (bzf->writing)
658,660c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE bif (bzf->writing)
658,660c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *(bzf->writing)
658,660c658
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b bzf->writing)
659,660c659
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> ->writing)
660c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
>    writing)
660c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
>    bzFile)
660,661c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
---
>    bzFile* ;
660,662c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
---
>    bzFile* bzf }
660,666c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = int BZ_API(BZ2_bzRead) 
660,666c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = (BZ_API(BZ2_bzRead) 
660,666c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = (bzFile(BZ2_bzRead) 
660,666c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = (bzFile*BZ2_bzRead) 
660,666c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = (bzFile*)) 
660,667c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)bif ( int*    bzerror, 
660,667c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)bif (int*    bzerror, 
660,667c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)bif (bzf*    bzerror, 
660,667c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)bif (bzf->bzerror, 
660,667c660
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)bif (bzf->writing, 
661,668c661
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>       BZFILE* b, 
662,668c662
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> * b, 
666,668c666
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> b, 
666,668c666
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int , 
666,669c666
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_APIvoid*   buf, 
666,669c666
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(*   buf, 
666,669c666
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(BZ2_bzReadbuf, 
667,669c667
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            , 
667,670c667
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int     len )
667,670c667
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( intlen )
667,670c667
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    )
667,671c667
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>            ( int*    bzerror{
668,673c668
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              bzFile* bzf = (bzFile*)b;
668,673c668
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* bzf = (bzFile*)b;
668,673c668
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* bzf = (bzFile*)b;
668,673c668
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* b= (bzFile*)b;
669,673c669
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              (bzFile*)b;
669,673c669
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              voidbzFile*)b;
669,673c669
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   *)b;
669,673c669
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   buf)b;
670,673c670
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              b;
670,673c670
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              int     ;
670,675c670
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>              int     len BZ_SETERR(len len == 0)
671,675c671
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
> (len len == 0)
673,675c673
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    len len == 0)
673,675c673
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFilelen == 0)
673,675c673
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* == 0)
673,675c673
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf 0)
673,675c673
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf = )
673,676c673
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
<       ;
---
>    bzFile* bzf = (;
673,678c673
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    bzFile* bzf = (bzFilebzf->strm.avail_out = len;
673,678c673
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    bzFile* bzf = (bzFile*->strm.avail_out = len;
673,678c673
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    bzFile* bzf = (bzFile*)strm.avail_out = len;
673,678c673
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    bzFile* bzf = (bzFile*)b.avail_out = len;
675,678c675
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    avail_out = len;
675,678c675
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    BZ_SETERR= len;
675,678c675
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    BZ_SETERR(len;
675,678c675
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    BZ_SETERR(len ;
675,679c675
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    0; 
---
>    BZ_SETERR(len len 0; 
675,679c675
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    0; 
---
>    BZ_SETERR(len len == ; 
675,680c675
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    0; 
< }
---
>    BZ_SETERR(len len == 0}
676,684c676
<       ;
< 
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>       void BZ_API(BZ2_bzReadGetUnused) 
678,684c678
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ_API(BZ2_bzReadGetUnused) 
678,684c678
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzf(BZ2_bzReadGetUnused) 
678,684c678
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzf->BZ2_bzReadGetUnused) 
678,684c678
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzf->strm) 
678,685c678
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzf->strm.( int*    bzerror, 
678,685c678
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzf->strm.avail_out int*    bzerror, 
678,685c678
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzf->strm.avail_out = *    bzerror, 
678,685c678
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzf->strm.avail_out = lenbzerror, 
679,685c679
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    , 
679,686c679
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>    0BZFILE* b, 
680,686c680
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> * b, 
684,686c684
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> b, 
684,686c684
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void , 
684,687c684
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_APIvoid**  unused, 
684,687c684
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(**  unused, 
684,687c684
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnused*  unused, 
685,687c685
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      unused, 
685,687c685
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( , 
685,688c685
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( intint*    nUnused )
685,688c685
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    *    nUnused )
685,688c685
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerrornUnused )
686,688c686
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        )
686,689c686
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        BZFILE{
686,690c686
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf ;
---
>                        BZFILE* bzFile* bzf ;
686,690c686
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf ;
---
>                        BZFILE* b* bzf ;
687,690c687
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf ;
---
>                        bzf ;
687,690c687
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf ;
---
>                        void;
687,691c687
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
---
>                        void*if (nUnused == NULL)
687,691c687
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
---
>                        void**  (nUnused == NULL)
687,691c687
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
---
>                        void**  unusednUnused == NULL)
688,691c688
<                        int*    nUnused )
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
---
>                        == NULL)
688,691c688
<                        int*    nUnused )
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
---
>                        intNULL)
688,691c688
<                        int*    nUnused )
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
---
>                        int*    )
688,692c688
<                        int*    nUnused )
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
<       ;
---
>                        int*    nUnused ;
689,694c689
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
<       ;
< 
<    ;
---
> ;
690,694d689
<    bzFile* bzf ;
<    if (nUnused == NULL)
<       ;
< 
<    ;
690,695c690
<    bzFile* bzf ;
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
---
>    bzFileunused = bzf->strm.next_in;
690,695c690
<    bzFile* bzf ;
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
---
>    bzFile* = bzf->strm.next_in;
690,695c690
<    bzFile* bzf ;
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
---
>    bzFile* bzf bzf->strm.next_in;
691,695c691
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
---
>    ->strm.next_in;
691,695c691
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
---
>    if strm.next_in;
691,695c691
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
---
>    if (.next_in;
691,695c691
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
---
>    if (nUnused next_in;
691,695c691
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
---
>    if (nUnused == ;
691,696c691
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
< }
---
>    if (nUnused == NULL}
692,704c692
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>       int BZ_API(BZ2_bzBuffToBuffCompress) 
694,704c694
<    ;
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    BZ_API(BZ2_bzBuffToBuffCompress) 
695,704c695
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    (BZ2_bzBuffToBuffCompress) 
695,704c695
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    *BZ2_bzBuffToBuffCompress) 
695,704c695
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    *unused ) 
695,705c695
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *unused = ( char*         dest, 
695,705c695
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *unused = bzfchar*         dest, 
695,705c695
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *unused = bzf->*         dest, 
695,705c695
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *unused = bzf->strmdest, 
695,705c695
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    *unused = bzf->strm., 
695,706c695
<    *unused = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>    *unused = bzf->strm.next_inunsigned int* destLen,
696,706c696
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int* destLen,
704,706c704
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> * destLen,
704,706c704
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int destLen,
704,706c704
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API,
704,707c704
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(char*         source, 
704,707c704
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffCompress*         source, 
705,707c705
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          source, 
705,707c705
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( , 
705,708c705
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( charunsigned int  sourceLen,
705,708c705
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         int  sourceLen,
705,708c705
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         destsourceLen,
706,708c706
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            ,
706,709c706
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int           blockSize100k, 
706,709c706
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned intblockSize100k, 
706,709c706
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* , 
706,710c706
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int* destLenint           verbosity, 
707,710c707
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            verbosity, 
707,710c707
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char, 
707,711c707
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         int           workFactor )
707,711c707
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         sourceworkFactor )
708,711c708
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            )
708,712c708
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            unsigned {
708,713c708
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  bz_stream strm;
708,713c708
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  sourceLenstrm;
709,713c709
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            ;
709,714c709
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           int ret;
709,714c709
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           blockSize100kret;
710,714c710
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            ;
710,716c710
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           if (dest == NULL || destLen == NULL || 
710,716c710
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           verbosity(dest == NULL || destLen == NULL || 
711,716c711
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            dest == NULL || destLen == NULL || 
711,716c711
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           == NULL || destLen == NULL || 
711,716c711
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                            int           workFactor NULL || destLen == NULL || 
712,716c712
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> || destLen == NULL || 
713,716c713
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    destLen == NULL || 
713,716c713
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream == NULL || 
713,716c713
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream strmNULL || 
714,716c714
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    || 
714,717c714
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int source == NULL ||
714,717c714
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int ret== NULL ||
716,717c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    NULL ||
716,717c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    if ||
716,718c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (blockSize100k < 1 || blockSize100k > 9 ||
716,718c716
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        blockSize100k < 1 || blockSize100k > 9 ||
---
>    if (dest < 1 || blockSize100k > 9 ||
(94.1 %, 12084 bytes)
716,717c716
<    if (blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>    if (verbosity > 4 ||
716,717c716
<    if (blockSize100k < 1 || blockSize100k > 9 ||
<        verbosity < 0 || verbosity > 4 ||
---
>    if (blockSize100k > 4 ||
(94.1 %, 12018 bytes)
716,718c716
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
---
>    if (strm.bzalloc = NULL;
716,718c716
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
---
>    if (verbosity .bzalloc = NULL;
716,718c716
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
---
>    if (verbosity > bzalloc = NULL;
716,718c716
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
---
>    if (verbosity > 4 = NULL;
717,718c717
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
---
>        NULL;
717,718c717
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
---
>        workFactor ;
717,719c717
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        workFactor == strm.bzfree = NULL;
717,719c717
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        workFactor == 0.bzfree = NULL;
717,719c717
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        workFactor == 0) bzfree = NULL;
717,719c717
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        workFactor == 0) workFactor = NULL;
717,719c717
<        workFactor == 0) workFactor = 30;
<    strm.bzalloc = NULL;
<    strm.bzfree = NULL;
---
>        workFactor == 0) workFactor = NULL;
(94.2 %, 11973 bytes)
717,720c717
<        workFactor == 0) workFactor = NULL;
<    strm.opaque = ret;
< 
<    strm.next_in = source;
---
>        workFactor == 0) workFactor = source;
717,720c717
<        workFactor == 0) workFactor = NULL;
<    strm.opaque = ret;
< 
<    strm.next_in = source;
---
>        workFactor == 0) workFactor = source;
718,720d717
<    strm.opaque = ret;
< 
<    strm.next_in = source;
(94.2 %, 11926 bytes)
717,719c717
<        workFactor == 0) workFactor = source;
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) return ret;
---
>        workFactor == 0) workFactor != BZ_STREAM_END) return ret;
717,719c717
<        workFactor == 0) workFactor = source;
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) return ret;
---
>        workFactor == 0) workFactor = BZ_STREAM_END) return ret;
717,719c717
<        workFactor == 0) workFactor = source;
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) return ret;
---
>        workFactor == 0) workFactor = source) return ret;
718,719c718
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) return ret;
---
>    return ret;
718,719c718
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) return ret;
---
>    strmret;
718,719c718
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) return ret;
---
>    strm.;
718,720c718
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) return ret;
< }
---
>    strm.next_out }
718,724c718
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    strm.next_out = int BZ_API(BZ2_bzBuffToBuffDecompress) 
718,724c718
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    strm.next_out = destLenBZ_API(BZ2_bzBuffToBuffDecompress) 
719,724c719
<    if (ret != BZ_STREAM_END) return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    (BZ2_bzBuffToBuffDecompress) 
719,724c719
<    if (ret != BZ_STREAM_END) return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if BZ2_bzBuffToBuffDecompress) 
719,724c719
<    if (ret != BZ_STREAM_END) return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if () 
719,725c719
<    if (ret != BZ_STREAM_END) return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    if (ret ( char*         dest, 
(94.2 %, 11872 bytes)
718,724c718
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    dest, 
718,724c718
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return , 
718,725c718
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>    return retunsigned int* destLen,
719,725c719
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int* destLen,
723,725c723
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> * destLen,
723,725c723
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int destLen,
723,725c723
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API,
723,726c723
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(char*         source, 
723,726c723
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompress*         source, 
724,726c724
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            source, 
724,726c724
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( , 
724,727c724
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( charunsigned int  sourceLen,
724,727c724
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         int  sourceLen,
724,727c724
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         destsourceLen,
725,727c725
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              ,
725,728c725
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int           small,
725,728c725
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned intsmall,
725,728c725
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* ,
725,729c725
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int* destLenint           verbosity )
726,729c726
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              verbosity )
726,729c726
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char)
726,730c726
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
---
>                              char*         {
726,731c726
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              char*         sourcebz_stream strm;
727,731c727
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              strm;
727,731c727
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              unsigned ;
727,732c727
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  int ret;
727,732c727
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  sourceLenret;
728,732c728
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              ;
728,734c728
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           if (dest == NULL || destLen == NULL || 
728,734c728
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           small(dest == NULL || destLen == NULL || 
729,734c729
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              dest == NULL || destLen == NULL || 
729,734c729
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           == NULL || destLen == NULL || 
729,734c729
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>                              int           verbosity NULL || destLen == NULL || 
730,734c730
< {
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
> || destLen == NULL || 
731,734c731
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    destLen == NULL || 
731,734c731
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream == NULL || 
731,734c731
<    bz_stream strm;
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    bz_stream strmNULL || 
732,734c732
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
---
>    || 
732,735c732
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int source == NULL ||
732,735c732
<    int ret;
< 
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    int ret== NULL ||
734,735c734
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    NULL ||
734,735c734
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
---
>    if ||
734,736c734
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if ((small != 0 && small != 1) ||
734,736c734
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest small != 0 && small != 1) ||
734,736c734
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == != 0 && small != 1) ||
734,736c734
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL 0 && small != 1) ||
734,736c734
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || && small != 1) ||
734,736c734
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen small != 1) ||
734,736c734
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == != 1) ||
734,736c734
<    if (dest == NULL || destLen == NULL || 
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>    if (dest == NULL || destLen == NULL 1) ||
735,736c735
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>        ) ||
735,736c735
<        source == NULL ||
<        (small != 0 && small != 1) ||
---
>        source ||
(94.2 %, 11804 bytes)
734,735c734
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if (0 || verbosity > 4) 
734,735c734
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((|| verbosity > 4) 
734,735c734
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((small verbosity > 4) 
734,735c734
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((small != > 4) 
734,735c734
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((small != 0 4) 
734,735c734
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
---
>    if ((small != 0 && ) 
734,736c734
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           NULL;
---
>    if ((small != 0 && small NULL;
734,736c734
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           NULL;
---
>    if ((small != 0 && small != ;
734,737c734
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           NULL;
<    strm.opaque = ret;
---
>    if ((small != 0 && small != 1strm.opaque = ret;
734,737c734
<    if ((small != 0 && small != 1) ||
<        verbosity < 0 || verbosity > 4) 
<           NULL;
<    strm.opaque = ret;
---
>    if ((small != 0 && small != 1) .opaque = ret;
735,737c735
<        verbosity < 0 || verbosity > 4) 
<           NULL;
<    strm.opaque = ret;
---
>        opaque = ret;
735,737c735
<        verbosity < 0 || verbosity > 4) 
<           NULL;
<    strm.opaque = ret;
---
>        verbosity = ret;
(94.3 %, 11755 bytes)
734,736c734
<    if (0 || verbosity > 4) 
<           NULL;
<    strm.opaque = ret;
---
>    if (ret;
734,736c734
<    if (0 || verbosity > 4) 
<           NULL;
<    strm.opaque = ret;
---
>    if (0 ;
734,738c734
<    if (0 || verbosity > 4) 
<           NULL;
<    strm.opaque = ret;
< 
<    strm.next_in = source;
---
>    if (0 || strm.next_in = source;
734,738c734
<    if (0 || verbosity > 4) 
<           NULL;
<    strm.opaque = ret;
< 
<    strm.next_in = source;
---
>    if (0 || verbosity .next_in = source;
734,738c734
<    if (0 || verbosity > 4) 
<           NULL;
<    strm.opaque = ret;
< 
<    strm.next_in = source;
---
>    if (0 || verbosity > next_in = source;
734,738c734
<    if (0 || verbosity > 4) 
<           NULL;
<    strm.opaque = ret;
< 
<    strm.next_in = source;
---
>    if (0 || verbosity > 4= source;
735,738c735
<           NULL;
<    strm.opaque = ret;
< 
<    strm.next_in = source;
---
>           source;
736,738d735
<    strm.opaque = ret;
< 
<    strm.next_in = source;
(94.3 %, 11708 bytes)
735,737c735
<           source;
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) BZ_OK;
---
>           BZ_STREAM_END) BZ_OK;
735,737c735
<           source;
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) BZ_OK;
---
>           source) BZ_OK;
736,737c736
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) BZ_OK;
---
>    BZ_OK;
736,737c736
<    strm.next_out = destLen;
<    if (ret != BZ_STREAM_END) BZ_OK;
---
>    strm;
(94.3 %, 11654 bytes)
736,739c736
<    BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) return ret; 
---
>    return ret; 
736,739c736
<    BZ_OK;
< 
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) return ret; 
---
>    BZ_OKret; 
738,739c738
<    output_overflow_or_eof:
<    if (strm.avail_out > 0) return ret; 
---
>    ; 
(94.3 %, 11592 bytes)
736,745c736
<    return ret; 
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>    char *path,   
736,745c736
<    return ret; 
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>    return *path,   
736,745c736
<    return ret; 
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>    return retpath,   
737,745c737
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
> ,   
737,746c737
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
---
> BZ_VERSIONint fd,             
738,746c738
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
---
> fd,             
743,746c743
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
---
> ,             
744,747c744
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> const char *mode,
744,747c744
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> BZFILE char *mode,
744,747c744
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> BZFILE * *mode,
745,747c745
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
>                mode,
745,747c745
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
>                ( ,
745,748c745
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                ( const int open_mode)      
745,748c745
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                ( const char open_mode)      
745,748c745
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                ( const char *)      
745,749c745
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
---
>                ( const char *path;
746,754c746
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  BZFILE * BZ_API(BZ2_bzopen)
746,754c746
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  int * BZ_API(BZ2_bzopen)
746,754c746
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  int fdBZ_API(BZ2_bzopen)
747,754c747
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  (BZ2_bzopen)
747,754c747
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  const BZ2_bzopen)
747,754c747
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  const char )
747,755c747
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  const char *( const char *path,
747,755c747
<                  const char *mode,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  const char *modeconst char *path,
748,755c748
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  char *path,
748,755c748
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  int *path,
748,755c748
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  int open_modepath,
749,755c749
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> ,
754,756c754
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> const char *mode )
754,756c754
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE char *mode )
754,756c754
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * *mode )
754,756c754
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_APImode )
754,756c754
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API()
754,757c754
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
< {
---
> BZFILE * BZ_API(BZ2_bzopen{
755,758c755
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                return 0;
755,758c755
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( 0;
755,758c755
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( const ;
755,759c755
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
---
>                ( const char }
755,763c755
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *BZFILE * BZ_API(BZ2_bzdopen)
755,763c755
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *path* BZ_API(BZ2_bzdopen)
756,763c756
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  BZ_API(BZ2_bzdopen)
756,763c756
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const (BZ2_bzdopen)
756,763c756
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char BZ2_bzdopen)
756,763c756
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char *)
756,764c756
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>                  const char *mode ( int fd,
757,764c757
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> int fd,
758,764c758
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    fd,
758,764c758
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    return ,
758,765c758
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
>    return 0const char *mode )
759,765c759
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> char *mode )
763,765c763
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> *mode )
763,765c763
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE mode )
763,765c763
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * )
763,766c763
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
---
> BZFILE * BZ_API{
763,767c763
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(return bzopen_or_bzdopen(NULL,fd,mode,1);
763,767c763
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> BZFILE * BZ_API(BZ2_bzdopenbzopen_or_bzdopen(NULL,fd,mode,1);
764,767c764
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                (NULL,fd,mode,1);
764,767c764
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( NULL,fd,mode,1);
764,767c764
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int ,fd,mode,1);
764,767c764
<                ( int fd,
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                ( int fdfd,mode,1);
765,767c765
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  ,mode,1);
765,767c765
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const mode,1);
765,767c765
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char ,1);
765,767c765
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *1);
765,767c765
<                  const char *mode )
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
>                  const char *mode );
766,767c766
< {
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
---
> ;
767,768c767
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
---
>    }
767,772c767
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
767,772c767
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopenBZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
767,772c767
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen((BZ2_bzread) (BZFILE* b, void* buf, int len )
767,772c767
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULLBZ2_bzread) (BZFILE* b, void* buf, int len )
767,772c767
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,) (BZFILE* b, void* buf, int len )
767,772c767
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd(BZFILE* b, void* buf, int len )
767,772c767
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,BZFILE* b, void* buf, int len )
767,772c767
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode* b, void* buf, int len )
767,772c767
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,b, void* buf, int len )
767,772c767
<    return bzopen_or_bzdopen(NULL,fd,mode,1);
< }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    return bzopen_or_bzdopen(NULL,fd,mode,1, void* buf, int len )
(94.4 %, 11550 bytes)
767,771c767
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    * buf, int len )
771c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> buf, int len )
771c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int , int len )
771c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_APIint len )
771c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(len )
771c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread)
771,772c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzread) {
771,773c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (int bzerr, nread;
771,773c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILEbzerr, nread;
771,773c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* , nread;
771,773c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* bnread;
771,773c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
---
> int BZ_API(BZ2_bzread) (BZFILE* b, ;
771,774c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
> int BZ_API(BZ2_bzread) (BZFILE* b, voidif (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
771,774c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
771,774c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
771,774c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, (bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
771,774c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
771,774c771
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
> int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len *)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
772,774c772
< {
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
> )b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
773,774c773
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
773,774c773
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int )->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
773,774c773
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
773,774c773
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr, lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
773,774c773
<    int bzerr, nread;
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    int bzerr, nread== BZ_OK || bzerr == BZ_STREAM_END) {
774c774
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    BZ_OK || bzerr == BZ_STREAM_END) {
774c774
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if || bzerr == BZ_STREAM_END) {
774c774
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) {
774c774
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if ((== BZ_STREAM_END) {
774c774
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (((BZ_STREAM_END) {
774c774
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (((bzFile) {
774c774
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
---
>    if (((bzFile*{
774,775c774
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (((bzFile*)return nread;
774,775c774
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (((bzFile*)bnread;
774,775c774
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (((bzFile*)b);
774,776c774
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (((bzFile*)b)->} else {
774,776c774
<    if (((bzFile*)b)->lastErr == BZ_OK || bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (((bzFile*)b)->lastErr else {
(94.4 %, 11516 bytes)
774,777c774
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (-1;
774,777c774
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr 1;
774,777c774
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == ;
774,778c774
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
---
>    if (bzerr == BZ_STREAM_END}
774,779c774
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
>    if (bzerr == BZ_STREAM_END) }
775,783c775
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
775,783c775
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
775,783c775
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return nread(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
776,783c776
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    BZ2_bzwrite) (BZFILE* b, void* buf, int len )
776,783c776
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    } ) (BZFILE* b, void* buf, int len )
776,783c776
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    } else (BZFILE* b, void* buf, int len )
777,783c777
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       BZFILE* b, void* buf, int len )
777,783c777
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return * b, void* buf, int len )
777,783c777
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return -b, void* buf, int len )
777,783c777
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return -1, void* buf, int len )
778,783c778
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    void* buf, int len )
779,783c779
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> * buf, int len )
783c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> buf, int len )
783c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int , int len )
783c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_APIint len )
783c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(len )
783c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite)
783,784c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzwrite) {
783,785c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (int bzerr;
783,785c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (BZFILEbzerr;
783,785c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* ;
783,787c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b{
783,788c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, return -1;
783,788c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void-1;
783,788c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* 1;
783,788c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf;
783,789c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
<    }
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, }
783,790c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
<    }
< 0;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int 0;
783,790c783
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
<    }
< 0;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len ;
784,790d783
< {
<    int bzerr;
< 
<    {
<       return -1;
<    }
< 0;
785,791c785
<    int bzerr;
< 
<    {
<       return -1;
<    }
< 0;
< bzerr;
---
>    ;
785,792c785
<    int bzerr;
< 
<    {
<       return -1;
<    }
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int FILE *fp = ((bzFile *)b)->handle;
785,792c785
<    int bzerr;
< 
<    {
<       return -1;
<    }
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int bzerr*fp = ((bzFile *)b)->handle;
787,792c787
<    {
<       return -1;
<    }
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    fp = ((bzFile *)b)->handle;
788,792c788
<       return -1;
<    }
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>       = ((bzFile *)b)->handle;
788,792c788
<       return -1;
<    }
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>       return ((bzFile *)b)->handle;
788,792c788
<       return -1;
<    }
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>       return -(bzFile *)b)->handle;
788,792c788
<       return -1;
<    }
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>       return -1bzFile *)b)->handle;
789,792c789
<    }
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    *)b)->handle;
790,792c790
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> )b)->handle;
790,792c790
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> 0b)->handle;
791,792c791
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> )->handle;
791,792c791
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
> bzerr->handle;
792c792
<    FILE *fp = ((bzFile *)b)->handle;
---
>    handle;
792c792
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE ;
792,794c792
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *if (b==NULL) 
792,794c792
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *fp (b==NULL) 
792,794c792
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *fp = b==NULL) 
792,794c792
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *fp = (==NULL) 
792,794c792
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *fp = ((NULL) 
792,794c792
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
---
>    FILE *fp = ((bzFile ) 
792,795c792
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    FILE *fp = ((bzFile *if(((bzFile*)b)->writing){
792,795c792
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    FILE *fp = ((bzFile *)(((bzFile*)b)->writing){
792,795c792
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    FILE *fp = ((bzFile *)b((bzFile*)b)->writing){
792,795c792
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    FILE *fp = ((bzFile *)b)(bzFile*)b)->writing){
792,795c792
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    FILE *fp = ((bzFile *)b)->bzFile*)b)->writing){
792,795c792
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    FILE *fp = ((bzFile *)b)->handle*)b)->writing){
794,795c794
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    )b)->writing){
794,795c794
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if b)->writing){
794,795c794
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if ()->writing){
794,795c794
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (b->writing){
794,795c794
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (b==writing){
794,795c794
<    if (b==NULL) 
<    if(((bzFile*)b)->writing){
---
>    if (b==NULL){
795c795
<    if(((bzFile*)b)->writing){
---
>    {
795,796c795
<    if(((bzFile*)b)->writing){
<       ;
---
>    if;
795,797c795
<    if(((bzFile*)b)->writing){
<       ;
<       if(bzerr != BZ_OK){
---
>    if(if(bzerr != BZ_OK){
795,797c795
<    if(((bzFile*)b)->writing){
<       ;
<       if(bzerr != BZ_OK){
---
>    if(((bzerr != BZ_OK){
795,797c795
<    if(((bzFile*)b)->writing){
<       ;
<       if(bzerr != BZ_OK){
---
>    if(((bzerr != BZ_OK){
(94.4 %, 11486 bytes)
794,798c794
<    if (b==NULL){
<       ;
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
---
>    if (b==NULL(fp);
794,798c794
<    if (b==NULL){
<       ;
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
---
>    if (b==NULL)fp);
795,798c795
<       ;
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
---
>       );
796,798c796
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
---
>       ;
796,799c796
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
<    }
---
>       if}
796,800c796
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
<    }
< }
---
>       if(}
796,805c796
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       if(bzerr static char *bzerrorstrings[] = {
796,805c796
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       if(bzerr != char *bzerrorstrings[] = {
796,805c796
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       if(bzerr != BZ_OK*bzerrorstrings[] = {
796,805c796
<       if(bzerr != BZ_OK){
<          }
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       if(bzerr != BZ_OK)bzerrorstrings[] = {
797,805c797
<          }
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>          [] = {
798,805c798
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    ] = {
798,805c798
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    fclose= {
798,805c798
<    fclose(fp);
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    fclose({
(94.4 %, 11442 bytes)
796,804d795
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
797,805c797
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
---
>    "???"   
798,806c798
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
---
> ,"???"   
803,806c803
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
---
> "???"   
803,807c803
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
---
> static };
803,807c803
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
---
> static char ;
803,810c803
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
803,810c803
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstringschar * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
803,810c803
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[* BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
803,810c803
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
803,810c803
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] = (BZ2_bzerror) (BZFILE *b, int *errnum)
804,810c804
<        "OK"
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>        BZ2_bzerror) (BZFILE *b, int *errnum)
805,810c805
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ) (BZFILE *b, int *errnum)
805,810c805
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,(BZFILE *b, int *errnum)
806,810c806
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       BZFILE *b, int *errnum)
806,810c806
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,*b, int *errnum)
807,810c807
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> b, int *errnum)
807,810c807
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> }, int *errnum)
810c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> int *errnum)
810c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const *errnum)
810c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char errnum)
810c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * )
810,811c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
---
> const char * BZ_API{
810,812c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr= err;
---
> const char * BZ_API(int err = ((bzFile *)b)->lastErr= err;
810,812c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr= err;
---
> const char * BZ_API(BZ2_bzerrorerr = ((bzFile *)b)->lastErr= err;
810,812c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr= err;
---
> const char * BZ_API(BZ2_bzerror) = ((bzFile *)b)->lastErr= err;
810,812c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr= err;
---
> const char * BZ_API(BZ2_bzerror) (((bzFile *)b)->lastErr= err;
810,812c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr= err;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE (bzFile *)b)->lastErr= err;
810,812c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr= err;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *bzFile *)b)->lastErr= err;
810,812c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr= err;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b*)b)->lastErr= err;
810,812c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr= err;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, )b)->lastErr= err;
810,812c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr= err;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int b)->lastErr= err;
810,812c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr= err;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *)->lastErr= err;
810,812c810
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err = ((bzFile *)b)->lastErr= err;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum->lastErr= err;
811,812c811
< {
<    int err = ((bzFile *)b)->lastErr= err;
---
> lastErr= err;
812c812
<    int err = ((bzFile *)b)->lastErr= err;
---
>    = err;
812c812
<    int err = ((bzFile *)b)->lastErr= err;
---
>    int err;
812c812
<    int err = ((bzFile *)b)->lastErr= err;
---
>    int err ;
(94.4 %, 11412 bytes)
812,843c812
<    int err;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    int #define BZ_UNIX      1
812,843c812
<    int err;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    int errdefine BZ_UNIX      1
813,843c813
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    BZ_UNIX      1
813,843c813
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    return 1
813,846c813
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
>    return bzerrorstrings#define BZ_LCCWIN32  )  
813,846c813
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
>    return bzerrorstrings[define BZ_LCCWIN32  )  
813,846c813
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
>    return bzerrorstrings[errBZ_LCCWIN32  )  
813,846c813
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
>    return bzerrorstrings[err*)  
813,847c813
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
>    return bzerrorstrings[err*-#define ERROR_IF_MINUS_ONE(i) 
813,847c813
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
>    return bzerrorstrings[err*-1define ERROR_IF_MINUS_ONE(i) 
813,847c813
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
>    return bzerrorstrings[err*-1]ERROR_IF_MINUS_ONE(i) 
814,847c814
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> (i) 
843,847c843
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> i) 
843,847c843
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #) 
843,853c843
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define #if BZ_UNIX
843,853c843
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define BZ_UNIX      if BZ_UNIX
846,853c846
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> BZ_UNIX
846,854c846
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> ##   include <fcntl.h>
846,854c846
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define include <fcntl.h>
846,854c846
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define BZ_LCCWIN32  <fcntl.h>
847,854c847
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> fcntl.h>
847,854c847
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #.h>
847,854c847
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define h>
847,854c847
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define ERROR_IF_MINUS_ONE>
847,855c847
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define ERROR_IF_MINUS_ONE(#   include <utime.h>
847,855c847
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #define ERROR_IF_MINUS_ONE(iinclude <utime.h>
853,855c853
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> <utime.h>
853,855c853
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #utime.h>
853,855c853
< #if BZ_UNIX
< #   include <fcntl.h>
< #   include <utime.h>
---
> #if .h>
854,855c854
< #   include <fcntl.h>
< #   include <utime.h>
---
> h>
854,855c854
< #   include <fcntl.h>
< #   include <utime.h>
---
> #   >
854,857c854
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define \
---
> #   include #   define \
854,857c854
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define \
---
> #   include <define \
854,857c854
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define \
---
> #   include <fcntl\
854,858c854
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define \
<       rootdefine NORETURN 
---
> #   include <fcntl.rootdefine NORETURN 
854,858c854
< #   include <fcntl.h>
< #   include <utime.h>
< 
< #   define \
<       rootdefine NORETURN 
---
> #   include <fcntl.hNORETURN 
855,859d854
< #   include <utime.h>
< 
< #   define \
<       rootdefine NORETURN 
< 
855,860c855
< #   include <utime.h>
< 
< #   define \
<       rootdefine NORETURN 
< 
< #endif 
---
> #   endif 
(94.5 %, 11348 bytes)
855,879c855
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> define SM_I2O           
\ No newline at end of file
855,879c855
< #endif 
< 
< 
< 
< 
< 
<                                        
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> #SM_I2O           
\ No newline at end of file
862,879d861
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
862,879c862
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> #
\ No newline at end of file
862,879c862
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> #define 
\ No newline at end of file
862,879c862
< #define True  0)
< 
< 
< typedef int IntNative;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define SM_I2O           
\ No newline at end of file
---
> #define True  
\ No newline at end of file
(94.5 %, 11268 bytes)
===< pass_clex :: rm-toks-11 >===
9,13c9
< #2
< 
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> define BZ_SEQUENCE_ERROR    (-1)
9,13c9
< #2
< 
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #BZ_SEQUENCE_ERROR    (-1)
11,13c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> (-1)
11,13c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #-1)
11,13c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define 1)
11,13c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_OK                )
12,13d11
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
12,13d11
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
12,13d11
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
12,14c12
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define BZ_STREAM_END        (-2)
13,14c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> -2)
13,14c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #2)
13,14c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
---
> #define )
13,15c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         8)
---
> #define BZ_SEQUENCE_ERROR    #define BZ_MEM_ERROR         8)
13,15c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         8)
---
> #define BZ_SEQUENCE_ERROR    (define BZ_MEM_ERROR         8)
13,15c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         8)
---
> #define BZ_SEQUENCE_ERROR    (-BZ_MEM_ERROR         8)
13,15c13
< #define BZ_SEQUENCE_ERROR    (-1)
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         8)
---
> #define BZ_SEQUENCE_ERROR    (-18)
14,15c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         8)
---
> )
14,16c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         8)
< #define BZ_CONFIG_ERROR      (-9)
---
> ##define BZ_CONFIG_ERROR      (-9)
14,16c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define define BZ_CONFIG_ERROR      (-9)
14,16c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
14,16c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_PARAM_ERROR       ((-9)
14,16c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_PARAM_ERROR       (--9)
14,16c14
< #define BZ_PARAM_ERROR       (-2)
< #define BZ_MEM_ERROR         8)
< #define BZ_CONFIG_ERROR      (-9)
---
> #define BZ_PARAM_ERROR       (-29)
(94.5 %, 11223 bytes)
14,18c14
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_PARAM_ERROR       ;
14,19c14
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      unsigned int avail_in;
14,19c14
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (int avail_in;
14,19c14
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-avail_in;
14,19c14
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9;
16,20c16
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
> unsigned int total_in_lo32;
17,20c17
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    int total_in_lo32;
17,20c17
<    struct {
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>    struct total_in_lo32;
18,20c18
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>       ;
18,21c18
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char unsigned int total_in_hi32;
18,21c18
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char *int total_in_hi32;
18,21c18
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       char *next_intotal_in_hi32;
19,21c19
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       ;
19,23c19
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned char *next_out;
19,23c19
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned int *next_out;
19,23c19
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned int avail_innext_out;
20,23c20
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       ;
20,24c20
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned unsigned int avail_out;
20,24c20
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int int avail_out;
20,24c20
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int total_in_lo32avail_out;
21,24c21
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       ;
21,25c21
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned unsigned int total_out_lo32;
21,25c21
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int int total_out_lo32;
21,25c21
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       unsigned int total_in_hi32total_out_lo32;
23,25c23
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       ;
23,26c23
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char unsigned int total_out_hi32;
23,26c23
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char *int total_out_hi32;
23,26c23
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       char *next_outtotal_out_hi32;
24,26c24
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       ;
24,28c24
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned void *state;
24,28c24
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned int *state;
24,28c24
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned int avail_outstate;
25,28c25
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       ;
25,30c25
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned void *(*bzalloc)(void *,int,int);
25,30c25
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int *(*bzalloc)(void *,int,int);
25,30c25
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_lo32(*bzalloc)(void *,int,int);
26,30c26
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       *bzalloc)(void *,int,int);
26,30c26
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned bzalloc)(void *,int,int);
26,30c26
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int )(void *,int,int);
26,30c26
<       unsigned int total_out_hi32;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       unsigned int total_out_hi32(void *,int,int);
28,30c28
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *,int,int);
28,30c28
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *,int,int);
28,30c28
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *,int,int);
28,30c28
<       void *state;
< 
<       void *(*bzalloc)(void *,int,int);
---
>       void *stateint,int);
30c30
<       void *(*bzalloc)(void *,int,int);
---
>       ,int);
30c30
<       void *(*bzalloc)(void *,int,int);
---
>       void int);
30c30
<       void *(*bzalloc)(void *,int,int);
---
>       void *);
30c30
<       void *(*bzalloc)(void *,int,int);
---
>       void *(;
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*void (*bzfree)(void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc(*bzfree)(void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)*bzfree)(void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(bzfree)(void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void )(void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *(void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,void *,void *);
30,31c30
<       void *(*bzalloc)(void *,int,int);
<       void (*bzfree)(void *,void *);
---
>       void *(*bzalloc)(void *,int*,void *);
(94.5 %, 11192 bytes)
30,32c30
<       void *(*bzalloc)(void *,void *,void *);
<       void *opaque;
<    } 
---
>       void *(*bzalloc)(void *,} 
30,33c30
<       void *(*bzalloc)(void *,void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *(*bzalloc)(void *,void bz_stream;
30,33c30
<       void *(*bzalloc)(void *,void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *(*bzalloc)(void *,void *;
30,37c30
<       void *(*bzalloc)(void *,void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,void *,#include <stdio.h>
30,37c30
<       void *(*bzalloc)(void *,void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,void *,void include <stdio.h>
30,37c30
<       void *(*bzalloc)(void *,void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,void *,void *<stdio.h>
30,37c30
<       void *(*bzalloc)(void *,void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *(*bzalloc)(void *,void *,void *)stdio.h>
31,37c31
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       .h>
31,37c31
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void h>
31,37c31
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *>
31,39c31
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>       void *opaque#   define BZ_API(func) func
32,39c32
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    define BZ_API(func) func
33,39c33
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    BZ_API(func) func
33,39c33
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
>    bz_stream(func) func
37,39c37
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> func) func
37,39c37
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #) func
37,39c37
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include func
37,40c37
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <#   define BZ_EXTERN extern
37,40c37
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdiodefine BZ_EXTERN extern
37,40c37
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.BZ_EXTERN extern
37,40c37
< #include <stdio.h>
< 
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #include <stdio.hextern
39,44d38
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
39,45c39
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> #   int BZ_API(BZ2_bzCompressInitworkFactor 
39,45c39
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> #   define BZ_API(BZ2_bzCompressInitworkFactor 
39,45c39
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> #   define BZ_API(BZ2_bzCompressInitworkFactor 
39,45c39
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
---
> #   define BZ_API(BZ2_bzCompressInitworkFactor 
39,46c39
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
---
> #   define BZ_API(func);
39,46c39
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
---
> #   define BZ_API(func) ;
40,47d39
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
40,48c40
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
---
> #   ;
40,50c40
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> #   define int BZ_API(BZ2_bzDecompressInit) ( 
40,50c40
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> #   define BZ_EXTERN BZ_API(BZ2_bzDecompressInit) ( 
45,50c45
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> (BZ2_bzDecompressInit) ( 
45,50c45
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN BZ2_bzDecompressInit) ( 
45,50c45
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int ) ( 
45,50c45
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
---
> BZ_EXTERN int BZ_API( 
45,51c45
< BZ_EXTERN int BZ_API(BZ2_bzCompressInitworkFactor 
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> BZ_EXTERN int BZ_API(bz_stream *strm, 
46,51c46
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
>    *strm, 
46,51c46
<    );
< 
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
>    )strm, 
48,51c48
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> , 
48,52c48
< BZ_EXTERN ;
< 
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> BZ_EXTERN int       verbosity, 
50,52c50
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> verbosity, 
50,52c50
< int BZ_API(BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> int , 
(94.6 %, 11111 bytes)
45,48c45
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
> int       );
45,48c45
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
> ();
45,48c45
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
> (BZ2_bzDecompressInit;
45,54c45
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
> (BZ2_bzDecompressInit) #define BZ_MAX_UNUSED 5000
46,54c46
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       define BZ_MAX_UNUSED 5000
46,54c46
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       bz_stream BZ_MAX_UNUSED 5000
46,54c46
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       bz_stream *5000
46,56c46
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>       bz_stream *strmtypedef void BZFILE;
47,56c47
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>       void BZFILE;
47,56c47
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>       int       BZFILE;
47,56c47
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>       int       verbosity;
48,58c48
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
48,58c48
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       int       BZFILE* BZ_API(BZ2_bzReadOpen) ( 
48,58c48
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
>       int       )* BZ_API(BZ2_bzReadOpen) ( 
54,58c54
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_API(BZ2_bzReadOpen) ( 
54,58c54
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #(BZ2_bzReadOpen) ( 
54,58c54
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ2_bzReadOpen) ( 
54,58c54
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED ) ( 
56,58c56
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> ( 
56,59c56
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef int*  bzerror,   
56,59c56
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void *  bzerror,   
56,59c56
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> typedef void BZFILEbzerror,   
58,59c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> ,   
58,60c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN FILE* f, 
58,60c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* f, 
58,60c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* f, 
58,60c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API, 
58,61c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(int   verbosity, 
58,61c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpenverbosity, 
58,61c58
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) , 
59,61d58
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
59,62c59
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       intsmall,
59,62c59
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       int*  ,
59,63c59
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int*  bzerrorvoid* unused,    
60,63c60
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       * unused,    
60,63c60
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILEunused,    
60,63c60
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* ,    
60,64c60
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       FILE* fint   nUnused 
61,64c61
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       nUnused 
61,65c61
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   );
61,65c61
<       int   verbosity, 
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   verbosity;
62,67c62
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       BZ_EXTERN void ;
62,67c62
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       int   void ;
62,67c62
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       int   small;
63,69c63
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
63,69c63
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       voidvoid BZ_API(BZ2_bzReadGetUnused) ( 
63,69c63
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* BZ_API(BZ2_bzReadGetUnused) ( 
63,69c63
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       void* unused(BZ2_bzReadGetUnused) ( 
64,69c64
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ2_bzReadGetUnused) ( 
64,69c64
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   ) ( 
65,69c65
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    ( 
65,70c65
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
>    )int*    bzerror, 
67,70c67
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> *    bzerror, 
67,70c67
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN bzerror, 
67,70c67
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void , 
69,71c69
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZFILE* b, 
69,71c69
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN * b, 
69,71c69
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void b, 
69,71c69
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API, 
69,72c69
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(void**  unused,  
69,72c69
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused**  unused,  
69,72c69
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) *  unused,  
70,72c70
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       unused,  
70,72c70
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int,  
70,73c70
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    int*    nUnused 
70,73c70
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       int*    bzerror*    nUnused 
71,73c71
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       nUnused 
71,74c71
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE);
71,74c71
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       BZFILE* ;
71,76c71
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZFILE* bBZ_EXTERN int BZ_API(BZ2_bzRead) ( 
72,76c72
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int BZ_API(BZ2_bzRead) ( 
72,76c72
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       voidBZ_API(BZ2_bzRead) ( 
72,76c72
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void*(BZ2_bzRead) ( 
72,76c72
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  BZ2_bzRead) ( 
72,76c72
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  unused) ( 
73,76c73
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       ( 
73,77c73
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       intint*    bzerror, 
73,77c73
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>       int*    *    bzerror, 
74,77c74
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>    bzerror, 
74,77c74
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
>    ), 
76,78c76
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZFILE* b, 
76,78c76
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN * b, 
76,78c76
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int b, 
76,78c76
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API, 
76,79c76
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(void*   buf, 
76,79c76
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead*   buf, 
76,79c76
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) buf, 
77,79c77
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       , 
77,80c77
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       intint     len 
77,80c77
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    len 
77,81c77
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int*    bzerror);
78,81c78
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
78,83c78
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILEBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
78,83c78
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
78,83c78
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* b* BZ_API(BZ2_bzWriteOpen) ( 
79,83c79
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ_API(BZ2_bzWriteOpen) ( 
79,83c79
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void(BZ2_bzWriteOpen) ( 
79,83c79
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   BZ2_bzWriteOpen) ( 
79,83c79
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   buf) ( 
80,83c80
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       ( 
80,84c80
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>       int     int*  bzerror,      
81,84c81
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    *  bzerror,      
81,84c81
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
>    )bzerror,      
83,84c83
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> ,      
83,85c83
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN FILE* f, 
83,85c83
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* f, 
83,85c83
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* f, 
83,85c83
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API, 
83,86c83
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(int   blockSize100k, 
83,86c83
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenblockSize100k, 
83,86c83
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) , 
84,86d83
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
84,87c84
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       intverbosity, 
84,87c84
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int*  , 
84,88c84
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int*  bzerrorint   workFactor 
85,88c85
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       workFactor 
85,89c85
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE);
85,89c85
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       FILE* ;
85,91c85
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       FILE* fBZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
86,91c86
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       void BZ_API(BZ2_bzWrite) ( 
86,91c86
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   BZ_API(BZ2_bzWrite) ( 
86,91c86
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   blockSize100k(BZ2_bzWrite) ( 
87,91c87
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       BZ2_bzWrite) ( 
87,91c87
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   ) ( 
87,91c87
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   verbosity( 
88,91d87
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
88,92c88
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>       int   *    bzerror, 
89,92c89
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>    bzerror, 
89,92c89
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
>    ), 
91,93c91
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZFILE* b, 
91,93c91
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN * b, 
91,93c91
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void b, 
91,93c91
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API, 
91,94c91
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(void*   buf, 
91,94c91
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite*   buf, 
91,94c91
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) buf, 
92,94c92
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       , 
92,95c92
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       intint     len 
92,95c92
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       int*    len 
92,96c92
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       int*    bzerror);
93,96c93
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       ;
93,98c93
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILEBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
93,98c93
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* void BZ_API(BZ2_bzWriteClose) ( 
93,98c93
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZFILE* bBZ_API(BZ2_bzWriteClose) ( 
94,98c94
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       (BZ2_bzWriteClose) ( 
94,98c94
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       voidBZ2_bzWriteClose) ( 
94,98c94
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   ) ( 
94,98c94
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   buf( 
95,98d94
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
95,99c95
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>       int     *          bzerror, 
96,99c96
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    bzerror, 
96,99c96
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
>    ), 
98,100c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZFILE*       b, 
98,100c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN *       b, 
98,100c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void b, 
98,100c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API, 
98,101c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(int           abandon, 
98,101c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseabandon, 
98,101c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) , 
99,101d98
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
99,102c99
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       intint* nbytes_in, 
99,102c99
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          * nbytes_in, 
99,102c99
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int*          bzerrornbytes_in, 
100,102c100
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       , 
100,103c100
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILEunsigned int* nbytes_out 
100,103c100
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       int* nbytes_out 
100,103c100
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       BZFILE*       b* nbytes_out 
101,103c101
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       nbytes_out 
101,104c101
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       int           );
101,104c101
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       int           abandon;
102,106c102
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
102,106c102
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned void BZ_API(BZ2_bzWriteClose64) ( 
102,106c102
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ_API(BZ2_bzWriteClose64) ( 
102,106c102
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* (BZ2_bzWriteClose64) ( 
102,106c102
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_inBZ2_bzWriteClose64) ( 
103,106c103
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       ) ( 
103,106c103
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned ( 
103,107c103
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned intint*          bzerror, 
103,107c103
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>       unsigned int* *          bzerror, 
104,107c104
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    bzerror, 
104,107c104
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
>    ), 
106,108c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZFILE*       b, 
106,108c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN *       b, 
106,108c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void b, 
106,108c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API, 
106,109c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(int           abandon, 
106,109c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64abandon, 
106,109c106
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) , 
107,109d106
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
107,110c107
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       intint* nbytes_in_lo32, 
107,110c107
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          * nbytes_in_lo32, 
107,110c107
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int*          bzerrornbytes_in_lo32, 
108,110c108
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       , 
108,111c108
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILEunsigned int* nbytes_in_hi32, 
108,111c108
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       int* nbytes_in_hi32, 
108,111c108
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       BZFILE*       b* nbytes_in_hi32, 
109,111c109
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       nbytes_in_hi32, 
109,111c109
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           , 
109,112c109
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int           abandonunsigned int* nbytes_out_lo32, 
110,112c110
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int* nbytes_out_lo32, 
110,112c110
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
110,112c110
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intnbytes_out_lo32, 
110,112c110
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* , 
110,113c110
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_lo32unsigned int* nbytes_out_hi32
111,113c111
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       int* nbytes_out_hi32
111,113c111
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
111,113c111
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intnbytes_out_hi32
111,114c111
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* );
111,114c111
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_in_hi32;
112,119c112
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
112,119c112
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int BZ_API(BZ2_bzBuffToBuffCompress) ( 
112,119c112
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ_API(BZ2_bzBuffToBuffCompress) ( 
112,119c112
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* (BZ2_bzBuffToBuffCompress) ( 
112,119c112
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32BZ2_bzBuffToBuffCompress) ( 
113,119c113
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       ) ( 
113,119c113
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned ( 
113,120c113
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned intchar*         dest, 
113,120c113
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>       unsigned int* *         dest, 
114,120c114
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    dest, 
114,120c114
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
>    ), 
119,121c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> unsigned int* destLen,
119,121c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int* destLen,
119,121c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int * destLen,
119,121c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIdestLen,
119,121c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(,
119,122c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompresschar*         source, 
119,122c119
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) *         source, 
120,122c120
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       source, 
120,122c120
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char, 
120,123c120
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         unsigned int  sourceLen,
120,123c120
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destint  sourceLen,
121,123c121
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
121,123c121
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned ,
121,124c121
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned intint           blockSize100k, 
121,124c121
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* blockSize100k, 
121,124c121
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned int* destLen, 
122,124d121
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
122,125c122
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       charverbosity, 
122,125c122
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       char*         , 
122,126c122
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       char*         sourceint           workFactor 
123,126c123
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       workFactor 
123,127c123
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned );
123,127c123
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       unsigned int  ;
123,129c123
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       unsigned int  sourceLenBZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
124,129c124
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
124,129c124
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ_API(BZ2_bzBuffToBuffDecompress) ( 
124,129c124
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           blockSize100k(BZ2_bzBuffToBuffDecompress) ( 
125,129c125
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ2_bzBuffToBuffDecompress) ( 
125,129c125
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           ) ( 
125,129c125
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosity( 
126,129d125
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
126,130c126
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>       int           *         dest, 
127,130c127
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    dest, 
127,130c127
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
>    ), 
129,131c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> unsigned int* destLen,
129,131c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int* destLen,
129,131c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int * destLen,
129,131c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_APIdestLen,
129,131c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(,
129,132c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompresschar*         source, 
129,132c129
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) *         source, 
130,132c130
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       source, 
130,132c130
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char, 
130,133c130
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         unsigned int  sourceLen,
130,133c130
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         destint  sourceLen,
131,133c131
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
131,133c131
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned ,
131,134c131
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned intint           small, 
131,134c131
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* small, 
131,134c131
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned int* destLen, 
132,134d131
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
132,135c132
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char);
132,135c132
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       char*         ;
132,137c132
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       char*         sourceBZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
133,137c133
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       BZFILE * BZ_API(BZ2_bzopen) (
133,137c133
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned * BZ_API(BZ2_bzopen) (
133,137c133
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  BZ_API(BZ2_bzopen) (
133,137c133
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       unsigned int  sourceLen(BZ2_bzopen) (
134,137c134
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       BZ2_bzopen) (
134,137c134
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           ) (
134,137c134
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
---
>       int           small(
135,137d134
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
135,138c135
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           char *path,
135,138c135
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
>       int           )*path,
137,138c137
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> path,
137,138c137
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
---
> BZ_EXTERN ,
137,139c137
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE const char *mode
137,139c137
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * char *mode
137,139c137
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API*mode
137,139c137
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
---
> BZ_EXTERN BZFILE * BZ_API(mode
137,140c137
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen);
137,140c137
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) (
<       const char *path,
<       const char *mode
<    );
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzopen) ;
138,142c138
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API;
---
>       BZ_EXTERN BZFILE * BZ_API;
138,142c138
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API;
---
>       const BZFILE * BZ_API;
138,142c138
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API;
---
>       const char * BZ_API;
138,142c138
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API;
---
>       const char *BZ_API;
138,142c138
<       const char *path,
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API;
---
>       const char *path;
139,144c139
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API;
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       void BZ_API(BZ2_bzcloseBZ2_bzerror) (
139,144c139
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API;
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       const BZ_API(BZ2_bzcloseBZ2_bzerror) (
139,144c139
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API;
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       const char (BZ2_bzcloseBZ2_bzerror) (
139,144c139
<       const char *mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API;
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       const char *BZ2_bzcloseBZ2_bzerror) (
(94.6 %, 11055 bytes)
137,142c137
< BZ_EXTERN BZFILE * BZ_API(mode
<    );
< 
< BZ_EXTERN BZFILE * BZ_API;
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
138,142c138
<    );
< 
< BZ_EXTERN BZFILE * BZ_API;
< 
< void BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>    ) (
(94.6 %, 11003 bytes)
137,140c137
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
---
> BZ_EXTERN BZFILE * BZ_API(;
137,150c137
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror#define _BZLIB_PRIVATE_H
137,150c137
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) define _BZLIB_PRIVATE_H
138,150c138
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
>       _BZLIB_PRIVATE_H
138,152c138
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE #include <stdlib.h>
138,152c138
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *include <stdlib.h>
138,152c138
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       BZFILE *b<stdlib.h>
139,152c139
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       stdlib.h>
139,152c139
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       int    .h>
139,152c139
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       int    *h>
140,152c140
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>    >
140,157c140
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>    )#define BZ_VERSION  "1.0.2, 30-Dec-2001"
150,157c150
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
150,157c150
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #BZ_VERSION  "1.0.2, 30-Dec-2001"
150,157c150
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define "1.0.2, 30-Dec-2001"
152,158d151
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
152,159c152
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #char            Char;
152,159c152
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #include Char;
152,159c152
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #include <;
152,160c152
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlibtypedef unsigned char   Bool;
152,160c152
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlib.unsigned char   Bool;
152,160c152
< #include <stdlib.h>
< 
< 
< 
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #include <stdlib.hchar   Bool;
157,160c157
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> Bool;
157,160c157
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #;
157,161c157
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define typedef unsigned char   UChar;
157,161c157
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> #define BZ_VERSION  unsigned char   UChar;
159,161c159
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> char   UChar;
159,161c159
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef UChar;
159,161c159
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            ;
159,162c159
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef char            Chartypedef int             Int32;
160,162c160
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> int             Int32;
160,162c160
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef Int32;
160,162c160
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned ;
160,163c160
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   typedef unsigned int    UInt32;
160,163c160
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   Boolunsigned int    UInt32;
161,163c161
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> int    UInt32;
161,163c161
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef UInt32;
161,163c161
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned ;
161,164c161
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   typedef short           Int16;
161,164c161
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef unsigned char   UCharshort           Int16;
162,164c162
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> Int16;
162,164c162
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef ;
162,165c162
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             typedef unsigned short  UInt16;
162,165c162
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef int             Int32unsigned short  UInt16;
163,165c163
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> short  UInt16;
163,165c163
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef UInt16;
163,165c163
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned ;
163,167c163
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    #define True  ((Bool)1)
163,167c163
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned int    UInt32define True  ((Bool)1)
164,167c164
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> True  ((Bool)1)
164,167c164
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef ((Bool)1)
164,167c164
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           (Bool)1)
164,167c164
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           Int16Bool)1)
165,167c165
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> )1)
165,167c165
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef 1)
165,167c165
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef unsigned )
165,168c165
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  #define False ((Bool)0)
165,168c165
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> typedef unsigned short  UInt16define False ((Bool)0)
167,168c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> False ((Bool)0)
167,168c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #((Bool)0)
167,168c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define (Bool)0)
167,168c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  Bool)0)
167,168c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  ()0)
167,168c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  ((0)
167,168c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
---
> #define True  ((Bool)
167,170c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool)#define __inline__  
167,170c167
< #define True  ((Bool)1)
< #define False ((Bool)0)
< 
< #define __inline__  
---
> #define True  ((Bool)1define __inline__  
168,170c168
< #define False ((Bool)0)
< 
< #define __inline__  
---
> __inline__  
168,173c168
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define msgzfza2define )
---
> ##define msgzfza2define )
168,173c168
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define msgzfza2define )
---
> #define define msgzfza2define )
168,173c168
< #define False ((Bool)0)
< 
< #define __inline__  
< 
< 
< #define msgzfza2define )
---
> #define False msgzfza2define )
(94.7 %, 10962 bytes)
168,178c168
< #define define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define Int32 rTPos                                 \
168,178c168
< #define define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define define rTPos                                 \
168,178c168
< #define define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
---
> #define define msgzfza2define \
176,184d175
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< 
< 
< 
< 
< 
176,184d175
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< 
< 
< 
< 
< 
176,184d175
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< 
< 
< 
< 
< 
176,185c176
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
> #define BZ_RAND_DECLS                          1
177,186c177
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
---
>    #define BZ_M_RUNNING   1
177,186c177
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
---
>    Int32 define BZ_M_RUNNING   1
177,186c177
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
---
>    Int32 rNToGoBZ_M_RUNNING   1
177,186c177
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
---
>    Int32 rNToGo;                               1
178,187c178
<    Int32 rTPos                                 \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
---
>    #define BZ_S_INPUT     2
178,187c178
<    Int32 rTPos                                 \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
---
>    Int32 define BZ_S_INPUT     2
178,187c178
<    Int32 rTPos                                 \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
---
>    Int32 rTPos                                 BZ_S_INPUT     2
185,187c185
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
---
> 2
185,189c185
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> ##define BZ_N_RADIX 2
185,189c185
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define define BZ_N_RADIX 2
185,189c185
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define BZ_M_IDLE      BZ_N_RADIX 2
186,189c186
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> 2
186,190c186
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> ##define BZ_N_QSORT 12
186,190c186
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define define BZ_N_QSORT 12
186,190c186
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> #define BZ_M_RUNNING   BZ_N_QSORT 12
187,190c187
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
---
> 12
187,191c187
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> ##define BZ_N_SHELL 18
187,191c187
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define define BZ_N_SHELL 18
187,191c187
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define BZ_S_INPUT     BZ_N_SHELL 18
189,191c189
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> 18
189,192c189
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> ##define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
189,192c189
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
189,192c189
< #define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_RADIX BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
190,192c190
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
190,192c190
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
190,192c190
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define + BZ_N_QSORT + BZ_N_SHELL + 2)
190,192c190
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_QSORT BZ_N_QSORT + BZ_N_SHELL + 2)
191,192c191
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> + BZ_N_SHELL + 2)
191,192c191
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #BZ_N_SHELL + 2)
191,192c191
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define + 2)
191,192c191
< #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define BZ_N_SHELL 2)
192c192
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> )
192,199c192
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
---
> #typedef
192,200c192
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define struct {
192,200c192
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #define BZ_N_OVERSHOOT {
192,202c192
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (bz_stream* strm;
192,202c192
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX * strm;
192,202c192
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + strm;
192,202c192
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT ;
192,206c192
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + Int32    mode;
192,206c192
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL mode;
192,206c192
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + ;
192,207c192
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2Int32    state;
199,207c199
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
> state;
200,207c200
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
---
>    ;
200,213c200
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>    struct UInt32*  arr1;
202,213c202
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       *  arr1;
202,213c202
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       bz_streamarr1;
202,213c202
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
---
>       bz_stream* ;
202,214c202
<       bz_stream* strm;
< 
<       
<       
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       bz_stream* strmUInt32*  arr2;
206,214c206
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       *  arr2;
206,214c206
<       Int32    mode;
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
---
>       Int32    arr2;
207,214d206
<       Int32    state;
< 
<       
<       
< 
<       
<       UInt32*  arr1;
<       UInt32*  arr2;
(94.7 %, 10875 bytes)
206,212c206
<       Int32    arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       Int32    *   block;
206,212c206
<       Int32    arr2;
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       Int32    arr2block;
207,212c207
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
---
>       ;
207,213c207
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32UInt16*  mtfv;
207,213c207
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32*  *  mtfv;
207,213c207
<       UInt32*  ftab;
<       
< 
<       
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       UInt32*  ftabmtfv;
211,213c211
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
---
>       ;
211,214c211
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32UChar*   zbits;
211,214c211
<       UInt32*  ptr;
<       UChar*   block;
<       UInt16*  mtfv;
<       UChar*   zbits;
---
>       UInt32*  *   zbits;
(94.7 %, 10820 bytes)
211,224c211
<       ;
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
---
>       nblockMAX;
212,224c212
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
---
>       ;
212,239c212
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       UCharUInt32   combinedCRC;
212,239c212
<       UChar*   zbits;
< 
<       
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
---
>       UChar*   combinedCRC;
215,241d214
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
215,241d214
<       Int32    workFactor;
< 
<       
<       
<       
<       BZ_RAND_DECLS;
< 
<       
<       
<       Int32    nblockMAX;
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
< 
<       
<       
<       UInt32   combinedCRC;
< 
<       
(94.8 %, 10593 bytes)
212,232c212
<       UChar*   zbits;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
---
>       UChar*   zbitsEState;
215,232c215
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
---
>       ;
215,240c215
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
---
>       Int32    ;
216,242d215
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
216,252c216
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
---
>       typedef
216,253c216
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
>       Int32    struct {
216,253c216
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
>       Int32    blockNo{
217,254d216
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
217,254d216
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
221,258d220
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    bsLive;
< 
<       
<       
231,259c231
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>    Bool     smallDecompress;
232,259c232
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
---
>    smallDecompress;
233,259d232
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
240,260c240
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
> Int32    currBlockNo;
242,260c242
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
> currBlockNo;
252,260c252
< typedef
<    struct {
<       
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
---
> ;
253,261c253
<    struct {
<       
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>    Int32    verbosity;
253,261c253
<    struct {
<       
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>    struct verbosity;
255,261c255
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
---
>       ;
255,273c255
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       Int32    UInt32   *tt;
255,273c255
<       Int32    bsLive;
< 
<       
<       
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       Int32    bsLive*tt;
259,273c259
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       tt;
259,273c259
<       Bool     smallDecompress;
<       Int32    currBlockNo;
<       Int32    verbosity;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
---
>       Bool     ;
(94.9 %, 10477 bytes)
255,271c255
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       ll4;
267,271c267
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
---
>       ;
267,277c267
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       UInt32   UInt32   calculatedCombinedCRC;
267,277c267
<       UInt32   *tt;
< 
<       
<       UInt16   *ll16;
<       UChar    *ll4;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>       UInt32   *calculatedCombinedCRC;
(94.9 %, 10414 bytes)
267,358c267
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>       default_bzalloc ( void* opaque, Int32 items, Int32 size )
273,358c273
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>       ( void* opaque, Int32 items, Int32 size )
273,358c273
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>       UInt32   void* opaque, Int32 items, Int32 size )
273,358c273
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>       UInt32   calculatedCombinedCRC* opaque, Int32 items, Int32 size )
319,358c319
<    }
<    DState;
< 
< 
< 
< 
< 
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>    opaque, Int32 items, Int32 size )
320,358c320
<    DState;
< 
< 
< 
< 
< 
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>    , Int32 items, Int32 size )
320,358c320
<    DState;
< 
< 
< 
< 
< 
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
>    DStateInt32 items, Int32 size )
326,358c326
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> items, Int32 size )
357,358c357
< static
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> , Int32 size )
358c358
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> Int32 size )
358c358
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> voidsize )
358c358
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
---
> void* )
358,359c358
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
---
> void* default_bzalloc ;
358,361c358
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
---
> void* default_bzalloc ( static
358,362c358
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( voidvoid default_bzfree ( void* opaque, void* addr )
358,362c358
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* default_bzfree ( void* opaque, void* addr )
358,362c358
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque( void* opaque, void* addr )
358,362c358
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, void* opaque, void* addr )
358,362c358
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 * opaque, void* addr )
358,362c358
< void* default_bzalloc ( void* opaque, Int32 items, Int32 size )
< ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc ( void* opaque, Int32 itemsopaque, void* addr )
(94.9 %, 10372 bytes)
358,361c358
< void* default_bzalloc ;
< 
< static
< void default_bzfree ( void* opaque, void* addr )
---
> void* default_bzalloc addr )
360,361c360
< static
< void default_bzfree ( void* opaque, void* addr )
---
> )
361d360
< void default_bzfree ( void* opaque, void* addr )
361,377c361
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void int BZ_API(BZ2_bzCompressInit) 
361,377c361
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void default_bzfree BZ_API(BZ2_bzCompressInit) 
361,377c361
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void default_bzfree ( (BZ2_bzCompressInit) 
361,377c361
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void default_bzfree ( voidBZ2_bzCompressInit) 
361,377c361
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> void default_bzfree ( void* ) 
361,378c361
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree ( void* opaque( bz_stream* strm, 
361,378c361
< void default_bzfree ( void* opaque, void* addr )
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> void default_bzfree ( void* opaque, bz_stream* strm, 
(95.0 %, 10323 bytes)
361,378c361
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int        blockSize100k,
376,378c376
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> blockSize100k,
376,378c376
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int ,
376,379c376
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_APIint        verbosity,
376,379c376
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_API(verbosity,
376,379c376
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
> int BZ_API(BZ2_bzCompressInit,
377,380c377
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     int        workFactor )
377,380c377
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( workFactor )
377,380c377
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( bz_stream)
377,381c377
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
---
>                     ( bz_stream* {
377,382c377
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                     ( bz_stream* strmInt32   n;
378,382c378
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                      n;
378,382c378
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        ;
378,383c378
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        blockSize100kEState* s;
379,383c379
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      * s;
379,383c379
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        s;
379,383c379
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        verbosity;
380,385c380
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>                      if (!1 || blockSize100k > 9 ||
380,385c380
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>                      int        (!1 || blockSize100k > 9 ||
380,385c380
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>                      int        workFactor !1 || blockSize100k > 9 ||
381,385c381
< {
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
> 1 || blockSize100k > 9 ||
382,385c382
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>    || blockSize100k > 9 ||
382,385c382
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>    Int32   blockSize100k > 9 ||
382,385c382
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>    Int32   n> 9 ||
383,385c383
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>    9 ||
383,385c383
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
---
>    EState||
383,386c383
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EState* workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
383,386c383
<    EState* s;
< 
<    if (!1 || blockSize100k > 9 ||
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    EState* s== sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
385,386c385
<    if (!1 || blockSize100k > 9 ||
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
385,386c385
<    if (!1 || blockSize100k > 9 ||
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    if (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
385,386c385
<    if (!1 || blockSize100k > 9 ||
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    if (n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
385,386c385
<    if (!1 || blockSize100k > 9 ||
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    if (!+BZ_N_OVERSHOOT) * sizeof(UInt32) );
385,386c385
<    if (!1 || blockSize100k > 9 ||
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    if (!1 BZ_N_OVERSHOOT) * sizeof(UInt32) );
385,386c385
<    if (!1 || blockSize100k > 9 ||
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    if (!1 || ) * sizeof(UInt32) );
385,386c385
<    if (!1 || blockSize100k > 9 ||
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    if (!1 || blockSize100k * sizeof(UInt32) );
385,386c385
<    if (!1 || blockSize100k > 9 ||
<        workFactor == sizeof(n+BZ_N_OVERSHOOT) * sizeof(UInt32) );
---
>    if (!1 || blockSize100k > sizeof(UInt32) );
(95.0 %, 10270 bytes)
385,388c385
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    if (!1 || blockSize100k ->ftab == NULL) 
385,388c385
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    if (!1 || blockSize100k * ftab == NULL) 
385,388c385
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    if (!1 || blockSize100k * sizeof== NULL) 
385,388c385
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    if (!1 || blockSize100k * sizeof(NULL) 
385,388c385
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
---
>    if (!1 || blockSize100k * sizeof(UInt32) 
385,390c385
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
< 
<    s->zbits             = NULL;
---
>    if (!1 || blockSize100k * sizeof(UInt32) s->zbits             = NULL;
385,390c385
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
< 
<    if (s->ftab == NULL) 
< 
<    s->zbits             = NULL;
---
>    if (!1 || blockSize100k * sizeof(UInt32) )->zbits             = NULL;
386,390c386
<    ;
< 
<    if (s->ftab == NULL) 
< 
<    s->zbits             = NULL;
---
>    zbits             = NULL;
388,390c388
<    if (s->ftab == NULL) 
< 
<    s->zbits             = NULL;
---
>    = NULL;
388,390c388
<    if (s->ftab == NULL) 
< 
<    s->zbits             = NULL;
---
>    if NULL;
388,390c388
<    if (s->ftab == NULL) 
< 
<    s->zbits             = NULL;
---
>    if (;
388,391c388
<    if (s->ftab == NULL) 
< 
<    s->zbits             = NULL;
<    strm->total_in_hi32  = 0;
---
>    if (sstrm->total_in_hi32  = 0;
388,391c388
<    if (s->ftab == NULL) 
< 
<    s->zbits             = NULL;
<    strm->total_in_hi32  = 0;
---
>    if (s->->total_in_hi32  = 0;
388,391c388
<    if (s->ftab == NULL) 
< 
<    s->zbits             = NULL;
<    strm->total_in_hi32  = 0;
---
>    if (s->ftab total_in_hi32  = 0;
388,391c388
<    if (s->ftab == NULL) 
< 
<    s->zbits             = NULL;
<    strm->total_in_hi32  = 0;
---
>    if (s->ftab == = 0;
388,391c388
<    if (s->ftab == NULL) 
< 
<    s->zbits             = NULL;
<    strm->total_in_hi32  = 0;
---
>    if (s->ftab == NULL0;
390,391c390
<    s->zbits             = NULL;
<    strm->total_in_hi32  = 0;
---
>    ;
(95.0 %, 10224 bytes)
388,391c388
<    if NULL;
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
---
>    if ;
388,392c388
<    if NULL;
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
---
>    if NULL}
389,404c389
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
389,404c389
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    strmdefine ADD_CHAR_TO_BLOCK(zs,zchh0)               \
389,404c389
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    strm->ADD_CHAR_TO_BLOCK(zs,zchh0)               \
389,404c389
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    strm->total_in_hi32  (zs,zchh0)               \
389,404c389
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    strm->total_in_hi32  = zs,zchh0)               \
389,404c389
<    strm->total_in_hi32  = 0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    strm->total_in_hi32  = 0,zchh0)               \
390,404c390
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    zchh0)               \
391,404c391
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    )               \
391,404c391
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
---
>    return \
391,421c391
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return BZ_OKint BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
392,421c392
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
404,421c404
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> (BZ2_bzCompress) ( bz_stream *strm, int action )
404,421c404
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #BZ2_bzCompress) ( bz_stream *strm, int action )
404,421c404
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ) ( bz_stream *strm, int action )
404,421c404
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK( bz_stream *strm, int action )
404,421c404
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(bz_stream *strm, int action )
404,421c404
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs*strm, int action )
404,421c404
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,strm, int action )
404,421c404
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,zchh0, int action )
404,421c404
< #define ADD_CHAR_TO_BLOCK(zs,zchh0)               \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> #define ADD_CHAR_TO_BLOCK(zs,zchh0)               int action )
421c421
< int BZ_API(BZ2_bzCompress) ( bz_stream *strm, int action )
---
> action )
(95.0 %, 10146 bytes)
404d403
< (BZ2_bzCompress) ( bz_stream *strm, int action )
404,407c404
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> (EState* s;
404,407c404
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> (BZ2_bzCompress* s;
404,407c404
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> (BZ2_bzCompress) s;
404,407c404
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
---
> (BZ2_bzCompress) ( ;
404,408c404
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm) return BZ_PARAM_ERROR;
---
> (BZ2_bzCompress) ( bz_stream if (strm) return BZ_PARAM_ERROR;
404,408c404
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm) return BZ_PARAM_ERROR;
---
> (BZ2_bzCompress) ( bz_stream *(strm) return BZ_PARAM_ERROR;
404,408c404
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm) return BZ_PARAM_ERROR;
---
> (BZ2_bzCompress) ( bz_stream *strmstrm) return BZ_PARAM_ERROR;
404,408c404
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm) return BZ_PARAM_ERROR;
---
> (BZ2_bzCompress) ( bz_stream *strm, ) return BZ_PARAM_ERROR;
404,408c404
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm) return BZ_PARAM_ERROR;
---
> (BZ2_bzCompress) ( bz_stream *strm, int return BZ_PARAM_ERROR;
404,408c404
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    EState* s;
<    if (strm) return BZ_PARAM_ERROR;
---
> (BZ2_bzCompress) ( bz_stream *strm, int action BZ_PARAM_ERROR;
405,408c405
< {
<    
<    EState* s;
<    if (strm) return BZ_PARAM_ERROR;
---
> ;
407,409d406
<    EState* s;
<    if (strm) return BZ_PARAM_ERROR;
< 
407,412c407
<    EState* s;
<    if (strm) return BZ_PARAM_ERROR;
< 
<    ;
< 
<    strm->state = NULL;   
---
>    EStatestrm->state = NULL;   
407,412c407
<    EState* s;
<    if (strm) return BZ_PARAM_ERROR;
< 
<    ;
< 
<    strm->state = NULL;   
---
>    EState* ->state = NULL;   
407,412c407
<    EState* s;
<    if (strm) return BZ_PARAM_ERROR;
< 
<    ;
< 
<    strm->state = NULL;   
---
>    EState* sstate = NULL;   
(95.1 %, 10095 bytes)
407,420c407
<    ;
< 
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    int BZ_API(BZ2_bzDecompressInit) 
409,420c409
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZ_API(BZ2_bzDecompressInit) 
409,420c409
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    strm(BZ2_bzDecompressInit) 
409,420c409
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    strm->BZ2_bzDecompressInit) 
409,420c409
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    strm->state ) 
409,421c409
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->state = ( bz_stream* strm, 
409,421c409
<    strm->state = NULL;   
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    strm->state = NULLbz_stream* strm, 
411,421c411
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    * strm, 
411,421c411
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    return strm, 
411,421c411
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    return BZ_OK, 
412,422c412
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int        verbosity,
420,422c420
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> verbosity,
420,422c420
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int ,
420,423c420
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_APIint        small )
420,423c420
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API(small )
420,423c420
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
> int BZ_API(BZ2_bzDecompressInit)
421,424c421
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
---
>                      {
421,425c421
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( DState* s;
421,425c421
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_stream* s;
421,425c421
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_stream* s;
421,425c421
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                      ( bz_stream* strm;
422,427c422
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    strm->bzalloc = default_bzalloc;
---
>                        strm->bzalloc = default_bzalloc;
422,427c422
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    strm->bzalloc = default_bzalloc;
---
>                        int        ->bzalloc = default_bzalloc;
422,427c422
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
< 
<    strm->bzalloc = default_bzalloc;
---
>                        int        verbositybzalloc = default_bzalloc;
423,427c423
<                        int        small )
< {
<    DState* s;
< 
<    strm->bzalloc = default_bzalloc;
---
>                        = default_bzalloc;
423,427c423
<                        int        small )
< {
<    DState* s;
< 
<    strm->bzalloc = default_bzalloc;
---
>                        int        default_bzalloc;
423,427c423
<                        int        small )
< {
<    DState* s;
< 
<    strm->bzalloc = default_bzalloc;
---
>                        int        small ;
424,428c424
< {
<    DState* s;
< 
<    strm->bzalloc = default_bzalloc;
<    ;
---
> ;
425,429d424
<    DState* s;
< 
<    strm->bzalloc = default_bzalloc;
<    ;
< 
425,430c425
<    DState* s;
< 
<    strm->bzalloc = default_bzalloc;
<    ;
< 
<    s = verbosity;
---
>    DState= verbosity;
425,430c425
<    DState* s;
< 
<    strm->bzalloc = default_bzalloc;
<    ;
< 
<    s = verbosity;
---
>    DState* verbosity;
427,431d426
<    strm->bzalloc = default_bzalloc;
<    ;
< 
<    s = verbosity;
< 
427,431d426
<    strm->bzalloc = default_bzalloc;
<    ;
< 
<    s = verbosity;
< 
(95.1 %, 10034 bytes)
427,433d426
<    ;
< 
<    return BZ_PARAM_ERROR;
< 
<    ;
<    strm->state = NULL;
< 
427,433d426
<    ;
< 
<    return BZ_PARAM_ERROR;
< 
<    ;
<    strm->state = NULL;
< 
(95.1 %, 9972 bytes)
425,435c425
<    DState* s;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    DState* s\
427,438c427
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
---
>    typedef 
427,439c427
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
>    return struct {
427,439c427
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
>    return BZ_OK{
428,440c428
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> FILE*     handle;
435,440c435
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> *     handle;
435,440c435
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #handle;
435,440c435
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define ;
435,441c435
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERRChar      buf[BZ_MAX_UNUSED];
435,441c435
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(buf[BZ_MAX_UNUSED];
435,441c435
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eee[BZ_MAX_UNUSED];
435,441c435
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> #define BZ_SETERR(eee)                    BZ_MAX_UNUSED];
438,441c438
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> ];
439,441c439
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>    ;
439,442c439
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>    struct Int32     bufN;
440,442c440
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       bufN;
440,442c440
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       FILE;
440,443c440
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILE*     Bool      writing;
440,443c440
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       FILE*     handlewriting;
441,443c441
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       ;
441,444c441
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      bz_stream strm;
441,444c441
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      bufstrm;
441,444c441
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      buf[;
441,445c441
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf[BZ_MAX_UNUSEDInt32     lastErr;
441,445c441
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      buf[BZ_MAX_UNUSED]lastErr;
442,445c442
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       ;
442,446c442
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     Bool      initialisedOk;
442,446c442
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Int32     bufNinitialisedOk;
443,446c443
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       ;
443,447c443
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       Bool      }
443,448c443
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Bool      writingbzFile;
444,448c444
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       ;
444,456c444
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream BZFILE* BZ_API(BZ2_bzWriteOpen) 
444,456c444
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strm* BZ_API(BZ2_bzWriteOpen) 
445,456c445
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZ_API(BZ2_bzWriteOpen) 
445,456c445
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     (BZ2_bzWriteOpen) 
445,456c445
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     lastErrBZ2_bzWriteOpen) 
446,456c446
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       ) 
446,457c446
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      ( int*  bzerror,      
446,457c446
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>       Bool      initialisedOkint*  bzerror,      
447,457c447
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    *  bzerror,      
448,457c448
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzerror,      
448,457c448
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzFile,      
456,458c456
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> FILE* f, 
456,458c456
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* f, 
456,458c456
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* f, 
456,458c456
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API, 
456,459c456
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(int   blockSize100k, 
456,459c456
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenblockSize100k, 
457,459c457
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     , 
457,460c457
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int   verbosity,
457,460c457
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( intverbosity,
457,460c457
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                     ( int*  ,
457,461c457
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     ( int*  bzerrorint   workFactor )
458,461c458
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       workFactor )
458,461c458
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE)
458,462c458
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       FILE* {
458,463c458
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       FILE* fInt32   ret;
459,463c459
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       ret;
459,463c459
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   ;
459,464c459
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   blockSize100kbzFile* bzf = NULL;
460,464c460
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       * bzf = NULL;
460,464c460
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   bzf = NULL;
460,464c460
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   verbosity= NULL;
461,464c461
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       NULL;
461,464c461
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
---
>                       int   ;
461,466c461
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>                       int   workFactor BZ_SETERR(BZ_OK);
462,466c462
< {
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
> (BZ_OK);
463,466c463
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
463,466c463
<    Int32   ret;
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
---
>    Int32   );
464,466d463
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
464,467d463
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
464,468c464
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f )bzf->handle        = f;
---
>    bzFile(f )bzf->handle        = f;
464,468c464
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f )bzf->handle        = f;
---
>    bzFile* f )bzf->handle        = f;
464,468c464
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f )bzf->handle        = f;
---
>    bzFile* bzf )bzf->handle        = f;
464,468c464
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f )bzf->handle        = f;
---
>    bzFile* bzf = bzf->handle        = f;
464,468c464
<    bzFile* bzf = NULL;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f )bzf->handle        = f;
---
>    bzFile* bzf = NULL->handle        = f;
466,468c466
<    BZ_SETERR(BZ_OK);
< 
<    if (f )bzf->handle        = f;
---
>    handle        = f;
466,468c466
<    BZ_SETERR(BZ_OK);
< 
<    if (f )bzf->handle        = f;
---
>    BZ_SETERR= f;
466,468c466
<    BZ_SETERR(BZ_OK);
< 
<    if (f )bzf->handle        = f;
---
>    BZ_SETERR(f;
466,468c466
<    BZ_SETERR(BZ_OK);
< 
<    if (f )bzf->handle        = f;
---
>    BZ_SETERR(BZ_OK;
467,469d466
< 
<    if (f )bzf->handle        = f;
<    ;
(95.2 %, 9933 bytes)
464,467c464
<    bzFile* bzf = bzf->handle        = f;
<    ;
<    bzf= bzf;   
< }
---
>    bzFile* bzf = }
464,472c464
<    bzFile* bzf = bzf->handle        = f;
<    ;
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFile* bzf = bzfvoid BZ_API(BZ2_bzWrite)
464,472c464
<    bzFile* bzf = bzf->handle        = f;
<    ;
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFile* bzf = bzf->BZ_API(BZ2_bzWrite)
464,472c464
<    bzFile* bzf = bzf->handle        = f;
<    ;
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFile* bzf = bzf->handle        (BZ2_bzWrite)
464,472c464
<    bzFile* bzf = bzf->handle        = f;
<    ;
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFile* bzf = bzf->handle        = BZ2_bzWrite)
464,472c464
<    bzFile* bzf = bzf->handle        = f;
<    ;
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFile* bzf = bzf->handle        = f)
465,473c465
<    ;
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    ( int*    bzerror, 
466,473c466
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    int*    bzerror, 
466,473c466
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf*    bzerror, 
466,473c466
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf= bzerror, 
466,473c466
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf= bzf, 
467,474c467
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> BZFILE* b, 
472,474c472
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> * b, 
472,474c472
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void b, 
472,474c472
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API, 
472,475c472
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(void*   buf, 
472,475c472
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
> void BZ_API(BZ2_bzWrite*   buf, 
473,475c473
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              buf, 
473,475c473
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( , 
473,476c473
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( intint     len )
473,476c473
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    len )
473,476c473
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>              ( int*    bzerror)
474,477c474
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
---
>                {
474,478c474
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                BZFILEInt32   ret;
474,478c474
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                BZFILE* ret;
474,478c474
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                BZFILE* b;
475,479c475
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>                bzFile* bzf = ((bzf->handle))
475,479c475
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>                void* bzf = ((bzf->handle))
475,479c475
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>                void*   bzf = ((bzf->handle))
475,479c475
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>                void*   buf= ((bzf->handle))
476,479c476
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>                ((bzf->handle))
476,479c476
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>                int     (bzf->handle))
476,479c476
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>                int     len bzf->handle))
477,479c477
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
> ->handle))
478,479c478
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>    handle))
478,479c478
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>    Int32   ))
478,479c478
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>    Int32   ret)
479,480c479
<    bzFile* bzf = ((bzf->handle))
<       ;
---
>    ;
479,482c479
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
---
>    bzFilelen;
479,482c479
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
---
>    bzFile* ;
479,483c479
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
---
>    bzFile* bzf {
479,484c479
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
<       bzfif (bzf->strm.avail_in == 0)
---
>    bzFile* bzf = bzfif (bzf->strm.avail_in == 0)
479,484c479
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
<       bzfif (bzf->strm.avail_in == 0)
---
>    bzFile* bzf = ((bzf->strm.avail_in == 0)
479,484c479
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
<       bzfif (bzf->strm.avail_in == 0)
---
>    bzFile* bzf = ((bzf->strm.avail_in == 0)
479,484c479
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
<       bzfif (bzf->strm.avail_in == 0)
---
>    bzFile* bzf = ((bzf->strm.avail_in == 0)
479,484c479
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
<       bzfif (bzf->strm.avail_in == 0)
---
>    bzFile* bzf = ((bzf->strm.avail_in == 0)
479,484c479
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
<       bzfif (bzf->strm.avail_in == 0)
---
>    bzFile* bzf = ((bzf->handle.avail_in == 0)
479,484c479
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
<       bzfif (bzf->strm.avail_in == 0)
---
>    bzFile* bzf = ((bzf->handle)avail_in == 0)
480,484c480
<       ;
< 
<    len;
<    {
<       bzfif (bzf->strm.avail_in == 0)
---
>       == 0)
482,484c482
<    len;
<    {
<       bzfif (bzf->strm.avail_in == 0)
---
>    0)
482,484c482
<    len;
<    {
<       bzfif (bzf->strm.avail_in == 0)
---
>    len)
483,485c483
<    {
<       bzfif (bzf->strm.avail_in == 0)
<          ;
---
>    ;
484,486c484
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
---
>       }
484,487c484
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
---
>       bzfif }
484,491c484
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzfif (void BZ_API(BZ2_bzWriteClose)
484,491c484
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzfif (bzfBZ_API(BZ2_bzWriteClose)
484,491c484
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzfif (bzf->(BZ2_bzWriteClose)
484,491c484
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzfif (bzf->strmBZ2_bzWriteClose)
484,491c484
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       bzfif (bzf->strm.)
484,492c484
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzfif (bzf->strm.avail_in ( int*          bzerror, 
484,492c484
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzfif (bzf->strm.avail_in == int*          bzerror, 
484,492c484
<       bzfif (bzf->strm.avail_in == 0)
<          ;
<    }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       bzfif (bzf->strm.avail_in == 0*          bzerror, 
(95.2 %, 9887 bytes)
484,490c484
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       , 
485,491c485
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> BZFILE*       b, 
489,491c489
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
489,491c489
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void b, 
489,491c489
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API, 
489,492c489
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(int           abandon,
489,492c489
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(BZ2_bzWriteCloseabandon,
490,492c490
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ,
490,493c490
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( unsigned int* nbytes_in,
490,493c490
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( intint* nbytes_in,
490,493c490
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          * nbytes_in,
490,493c490
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                   ( int*          bzerrornbytes_in,
491,493c491
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     ,
491,494c491
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILEunsigned int* nbytes_out )
491,494c491
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       int* nbytes_out )
491,494c491
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     BZFILE*       b* nbytes_out )
492,494c492
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     nbytes_out )
492,494c492
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           )
492,495c492
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     int           abandon{
493,496c493
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     BZ2_bzWriteClose64 ( bzerror, b, abandon, 
493,496c493
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned ( bzerror, b, abandon, 
493,496c493
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned intbzerror, b, abandon, 
493,496c493
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* , b, abandon, 
493,496c493
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* nbytes_inb, abandon, 
494,496c494
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     , abandon, 
494,496c494
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned abandon, 
494,496c494
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int, 
494,497c494
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int* nbytes_in, NULL, nbytes_out, NULL );
494,497c494
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                     unsigned int* nbytes_out , NULL, nbytes_out, NULL );
495,497c495
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
> NULL, nbytes_out, NULL );
496,497c496
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    , nbytes_out, NULL );
496,497c496
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 nbytes_out, NULL );
496,497c496
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( , NULL );
496,497c496
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerrorNULL );
496,497c496
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, );
496,497c496
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, b;
496,498c496
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
>    BZ2_bzWriteClose64 ( bzerror, b, }
496,501c496
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>    BZ2_bzWriteClose64 ( bzerror, b, abandonvoid BZ_API(BZ2_bzWriteClose64)
497,501c497
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         BZ_API(BZ2_bzWriteClose64)
497,501c497
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in(BZ2_bzWriteClose64)
497,501c497
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, BZ2_bzWriteClose64)
497,501c497
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL)
497,502c497
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, ( int*          bzerror, 
497,502c497
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, nbytes_outint*          bzerror, 
497,502c497
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, nbytes_out, *          bzerror, 
497,502c497
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, nbytes_out, NULL bzerror, 
497,502c497
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, nbytes_out, NULL ), 
498,503c498
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> BZFILE*       b, 
501,503c501
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> *       b, 
501,503c501
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void b, 
501,503c501
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API, 
501,504c501
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(int           abandon,
501,504c501
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
> void BZ_API(BZ2_bzWriteClose64abandon,
502,504c502
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ,
502,505c502
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( unsigned int* nbytes_in_lo32,
502,505c502
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( intint* nbytes_in_lo32,
502,505c502
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          * nbytes_in_lo32,
502,505c502
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                   ( int*          bzerrornbytes_in_lo32,
503,505c503
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     ,
503,506c503
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILEunsigned int* nbytes_in_hi32,
503,506c503
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       int* nbytes_in_hi32,
503,506c503
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     BZFILE*       b* nbytes_in_hi32,
504,506c504
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     nbytes_in_hi32,
504,506c504
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           ,
504,507c504
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int           abandonunsigned int* nbytes_out_lo32,
505,507c505
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int* nbytes_out_lo32,
505,507c505
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
505,507c505
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intnbytes_out_lo32,
505,507c505
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* ,
505,508c505
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_lo32unsigned int* nbytes_out_hi32 )
506,508c506
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     int* nbytes_out_hi32 )
506,508c506
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
506,508c506
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intnbytes_out_hi32 )
506,508c506
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* )
506,509c506
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int* nbytes_in_hi32{
507,511c507
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     bzFile* bzf ;
507,511c507
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned * bzf ;
507,511c507
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned intbzf ;
507,511c507
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned int* ;
507,512c507
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>                     unsigned int* nbytes_out_lo32if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
508,512c508
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>                     (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
508,512c508
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>                     unsigned !(bzf)!= NULL) *nbytes_out_hi32 = 0;
508,512c508
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>                     unsigned int(bzf)!= NULL) *nbytes_out_hi32 = 0;
508,512c508
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>                     unsigned int* bzf)!= NULL) *nbytes_out_hi32 = 0;
508,512c508
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>                     unsigned int* nbytes_out_hi32 )!= NULL) *nbytes_out_hi32 = 0;
509,512c509
< {
<    
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
> != NULL) *nbytes_out_hi32 = 0;
511,512c511
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    NULL) *nbytes_out_hi32 = 0;
511,512c511
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    bzFile) *nbytes_out_hi32 = 0;
511,512c511
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    bzFile* *nbytes_out_hi32 = 0;
511,512c511
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    bzFile* bzf nbytes_out_hi32 = 0;
512c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    = 0;
512c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    if 0;
512c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    if (;
512,514c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
---
>    if (!;
512,515c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
---
>    if (!(0;
512,515c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
---
>    if (!(bzf;
512,516c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
<    0;
---
>    if (!(bzf)0;
512,516c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
<    0;
---
>    if (!(bzf)!= ;
512,517c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
<    0;
< }
---
>    if (!(bzf)!= NULL}
512,521c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (!(bzf)!= NULL) BZFILE* BZ_API(BZ2_bzReadOpen) 
512,521c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (!(bzf)!= NULL) ** BZ_API(BZ2_bzReadOpen) 
512,521c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (!(bzf)!= NULL) *nbytes_out_hi32 BZ_API(BZ2_bzReadOpen) 
512,521c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (!(bzf)!= NULL) *nbytes_out_hi32 = (BZ2_bzReadOpen) 
512,521c512
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0BZ2_bzReadOpen) 
514,521c514
<    ;
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    ) 
515,522c515
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    ( int*  bzerror, 
515,522c515
<    0;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    0int*  bzerror, 
516,522c516
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    *  bzerror, 
516,522c516
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
>    0bzerror, 
517,522c517
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> , 
521,523c521
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> FILE* f, 
521,523c521
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* f, 
521,523c521
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* f, 
521,523c521
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API, 
521,524c521
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(int   verbosity,
521,524c521
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
> BZFILE* BZ_API(BZ2_bzReadOpenverbosity,
522,524c522
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ,
522,525c522
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int   small,
522,525c522
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( intsmall,
522,525c522
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                    ( int*  ,
522,526c522
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                    ( int*  bzerrorvoid* unused,
523,526c523
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      * unused,
523,526c523
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILEunused,
523,526c523
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* ,
523,527c523
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      FILE* fint   nUnused )
524,527c524
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      nUnused )
524,527c524
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   )
524,528c524
<                      int   verbosity,
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
---
>                      int   verbosity{
525,529c525
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      bzFile* bzf = NULL;
525,529c525
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   * bzf = NULL;
525,529c525
<                      int   small,
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      int   smallbzf = NULL;
526,529c526
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      = NULL;
526,529c526
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      voidNULL;
526,529c526
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
---
>                      void* ;
526,530c526
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      void* unusedint     ret;
527,530c527
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      ret;
527,530c527
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
---
>                      int   ;
527,532c527
<                      int   nUnused )
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>                      int   nUnused BZ_SETERR(BZ_OK);
528,532c528
< {
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
> (BZ_OK);
529,532c529
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    BZ_OK);
529,532c529
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile);
529,532c529
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
---
>    bzFile* ;
529,534c529
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
---
>    bzFile* bzf if (f ||
529,534c529
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
---
>    bzFile* bzf = (f ||
529,534c529
<    bzFile* bzf = NULL;
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
---
>    bzFile* bzf = NULLf ||
530,534c530
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
---
>    ||
530,535c530
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    int     ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
530,535c530
<    int     ret;
< 
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    int     ret(nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
532,535c532
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
532,535c532
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    BZ_SETERR< 0 || nUnused > BZ_MAX_UNUSED)))
532,535c532
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    BZ_SETERR(0 || nUnused > BZ_MAX_UNUSED)))
532,535c532
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    BZ_SETERR(BZ_OK|| nUnused > BZ_MAX_UNUSED)))
532,535c532
<    BZ_SETERR(BZ_OK);
< 
<    if (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    BZ_SETERR(BZ_OK)nUnused > BZ_MAX_UNUSED)))
(95.2 %, 9836 bytes)
529,530c529
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf = BZ_MAX_UNUSED)))
529,530c529
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf = ()))
529,530c529
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf = (f ))
530c530
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        )
530,531c530
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
---
>        (;
530,533c530
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->bufN          = 0;
---
>        ((if (ferror)bzf->bufN          = 0;
530,533c530
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->bufN          = 0;
---
>        ((nUnused (ferror)bzf->bufN          = 0;
530,533c530
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->bufN          = 0;
---
>        ((nUnused < ferror)bzf->bufN          = 0;
530,533c530
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->bufN          = 0;
---
>        ((nUnused < 0 )bzf->bufN          = 0;
530,533c530
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->bufN          = 0;
---
>        ((nUnused < 0 || bzf->bufN          = 0;
530,533c530
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->bufN          = 0;
---
>        ((nUnused < 0 || nUnused ->bufN          = 0;
530,533c530
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->bufN          = 0;
---
>        ((nUnused < 0 || nUnused > bufN          = 0;
530,533c530
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->bufN          = 0;
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED= 0;
530,533c530
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->bufN          = 0;
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)0;
530,533c530
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;
< 
<    if (ferror)bzf->bufN          = 0;
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED));
532,534d531
< 
<    if (ferror)bzf->bufN          = 0;
<    ;
533,534d532
<    if (ferror)bzf->bufN          = 0;
<    ;
(95.2 %, 9792 bytes)
531,535c531
<       ;
<    bzf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
---
>       ;   
532,536c532
<    bzf;
< 
<    bzf->initialisedOk = True;
<    return bzf;   
< }
---
>    }
(95.2 %, 9738 bytes)
531,536c531
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       , BZFILE *b )
532,536c532
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> BZFILE *b )
536c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> *b )
536c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void b )
536c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API)
536,537c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
---
> void BZ_API({
536,538c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClosebzFile* bzf = (bzFile*)bif (bzf->writing)
536,538c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) * bzf = (bzFile*)bif (bzf->writing)
536,538c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( bzf = (bzFile*)bif (bzf->writing)
536,538c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int = (bzFile*)bif (bzf->writing)
536,538c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int *(bzFile*)bif (bzf->writing)
536,538c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerrorbzFile*)bif (bzf->writing)
536,538c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, *)bif (bzf->writing)
536,538c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE )bif (bzf->writing)
536,538c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *bif (bzf->writing)
536,538c536
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b (bzf->writing)
537,538c537
< {
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
> bzf->writing)
538c538
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
>    ->writing)
538c538
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
>    bzFilewriting)
538c538
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
---
>    bzFile* )
538,539c538
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
---
>    bzFile* bzf ;
538,540c538
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
---
>    bzFile* bzf = }
538,544c538
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = (int BZ_API(BZ2_bzRead) 
538,544c538
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = (bzFileBZ_API(BZ2_bzRead) 
538,544c538
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = (bzFile*(BZ2_bzRead) 
538,544c538
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = (bzFile*)BZ2_bzRead) 
538,544c538
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf = (bzFile*)bif ) 
538,545c538
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)bif (( int*    bzerror, 
538,545c538
<    bzFile* bzf = (bzFile*)bif (bzf->writing)
<       ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf = (bzFile*)bif (bzfint*    bzerror, 
(95.3 %, 9702 bytes)
538,544c538
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf , 
539,545c539
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> BZFILE* b, 
543,545c543
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> * b, 
543,545c543
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int b, 
543,545c543
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API, 
543,546c543
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(void*   buf, 
543,546c543
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
> int BZ_API(BZ2_bzRead*   buf, 
544,546c544
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            buf, 
544,546c544
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( , 
544,547c544
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( intint     len )
544,547c544
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    len )
544,547c544
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>            ( int*    bzerror)
545,548c545
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
---
>              {
545,550c545
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILEbzFile* bzf = (bzFile*)b;
545,550c545
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* * bzf = (bzFile*)b;
545,550c545
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              BZFILE* bbzf = (bzFile*)b;
546,550c546
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              = (bzFile*)b;
546,550c546
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void(bzFile*)b;
546,550c546
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   bzFile*)b;
546,550c546
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   buf*)b;
547,550c547
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              )b;
547,550c547
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              int     b;
547,550c547
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              int     len ;
548,552c548
< {
<    
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
> BZ_SETERR(len len == 0)
550,552c550
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    (len len == 0)
550,552c550
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFilelen len == 0)
550,552c550
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* len == 0)
550,552c550
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf == 0)
550,552c550
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf = 0)
550,552c550
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf = ()
550,553c550
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
<       ;
---
>    bzFile* bzf = (bzFile;
550,555c550
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    bzFile* bzf = (bzFile*bzf->strm.avail_out = len;
550,555c550
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    bzFile* bzf = (bzFile*)->strm.avail_out = len;
550,555c550
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    bzFile* bzf = (bzFile*)bstrm.avail_out = len;
552,555c552
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    .avail_out = len;
552,555c552
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    BZ_SETERRavail_out = len;
552,555c552
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    BZ_SETERR(= len;
552,555c552
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    BZ_SETERR(len len;
552,555c552
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
---
>    BZ_SETERR(len len ;
552,556c552
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    0; 
---
>    BZ_SETERR(len len == 0; 
552,556c552
<    BZ_SETERR(len len == 0)
<       ;
< 
<    bzf->strm.avail_out = len;
<    0; 
---
>    BZ_SETERR(len len == 0; 
553,557c553
<       ;
< 
<    bzf->strm.avail_out = len;
<    0; 
< }
---
>       }
555,561c555
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    void BZ_API(BZ2_bzReadGetUnused) 
555,561c555
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzfBZ_API(BZ2_bzReadGetUnused) 
555,561c555
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzf->(BZ2_bzReadGetUnused) 
555,561c555
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzf->strmBZ2_bzReadGetUnused) 
555,561c555
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzf->strm.) 
555,562c555
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzf->strm.avail_out ( int*    bzerror, 
555,562c555
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzf->strm.avail_out = int*    bzerror, 
555,562c555
<    bzf->strm.avail_out = len;
<    0; 
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    bzf->strm.avail_out = len*    bzerror, 
(95.3 %, 9662 bytes)
553,559c553
<       }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>       BZFILE* b, 
557,559c557
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> * b, 
557,559c557
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void b, 
557,559c557
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API, 
557,560c557
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(void**  unused, 
557,560c557
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
> void BZ_API(BZ2_bzReadGetUnused**  unused, 
558,560c558
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      *  unused, 
558,560c558
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( unused, 
558,560c558
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int, 
558,561c558
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    int*    nUnused )
558,561c558
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      ( int*    bzerror*    nUnused )
559,561c559
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        nUnused )
559,561c559
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE)
559,562c559
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        BZFILE* {
559,563c559
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf ;
---
>                        BZFILE* bbzFile* bzf ;
560,563c560
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf ;
---
>                        * bzf ;
560,563c560
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf ;
---
>                        voidbzf ;
560,563c560
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf ;
---
>                        void*;
560,564c560
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
---
>                        void**  if (nUnused == NULL)
560,564c560
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
---
>                        void**  unused(nUnused == NULL)
561,564c561
<                        int*    nUnused )
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
---
>                        nUnused == NULL)
561,564c561
<                        int*    nUnused )
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
---
>                        int== NULL)
561,564c561
<                        int*    nUnused )
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
---
>                        int*    NULL)
562,564d561
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
562,565c562
< {
<    bzFile* bzf ;
<    if (nUnused == NULL)
<       ;
---
> ;
563,566d562
<    bzFile* bzf ;
<    if (nUnused == NULL)
<       ;
< 
563,568c563
<    bzFile* bzf ;
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
---
>    bzFile*unused = bzf->strm.next_in;
563,568c563
<    bzFile* bzf ;
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
---
>    bzFile* unused = bzf->strm.next_in;
563,568c563
<    bzFile* bzf ;
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
---
>    bzFile* bzf = bzf->strm.next_in;
564,568c564
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
---
>    bzf->strm.next_in;
564,568c564
<    if (nUnused == NULL)
<       ;
< 
<    ;
<    *unused = bzf->strm.next_in;
---
>    if ->strm.next_in;
(95.3 %, 9611 bytes)
563,572c563
<    bzFile* bzf = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    bzFile* bzf BZ2_bzBuffToBuffCompress) 
563,572c563
<    bzFile* bzf = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    bzFile* bzf = ) 
563,573c563
<    bzFile* bzf = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    bzFile* bzf = bzf( char*         dest, 
563,573c563
<    bzFile* bzf = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    bzFile* bzf = bzf->char*         dest, 
563,573c563
<    bzFile* bzf = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    bzFile* bzf = bzf->strm*         dest, 
563,573c563
<    bzFile* bzf = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    bzFile* bzf = bzf->strm.dest, 
563,573c563
<    bzFile* bzf = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    bzFile* bzf = bzf->strm.next_in, 
564,574c564
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> unsigned int* destLen,
572,574c572
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int* destLen,
572,574c572
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int * destLen,
572,574c572
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_APIdestLen,
572,574c572
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(,
572,575c572
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffCompresschar*         source, 
573,575c573
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          *         source, 
573,575c573
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( source, 
573,575c573
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char, 
573,576c573
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         unsigned int  sourceLen,
573,576c573
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                          ( char*         destint  sourceLen,
574,576c574
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            sourceLen,
574,576c574
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned ,
574,577c574
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned intint           blockSize100k, 
574,577c574
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* blockSize100k, 
574,577c574
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int* destLen, 
575,577d574
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
575,578c575
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            charverbosity, 
575,578c575
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         , 
575,579c575
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            char*         sourceint           workFactor )
576,579c576
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            workFactor )
576,579c576
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned )
576,580c576
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            unsigned int  {
576,581c576
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            unsigned int  sourceLenbz_stream strm;
577,581c577
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            strm;
577,581c577
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           ;
577,582c577
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           blockSize100kint ret;
578,582c578
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            ret;
578,582c578
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           ;
578,584c578
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
---
>                            int           verbosityif (verbosity > 4 ||
579,584c579
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
---
>                            (verbosity > 4 ||
579,584c579
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
---
>                            int           verbosity > 4 ||
579,584c579
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
---
>                            int           workFactor > 4 ||
580,584c580
< {
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
---
> 4 ||
581,584c581
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
---
>    ||
581,585c581
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    bz_stream workFactor == 0) workFactor = source;
581,585c581
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    bz_stream strm== 0) workFactor = source;
582,585c582
<    int ret;
< 
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    0) workFactor = source;
582,585c582
<    int ret;
< 
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    int ) workFactor = source;
582,585c582
<    int ret;
< 
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    int retworkFactor = source;
584,585c584
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    = source;
584,585c584
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    if source;
584,585c584
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    if (;
584,586c584
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
<    return ret;
---
>    if (verbosity return ret;
584,586c584
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
<    return ret;
---
>    if (verbosity > ret;
584,586c584
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
<    return ret;
---
>    if (verbosity > 4 ;
585,587c585
<        workFactor == 0) workFactor = source;
<    return ret;
< }
---
>        }
585,591c585
<        workFactor == 0) workFactor = source;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>        workFactor int BZ_API(BZ2_bzBuffToBuffDecompress) 
585,591c585
<        workFactor == 0) workFactor = source;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>        workFactor == BZ_API(BZ2_bzBuffToBuffDecompress) 
585,591c585
<        workFactor == 0) workFactor = source;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>        workFactor == 0(BZ2_bzBuffToBuffDecompress) 
585,591c585
<        workFactor == 0) workFactor = source;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>        workFactor == 0) BZ2_bzBuffToBuffDecompress) 
585,591c585
<        workFactor == 0) workFactor = source;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>        workFactor == 0) workFactor ) 
585,592c585
<        workFactor == 0) workFactor = source;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>        workFactor == 0) workFactor = ( char*         dest, 
585,592c585
<        workFactor == 0) workFactor = source;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>        workFactor == 0) workFactor = sourcechar*         dest, 
586,592c586
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    *         dest, 
586,592c586
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return dest, 
586,592c586
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return ret, 
587,593c587
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> unsigned int* destLen,
591,593c591
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int* destLen,
591,593c591
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int * destLen,
591,593c591
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_APIdestLen,
591,593c591
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(,
591,594c591
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompresschar*         source, 
592,594c592
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            *         source, 
592,594c592
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( source, 
592,594c592
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char, 
592,595c592
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         unsigned int  sourceLen,
592,595c592
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                            ( char*         destint  sourceLen,
593,595c593
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              sourceLen,
593,595c593
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned ,
593,596c593
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned intint           small,
593,596c593
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int* small,
594,596d593
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
594,596d593
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
594,597c594
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              charverbosity )
594,597c594
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         )
594,598c594
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
---
>                              char*         source{
595,599c595
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              bz_stream strm;
595,599c595
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              unsigned strm;
595,599c595
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              unsigned int  ;
595,600c595
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              unsigned int  sourceLenint ret;
596,600c596
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              ret;
596,600c596
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              int           ;
596,602c596
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>                              int           smallif (0 || verbosity > 4) 
597,602c597
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>                              (0 || verbosity > 4) 
597,602c597
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>                              int           0 || verbosity > 4) 
597,602c597
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>                              int           verbosity || verbosity > 4) 
598,602c598
< {
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
> verbosity > 4) 
599,602c599
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>    > 4) 
599,602c599
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>    bz_stream 4) 
599,602c599
<    bz_stream strm;
<    int ret;
< 
<    if (0 || verbosity > 4) 
---
>    bz_stream strm) 
600,603c600
<    int ret;
< 
<    if (0 || verbosity > 4) 
<           source;
---
>    source;
600,603c600
<    int ret;
< 
<    if (0 || verbosity > 4) 
<           source;
---
>    int ;
600,604c600
<    int ret;
< 
<    if (0 || verbosity > 4) 
<           source;
<    return ret; 
---
>    int retreturn ret; 
602,604c602
<    if (0 || verbosity > 4) 
<           source;
<    return ret; 
---
>    ret; 
602,604c602
<    if (0 || verbosity > 4) 
<           source;
<    return ret; 
---
>    if ; 
602,605c602
<    if (0 || verbosity > 4) 
<           source;
<    return ret; 
< BZ_VERSION;
---
>    if (BZ_VERSION;
602,605c602
<    if (0 || verbosity > 4) 
<           source;
<    return ret; 
< BZ_VERSION;
---
>    if (0 ;
602,606c602
<    if (0 || verbosity > 4) 
<           source;
<    return ret; 
< BZ_VERSION;
< }
---
>    if (0 || }
602,611c602
<    if (0 || verbosity > 4) 
<           source;
<    return ret; 
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
---
>    if (0 || verbosity static
(95.3 %, 9558 bytes)
602,611c602
<    ret; 
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>    char *path,   
602,611c602
<    ret; 
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
>    ret*path,   
603,611c603
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
> path,   
603,611c603
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
---
> BZ_VERSION,   
604,612c604
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
---
> int fd,             
609,612c609
< static
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
---
> fd,             
610,612c610
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
---
> ,             
610,613c610
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> BZFILE const char *mode,
610,613c610
< BZFILE * bzopen_or_bzdopen
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
> BZFILE * char *mode,
611,613c611
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
>                *mode,
611,613c611
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
>                ( mode,
611,613c611
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
---
>                ( const ,
611,614c611
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                ( const char int open_mode)      
611,614c611
<                ( const char *path,   
<                  int fd,             
<                  const char *mode,
<                  int open_mode)      
---
>                ( const char *open_mode)      
(95.4 %, 9472 bytes)
611,619c611
<                ( const ,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                ( const ( const char *path,
612,619c612
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  const char *path,
612,619c612
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  int char *path,
612,619c612
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
>                  int open_mode*path,
613,619c613
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> path,
618,619c618
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> ,
618,620c618
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE const char *mode )
618,620c618
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * char *mode )
618,620c618
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API*mode )
618,620c618
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API(mode )
619,620d618
<                ( const char *path,
<                  const char *mode )
619,621c619
<                ( const char *path,
<                  const char *mode )
< {
---
>                {
619,622c619
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( return 0;
619,622c619
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( const 0;
619,622c619
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( const char ;
619,623c619
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
---
>                ( const char *}
619,627c619
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const char *pathBZFILE * BZ_API(BZ2_bzdopen)
620,627c620
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  * BZ_API(BZ2_bzdopen)
620,627c620
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const BZ_API(BZ2_bzdopen)
620,627c620
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char (BZ2_bzdopen)
620,627c620
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char *BZ2_bzdopen)
621,627d620
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
621,628c621
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> ( int fd,
622,628c622
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    int fd,
622,628c622
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    return fd,
622,628c622
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
>    return 0,
623,629c623
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> const char *mode )
627,629c627
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> char *mode )
627,629c627
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE *mode )
627,629c627
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * mode )
627,629c627
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
---
> BZFILE * BZ_API)
627,630c627
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
---
> BZFILE * BZ_API({
627,631c627
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char *mode )
< {
<    }
---
> BZFILE * BZ_API(BZ2_bzdopen}
628,635c628
<                ( int fd,
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
628,635c628
<                ( int fd,
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
628,635c628
<                ( int fd,
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int (BZ2_bzread) (BZFILE* b, void* buf, int len )
628,635c628
<                ( int fd,
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                ( int fdBZ2_bzread) (BZFILE* b, void* buf, int len )
629,635c629
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  ) (BZFILE* b, void* buf, int len )
629,635c629
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const (BZFILE* b, void* buf, int len )
629,635c629
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char BZFILE* b, void* buf, int len )
629,635c629
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char ** b, void* buf, int len )
629,635c629
<                  const char *mode )
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>                  const char *mode b, void* buf, int len )
630,635c630
< {
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> , void* buf, int len )
631,635c631
<    }
< 
< 
< 
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
>    void* buf, int len )
635c635
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> * buf, int len )
635c635
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int buf, int len )
635c635
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API, int len )
635c635
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(int len )
635c635
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzreadlen )
635c635
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzread) )
635,636c635
< int BZ_API(BZ2_bzread) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzread) ({
(95.4 %, 9425 bytes)
629,631c629
<                  const char ** b, void* buf, int len )
< {
<    int bzerr, nread;
---
>                  const char *int bzerr, nread;
629,631c629
<                  const char ** b, void* buf, int len )
< {
<    int bzerr, nread;
---
>                  const char ** bzerr, nread;
629,631c629
<                  const char ** b, void* buf, int len )
< {
<    int bzerr, nread;
---
>                  const char ** b, nread;
629,631c629
<                  const char ** b, void* buf, int len )
< {
<    int bzerr, nread;
---
>                  const char ** b, nread;
629,631c629
<                  const char ** b, void* buf, int len )
< {
<    int bzerr, nread;
---
>                  const char ** b, void;
629,632c629
<                  const char ** b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>                  const char ** b, void* if (bzerr == BZ_STREAM_END) {
629,632c629
<                  const char ** b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>                  const char ** b, void* buf(bzerr == BZ_STREAM_END) {
629,632c629
<                  const char ** b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>                  const char ** b, void* buf, bzerr == BZ_STREAM_END) {
629,632c629
<                  const char ** b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>                  const char ** b, void* buf, int == BZ_STREAM_END) {
629,632c629
<                  const char ** b, void* buf, int len )
< {
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>                  const char ** b, void* buf, int len BZ_STREAM_END) {
630,632c630
< {
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
> ) {
631,632c631
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    {
631,633c631
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
---
>    int return nread;
631,633c631
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
---
>    int bzerrnread;
631,633c631
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
---
>    int bzerr, ;
631,634c631
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    int bzerr, nread} else {
632,634c632
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    else {
632,634c632
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if {
632,635c632
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (return -1;
632,635c632
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr -1;
632,635c632
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == 1;
632,635c632
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == BZ_STREAM_END;
632,636c632
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
<    }
---
>    if (bzerr == BZ_STREAM_END) }
633,637c633
<       return nread;
<    } else {
<       return -1;
<    }
< }
---
>       }
633,641c633
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
633,641c633
<       return nread;
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return nreadBZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
634,641c634
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
634,641c634
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    } BZ2_bzwrite) (BZFILE* b, void* buf, int len )
634,641c634
<    } else {
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    } else ) (BZFILE* b, void* buf, int len )
635,641c635
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       (BZFILE* b, void* buf, int len )
635,641c635
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return BZFILE* b, void* buf, int len )
635,641c635
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return -* b, void* buf, int len )
635,641c635
<       return -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       return -1b, void* buf, int len )
636,641c636
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    , void* buf, int len )
637,641c637
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> void* buf, int len )
641c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> * buf, int len )
641c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int buf, int len )
641c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API, int len )
641c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(int len )
641c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwritelen )
641c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) )
641,642c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzwrite) ({
641,643c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (BZFILEint bzerr;
641,643c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* bzerr;
641,643c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b;
641,645c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, {
641,646c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, voidreturn -1;
641,646c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* -1;
641,646c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf1;
641,646c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, ;
641,647c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
<    }
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int }
641,648c641
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int bzerr;
< 
<    {
<       return -1;
<    }
< 0;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len 0;
642,648c642
< {
<    int bzerr;
< 
<    {
<       return -1;
<    }
< 0;
---
> ;
643,649c643
<    int bzerr;
< 
<    {
<       return -1;
<    }
< 0;
< bzerr;
---
>    bzerr;
643,649c643
<    int bzerr;
< 
<    {
<       return -1;
<    }
< 0;
< bzerr;
---
>    int ;
643,650c643
<    int bzerr;
< 
<    {
<       return -1;
<    }
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int bzerrFILE *fp = ((bzFile *)b)->handle;
645,650c645
<    {
<       return -1;
<    }
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    *fp = ((bzFile *)b)->handle;
646,650c646
<       return -1;
<    }
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>       fp = ((bzFile *)b)->handle;
646,650c646
<       return -1;
<    }
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>       return = ((bzFile *)b)->handle;
646,650c646
<       return -1;
<    }
< 0;
< bzerr;
<    FILE *fp = ((bzFile *)b)->handle;
---
>       return -((bzFile *)b)->handle;
(95.4 %, 9382 bytes)
643,644c643
<    int ;
<    FILE *fp = ((bzFile *)b)->handle;
---
>    int )->handle;
644c644
<    FILE *fp = ((bzFile *)b)->handle;
---
>    ->handle;
644c644
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE handle;
644c644
<    FILE *fp = ((bzFile *)b)->handle;
---
>    FILE *;
644,646c644
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
>    FILE *fp if (b==NULL){
644,646c644
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
>    FILE *fp = (b==NULL){
644,646c644
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
>    FILE *fp = (b==NULL){
644,646c644
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
>    FILE *fp = ((==NULL){
644,646c644
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
>    FILE *fp = ((bzFile NULL){
644,646c644
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
>    FILE *fp = ((bzFile *){
644,646c644
<    FILE *fp = ((bzFile *)b)->handle;
<    
<    if (b==NULL){
---
>    FILE *fp = ((bzFile *){
(95.4 %, 9361 bytes)
644,649c644
<    FILE handle;
<    
<    if (b==NULL){
<       ;
<       ;
<    }
---
>    FILE }
644,650c644
<    FILE handle;
<    
<    if (b==NULL){
<       ;
<       ;
<    }
< }
---
>    FILE handle}
646,655c646
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    static char *bzerrorstrings[] = {
646,655c646
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if char *bzerrorstrings[] = {
646,655c646
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (*bzerrorstrings[] = {
646,655c646
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (bbzerrorstrings[] = {
646,655c646
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b==[] = {
646,655c646
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b==NULL] = {
646,655c646
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b==NULL)= {
647,655c647
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       {
648,656c648
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
---
>       "OK"
649,657c649
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
---
>    ,"???"   
650,657c650
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
---
> "???"   
655,658c655
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
---
> ,"???"   
655,658c655
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
---
> static "???"   
655,659c655
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
---
> static char };
655,659c655
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
---
> static char *;
655,662c655
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstringsconst char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
655,662c655
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
655,662c655
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
655,662c655
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> static char *bzerrorstrings[] = BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
656,662c656
<        "OK"
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>        (BZ2_bzerror) (BZFILE *b, int *errnum)
657,662c657
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       BZ2_bzerror) (BZFILE *b, int *errnum)
657,662c657
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,) (BZFILE *b, int *errnum)
658,662c658
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       (BZFILE *b, int *errnum)
658,662c658
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,BZFILE *b, int *errnum)
659,662c659
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> *b, int *errnum)
659,662c659
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> }b, int *errnum)
662c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> , int *errnum)
662c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const int *errnum)
662c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char *errnum)
662c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * errnum)
662c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API)
662,663c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
---
> const char * BZ_API({
662,664c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err;
---
> const char * BZ_API(BZ2_bzerrorint err;
662,664c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err;
---
> const char * BZ_API(BZ2_bzerror) err;
662,664c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err;
---
> const char * BZ_API(BZ2_bzerror) (;
662,665c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err;
<    return bzerrorstrings[err*-1];
---
> const char * BZ_API(BZ2_bzerror) (BZFILE return bzerrorstrings[err*-1];
662,665c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err;
<    return bzerrorstrings[err*-1];
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *bzerrorstrings[err*-1];
662,665c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err;
<    return bzerrorstrings[err*-1];
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b[err*-1];
662,665c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err;
<    return bzerrorstrings[err*-1];
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, err*-1];
662,665c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err;
<    return bzerrorstrings[err*-1];
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *-1];
662,665c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err;
<    return bzerrorstrings[err*-1];
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *-1];
662,665c662
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    int err;
<    return bzerrorstrings[err*-1];
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum1];
663,665c663
< {
<    int err;
<    return bzerrorstrings[err*-1];
---
> ];
664,665c664
<    int err;
<    return bzerrorstrings[err*-1];
---
>    ;
664,666c664
<    int err;
<    return bzerrorstrings[err*-1];
< }
---
>    int }
664,695c664
<    int err;
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    int err#define BZ_UNIX      1
665,695c665
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    define BZ_UNIX      1
665,695c665
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    return BZ_UNIX      1
665,695c665
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
>    return bzerrorstrings1
665,698c665
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
>    return bzerrorstrings[#define BZ_LCCWIN32  )  
665,698c665
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
>    return bzerrorstrings[errdefine BZ_LCCWIN32  )  
665,698c665
<    return bzerrorstrings[err*-1];
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
>    return bzerrorstrings[err*BZ_LCCWIN32  )  
(95.5 %, 9320 bytes)
664,698c664
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
>    define ERROR_IF_MINUS_ONE(i) 
665,698c665
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> ERROR_IF_MINUS_ONE(i) 
694,698c694
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> (i) 
694,698c694
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #i) 
694,698c694
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define ) 
694,704c694
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #define BZ_UNIX      #if BZ_UNIX
697,704c697
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> if BZ_UNIX
697,704c697
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
---
> #BZ_UNIX
697,705c697
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define #   include <fcntl.h>
697,705c697
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define BZ_LCCWIN32  include <fcntl.h>
698,705c698
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> <fcntl.h>
698,705c698
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #fcntl.h>
698,705c698
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define .h>
698,705c698
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define ERROR_IF_MINUS_ONEh>
698,705c698
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
---
> #define ERROR_IF_MINUS_ONE(>
698,706c698
< #define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #if BZ_UNIX
< #   include <fcntl.h>
< #endif 
---
> #define ERROR_IF_MINUS_ONE(i#endif 
704,706c704
< #if BZ_UNIX
< #   include <fcntl.h>
< #endif 
---
> endif 
704,712c704
< #if BZ_UNIX
< #   include <fcntl.h>
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #
\ No newline at end of file
704,712c704
< #if BZ_UNIX
< #   include <fcntl.h>
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #if 
\ No newline at end of file
705,712d704
< #   include <fcntl.h>
< #endif 
< 
< 
< 
< 
< 
<                                        
705,712c705
< #   include <fcntl.h>
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #   
\ No newline at end of file
705,712c705
< #   include <fcntl.h>
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #   include 
\ No newline at end of file
705,712c705
< #   include <fcntl.h>
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #   include <
\ No newline at end of file
705,712c705
< #   include <fcntl.h>
< #endif 
< 
< 
< 
< 
< 
<                                        
---
> #   include <fcntl
\ No newline at end of file
(95.5 %, 9234 bytes)
===< pass_clex :: rm-toks-7 >===
9,12c9
< #2
< 
< #define BZ_OK                3
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
9,12c9
< #2
< 
< #define BZ_OK                3
< #define BZ_STREAM_END        4
---
> #BZ_STREAM_END        4
11,12c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
---
> 4
11,13c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> ##define BZ_SEQUENCE_ERROR    (-1)
11,13c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define define BZ_SEQUENCE_ERROR    (-1)
11,13c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_OK                BZ_SEQUENCE_ERROR    (-1)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> (-1)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #-1)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define 1)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_SEQUENCE_ERROR    (-1)
---
> #define BZ_STREAM_END        )
13d12
< #define BZ_SEQUENCE_ERROR    (-1)
13d12
< #define BZ_SEQUENCE_ERROR    (-1)
13d12
< #define BZ_SEQUENCE_ERROR    (-1)
(95.5 %, 9200 bytes)
13c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> )
13,15c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #typedef 
13,16c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define struct {
13,16c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_PARAM_ERROR       {
13,17c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      char *next_in;
13,17c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (*next_in;
13,17c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-next_in;
13,17c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9;
15,18c15
< typedef 
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
> unsigned int avail_in;
16,18c16
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
>    int avail_in;
16,18c16
<    struct {
<       char *next_in;
<       unsigned int avail_in;
---
>    struct avail_in;
17,18c17
<       char *next_in;
<       unsigned int avail_in;
---
>       ;
17,19c17
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>       char unsigned int total_in_lo32;
17,19c17
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>       char *int total_in_lo32;
17,19c17
<       char *next_in;
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>       char *next_intotal_in_lo32;
18,19c18
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
---
>       ;
18,20c18
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       unsigned unsigned int total_in_hi32;
18,20c18
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       unsigned int int total_in_hi32;
18,20c18
<       unsigned int avail_in;
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       unsigned int avail_intotal_in_hi32;
19,20c19
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
---
>       ;
19,22c19
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned char *next_out;
19,22c19
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned int *next_out;
19,22c19
<       unsigned int total_in_lo32;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       unsigned int total_in_lo32next_out;
(95.5 %, 9145 bytes)
18,21c18
<       ;
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       next_out;
19,21c19
<       unsigned int total_in_hi32;
< 
<       char *next_out;
---
>       ;
19,22c19
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned unsigned int avail_out;
19,22c19
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int int avail_out;
19,22c19
<       unsigned int total_in_hi32;
< 
<       char *next_out;
<       unsigned int avail_out;
---
>       unsigned int total_in_hi32avail_out;
21,22c21
<       char *next_out;
<       unsigned int avail_out;
---
>       ;
21,23c21
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       char unsigned int total_out_lo32;
21,23c21
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       char *int total_out_lo32;
21,23c21
<       char *next_out;
<       unsigned int avail_out;
<       unsigned int total_out_lo32;
---
>       char *next_outtotal_out_lo32;
(95.6 %, 9101 bytes)
21,23c21
<       ;
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       total_out_hi32;
22,23c22
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
---
>       ;
22,25c22
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned void *state;
22,25c22
<       unsigned int total_out_lo32;
<       unsigned int total_out_hi32;
< 
<       void *state;
---
>       unsigned int *state;
(95.6 %, 9039 bytes)
22,26c22
<       ;
< 
<       void *state;
< 
<       void *(*bzalloc)(void *,void *,void *);
---
>       (*bzalloc)(void *,void *,void *);
24,26c24
<       void *state;
< 
<       void *(*bzalloc)(void *,void *,void *);
---
>       *bzalloc)(void *,void *,void *);
24,26c24
<       void *state;
< 
<       void *(*bzalloc)(void *,void *,void *);
---
>       void bzalloc)(void *,void *,void *);
24,26c24
<       void *state;
< 
<       void *(*bzalloc)(void *,void *,void *);
---
>       void *)(void *,void *,void *);
24,26c24
<       void *state;
< 
<       void *(*bzalloc)(void *,void *,void *);
---
>       void *state(void *,void *,void *);
26c26
<       void *(*bzalloc)(void *,void *,void *);
---
>       void *,void *,void *);
26c26
<       void *(*bzalloc)(void *,void *,void *);
---
>       void *,void *,void *);
26c26
<       void *(*bzalloc)(void *,void *,void *);
---
>       void *,void *,void *);
26c26
<       void *(*bzalloc)(void *,void *,void *);
---
>       void *(void *,void *);
26c26
<       void *(*bzalloc)(void *,void *,void *);
---
>       void *(**,void *);
26c26
<       void *(*bzalloc)(void *,void *,void *);
---
>       void *(*bzalloc,void *);
26c26
<       void *(*bzalloc)(void *,void *,void *);
---
>       void *(*bzalloc)void *);
26c26
<       void *(*bzalloc)(void *,void *,void *);
---
>       void *(*bzalloc)(*);
26c26
<       void *(*bzalloc)(void *,void *,void *);
---
>       void *(*bzalloc)(void );
26c26
<       void *(*bzalloc)(void *,void *,void *);
---
>       void *(*bzalloc)(void *;
26,27c26
<       void *(*bzalloc)(void *,void *,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,void *opaque;
26,27c26
<       void *(*bzalloc)(void *,void *,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,void *opaque;
26,27c26
<       void *(*bzalloc)(void *,void *,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,void *opaque;
26,27c26
<       void *(*bzalloc)(void *,void *,void *);
<       void *opaque;
---
>       void *(*bzalloc)(void *,void *,;
26,28c26
<       void *(*bzalloc)(void *,void *,void *);
<       void *opaque;
<    } 
---
>       void *(*bzalloc)(void *,void *,void } 
26,29c26
<       void *(*bzalloc)(void *,void *,void *);
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *(*bzalloc)(void *,void *,void *bz_stream;
27,29d26
<       void *opaque;
<    } 
<    bz_stream;
27,33c27
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       #include <stdio.h>
27,33c27
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void include <stdio.h>
(95.6 %, 9024 bytes)
26,29c26
<       void *(*bzalloc)(void );
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *(*bzalloc)(void bz_stream;
27,29d26
<       void *opaque;
<    } 
<    bz_stream;
27,33c27
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       #include <stdio.h>
27,33c27
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void include <stdio.h>
27,33c27
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *<stdio.h>
27,33c27
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *opaquestdio.h>
28,33c28
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    .h>
29,33c29
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    h>
29,33c29
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_stream>
33,34d32
< #include <stdio.h>
< 
33,35c33
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #define BZ_API(func) func
33,35c33
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include BZ_API(func) func
33,35c33
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <(func) func
33,35c33
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdiofunc) func
33,35c33
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.) func
33,35c33
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.hfunc
35d34
< #   define BZ_API(func) func
35d34
< #   define BZ_API(func) func
35d34
< #   define BZ_API(func) func
35,36c35
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_APIextern
35,41c35
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
---
> #   define BZ_API((BZ2_bzDecompressInit) ( 
35,41c35
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
---
> #   define BZ_API(funcBZ2_bzDecompressInit) ( 
35,41c35
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
---
> #   define BZ_API(func) ) ( 
36,41c36
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
---
> ( 
36,42c36
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> #   bz_stream *strm, 
36,42c36
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> #   define *strm, 
36,42c36
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> #   define BZ_EXTERN strm, 
41,42c41
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> , 
41,43c41
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> (int       verbosity, 
41,43c41
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> (BZ2_bzDecompressInitverbosity, 
41,43c41
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> (BZ2_bzDecompressInit) , 
42,43d41
<       bz_stream *strm, 
<       int       verbosity, 
42,44c42
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
>       bz_stream );
42,44c42
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
>       bz_stream *;
42,50c42
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       bz_stream *strm#define BZ_MAX_UNUSED 5000
43,50c43
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       define BZ_MAX_UNUSED 5000
43,50c43
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       int       BZ_MAX_UNUSED 5000
43,50c43
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       int       verbosity5000
44,52c44
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>       typedef void BZFILE;
44,52c44
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>       int       void BZFILE;
44,52c44
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>       int       )BZFILE;
50,52c50
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> ;
50,54c50
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
50,54c50
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZFILE* BZ_API(BZ2_bzReadOpen) ( 
50,54c50
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED * BZ_API(BZ2_bzReadOpen) ( 
52,54c52
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_API(BZ2_bzReadOpen) ( 
52,54c52
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef (BZ2_bzReadOpen) ( 
52,54c52
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZ2_bzReadOpen) ( 
52,54c52
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZFILE) ( 
54c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> ( 
54,55c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN int*  bzerror,   
54,55c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE*  bzerror,   
54,55c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* bzerror,   
54,55c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_API,   
54,56c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(FILE* f, 
54,56c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen* f, 
54,56c54
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) f, 
55,56c55
<       int*  bzerror,   
<       FILE* f, 
---
>       , 
55,57c55
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       intint   verbosity, 
55,57c55
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  verbosity, 
55,57c55
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  bzerror, 
56,57d55
<       FILE* f, 
<       int   verbosity, 
56,58c56
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILEsmall,
56,58c56
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILE* ,
56,59c56
<       FILE* f, 
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       FILE* fvoid* unused,    
57,59c57
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       * unused,    
57,59c57
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   unused,    
57,59c57
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   verbosity,    
58,59d57
<       int   small,
<       void* unused,    
58,59d57
<       int   small,
<       void* unused,    
58,61c58
<       int   small,
<       void* unused,    
<       int   nUnused 
<    );
---
>       int   small);
59,61c59
<       void* unused,    
<       int   nUnused 
<    );
---
>       ;
59,63c59
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       voidBZ_EXTERN void ;
59,63c59
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void* void ;
59,63c59
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void* unused;
60,65c60
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
60,65c60
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   void BZ_API(BZ2_bzReadGetUnused) ( 
61,65c61
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    BZ_API(BZ2_bzReadGetUnused) ( 
61,65c61
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )(BZ2_bzReadGetUnused) ( 
63,65c63
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ2_bzReadGetUnused) ( 
63,65c63
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN ) ( 
63,65c63
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void ( 
65,66c65
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> int*    bzerror, 
65,66c65
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN *    bzerror, 
65,66c65
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void bzerror, 
65,66c65
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API, 
65,67c65
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZFILE* b, 
65,67c65
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused* b, 
65,67c65
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) b, 
66,67c66
<       int*    bzerror, 
<       BZFILE* b, 
---
>       , 
66,68c66
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       intvoid**  unused,  
66,68c66
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    **  unused,  
66,68c66
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerror*  unused,  
67,68c67
<       BZFILE* b, 
<       void**  unused,  
---
>       unused,  
67,68c67
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE,  
67,69c67
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* int*    nUnused 
67,69c67
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* b*    nUnused 
68,69c68
<       void**  unused,  
<       int*    nUnused 
---
>       nUnused 
68,70c68
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void);
68,70c68
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void*;
68,72c68
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
68,72c68
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  unusedint BZ_API(BZ2_bzRead) ( 
69,72c69
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZ_API(BZ2_bzRead) ( 
69,72c69
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int(BZ2_bzRead) ( 
69,72c69
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    BZ2_bzRead) ( 
70,72c70
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    ) ( 
70,72c70
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    )( 
72,73c72
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> int*    bzerror, 
72,73c72
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN *    bzerror, 
72,73c72
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int bzerror, 
72,73c72
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_API, 
72,74c72
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZFILE* b, 
72,74c72
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead* b, 
72,74c72
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) b, 
73,74c73
<       int*    bzerror, 
<       BZFILE* b, 
---
>       , 
73,75c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       intvoid*   buf, 
73,75c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    *   buf, 
73,75c73
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerrorbuf, 
74,75c74
<       BZFILE* b, 
<       void*   buf, 
---
>       , 
74,76c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILEint     len 
74,76c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* len 
74,77c74
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* b);
75,77c75
<       void*   buf, 
<       int     len 
<    );
---
>       ;
75,79c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       voidBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
75,79c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
75,79c75
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   buf* BZ_API(BZ2_bzWriteOpen) ( 
76,79c76
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZ_API(BZ2_bzWriteOpen) ( 
76,79c76
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int     (BZ2_bzWriteOpen) ( 
77,79c77
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    BZ2_bzWriteOpen) ( 
77,79c77
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )) ( 
79c79
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> ( 
79,80c79
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN int*  bzerror,      
79,80c79
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE*  bzerror,      
79,80c79
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* bzerror,      
79,80c79
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_API,      
79,81c79
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(FILE* f, 
79,81c79
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen* f, 
79,81c79
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) f, 
80,81c80
<       int*  bzerror,      
<       FILE* f, 
---
>       , 
80,82c80
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       intint   blockSize100k, 
80,82c80
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  blockSize100k, 
80,82c80
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  bzerror, 
81,82d80
<       FILE* f, 
<       int   blockSize100k, 
81,83c81
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILEverbosity, 
81,83c81
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILE* , 
81,84c81
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       FILE* fint   workFactor 
82,84c82
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       workFactor 
82,85c82
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int   );
82,85c82
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int   blockSize100k;
83,87c83
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
83,87c83
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   void BZ_API(BZ2_bzWrite) ( 
83,87c83
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   verbosityBZ_API(BZ2_bzWrite) ( 
84,87c84
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       (BZ2_bzWrite) ( 
84,87c84
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   BZ2_bzWrite) ( 
85,87c85
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    ) ( 
85,87c85
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    )( 
87,88c87
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> int*    bzerror, 
87,88c87
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN *    bzerror, 
87,88c87
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void bzerror, 
87,88c87
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API, 
87,89c87
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZFILE* b, 
87,89c87
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite* b, 
87,89c87
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) b, 
88,89c88
<       int*    bzerror, 
<       BZFILE* b, 
---
>       , 
88,90c88
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       intvoid*   buf, 
88,90c88
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    *   buf, 
88,90c88
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerrorbuf, 
89,90c89
<       BZFILE* b, 
<       void*   buf, 
---
>       , 
89,91c89
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILEint     len 
89,91c89
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* len 
89,92c89
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
<    );
---
>       BZFILE* b);
90,92c90
<       void*   buf, 
<       int     len 
<    );
---
>       ;
90,94c90
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       voidBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
90,94c90
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   void BZ_API(BZ2_bzWriteClose) ( 
90,94c90
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   bufBZ_API(BZ2_bzWriteClose) ( 
91,94c91
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       (BZ2_bzWriteClose) ( 
91,94c91
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int     BZ2_bzWriteClose) ( 
92,94c92
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    ) ( 
92,94c92
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )( 
94,95c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> int*          bzerror, 
94,95c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN *          bzerror, 
94,95c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void bzerror, 
94,95c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API, 
94,96c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZFILE*       b, 
94,96c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose*       b, 
94,96c94
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) b, 
95,96c95
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       , 
95,97c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       intint           abandon, 
95,97c95
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          abandon, 
96,97d95
<       BZFILE*       b, 
<       int           abandon, 
96,97d95
<       BZFILE*       b, 
<       int           abandon, 
96,98c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILEint* nbytes_in, 
96,98c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       * nbytes_in, 
96,98c96
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       bnbytes_in, 
97,98c97
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       , 
97,99c97
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           unsigned int* nbytes_out 
97,99c97
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           abandonint* nbytes_out 
98,99c98
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       * nbytes_out 
98,99c98
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned nbytes_out 
98,100c98
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int);
98,100c98
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* ;
98,102c98
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* nbytes_inBZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
99,102c99
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       void BZ_API(BZ2_bzWriteClose64) ( 
99,102c99
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned BZ_API(BZ2_bzWriteClose64) ( 
99,102c99
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int(BZ2_bzWriteClose64) ( 
99,102c99
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* BZ2_bzWriteClose64) ( 
100,102c100
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    ) ( 
100,102c100
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    )( 
102,103c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> int*          bzerror, 
102,103c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN *          bzerror, 
102,103c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void bzerror, 
102,103c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API, 
102,104c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZFILE*       b, 
102,104c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64*       b, 
102,104c102
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) b, 
103,104c103
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       , 
103,105c103
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       intint           abandon, 
103,105c103
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          abandon, 
104,105d103
<       BZFILE*       b, 
<       int           abandon, 
104,105d103
<       BZFILE*       b, 
<       int           abandon, 
104,106c104
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILEint* nbytes_in_lo32, 
104,106c104
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       * nbytes_in_lo32, 
104,106c104
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       bnbytes_in_lo32, 
105,106c105
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       , 
105,107c105
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           unsigned int* nbytes_in_hi32, 
105,107c105
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           abandonint* nbytes_in_hi32, 
106,107c106
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       * nbytes_in_hi32, 
106,107c106
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned nbytes_in_hi32, 
106,107c106
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned int, 
106,108c106
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* unsigned int* nbytes_out_lo32, 
106,108c106
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_lo32int* nbytes_out_lo32, 
107,108c107
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       * nbytes_out_lo32, 
107,108c107
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned nbytes_out_lo32, 
107,108c107
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int, 
107,109c107
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* unsigned int* nbytes_out_hi32
107,109c107
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_hi32int* nbytes_out_hi32
108,109c108
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       * nbytes_out_hi32
108,109c108
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned nbytes_out_hi32
108,110c108
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int);
108,110c108
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* ;
108,115c108
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* nbytes_out_lo32BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
109,115c109
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffCompress) ( 
109,115c109
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned BZ_API(BZ2_bzBuffToBuffCompress) ( 
109,115c109
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int(BZ2_bzBuffToBuffCompress) ( 
109,115c109
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ2_bzBuffToBuffCompress) ( 
110,115c110
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    ) ( 
110,115c110
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    )( 
115,116c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> char*         dest, 
115,116c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN *         dest, 
115,116c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int dest, 
115,116c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API, 
115,117c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(unsigned int* destLen,
115,117c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompressint* destLen,
115,117c115
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) * destLen,
116,117c116
<       char*         dest, 
<       unsigned int* destLen,
---
>       destLen,
116,117c116
<       char*         dest, 
<       unsigned int* destLen,
---
>       char,
116,118c116
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         char*         source, 
116,118c116
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         dest*         source, 
117,118c117
<       unsigned int* destLen,
<       char*         source, 
---
>       source, 
117,118c117
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned , 
117,119c117
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intunsigned int  sourceLen,
117,119c117
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* int  sourceLen,
117,119c117
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLensourceLen,
118,119c118
<       char*         source, 
<       unsigned int  sourceLen,
---
>       ,
118,120c118
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       charint           blockSize100k, 
118,120c118
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         blockSize100k, 
119,120d118
<       unsigned int  sourceLen,
<       int           blockSize100k, 
119,120d118
<       unsigned int  sourceLen,
<       int           blockSize100k, 
119,121c119
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned verbosity, 
119,121c119
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  , 
119,122c119
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       unsigned int  sourceLenint           workFactor 
120,122c120
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       workFactor 
120,123c120
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       int           );
120,123c120
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       int           blockSize100k;
121,125c121
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
121,125c121
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
121,125c121
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosityBZ_API(BZ2_bzBuffToBuffDecompress) ( 
122,125c122
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       (BZ2_bzBuffToBuffDecompress) ( 
122,125c122
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ2_bzBuffToBuffDecompress) ( 
123,125c123
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    ) ( 
123,125c123
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    )( 
125,126c125
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> char*         dest, 
125,126c125
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN *         dest, 
125,126c125
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int dest, 
125,126c125
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API, 
125,127c125
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(unsigned int* destLen,
125,127c125
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressint* destLen,
125,127c125
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) * destLen,
126,127c126
<       char*         dest, 
<       unsigned int* destLen,
---
>       destLen,
126,127c126
<       char*         dest, 
<       unsigned int* destLen,
---
>       char,
126,128c126
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         char*         source, 
126,128c126
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         dest*         source, 
127,128c127
<       unsigned int* destLen,
<       char*         source, 
---
>       source, 
127,128c127
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned , 
127,129c127
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned intunsigned int  sourceLen,
127,129c127
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* int  sourceLen,
127,129c127
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLensourceLen,
128,129c128
<       char*         source, 
<       unsigned int  sourceLen,
---
>       ,
128,130c128
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       charint           small, 
128,130c128
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         small, 
129,130d128
<       unsigned int  sourceLen,
<       int           small, 
129,130d128
<       unsigned int  sourceLen,
<       int           small, 
129,131c129
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned );
129,131c129
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  ;
129,133c129
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       unsigned int  sourceLenBZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
130,133c130
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
130,133c130
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       int           * BZ_API(BZ2_bzcloseBZ2_bzerror) (
130,133c130
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       int           smallBZ_API(BZ2_bzcloseBZ2_bzerror) (
131,133c131
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       (BZ2_bzcloseBZ2_bzerror) (
131,133c131
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       int           BZ2_bzcloseBZ2_bzerror) (
131,133c131
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       int           )) (
133c133
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> (
133,134c133
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
---
> BZ_EXTERN BZFILE *b, 
133,134c133
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
---
> BZ_EXTERN BZFILE *b, 
133,134c133
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
---
> BZ_EXTERN BZFILE * b, 
133,134c133
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
---
> BZ_EXTERN BZFILE * BZ_API, 
133,135c133
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> BZ_EXTERN BZFILE * BZ_API(int    *errnum
133,135c133
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror*errnum
133,135c133
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       BZFILE *b, 
<       int    *errnum
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) errnum
134,136c134
<       BZFILE *b, 
<       int    *errnum
<    );
---
>       );
134,136c134
<       BZFILE *b, 
<       int    *errnum
<    );
---
>       BZFILE ;
134,146c134
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
>       BZFILE *#define _BZLIB_PRIVATE_H
134,146c134
<       BZFILE *b, 
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
>       BZFILE *bdefine _BZLIB_PRIVATE_H
135,146c135
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
>       _BZLIB_PRIVATE_H
135,148c135
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       int    #include <stdlib.h>
135,148c135
<       int    *errnum
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       int    *include <stdlib.h>
136,148c136
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>    <stdlib.h>
136,148c136
<    );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>    )stdlib.h>
146,148c146
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> .h>
(95.6 %, 8988 bytes)
134,146c134
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       <stdlib.h>
134,146c134
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
>       )stdlib.h>
144,146c144
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> .h>
144,146c144
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> #h>
144,146c144
< #define _BZLIB_PRIVATE_H
< 
< #include <stdlib.h>
---
> #define >
146,150d145
< #include <stdlib.h>
< 
< 
< 
< 
146,150d145
< #include <stdlib.h>
< 
< 
< 
< 
(95.6 %, 8964 bytes)
146,148c146
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> ;
146,149c146
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #typedef unsigned char   Bool;
146,149c146
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define unsigned char   Bool;
146,149c146
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define BZ_VERSION  char   Bool;
148,149c148
< typedef char            Char;
< typedef unsigned char   Bool;
---
> Bool;
148,149c148
< typedef char            Char;
< typedef unsigned char   Bool;
---
> typedef ;
148,150c148
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            typedef unsigned char   UChar;
148,150c148
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            Charunsigned char   UChar;
149,150c149
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> char   UChar;
149,150c149
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef UChar;
149,150c149
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef unsigned ;
149,151c149
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   typedef int             Int32;
149,151c149
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   Boolint             Int32;
150,151c150
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> Int32;
150,151c150
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef ;
150,152c150
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned typedef unsigned int    UInt32;
150,152c150
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   unsigned int    UInt32;
150,152c150
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   UCharint    UInt32;
151,152c151
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> UInt32;
151,152c151
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef ;
151,153c151
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef int             typedef short           Int16;
151,153c151
< typedef int             Int32;
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef int             Int32short           Int16;
152,153c152
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> Int16;
152,153c152
< typedef unsigned int    UInt32;
< typedef short           Int16;
---
> typedef ;
152,154c152
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned typedef unsigned short  UInt16;
152,154c152
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned int    unsigned short  UInt16;
152,154c152
< typedef unsigned int    UInt32;
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef unsigned int    UInt32short  UInt16;
153,154c153
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> UInt16;
153,154c153
< typedef short           Int16;
< typedef unsigned short  UInt16;
---
> typedef ;
153,156c153
< typedef short           Int16;
< typedef unsigned short  UInt16;
< 
< #define True  ((Bool)1)
---
> typedef short           #define True  ((Bool)1)
(95.7 %, 8909 bytes)
153,155c153
< UInt16;
< 
< #define True  ((Bool)1)
---
> Bool)1)
153,155c153
< UInt16;
< 
< #define True  ((Bool)1)
---
> UInt16)1)
155c155
< #define True  ((Bool)1)
---
> 1)
155c155
< #define True  ((Bool)1)
---
> #)
155,156c155
< #define True  ((Bool)1)
< #define define msgzfza2define )
---
> #define #define define msgzfza2define )
155,156c155
< #define True  ((Bool)1)
< #define define msgzfza2define )
---
> #define True  define define msgzfza2define )
155,156c155
< #define True  ((Bool)1)
< #define define msgzfza2define )
---
> #define True  (define msgzfza2define )
155,156c155
< #define True  ((Bool)1)
< #define define msgzfza2define )
---
> #define True  ((msgzfza2define )
(95.7 %, 8898 bytes)
155,163c155
< #define True  define define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
---
> #define True  \
155,164c155
< #define True  define define msgzfza2define )
< 
< 
< 
< 
< 
< 
< 
< #define BZ_RAND_DECLS                          \
<    Int32 rNToGo;                               \
---
> #define True  define Int32 rNToGo;                               \
(95.7 %, 8813 bytes)
156,157d155
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
156,164c156
<    Int32 rNToGo;                               \
<    Int32 rTPos                                 \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
---
>    #define BZ_M_IDLE      1
(95.7 %, 8715 bytes)
155,163c155
< #define True  \
< 
< 
< 
< 
< 
< 
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
---
> #define True  BZ_M_RUNNING   1
162,163c162
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
---
> 1
162,164c162
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
---
> ##define BZ_S_INPUT     2
162,164c162
< #define BZ_M_IDLE      1
< #define BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
---
> #define define BZ_S_INPUT     2
(95.8 %, 8674 bytes)
155,158c155
< #define True  BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define True  define BZ_N_RADIX 2
155,158c155
< #define True  BZ_M_RUNNING   1
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> #define True  BZ_M_RUNNING   BZ_N_RADIX 2
156,158c156
< #define BZ_S_INPUT     2
< 
< #define BZ_N_RADIX 2
---
> 2
(95.8 %, 8630 bytes)
155,157c155
< #define True  define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define True  #define BZ_N_SHELL 18
155,157c155
< #define True  define BZ_N_RADIX 2
< #define BZ_N_QSORT 12
< #define BZ_N_SHELL 18
---
> #define True  define define BZ_N_SHELL 18
(95.8 %, 8588 bytes)
155,156c155
< #define True  #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define True  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
155,156c155
< #define True  #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define True  #BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
155,156c155
< #define True  #define BZ_N_SHELL 18
< #define BZ_N_OVERSHOOT (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define True  #define + BZ_N_QSORT + BZ_N_SHELL + 2)
(95.8 %, 8543 bytes)
155c155
< #define True  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define True  2)
155c155
< #define True  (BZ_N_RADIX + BZ_N_QSORT + BZ_N_SHELL + 2)
---
> #define True  ()
(95.9 %, 8503 bytes)
155,165c155
< #define True  2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define True  strm;
155,165c155
< #define True  2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       bz_stream* strm;
---
> #define True  2;
162,169c162
< typedef
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    arr2;
---
> Int32    arr2;
163,169c163
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    arr2;
---
>    arr2;
163,169c163
<    struct {
<       
<       bz_stream* strm;
< 
<       
<       
<       Int32    arr2;
---
>    struct ;
165,169d164
<       bz_stream* strm;
< 
<       
<       
<       Int32    arr2;
165,170c165
<       bz_stream* strm;
< 
<       
<       
<       Int32    arr2;
<       UInt32*  ftab;
---
>       bz_stream*  ftab;
165,170c165
<       bz_stream* strm;
< 
<       
<       
<       Int32    arr2;
<       UInt32*  ftab;
---
>       bz_stream* ftab;
(95.9 %, 8444 bytes)
165,170c165
<       UInt32*  ftab;
<       
< 
<       
<       ;
<       UChar*   zbits;
---
>       zbits;
165,170c165
<       UInt32*  ftab;
<       
< 
<       
<       ;
<       UChar*   zbits;
---
>       UInt32;
165,173c165
<       UInt32*  ftab;
<       
< 
<       
<       ;
<       UChar*   zbits;
< 
<       
<       Int32    verbosity;
---
>       UInt32*  Int32    verbosity;
165,173c165
<       UInt32*  ftab;
<       
< 
<       
<       ;
<       UChar*   zbits;
< 
<       
<       Int32    verbosity;
---
>       UInt32*  ftabverbosity;
(95.9 %, 8392 bytes)
165,170c165
<       UInt32;
< 
<       
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       UInt32Int32    blockSize100k;
168,170c168
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       blockSize100k;
168,170c168
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
---
>       Int32    ;
168,184c168
<       Int32    verbosity;
<       Int32    blockNo;
<       Int32    blockSize100k;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
---
>       Int32    verbosity}
(95.9 %, 8329 bytes)
168,204c168
<       Int32    ;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
>       Int32    struct {
182,204c182
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
>    {
183,206c183
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
---
>    ;
185,219d184
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
191,224c191
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
> UInt32   calculatedCombinedCRC;
193,224c193
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
> calculatedCombinedCRC;
203,224c203
< typedef
<    struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
> ;
204,269d203
<    struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
204,271c204
<    struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>    struct DState;
208,272d207
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
218,277c218
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< \
---
>       \
224,308c224
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
---
>       static
224,309c224
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ;
---
>       UInt32   void* default_bzalloc ;
224,309c224
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ;
---
>       UInt32   calculatedCombinedCRC* default_bzalloc ;
270,309c270
<    }
<    DState;
< 
< 
< 
< 
< 
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ;
---
>    default_bzalloc ;
271,309c271
<    DState;
< 
< 
< 
< 
< 
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ;
---
>    ;
271,311c271
<    DState;
< 
< 
< 
< 
< 
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ;
< 
< static
---
>    DStatestatic
277,311d276
< \
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< static
< void* default_bzalloc ;
< 
< static
308,326d307
< static
< void* default_bzalloc ;
< 
< static
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
(96.0 %, 8258 bytes)
277,293c277
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> bz_stream* strm, 
292,293c292
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> * strm, 
292,293c292
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> int strm, 
292,293c292
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> int BZ_API, 
292,294c292
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int BZ_API(int        blockSize100k,
292,294c292
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int BZ_API(BZ2_bzCompressInitblockSize100k,
293,294c293
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ,
293,295c293
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( int        verbosity,
293,295c293
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( bz_streamverbosity,
293,295c293
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( bz_stream* ,
293,296c293
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                     ( bz_stream* strmint        workFactor )
294,296c294
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                      workFactor )
294,296c294
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
---
>                      int        )
294,297c294
<                      int        blockSize100k,
<                      int        verbosity,
<                      int        workFactor )
< {
---
>                      int        blockSize100k{
295,298c295
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                      Int32   n;
295,298c295
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        n;
295,298c295
<                      int        verbosity,
<                      int        workFactor )
< {
<    Int32   n;
---
>                      int        verbosity;
296,299c296
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      EState* s;
296,299c296
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        * s;
296,299c296
<                      int        workFactor )
< {
<    Int32   n;
<    EState* s;
---
>                      int        workFactor s;
297,299c297
< {
<    Int32   n;
<    EState* s;
---
> ;
298,300d297
<    Int32   n;
<    EState* s;
< 
298,301c298
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    Int32   (!1 || blockSize100k * sizeof(UInt32) );
298,301c298
<    Int32   n;
<    EState* s;
< 
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    Int32   n!1 || blockSize100k * sizeof(UInt32) );
299,301c299
<    EState* s;
< 
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    1 || blockSize100k * sizeof(UInt32) );
299,301c299
<    EState* s;
< 
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    EState|| blockSize100k * sizeof(UInt32) );
299,301c299
<    EState* s;
< 
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    EState* blockSize100k * sizeof(UInt32) );
299,301c299
<    EState* s;
< 
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    EState* s* sizeof(UInt32) );
301c301
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    sizeof(UInt32) );
301c301
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    if (UInt32) );
301c301
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    if (UInt32) );
(96.0 %, 8229 bytes)
298c298
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    sizeof(UInt32) );
298c298
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    if (UInt32) );
298c298
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    if (UInt32) );
298c298
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    if (!) );
298c298
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    if (!1 );
298c298
<    if (!1 || blockSize100k * sizeof(UInt32) );
---
>    if (!1 || ;
298,299c298
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
---
>    if (!1 || blockSize100k ;
298,301c298
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
< 
<    if NULL;
---
>    if (!1 || blockSize100k * if NULL;
298,301c298
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
< 
<    if NULL;
---
>    if (!1 || blockSize100k * sizeofNULL;
298,301c298
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
< 
<    if NULL;
---
>    if (!1 || blockSize100k * sizeof(;
298,302c298
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
< 
<    if NULL;
<    strm->total_in_hi32  = 0;
---
>    if (!1 || blockSize100k * sizeof(UInt32strm->total_in_hi32  = 0;
298,302c298
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
< 
<    if NULL;
<    strm->total_in_hi32  = 0;
---
>    if (!1 || blockSize100k * sizeof(UInt32) ->total_in_hi32  = 0;
298,302c298
<    if (!1 || blockSize100k * sizeof(UInt32) );
<    ;
< 
<    if NULL;
<    strm->total_in_hi32  = 0;
---
>    if (!1 || blockSize100k * sizeof(UInt32) )total_in_hi32  = 0;
299,302c299
<    ;
< 
<    if NULL;
<    strm->total_in_hi32  = 0;
---
>    = 0;
301,302c301
<    if NULL;
<    strm->total_in_hi32  = 0;
---
>    0;
(96.0 %, 8195 bytes)
298,302c298
<    if (!1 );
<    ;
< 
<    if NULL;
<    strm->total_in_hi32  = 0;
---
>    if (!1 ->total_in_hi32  = 0;
298,302c298
<    if (!1 );
<    ;
< 
<    if NULL;
<    strm->total_in_hi32  = 0;
---
>    if (!1 )total_in_hi32  = 0;
299,302c299
<    ;
< 
<    if NULL;
<    strm->total_in_hi32  = 0;
---
>    = 0;
301,302c301
<    if NULL;
<    strm->total_in_hi32  = 0;
---
>    0;
301,302c301
<    if NULL;
<    strm->total_in_hi32  = 0;
---
>    if ;
302,303d301
<    strm->total_in_hi32  = 0;
<    ;
(96.0 %, 8160 bytes)
301,316c301
<    0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    (BZ2_bzCompress) ( bz_stream *strm, int action )
301,316c301
<    0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    0BZ2_bzCompress) ( bz_stream *strm, int action )
302,316c302
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    ) ( bz_stream *strm, int action )
303,316c303
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    ( bz_stream *strm, int action )
303,316c303
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return bz_stream *strm, int action )
303,316c303
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    return BZ_OK*strm, int action )
304,316c304
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
> strm, int action )
316c316
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
> , int action )
316c316
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
> (int action )
316c316
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
> (BZ2_bzCompressaction )
316c316
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
> (BZ2_bzCompress) )
316,317c316
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
---
> (BZ2_bzCompress) ( {
316,319c316
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    ;
---
> (BZ2_bzCompress) ( bz_stream ;
316,321c316
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    ;
< 
<    strm->state = NULL;   
---
> (BZ2_bzCompress) ( bz_stream *strm->state = NULL;   
316,321c316
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    ;
< 
<    strm->state = NULL;   
---
> (BZ2_bzCompress) ( bz_stream *strm->state = NULL;   
316,321c316
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    ;
< 
<    strm->state = NULL;   
---
> (BZ2_bzCompress) ( bz_stream *strm, state = NULL;   
316,321c316
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    ;
< 
<    strm->state = NULL;   
---
> (BZ2_bzCompress) ( bz_stream *strm, int = NULL;   
316,321c316
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    ;
< 
<    strm->state = NULL;   
---
> (BZ2_bzCompress) ( bz_stream *strm, int action NULL;   
317,321c317
< {
<    
<    ;
< 
<    strm->state = NULL;   
---
> ;   
319,322d318
<    ;
< 
<    strm->state = NULL;   
< 
321,323c321
<    strm->state = NULL;   
< 
<    return BZ_OK;
---
>    BZ_OK;
(96.0 %, 8127 bytes)
319,328c319
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZ2_bzDecompressInit) 
319,328c319
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    return ) 
319,329c319
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
>    return BZ_OK( bz_stream* strm, 
320,329c320
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> bz_stream* strm, 
328,329c328
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> * strm, 
328,329c328
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> int strm, 
328,329c328
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> int BZ_API, 
328,330c328
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int BZ_API(int        verbosity,
328,330c328
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int BZ_API(BZ2_bzDecompressInitverbosity,
329,330c329
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ,
329,331c329
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( int        small )
329,331c329
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_streamsmall )
329,331c329
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_stream* )
329,332c329
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
---
>                      ( bz_stream* strm{
330,333c330
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                        DState* s;
330,333c330
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                        int        * s;
330,333c330
<                        int        verbosity,
<                        int        small )
< {
<    DState* s;
---
>                        int        verbositys;
331,333c331
<                        int        small )
< {
<    DState* s;
---
>                        ;
331,335c331
<                        int        small )
< {
<    DState* s;
< 
<    return BZ_OK;
---
>                        int        return BZ_OK;
331,335c331
<                        int        small )
< {
<    DState* s;
< 
<    return BZ_OK;
---
>                        int        small BZ_OK;
332,335c332
< {
<    DState* s;
< 
<    return BZ_OK;
---
> ;
333,336c333
<    DState* s;
< 
<    return BZ_OK;
< }
---
>    }
333,343c333
<    DState* s;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    DState#define BZ_SETERR(eee)                    \
333,343c333
<    DState* s;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    DState* define BZ_SETERR(eee)                    \
333,343c333
<    DState* s;
< 
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    DState* sBZ_SETERR(eee)                    \
335,343c335
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    (eee)                    \
335,343c335
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    return eee)                    \
335,343c335
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    return BZ_OK)                    \
336,343c336
< }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> \
343,345d342
< #define BZ_SETERR(eee)                    \
< 
< 
343,347c343
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> #struct {
(96.0 %, 8098 bytes)
333,340c333
<    }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    \
340,342d339
< #define BZ_SETERR(eee)                    \
< 
< 
340,344c340
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> #struct {
340,344c340
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> #define {
340,345c340
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define BZ_SETERRFILE*     handle;
340,345c340
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define BZ_SETERR(*     handle;
340,345c340
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define BZ_SETERR(eeehandle;
340,345c340
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define BZ_SETERR(eee)                    ;
343,346c343
< typedef 
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
> Char      buf[BZ_MAX_UNUSED];
344,346c344
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>    buf[BZ_MAX_UNUSED];
344,346c344
<    struct {
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>    struct [BZ_MAX_UNUSED];
345,346c345
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>       BZ_MAX_UNUSED];
345,346c345
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>       FILE];
345,346c345
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
---
>       FILE*     ;
345,347c345
<       FILE*     handle;
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       FILE*     handleInt32     bufN;
346,347c346
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       bufN;
346,347c346
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
---
>       Char      ;
346,348c346
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       Char      bufBool      writing;
346,348c346
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       Char      buf[writing;
346,348c346
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
---
>       Char      buf[BZ_MAX_UNUSED;
346,349c346
<       Char      buf[BZ_MAX_UNUSED];
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Char      buf[BZ_MAX_UNUSED]bz_stream strm;
347,349c347
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       strm;
347,349c347
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
---
>       Int32     ;
347,350c347
<       Int32     bufN;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Int32     bufNInt32     lastErr;
348,350c348
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       lastErr;
348,350c348
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Bool      ;
(96.1 %, 8058 bytes)
346,349c346
<       Char      ;
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Char      Int32     lastErr;
347,349c347
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       lastErr;
347,349c347
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
---
>       Bool      ;
347,350c347
<       Bool      writing;
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       Bool      writingBool      initialisedOk;
348,350c348
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       initialisedOk;
348,350c348
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
---
>       bz_stream ;
348,351c348
<       bz_stream strm;
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
---
>       bz_stream strm}
349,352c349
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       bzFile;
349,352c349
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
---
>       Int32     ;
349,360c349
<       Int32     lastErr;
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Int32     lastErrBZFILE* BZ_API(BZ2_bzWriteOpen) 
350,360c350
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       * BZ_API(BZ2_bzWriteOpen) 
350,360c350
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      BZ_API(BZ2_bzWriteOpen) 
350,360c350
<       Bool      initialisedOk;
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      initialisedOk(BZ2_bzWriteOpen) 
351,360c351
<    }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    BZ2_bzWriteOpen) 
352,360c352
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    ) 
(96.1 %, 7997 bytes)
348,357c348
<       bz_stream strm}
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strmBZ2_bzWriteOpen) 
349,357c349
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    ) 
349,358c349
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
>    bzFile( int*  bzerror,      
357,358c357
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> int*  bzerror,      
357,358c357
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE*  bzerror,      
357,358c357
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* bzerror,      
357,358c357
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API,      
357,359c357
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(FILE* f, 
357,359c357
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen* f, 
358,359c358
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     f, 
358,359c358
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( , 
358,360c358
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( intint   blockSize100k, 
358,360c358
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  blockSize100k, 
358,360c358
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  bzerror, 
359,360d358
<                       FILE* f, 
<                       int   blockSize100k, 
359,361c359
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILEverbosity,
359,361c359
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* ,
359,362c359
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* fint   workFactor )
360,362c360
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       workFactor )
360,362c360
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   )
360,363c360
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       int   blockSize100k{
361,364c361
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       Int32   ret;
361,364c361
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   ret;
361,364c361
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   verbosity;
362,365c362
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = bzf->handle        = f;
---
>                       bzFile* bzf = bzf->handle        = f;
362,365c362
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = bzf->handle        = f;
---
>                       int   * bzf = bzf->handle        = f;
362,365c362
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf = bzf->handle        = f;
---
>                       int   workFactor bzf = bzf->handle        = f;
363,365c363
< {
<    Int32   ret;
<    bzFile* bzf = bzf->handle        = f;
---
> = bzf->handle        = f;
364,365c364
<    Int32   ret;
<    bzFile* bzf = bzf->handle        = f;
---
>    bzf->handle        = f;
364,365c364
<    Int32   ret;
<    bzFile* bzf = bzf->handle        = f;
---
>    Int32   ->handle        = f;
364,365c364
<    Int32   ret;
<    bzFile* bzf = bzf->handle        = f;
---
>    Int32   rethandle        = f;
365c365
<    bzFile* bzf = bzf->handle        = f;
---
>    = f;
365c365
<    bzFile* bzf = bzf->handle        = f;
---
>    bzFilef;
365c365
<    bzFile* bzf = bzf->handle        = f;
---
>    bzFile* ;
365,366c365
<    bzFile* bzf = bzf->handle        = f;
<    ;
---
>    bzFile* bzf ;
365,367c365
<    bzFile* bzf = bzf->handle        = f;
<    ;
<    bzf= bzf;   
---
>    bzFile* bzf = bzf= bzf;   
(96.1 %, 7968 bytes)
365,372c365
<    bzFile* bzf ;
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzFile* bzf BZ_API(BZ2_bzWrite)
366,372c366
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    (BZ2_bzWrite)
366,372c366
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzfBZ2_bzWrite)
366,372c366
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    bzf= )
366,373c366
<    bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
>    bzf= bzf( int*    bzerror, 
367,373c367
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> int*    bzerror, 
372,373c372
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> *    bzerror, 
372,373c372
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void bzerror, 
372,373c372
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API, 
372,374c372
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(BZFILE* b, 
372,374c372
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(BZ2_bzWrite* b, 
373,374c373
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              b, 
373,374c373
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( , 
373,375c373
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( intvoid*   buf, 
373,375c373
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    *   buf, 
373,375c373
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    bzerrorbuf, 
374,375c374
<                BZFILE* b, 
<                void*   buf, 
---
>                , 
374,376c374
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILEint     len )
374,376c374
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* len )
374,376c374
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* b)
375,377c375
<                void*   buf, 
<                int     len )
< {
---
>                {
375,378c375
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                voidInt32   ret;
375,378c375
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                void*   ret;
375,378c375
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                void*   buf;
376,379c376
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>                bzFile* bzf = ((bzf->handle))
376,379c376
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>                int     * bzf = ((bzf->handle))
376,379c376
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>                int     len bzf = ((bzf->handle))
377,379c377
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
> = ((bzf->handle))
378,379c378
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>    ((bzf->handle))
378,379c378
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>    Int32   (bzf->handle))
378,379c378
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>    Int32   retbzf->handle))
379c379
<    bzFile* bzf = ((bzf->handle))
---
>    ->handle))
379c379
<    bzFile* bzf = ((bzf->handle))
---
>    bzFilehandle))
379c379
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* ))
379c379
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf )
379,380c379
<    bzFile* bzf = ((bzf->handle))
<       ;
---
>    bzFile* bzf = ;
379,382c379
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
---
>    bzFile* bzf = (len;
379,382c379
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
---
>    bzFile* bzf = ((;
379,383c379
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
---
>    bzFile* bzf = ((bzf{
379,384c379
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
<       }
---
>    bzFile* bzf = ((bzf->}
379,385c379
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
<       }
< }
---
>    bzFile* bzf = ((bzf->handle}
379,389c379
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    bzFile* bzf = ((bzf->handle)void BZ_API(BZ2_bzWriteClose)
380,389c380
<       ;
< 
<    len;
<    {
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       BZ_API(BZ2_bzWriteClose)
382,389c382
<    len;
<    {
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    (BZ2_bzWriteClose)
382,389c382
<    len;
<    {
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    lenBZ2_bzWriteClose)
383,389c383
<    {
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    )
384,390c384
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
>       ( int*          bzerror, 
385,390c385
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> int*          bzerror, 
389,390c389
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> *          bzerror, 
389,390c389
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void bzerror, 
389,390c389
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API, 
389,391c389
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZFILE*       b, 
389,391c389
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose*       b, 
390,391c390
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   b, 
390,391c390
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( , 
390,392c390
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( intint           abandon,
390,392c390
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          abandon,
390,392c390
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerror,
391,392d390
<                     BZFILE*       b, 
<                     int           abandon,
391,393c391
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILEint* nbytes_in,
391,393c391
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       * nbytes_in,
391,393c391
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       bnbytes_in,
392,393c392
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     ,
392,394c392
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           unsigned int* nbytes_out )
392,394c392
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandonint* nbytes_out )
393,394c393
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     * nbytes_out )
393,394c393
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned nbytes_out )
393,394c393
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned int)
393,395c393
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     unsigned int* {
393,396c393
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* nbytes_inBZ2_bzWriteClose64 ( bzerror, b, abandon, 
394,396c394
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     ( bzerror, b, abandon, 
394,396c394
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned bzerror, b, abandon, 
394,396c394
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int, b, abandon, 
394,396c394
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* b, abandon, 
394,396c394
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* nbytes_out , abandon, 
395,396c395
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
> abandon, 
396c396
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    , 
396,397c396
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 nbytes_in, NULL, nbytes_out, NULL );
396,397c396
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( , NULL, nbytes_out, NULL );
396,397c396
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerrorNULL, nbytes_out, NULL );
396,397c396
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, , nbytes_out, NULL );
396,397c396
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, bnbytes_out, NULL );
396,397c396
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, b, , NULL );
396,397c396
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, b, abandonNULL );
397c397
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         );
397c397
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_in;
397,398c397
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
>                         nbytes_in, }
397,401c397
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULLvoid BZ_API(BZ2_bzWriteClose64)
397,401c397
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL, BZ_API(BZ2_bzWriteClose64)
397,401c397
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL, nbytes_out(BZ2_bzWriteClose64)
397,401c397
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL, nbytes_out, BZ2_bzWriteClose64)
397,401c397
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL, nbytes_out, NULL )
397,402c397
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, nbytes_out, NULL )( int*          bzerror, 
398,402c398
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> int*          bzerror, 
401,402c401
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> *          bzerror, 
401,402c401
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void bzerror, 
401,402c401
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API, 
401,403c401
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZFILE*       b, 
401,403c401
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose64*       b, 
402,403c402
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   b, 
402,403c402
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( , 
402,404c402
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( intint           abandon,
402,404c402
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          abandon,
402,404c402
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerror,
403,404d402
<                     BZFILE*       b, 
<                     int           abandon,
403,405c403
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILEint* nbytes_in_lo32,
403,405c403
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       * nbytes_in_lo32,
403,405c403
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       bnbytes_in_lo32,
404,405c404
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     ,
404,406c404
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           unsigned int* nbytes_in_hi32,
404,406c404
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           abandonint* nbytes_in_hi32,
405,406c405
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     * nbytes_in_hi32,
405,406c405
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned nbytes_in_hi32,
405,406c405
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned int,
405,407c405
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* unsigned int* nbytes_out_lo32,
405,407c405
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_lo32int* nbytes_out_lo32,
406,407c406
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     * nbytes_out_lo32,
406,407c406
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned nbytes_out_lo32,
406,407c406
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int,
406,408c406
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* unsigned int* nbytes_out_hi32 )
406,408c406
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32int* nbytes_out_hi32 )
407,408c407
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     * nbytes_out_hi32 )
407,408c407
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned nbytes_out_hi32 )
407,408c407
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int)
407,409c407
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int* {
407,411c407
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned int* nbytes_out_lo32bzFile* bzf ;
408,411c408
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     * bzf ;
408,411c408
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned bzf ;
408,411c408
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned int;
408,412c408
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>                     unsigned int* if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
408,412c408
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>                     unsigned int* nbytes_out_hi32 (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
409,412c409
< {
<    
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
> !(bzf)!= NULL) *nbytes_out_hi32 = 0;
411,412c411
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    (bzf)!= NULL) *nbytes_out_hi32 = 0;
411,412c411
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    bzFilebzf)!= NULL) *nbytes_out_hi32 = 0;
411,412c411
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    bzFile* )!= NULL) *nbytes_out_hi32 = 0;
411,412c411
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    bzFile* bzf != NULL) *nbytes_out_hi32 = 0;
412c412
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    NULL) *nbytes_out_hi32 = 0;
412c412
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    if ) *nbytes_out_hi32 = 0;
412c412
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    if (*nbytes_out_hi32 = 0;
412c412
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    if (!nbytes_out_hi32 = 0;
412c412
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    if (!(= 0;
412c412
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    if (!(bzf0;
412c412
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
---
>    if (!(bzf);
412,414c412
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
---
>    if (!(bzf)!= ;
412,415c412
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
---
>    if (!(bzf)!= NULL0;
412,415c412
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
---
>    if (!(bzf)!= NULL) ;
412,416c412
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
<    0;
---
>    if (!(bzf)!= NULL) *0;
412,416c412
<    if (!(bzf)!= NULL) *nbytes_out_hi32 = 0;
< 
<    ;
<    0;
<    0;
---
>    if (!(bzf)!= NULL) *nbytes_out_hi32 ;
(96.1 %, 7936 bytes)
412,418c412
<    if (!(bzf)!= NULL) ;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (!(bzf)!= NULL) (BZ2_bzReadOpen) 
413,418c413
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    BZ2_bzReadOpen) 
413,418c413
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    0) 
414,419c414
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> ( int*  bzerror, 
418,419c418
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> int*  bzerror, 
418,419c418
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE*  bzerror, 
418,419c418
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* bzerror, 
418,419c418
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_API, 
418,420c418
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(FILE* f, 
418,420c418
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzReadOpen* f, 
419,420c419
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    f, 
419,420c419
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( , 
419,421c419
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( intint   verbosity,
419,421c419
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  verbosity,
419,421c419
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  bzerror,
420,421d419
<                      FILE* f, 
<                      int   verbosity,
420,422c420
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILEsmall,
420,422c420
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE* ,
420,423c420
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* fvoid* unused,
421,423c421
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      * unused,
421,423c421
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   unused,
422,423d421
<                      int   small,
<                      void* unused,
422,423d421
<                      int   small,
<                      void* unused,
422,423d421
<                      int   small,
<                      void* unused,
422,424c422
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   small)
423,425c423
<                      void* unused,
<                      int   nUnused )
< {
---
>                      {
423,426c423
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      voidbzFile* bzf = (f ||
423,426c423
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      void* * bzf = (f ||
423,426c423
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      void* unusedbzf = (f ||
424,426c424
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      = (f ||
424,426c424
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      int   (f ||
424,426c424
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      int   nUnused f ||
425,426c425
< {
<    bzFile* bzf = (f ||
---
> ||
426,427c426
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
426,427c426
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile(nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
426,427c426
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
426,427c426
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf < 0 || nUnused > BZ_MAX_UNUSED)))
426,427c426
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf = 0 || nUnused > BZ_MAX_UNUSED)))
426,427c426
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf = (|| nUnused > BZ_MAX_UNUSED)))
426,427c426
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf = (f nUnused > BZ_MAX_UNUSED)))
427c427
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        > BZ_MAX_UNUSED)))
427c427
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (BZ_MAX_UNUSED)))
427c427
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (()))
427c427
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ((nUnused ))
427c427
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ((nUnused < )
427,428c427
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;   
---
>        ((nUnused < 0 ;   
427,429c427
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;   
< }
---
>        ((nUnused < 0 || }
427,433c427
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>        ((nUnused < 0 || nUnused void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
427,433c427
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>        ((nUnused < 0 || nUnused > BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
427,433c427
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
427,433c427
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
427,433c427
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED))) ( int *bzerror, BZFILE *b )
428,433c428
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
>       ( int *bzerror, BZFILE *b )
429,433c429
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> int *bzerror, BZFILE *b )
433c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> *bzerror, BZFILE *b )
433c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void bzerror, BZFILE *b )
433c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API, BZFILE *b )
433c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZFILE *b )
433c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose*b )
433c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) b )
433c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
---
> void BZ_API(BZ2_bzReadClose) ( )
433,434c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
---
> void BZ_API(BZ2_bzReadClose) ( int {
433,435c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf ;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzFile* bzf ;
433,435c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf ;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror* bzf ;
433,435c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf ;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, bzf ;
433,435c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf ;
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE ;
433,436c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf ;
< }
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *}
433,440c433
< void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b )
< {
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int *bzerror, BZFILE *b int BZ_API(BZ2_bzRead) 
434,440c434
< {
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> BZ_API(BZ2_bzRead) 
435,440c435
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    (BZ2_bzRead) 
(96.1 %, 7912 bytes)
433,440c433
< void BZ_API(BZ2_bzReadClose) ( )
< {
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> void BZ_API(BZ2_bzReadClose) ( int BZ_API(BZ2_bzRead) 
434,440c434
< {
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> BZ_API(BZ2_bzRead) 
435,440c435
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    (BZ2_bzRead) 
435,440c435
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFileBZ2_bzRead) 
435,440c435
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* ) 
435,441c435
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
>    bzFile* bzf ( int*    bzerror, 
436,441c436
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int*    bzerror, 
440,441c440
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> *    bzerror, 
440,441c440
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int bzerror, 
440,441c440
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API, 
440,442c440
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(BZFILE* b, 
440,442c440
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(BZ2_bzRead* b, 
441,442c441
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            b, 
441,442c441
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( , 
441,443c441
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( intvoid*   buf, 
441,443c441
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    *   buf, 
441,443c441
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    bzerrorbuf, 
442,443c442
<              BZFILE* b, 
<              void*   buf, 
---
>              , 
442,444c442
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILEint     len )
442,444c442
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* len )
442,444c442
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* b)
443,445c443
<              void*   buf, 
<              int     len )
< {
---
>              {
443,447c443
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              voidbzFile* bzf = (bzFile*)b;
443,447c443
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   * bzf = (bzFile*)b;
443,447c443
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   bufbzf = (bzFile*)b;
444,447c444
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              = (bzFile*)b;
444,447c444
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              int     (bzFile*)b;
444,447c444
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              int     len bzFile*)b;
445,447c445
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
> *)b;
447c447
<    bzFile* bzf = (bzFile*)b;
---
>    )b;
447c447
<    bzFile* bzf = (bzFile*)b;
---
>    bzFileb;
447c447
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* ;
447,449c447
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf BZ_SETERR(len len == 0)
447,449c447
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf = (len len == 0)
447,449c447
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf = (len len == 0)
447,449c447
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf = (bzFilelen == 0)
447,449c447
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf = (bzFile*== 0)
447,449c447
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf = (bzFile*)0)
447,449c447
<    bzFile* bzf = (bzFile*)b;
< 
<    BZ_SETERR(len len == 0)
---
>    bzFile* bzf = (bzFile*)b)
449,450c449
<    BZ_SETERR(len len == 0)
<       }
---
>    }
449,454c449
<    BZ_SETERR(len len == 0)
<       }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ_SETERRvoid BZ_API(BZ2_bzReadGetUnused) 
449,454c449
<    BZ_SETERR(len len == 0)
<       }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ_SETERR(BZ_API(BZ2_bzReadGetUnused) 
449,454c449
<    BZ_SETERR(len len == 0)
<       }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ_SETERR(len (BZ2_bzReadGetUnused) 
449,454c449
<    BZ_SETERR(len len == 0)
<       }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ_SETERR(len len BZ2_bzReadGetUnused) 
449,454c449
<    BZ_SETERR(len len == 0)
<       }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    BZ_SETERR(len len == ) 
449,455c449
<    BZ_SETERR(len len == 0)
<       }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    BZ_SETERR(len len == 0( int*    bzerror, 
450,455c450
<       }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>       int*    bzerror, 
454,455c454
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> *    bzerror, 
454,455c454
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void bzerror, 
454,455c454
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API, 
(96.2 %, 7882 bytes)
449,454c449
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    int*    bzerror, 
453,454c453
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> *    bzerror, 
453,454c453
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void bzerror, 
453,454c453
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API, 
453,455c453
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZFILE* b, 
453,455c453
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZ2_bzReadGetUnused* b, 
454,455c454
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      b, 
454,455c454
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( , 
454,456c454
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( intvoid**  unused, 
454,456c454
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    **  unused, 
454,456c454
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerror*  unused, 
455,456c455
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        unused, 
455,456c455
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE, 
455,457c455
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* int*    nUnused )
455,457c455
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* b*    nUnused )
456,457c456
<                        void**  unused, 
<                        int*    nUnused )
---
>                        nUnused )
456,457c456
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void)
456,458c456
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        void*{
456,459c456
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = bzf->strm.next_in;
---
>                        void**  bzFile* bzf = bzf->strm.next_in;
456,459c456
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = bzf->strm.next_in;
---
>                        void**  unused* bzf = bzf->strm.next_in;
457,459c457
<                        int*    nUnused )
< {
<    bzFile* bzf = bzf->strm.next_in;
---
>                        bzf = bzf->strm.next_in;
457,459c457
<                        int*    nUnused )
< {
<    bzFile* bzf = bzf->strm.next_in;
---
>                        int= bzf->strm.next_in;
457,459c457
<                        int*    nUnused )
< {
<    bzFile* bzf = bzf->strm.next_in;
---
>                        int*    bzf->strm.next_in;
457,459c457
<                        int*    nUnused )
< {
<    bzFile* bzf = bzf->strm.next_in;
---
>                        int*    nUnused ->strm.next_in;
458,459c458
< {
<    bzFile* bzf = bzf->strm.next_in;
---
> strm.next_in;
459c459
<    bzFile* bzf = bzf->strm.next_in;
---
>    .next_in;
459c459
<    bzFile* bzf = bzf->strm.next_in;
---
>    bzFilenext_in;
459c459
<    bzFile* bzf = bzf->strm.next_in;
---
>    bzFile* ;
459,460c459
<    bzFile* bzf = bzf->strm.next_in;
< }
---
>    bzFile* bzf }
459,468c459
<    bzFile* bzf = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    bzFile* bzf = int BZ_API(BZ2_bzBuffToBuffCompress) 
459,468c459
<    bzFile* bzf = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    bzFile* bzf = bzfBZ_API(BZ2_bzBuffToBuffCompress) 
459,468c459
<    bzFile* bzf = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    bzFile* bzf = bzf->(BZ2_bzBuffToBuffCompress) 
459,468c459
<    bzFile* bzf = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    bzFile* bzf = bzf->strmBZ2_bzBuffToBuffCompress) 
459,468c459
<    bzFile* bzf = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    bzFile* bzf = bzf->strm.) 
459,469c459
<    bzFile* bzf = bzf->strm.next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
>    bzFile* bzf = bzf->strm.next_in( char*         dest, 
460,469c460
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> char*         dest, 
468,469c468
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> *         dest, 
468,469c468
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int dest, 
468,469c468
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API, 
468,470c468
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(unsigned int* destLen,
468,470c468
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompressint* destLen,
469,470c469
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          * destLen,
469,470c469
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( destLen,
469,470c469
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char,
469,471c469
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         char*         source, 
469,471c469
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         dest*         source, 
470,471c470
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            source, 
470,471c470
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned , 
470,472c470
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned intunsigned int  sourceLen,
470,472c470
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* int  sourceLen,
470,472c470
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* destLensourceLen,
471,472c471
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            ,
471,473c471
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            charint           blockSize100k, 
471,473c471
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         blockSize100k, 
472,473d471
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
472,473d471
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
472,474c472
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned verbosity, 
472,474c472
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  , 
472,475c472
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned int  sourceLenint           workFactor )
473,475c473
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            workFactor )
473,475c473
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           )
473,476c473
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            int           blockSize100k{
474,477c474
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            bz_stream strm;
474,477c474
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           strm;
474,477c474
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           verbosity;
475,478c475
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int ret;
475,478c475
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           ret;
475,478c475
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           workFactor ;
476,480c476
< {
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
---
> if (verbosity > 4 ||
477,480c477
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
---
>    (verbosity > 4 ||
477,480c477
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
---
>    bz_stream verbosity > 4 ||
477,480c477
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
---
>    bz_stream strm> 4 ||
478,480c478
<    int ret;
< 
<    if (verbosity > 4 ||
---
>    4 ||
478,480c478
<    int ret;
< 
<    if (verbosity > 4 ||
---
>    int ||
478,481c478
<    int ret;
< 
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    int retworkFactor == 0) workFactor = source;
480,481c480
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    == 0) workFactor = source;
480,481c480
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    if 0) workFactor = source;
480,481c480
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    if () workFactor = source;
480,481c480
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    if (verbosity workFactor = source;
480,481c480
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    if (verbosity > = source;
480,481c480
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    if (verbosity > 4 source;
481c481
<        workFactor == 0) workFactor = source;
---
>        ;
481,482c481
<        workFactor == 0) workFactor = source;
<    return ret;
---
>        workFactor return ret;
481,482c481
<        workFactor == 0) workFactor = source;
<    return ret;
---
>        workFactor == ret;
481,482c481
<        workFactor == 0) workFactor = source;
<    return ret;
---
>        workFactor == 0;
481,483c481
<        workFactor == 0) workFactor = source;
<    return ret;
< }
---
>        workFactor == 0) }
481,487c481
<        workFactor == 0) workFactor = source;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>        workFactor == 0) workFactor int BZ_API(BZ2_bzBuffToBuffDecompress) 
481,487c481
<        workFactor == 0) workFactor = source;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>        workFactor == 0) workFactor = BZ_API(BZ2_bzBuffToBuffDecompress) 
481,487c481
<        workFactor == 0) workFactor = source;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>        workFactor == 0) workFactor = source(BZ2_bzBuffToBuffDecompress) 
482,487c482
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    BZ2_bzBuffToBuffDecompress) 
482,487c482
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    return ) 
482,488c482
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
>    return ret( char*         dest, 
483,488c483
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> char*         dest, 
487,488c487
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> *         dest, 
487,488c487
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int dest, 
487,488c487
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API, 
487,489c487
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(unsigned int* destLen,
487,489c487
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressint* destLen,
488,489c488
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            * destLen,
488,489c488
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( destLen,
488,489c488
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char,
488,490c488
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         char*         source, 
488,490c488
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         dest*         source, 
489,490c489
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              source, 
489,490c489
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned , 
489,491c489
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned intunsigned int  sourceLen,
489,491c489
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* int  sourceLen,
489,491c489
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* destLensourceLen,
490,491c490
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              ,
490,492c490
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              charint           small,
490,492c490
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         small,
490,492c490
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         source,
491,492d490
<                              unsigned int  sourceLen,
<                              int           small,
491,493c491
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned verbosity )
491,493c491
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int  )
491,494c491
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
< {
---
>                              unsigned int  sourceLen{
492,495c492
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              bz_stream strm;
492,495c492
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              int           strm;
492,495c492
<                              int           small,
<                              int           verbosity )
< {
<    bz_stream strm;
---
>                              int           small;
493,496c493
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              int ret;
493,496c493
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              int           ret;
493,496c493
<                              int           verbosity )
< {
<    bz_stream strm;
<    int ret;
---
>                              int           verbosity ;
494,498c494
< {
<    bz_stream strm;
<    int ret;
< 
<    ret; 
---
> ret; 
495,498c495
<    bz_stream strm;
<    int ret;
< 
<    ret; 
---
>    ; 
495,499c495
<    bz_stream strm;
<    int ret;
< 
<    ret; 
< BZ_VERSION;
---
>    bz_stream BZ_VERSION;
496,499d495
<    int ret;
< 
<    ret; 
< BZ_VERSION;
(96.2 %, 7847 bytes)
495,503c495
<    ; 
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    bzopen_or_bzdopen
496,504c496
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const ,
---
> ( const ,
496,504c496
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const ,
---
> BZ_VERSIONconst ,
497,504c497
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const ,
---
> ,
502,505c502
< static
< BZFILE * bzopen_or_bzdopen
<                ( const ,
<                  int open_mode)      
---
> int open_mode)      
503,505c503
< BZFILE * bzopen_or_bzdopen
<                ( const ,
<                  int open_mode)      
---
> open_mode)      
503,505c503
< BZFILE * bzopen_or_bzdopen
<                ( const ,
<                  int open_mode)      
---
> BZFILE )      
503,506c503
< BZFILE * bzopen_or_bzdopen
<                ( const ,
<                  int open_mode)      
< ;
---
> BZFILE * ;
504,511c504
<                ( const ,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                BZFILE * BZ_API(BZ2_bzopen)
504,511c504
<                ( const ,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( * BZ_API(BZ2_bzopen)
504,511c504
<                ( const ,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( const BZ_API(BZ2_bzopen)
505,511c505
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  (BZ2_bzopen)
505,511c505
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  int BZ2_bzopen)
505,511c505
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  int open_mode)
506,512c506
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> ( const char *path,
511,512c511
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> const char *path,
511,512c511
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE char *path,
511,512c511
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * *path,
511,512c511
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * BZ_APIpath,
511,512c511
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
---
> BZFILE * BZ_API(,
511,513c511
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const char *path,
<                  const char *mode )
---
> BZFILE * BZ_API(BZ2_bzopenconst char *mode )
512,513c512
<                ( const char *path,
<                  const char *mode )
---
>                char *mode )
512,513c512
<                ( const char *path,
<                  const char *mode )
---
>                ( *mode )
512,513c512
<                ( const char *path,
<                  const char *mode )
---
>                ( const mode )
512,513c512
<                ( const char *path,
<                  const char *mode )
---
>                ( const char )
512,514c512
<                ( const char *path,
<                  const char *mode )
< {
---
>                ( const char *{
512,515c512
<                ( const char *path,
<                  const char *mode )
< {
<    return 0;
---
>                ( const char *pathreturn 0;
513,515c513
<                  const char *mode )
< {
<    return 0;
---
>                  0;
513,515c513
<                  const char *mode )
< {
<    return 0;
---
>                  const ;
513,516c513
<                  const char *mode )
< {
<    return 0;
< }
---
>                  const char }
513,520c513
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char *BZFILE * BZ_API(BZ2_bzdopen)
513,520c513
<                  const char *mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                  const char *mode * BZ_API(BZ2_bzdopen)
514,520c514
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZ_API(BZ2_bzdopen)
(96.2 %, 7806 bytes)
512,519c512
<                ( const mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const BZFILE * BZ_API(BZ2_bzdopen)
512,519c512
<                ( const mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const mode * BZ_API(BZ2_bzdopen)
513,519c513
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZ_API(BZ2_bzdopen)
514,519c514
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    (BZ2_bzdopen)
514,519c514
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    return BZ2_bzdopen)
514,519c514
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    return 0)
515,520c515
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> ( int fd,
519,520c519
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> int fd,
519,520c519
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE fd,
519,520c519
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE * ,
519,521c519
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char ** b, void* buf, int len )
---
> BZFILE * BZ_APIconst char ** b, void* buf, int len )
519,521c519
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char ** b, void* buf, int len )
---
> BZFILE * BZ_API(char ** b, void* buf, int len )
519,521c519
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const char ** b, void* buf, int len )
---
> BZFILE * BZ_API(BZ2_bzdopen** b, void* buf, int len )
520,521c520
<                ( int fd,
<                  const char ** b, void* buf, int len )
---
>                * b, void* buf, int len )
520,521c520
<                ( int fd,
<                  const char ** b, void* buf, int len )
---
>                ( b, void* buf, int len )
520,521c520
<                ( int fd,
<                  const char ** b, void* buf, int len )
---
>                ( int , void* buf, int len )
520,521c520
<                ( int fd,
<                  const char ** b, void* buf, int len )
---
>                ( int fdvoid* buf, int len )
521c521
<                  const char ** b, void* buf, int len )
---
>                  * buf, int len )
521c521
<                  const char ** b, void* buf, int len )
---
>                  const buf, int len )
521c521
<                  const char ** b, void* buf, int len )
---
>                  const char , int len )
521c521
<                  const char ** b, void* buf, int len )
---
>                  const char *int len )
521c521
<                  const char ** b, void* buf, int len )
---
>                  const char ** len )
(96.2 %, 7789 bytes)
521,523c521
<                  const buf, int len )
< {
<    int bzerr, nread;
---
>                  const bzerr, nread;
521,523c521
<                  const buf, int len )
< {
<    int bzerr, nread;
---
>                  const buf, nread;
521,523c521
<                  const buf, int len )
< {
<    int bzerr, nread;
---
>                  const buf, nread;
521,523c521
<                  const buf, int len )
< {
<    int bzerr, nread;
---
>                  const buf, int ;
521,524c521
<                  const buf, int len )
< {
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>                  const buf, int len if (bzerr == BZ_STREAM_END) {
522,524c522
< {
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
> (bzerr == BZ_STREAM_END) {
523,524c523
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    bzerr == BZ_STREAM_END) {
523,524c523
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int == BZ_STREAM_END) {
523,524c523
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerrBZ_STREAM_END) {
523,524c523
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr, ) {
523,524c523
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr, nread{
524,525c524
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
---
>    return nread;
524,525c524
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if nread;
524,525c524
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
---
>    if (;
524,526c524
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr } else {
524,526c524
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == else {
524,526c524
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
---
>    if (bzerr == BZ_STREAM_END{
524,527c524
<    if (bzerr == BZ_STREAM_END) {
<       return nread;
<    } else {
<       return -1;
---
>    if (bzerr == BZ_STREAM_END) return -1;
525,527c525
<       return nread;
<    } else {
<       return -1;
---
>       -1;
525,527c525
<       return nread;
<    } else {
<       return -1;
---
>       return 1;
526,527d525
<    } else {
<       return -1;
(96.2 %, 7750 bytes)
525,531c525
<       -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       (BZ2_bzwrite) (BZFILE* b, void* buf, int len )
525,531c525
<       -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       -BZ2_bzwrite) (BZFILE* b, void* buf, int len )
525,531c525
<       -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>       -1) (BZFILE* b, void* buf, int len )
526,531c526
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
>    (BZFILE* b, void* buf, int len )
527,531c527
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> BZFILE* b, void* buf, int len )
531c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> * b, void* buf, int len )
531c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int b, void* buf, int len )
531c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API, void* buf, int len )
531c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(void* buf, int len )
531c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite* buf, int len )
531c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) buf, int len )
531c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (, int len )
531c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILEint len )
531c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE* len )
531c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b)
531,532c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, {
531,533c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int ;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, voidint ;
531,533c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int ;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* ;
531,534c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int ;
<    FILE handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* bufFILE handle;
531,534c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int ;
<    FILE handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, handle;
531,534c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int ;
<    FILE handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int ;
531,536c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len )
< {
<    int ;
<    FILE handle;
<    
<    if (b==NULL){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b, void* buf, int len if (b==NULL){
532,536c532
< {
<    int ;
<    FILE handle;
<    
<    if (b==NULL){
---
> (b==NULL){
(96.2 %, 7729 bytes)
531,536c531
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
< {
<    int ;
<    FILE handle;
<    
<    if (b==NULL){
---
> int BZ_API(BZ2_bzwrite) (BZFILE* bif (b==NULL){
532,536c532
< {
<    int ;
<    FILE handle;
<    
<    if (b==NULL){
---
> (b==NULL){
533,536c533
<    int ;
<    FILE handle;
<    
<    if (b==NULL){
---
>    b==NULL){
533,536c533
<    int ;
<    FILE handle;
<    
<    if (b==NULL){
---
>    int ==NULL){
534,536c534
<    FILE handle;
<    
<    if (b==NULL){
---
>    NULL){
534,536c534
<    FILE handle;
<    
<    if (b==NULL){
---
>    FILE ){
534,536c534
<    FILE handle;
<    
<    if (b==NULL){
---
>    FILE handle{
536,537c536
<    if (b==NULL){
<       ;
---
>    ;
536,538c536
<    if (b==NULL){
<       ;
<       ;
---
>    if ;
536,539c536
<    if (b==NULL){
<       ;
<       ;
<    }
---
>    if (}
536,540c536
<    if (b==NULL){
<       ;
<       ;
<    }
< }
---
>    if (b}
536,545c536
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b==static char *bzerrorstrings[] = {
536,545c536
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b==NULLchar *bzerrorstrings[] = {
536,545c536
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b==NULL)*bzerrorstrings[] = {
537,545c537
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       bzerrorstrings[] = {
538,545c538
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       [] = {
539,545c539
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    ] = {
540,545c540
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> = {
545c545
< static char *bzerrorstrings[] = {
---
> {
545,546c545
< static char *bzerrorstrings[] = {
<        "OK"
---
> static "OK"
545,547c545
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
---
> static char ,"???"   
545,547c545
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
---
> static char *"???"   
545,548c545
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
---
> static char *bzerrorstrings,"???"   
545,548c545
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
---
> static char *bzerrorstrings["???"   
545,549c545
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] };
545,549c545
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = ;
546,552c546
<        "OK"
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>        const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
547,552c547
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
547,552c547
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,* BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
548,552c548
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
548,552c548
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
>       ,(BZ2_bzerror) (BZFILE *b, int *errnum)
549,552c549
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> BZ2_bzerror) (BZFILE *b, int *errnum)
549,552c549
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> }) (BZFILE *b, int *errnum)
552c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> (BZFILE *b, int *errnum)
552c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const BZFILE *b, int *errnum)
552c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char *b, int *errnum)
552c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * b, int *errnum)
552c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API, int *errnum)
552c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(int *errnum)
552c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror*errnum)
552c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) errnum)
552c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
---
> const char * BZ_API(BZ2_bzerror) ()
552,553c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
---
> const char * BZ_API(BZ2_bzerror) (BZFILE {
552,554c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    ;
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *;
552,555c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    ;
< }
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b}
552,584c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, #define BZ_UNIX      1
552,584c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int define BZ_UNIX      1
552,584c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *BZ_UNIX      1
552,584c552
< const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum)
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> const char * BZ_API(BZ2_bzerror) (BZFILE *b, int *errnum1
553,586d552
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
554,587c554
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
>    define BZ_LCCWIN32  )  
555,587c555
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
> BZ_LCCWIN32  )  
(96.2 %, 7707 bytes)
552,584c552
< const char * BZ_API(BZ2_bzerror) ()
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
---
> const char * BZ_API(BZ2_bzerror) (1
553,586d552
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
554,587c554
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
>    define BZ_LCCWIN32  )  
555,587c555
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
> BZ_LCCWIN32  )  
584,587c584
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
---
> )  
584,588c584
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> ##define ERROR_IF_MINUS_ONE(i) 
584,588c584
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define define ERROR_IF_MINUS_ONE(i) 
584,588c584
< #define BZ_UNIX      1
< 
< 
< #define BZ_LCCWIN32  )  
< #define ERROR_IF_MINUS_ONE(i) 
---
> #define BZ_UNIX      ERROR_IF_MINUS_ONE(i) 
(96.3 %, 7664 bytes)
584,590c584
< #define define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #
\ No newline at end of file
---
> #define 
\ No newline at end of file
584,590c584
< #define define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #
\ No newline at end of file
---
> #define define 
\ No newline at end of file
584,590c584
< #define define ERROR_IF_MINUS_ONE(i) 
< 
< 
< 
< 
< 
< #
\ No newline at end of file
---
> #define define ERROR_IF_MINUS_ONE
\ No newline at end of file
(96.3 %, 7635 bytes)
===< pass_clex :: rm-toks-6 >===
9,11d8
< #2
< 
< #define BZ_OK                3
9,11d8
< #2
< 
< #define BZ_OK                3
11,12c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
---
> BZ_STREAM_END        4
11,12c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
---
> #4
11,13c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> #define #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
11,13c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OK                define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> #BZ_CONFIG_ERROR      (-9)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> #define (-9)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> #define BZ_STREAM_END        -9)
13c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> 9)
13c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> #)
13,15c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #define typedef 
13,16c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_PARAM_ERROR       struct {
13,16c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      {
13,17c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (char *next_in;
13,17c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-*next_in;
13,17c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9next_in;
15,17c15
< typedef 
<    struct {
<       char *next_in;
---
> ;
16,18c16
<    struct {
<       char *next_in;
<       ;
---
>    ;
16,19c16
<    struct {
<       char *next_in;
<       ;
<       unsigned int total_in_hi32;
---
>    struct unsigned int total_in_hi32;
17,19c17
<       char *next_in;
<       ;
<       unsigned int total_in_hi32;
---
>       int total_in_hi32;
17,19c17
<       char *next_in;
<       ;
<       unsigned int total_in_hi32;
---
>       char total_in_hi32;
17,19c17
<       char *next_in;
<       ;
<       unsigned int total_in_hi32;
---
>       char *;
19,22d18
<       unsigned int total_in_hi32;
< 
<       ;
<       ;
19,22d18
<       unsigned int total_in_hi32;
< 
<       ;
<       ;
(96.3 %, 7584 bytes)
17,22c17
<       char *next_in;
<       ;
< 
<       void *state;
< 
<       void *(*bzalloc)(void );
---
>       char *next_invoid *(*bzalloc)(void );
18,22c18
<       ;
< 
<       void *state;
< 
<       void *(*bzalloc)(void );
---
>       *(*bzalloc)(void );
20,22c20
<       void *state;
< 
<       void *(*bzalloc)(void );
---
>       (*bzalloc)(void );
20,22c20
<       void *state;
< 
<       void *(*bzalloc)(void );
---
>       void *bzalloc)(void );
20,22c20
<       void *state;
< 
<       void *(*bzalloc)(void );
---
>       void *bzalloc)(void );
20,22c20
<       void *state;
< 
<       void *(*bzalloc)(void );
---
>       void *state)(void );
22c22
<       void *(*bzalloc)(void );
---
>       (void );
22c22
<       void *(*bzalloc)(void );
---
>       void void );
22c22
<       void *(*bzalloc)(void );
---
>       void *);
22c22
<       void *(*bzalloc)(void );
---
>       void *(;
22,23c22
<       void *(*bzalloc)(void );
<       void *opaque;
---
>       void *(*void *opaque;
22,23c22
<       void *(*bzalloc)(void );
<       void *opaque;
---
>       void *(*bzalloc*opaque;
22,23c22
<       void *(*bzalloc)(void );
<       void *opaque;
---
>       void *(*bzalloc)opaque;
22,23c22
<       void *(*bzalloc)(void );
<       void *opaque;
---
>       void *(*bzalloc)(;
22,24c22
<       void *(*bzalloc)(void );
<       void *opaque;
<    } 
---
>       void *(*bzalloc)(void } 
22,25c22
<       void *(*bzalloc)(void );
<       void *opaque;
<    } 
<    bz_stream;
---
>       void *(*bzalloc)(void )bz_stream;
23,25c23
<       void *opaque;
<    } 
<    bz_stream;
---
>       ;
23,29c23
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void #include <stdio.h>
23,29c23
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *include <stdio.h>
23,29c23
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *opaque<stdio.h>
24,29c24
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    stdio.h>
25,29c25
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    .h>
25,29c25
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_streamh>
29c29
< #include <stdio.h>
---
> >
29,31c29
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> ##   define BZ_API(func) func
29,31c29
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include define BZ_API(func) func
29,31c29
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <BZ_API(func) func
29,31c29
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio(func) func
29,31c29
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.func) func
29,31c29
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.h) func
31c31
< #   define BZ_API(func) func
---
> func
31,32c31
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   #   define BZ_EXTERN extern
31,32c31
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define define BZ_EXTERN extern
31,32c31
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_APIBZ_EXTERN extern
31,32c31
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(extern
31,37c31
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
---
> #   define BZ_API(func(BZ2_bzDecompressInit) ( 
31,37c31
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
---
> #   define BZ_API(func) BZ2_bzDecompressInit) ( 
32,37c32
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
---
> ) ( 
32,37c32
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
---
> #   ( 
32,38c32
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> #   define bz_stream *strm, 
32,38c32
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> #   define BZ_EXTERN *strm, 
37,38c37
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> strm, 
37,38c37
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> (, 
37,39c37
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> (BZ2_bzDecompressInitint       verbosity, 
37,39c37
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> (BZ2_bzDecompressInit) verbosity, 
38,39c38
<       bz_stream *strm, 
<       int       verbosity, 
---
>       , 
38,40c38
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
>       bz_stream int       );
38,40c38
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
>       bz_stream *);
38,40c38
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
>       bz_stream *strm;
39,46c39
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       #define BZ_MAX_UNUSED 5000
39,46c39
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       int       define BZ_MAX_UNUSED 5000
39,46c39
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       int       verbosityBZ_MAX_UNUSED 5000
40,46c40
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       5000
40,48c40
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>       int       typedef void BZFILE;
40,48c40
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>       int       )void BZFILE;
46,48c46
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> BZFILE;
46,48c46
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #;
46,50c46
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
46,50c46
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED BZFILE* BZ_API(BZ2_bzReadOpen) ( 
48,50c48
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API(BZ2_bzReadOpen) ( 
48,50c48
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef BZ_API(BZ2_bzReadOpen) ( 
48,50c48
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void (BZ2_bzReadOpen) ( 
48,50c48
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZFILEBZ2_bzReadOpen) ( 
50c50
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> ) ( 
50c50
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN ( 
50,51c50
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILEint*  bzerror,   
50,51c50
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* *  bzerror,   
50,51c50
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_APIbzerror,   
50,51c50
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_API(,   
50,52c50
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpenFILE* f, 
50,52c50
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) * f, 
51,52c51
<       int*  bzerror,   
<       FILE* f, 
---
>       f, 
51,52c51
<       int*  bzerror,   
<       FILE* f, 
---
>       int, 
51,53c51
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  int   verbosity, 
51,53c51
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  bzerrorverbosity, 
52,53c52
<       FILE* f, 
<       int   verbosity, 
---
>       , 
52,54c52
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILEint   small,
52,54c52
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILE* small,
52,54c52
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILE* f,
53,54d52
<       int   verbosity, 
<       int   small,
53,55c53
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   * unused,    
53,55c53
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   verbosityunused,    
54,55c54
<       int   small,
<       void* unused,    
---
>       ,    
54,56c54
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   int   nUnused 
54,56c54
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   smallnUnused 
55,57c55
<       void* unused,    
<       int   nUnused 
<    );
---
>       );
55,57c55
<       void* unused,    
<       int   nUnused 
<    );
---
>       void;
55,59c55
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void* BZ_EXTERN void ;
55,59c55
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void* unusedvoid ;
56,59c56
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       ;
56,61c56
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
57,61c57
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    void BZ_API(BZ2_bzReadGetUnused) ( 
57,61c57
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )BZ_API(BZ2_bzReadGetUnused) ( 
59,61c59
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> (BZ2_bzReadGetUnused) ( 
59,61c59
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN BZ2_bzReadGetUnused) ( 
59,61c59
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void ) ( 
61c61
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> ( 
61,62c61
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int*    bzerror, 
61,62c61
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void *    bzerror, 
61,62c61
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
61,62c61
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(, 
61,63c61
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnusedBZFILE* b, 
61,63c61
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) * b, 
62,63c62
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
62,63c62
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int, 
62,64c62
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    void**  unused,  
62,64c62
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerror**  unused,  
63,64c63
<       BZFILE* b, 
<       void**  unused,  
---
>       *  unused,  
63,64c63
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILEunused,  
63,64c63
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* ,  
63,65c63
<       BZFILE* b, 
<       void**  unused,  
<       int*    nUnused 
---
>       BZFILE* bint*    nUnused 
64,65c64
<       void**  unused,  
<       int*    nUnused 
---
>       *    nUnused 
64,65c64
<       void**  unused,  
<       int*    nUnused 
---
>       voidnUnused 
64,66c64
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void*);
64,66c64
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void**  ;
64,68c64
<       void**  unused,  
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       void**  unusedBZ_EXTERN int BZ_API(BZ2_bzRead) ( 
65,68c65
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int BZ_API(BZ2_bzRead) ( 
65,68c65
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       intBZ_API(BZ2_bzRead) ( 
65,68c65
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    (BZ2_bzRead) ( 
66,68c66
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    BZ2_bzRead) ( 
66,68c66
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    )) ( 
68c68
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> ( 
68,69c68
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int*    bzerror, 
68,69c68
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int *    bzerror, 
68,69c68
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_APIbzerror, 
68,69c68
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_API(, 
68,70c68
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzReadBZFILE* b, 
68,70c68
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) * b, 
69,70c69
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
69,70c69
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int, 
69,71c69
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    void*   buf, 
69,71c69
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerror*   buf, 
70,71c70
<       BZFILE* b, 
<       void*   buf, 
---
>       buf, 
70,71c70
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE, 
70,72c70
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* int     len 
70,72c70
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* blen 
71,73c71
<       void*   buf, 
<       int     len 
<    );
---
>       );
71,73c71
<       void*   buf, 
<       int     len 
<    );
---
>       void;
71,75c71
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
71,75c71
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   bufBZFILE* BZ_API(BZ2_bzWriteOpen) ( 
72,75c72
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       * BZ_API(BZ2_bzWriteOpen) ( 
72,75c72
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int     BZ_API(BZ2_bzWriteOpen) ( 
73,75c73
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    (BZ2_bzWriteOpen) ( 
73,75c73
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZ2_bzWriteOpen) ( 
75c75
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> ) ( 
75c75
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN ( 
75,76c75
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILEint*  bzerror,      
75,76c75
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* *  bzerror,      
75,76c75
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_APIbzerror,      
75,76c75
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_API(,      
75,77c75
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpenFILE* f, 
75,77c75
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) * f, 
76,77c76
<       int*  bzerror,      
<       FILE* f, 
---
>       f, 
76,77c76
<       int*  bzerror,      
<       FILE* f, 
---
>       int, 
76,78c76
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  int   blockSize100k, 
76,78c76
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  bzerrorblockSize100k, 
77,78c77
<       FILE* f, 
<       int   blockSize100k, 
---
>       , 
77,79c77
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILEint   verbosity, 
77,79c77
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILE* verbosity, 
78,79d77
<       int   blockSize100k, 
<       int   verbosity, 
78,79d77
<       int   blockSize100k, 
<       int   verbosity, 
78,79d77
<       int   blockSize100k, 
<       int   verbosity, 
78,81c78
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int   blockSize100k);
79,81c79
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       ;
79,83c79
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
79,83c79
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   verbosityvoid BZ_API(BZ2_bzWrite) ( 
80,83c80
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       BZ_API(BZ2_bzWrite) ( 
80,83c80
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   (BZ2_bzWrite) ( 
81,83c81
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    BZ2_bzWrite) ( 
81,83c81
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    )) ( 
83c83
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> ( 
83,84c83
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int*    bzerror, 
83,84c83
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void *    bzerror, 
83,84c83
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
83,84c83
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(, 
83,85c83
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteBZFILE* b, 
83,85c83
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) * b, 
84,85c84
<       int*    bzerror, 
<       BZFILE* b, 
---
>       b, 
84,85c84
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int, 
84,86c84
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    void*   buf, 
84,86c84
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerror*   buf, 
85,86c85
<       BZFILE* b, 
<       void*   buf, 
---
>       buf, 
85,86c85
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE, 
85,87c85
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* int     len 
85,87c85
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* blen 
86,88c86
<       void*   buf, 
<       int     len 
<    );
---
>       );
86,88c86
<       void*   buf, 
<       int     len 
<    );
---
>       void;
86,90c86
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
86,90c86
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   bufvoid BZ_API(BZ2_bzWriteClose) ( 
87,90c87
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       BZ_API(BZ2_bzWriteClose) ( 
87,90c87
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int     (BZ2_bzWriteClose) ( 
88,90c88
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    BZ2_bzWriteClose) ( 
88,90c88
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )) ( 
90c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> ( 
90,91c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN int*          bzerror, 
90,91c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void *          bzerror, 
90,91c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
90,91c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(, 
90,92c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteCloseBZFILE*       b, 
90,92c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) *       b, 
91,92c91
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       b, 
91,92c91
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int, 
91,93c91
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          int           abandon, 
91,93c91
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          bzerrorabandon, 
92,93c92
<       BZFILE*       b, 
<       int           abandon, 
---
>       , 
92,94c92
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILEunsigned int* nbytes_in, 
92,94c92
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       int* nbytes_in, 
92,94c92
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       b* nbytes_in, 
93,94c93
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       nbytes_in, 
93,94c93
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           , 
93,95c93
<       int           abandon, 
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int           abandonunsigned int* nbytes_out 
94,95c94
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
94,95c94
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_out 
94,95c94
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned intnbytes_out 
94,96c94
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* );
94,96c94
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* nbytes_in;
95,98c95
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
95,98c95
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned void BZ_API(BZ2_bzWriteClose64) ( 
95,98c95
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intBZ_API(BZ2_bzWriteClose64) ( 
95,98c95
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* (BZ2_bzWriteClose64) ( 
96,98c96
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    BZ2_bzWriteClose64) ( 
96,98c96
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    )) ( 
98c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> ( 
98,99c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN int*          bzerror, 
98,99c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void *          bzerror, 
98,99c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_APIbzerror, 
98,99c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(, 
98,100c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64BZFILE*       b, 
98,100c98
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) *       b, 
99,100c99
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       b, 
99,100c99
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int, 
99,101c99
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          int           abandon, 
99,101c99
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          bzerrorabandon, 
100,101c100
<       BZFILE*       b, 
<       int           abandon, 
---
>       , 
100,102c100
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILEunsigned int* nbytes_in_lo32, 
100,102c100
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       int* nbytes_in_lo32, 
100,102c100
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       b* nbytes_in_lo32, 
101,102c101
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       nbytes_in_lo32, 
101,102c101
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           , 
101,103c101
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int           abandonunsigned int* nbytes_in_hi32, 
102,103c102
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
102,103c102
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32, 
102,103c102
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned intnbytes_in_hi32, 
102,103c102
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned int* , 
102,104c102
<       unsigned int* nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* nbytes_in_lo32unsigned int* nbytes_out_lo32, 
103,104c103
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       int* nbytes_out_lo32, 
103,104c103
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
103,104c103
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intnbytes_out_lo32, 
103,104c103
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* , 
103,105c103
<       unsigned int* nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned int* nbytes_in_hi32unsigned int* nbytes_out_hi32
104,105c104
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       int* nbytes_out_hi32
104,105c104
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
104,105c104
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned intnbytes_out_hi32
104,106c104
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* );
104,106c104
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_out_lo32;
105,111c105
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
105,111c105
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int BZ_API(BZ2_bzBuffToBuffCompress) ( 
105,111c105
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intBZ_API(BZ2_bzBuffToBuffCompress) ( 
105,111c105
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* (BZ2_bzBuffToBuffCompress) ( 
106,111c106
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    BZ2_bzBuffToBuffCompress) ( 
106,111c106
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    )) ( 
111c111
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> ( 
111,112c111
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN char*         dest, 
111,112c111
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int *         dest, 
111,112c111
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_APIdest, 
111,112c111
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(, 
111,113c111
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompressunsigned int* destLen,
111,113c111
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) int* destLen,
112,113c112
<       char*         dest, 
<       unsigned int* destLen,
---
>       * destLen,
112,113c112
<       char*         dest, 
<       unsigned int* destLen,
---
>       chardestLen,
112,113c112
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         ,
112,114c112
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destchar*         source, 
113,114c113
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
113,114c113
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned source, 
113,114c113
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int, 
113,115c113
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* unsigned int  sourceLen,
113,115c113
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLenint  sourceLen,
114,115c114
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
114,115c114
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
114,116c114
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         int           blockSize100k, 
114,116c114
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         sourceblockSize100k, 
115,116c115
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       , 
115,117c115
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int           verbosity, 
115,117c115
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  verbosity, 
115,117c115
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  sourceLen, 
116,117d115
<       int           blockSize100k, 
<       int           verbosity, 
116,117d115
<       int           blockSize100k, 
<       int           verbosity, 
116,119c116
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       int           blockSize100k);
117,119c117
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       ;
117,121c117
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
117,121c117
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosityint BZ_API(BZ2_bzBuffToBuffDecompress) ( 
118,121c118
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       BZ_API(BZ2_bzBuffToBuffDecompress) ( 
118,121c118
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           (BZ2_bzBuffToBuffDecompress) ( 
119,121c119
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    BZ2_bzBuffToBuffDecompress) ( 
119,121c119
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    )) ( 
121c121
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> ( 
121,122c121
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN char*         dest, 
121,122c121
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int *         dest, 
121,122c121
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_APIdest, 
121,122c121
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(, 
121,123c121
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int* destLen,
121,123c121
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) int* destLen,
122,123c122
<       char*         dest, 
<       unsigned int* destLen,
---
>       * destLen,
122,123c122
<       char*         dest, 
<       unsigned int* destLen,
---
>       chardestLen,
122,123c122
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         ,
122,124c122
<       char*         dest, 
<       unsigned int* destLen,
<       char*         source, 
---
>       char*         destchar*         source, 
123,124c123
<       unsigned int* destLen,
<       char*         source, 
---
>       *         source, 
123,124c123
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned source, 
123,124c123
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int, 
123,125c123
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* unsigned int  sourceLen,
123,125c123
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLenint  sourceLen,
124,125c124
<       char*         source, 
<       unsigned int  sourceLen,
---
>       sourceLen,
124,125c124
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char,
124,126c124
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         int           small, 
124,126c124
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         sourcesmall, 
125,126c125
<       unsigned int  sourceLen,
<       int           small, 
---
>       , 
125,127c125
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int           );
125,127c125
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  );
125,127c125
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  sourceLen;
126,129c126
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
126,129c126
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       int           BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
126,129c126
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       int           small* BZ_API(BZ2_bzcloseBZ2_bzerror) (
127,129c127
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       BZ_API(BZ2_bzcloseBZ2_bzerror) (
127,129c127
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       int           (BZ2_bzcloseBZ2_bzerror) (
127,129c127
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       int           )BZ2_bzcloseBZ2_bzerror) (
129c129
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> ) (
129c129
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> BZ_EXTERN (
129,130c129
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       );
---
> BZ_EXTERN BZFILE );
129,130c129
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       );
---
> BZ_EXTERN BZFILE * ;
129,140c129
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN BZFILE * BZ_API#define _BZLIB_PRIVATE_H
129,140c129
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN BZFILE * BZ_API(define _BZLIB_PRIVATE_H
129,140c129
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror_BZLIB_PRIVATE_H
129,142c129
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) #define BZ_VERSION  "1.0.2, 30-Dec-2001"
130,142c130
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       define BZ_VERSION  "1.0.2, 30-Dec-2001"
130,142c130
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       )BZ_VERSION  "1.0.2, 30-Dec-2001"
140,142c140
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> "1.0.2, 30-Dec-2001"
140,144c140
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #typedef char            Char;
140,144c140
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define char            Char;
142,144c142
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> Char;
142,144c142
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #;
142,145c142
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define typedef unsigned char   Bool;
142,145c142
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define BZ_VERSION  unsigned char   Bool;
144,145c144
< typedef char            Char;
< typedef unsigned char   Bool;
---
> char   Bool;
144,145c144
< typedef char            Char;
< typedef unsigned char   Bool;
---
> typedef Bool;
144,145c144
< typedef char            Char;
< typedef unsigned char   Bool;
---
> typedef char            ;
144,146c144
< typedef char            Char;
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char            Chartypedef unsigned char   UChar;
145,146c145
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> unsigned char   UChar;
145,146c145
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef char   UChar;
145,146c145
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef unsigned UChar;
145,146c145
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
---
> typedef unsigned char   ;
145,147c145
< typedef unsigned char   Bool;
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned char   Booltypedef int             Int32;
146,147c146
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> int             Int32;
146,147c146
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef Int32;
146,147c146
< typedef unsigned char   UChar;
< typedef int             Int32;
---
> typedef unsigned ;
146,148c146
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   typedef unsigned int    UInt32;
146,148c146
< typedef unsigned char   UChar;
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   UCharunsigned int    UInt32;
147,148c147
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> int    UInt32;
147,148c147
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef UInt32;
147,148c147
< typedef int             Int32;
< typedef unsigned int    UInt32;
---
> typedef int             ;
147,149c147
< typedef int             Int32;
< typedef unsigned int    UInt32;
< UInt16;
---
> typedef int             Int32UInt16;
148,149c148
< typedef unsigned int    UInt32;
< UInt16;
---
> ;
148,151c148
< typedef unsigned int    UInt32;
< UInt16;
< 
< #define True  2)
---
> typedef #define True  2)
148,151c148
< typedef unsigned int    UInt32;
< UInt16;
< 
< #define True  2)
---
> typedef unsigned define True  2)
(96.3 %, 7537 bytes)
146,147c146
< typedef Int32;
< typedef unsigned int    UInt32;
---
> typedef ;
146,148c146
< typedef Int32;
< typedef unsigned int    UInt32;
< UInt16;
---
> typedef Int32UInt16;
147,148c147
< typedef unsigned int    UInt32;
< UInt16;
---
> ;
147,150c147
< typedef unsigned int    UInt32;
< UInt16;
< 
< #define True  2)
---
> typedef #define True  2)
147,150c147
< typedef unsigned int    UInt32;
< UInt16;
< 
< #define True  2)
---
> typedef unsigned define True  2)
147,150c147
< typedef unsigned int    UInt32;
< UInt16;
< 
< #define True  2)
---
> typedef unsigned int    True  2)
147,150c147
< typedef unsigned int    UInt32;
< UInt16;
< 
< #define True  2)
---
> typedef unsigned int    UInt322)
148,150c148
< UInt16;
< 
< #define True  2)
---
> )
148,157c148
< UInt16;
< 
< #define True  2)
< 
< 
< 
< 
< 
< 
< typedef
---
> UInt16typedef
150,158c150
< #define True  2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> struct {
150,158c150
< #define True  2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> #{
150,160c150
< #define True  2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32;
---
> #define UInt32;
150,160c150
< #define True  2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32;
---
> #define True  ;
150,163c150
< #define True  2)
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       UInt32;
< 
<       
<       Int32    ;
---
> #define True  2Int32    ;
157,163c157
< typedef
<    struct {
<       
<       UInt32;
< 
<       
<       Int32    ;
---
> ;
158,176d157
<    struct {
<       
<       UInt32;
< 
<       
<       Int32    ;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
158,178c158
<    struct {
<       
<       UInt32;
< 
<       
<       Int32    ;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
---
>    struct EState;
(96.3 %, 7503 bytes)
150,169c150
< struct {
<       
<       UInt32;
< 
<       
<       Int32    ;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
---
> }
150,170c150
< struct {
<       
<       UInt32;
< 
<       
<       Int32    ;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
---
> struct EState;
152,170c152
<       UInt32;
< 
<       
<       Int32    ;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
---
>       ;
154,179d153
<       
<       Int32    ;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
155,180c155
<       Int32    ;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
---
>       ;
155,190c155
<       Int32    ;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
< 
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
---
>       Int32    typedef
169,190d168
<    }
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
170,191c170
<    EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
>    {
172,194d171
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
180,206d179
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
180,211c180
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
> UInt32   calculatedCombinedCRC;
(96.4 %, 7374 bytes)
150,171c150
< struct EState;
< 
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
---
> struct {
152,174d151
< 
< 
< 
< 
< 
< 
< ;
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
160,186d159
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
160,191c160
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< typedef
<    struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
> UInt32   calculatedCombinedCRC;
170,191c170
< typedef
<    struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
> calculatedCombinedCRC;
171,191c171
<    struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
>    ;
171,237c171
<    struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
---
>    struct }
173,238c173
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       DState;
187,239d186
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
(96.4 %, 7327 bytes)
150,216c150
< struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
---
> struct }
152,217c152
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       DState;
166,218d165
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
170,223c170
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< ;
---
>       ;
170,238c170
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>       UInt32   int BZ_API(BZ2_bzCompressInit) 
170,238c170
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>       UInt32   calculatedCombinedCRCBZ_API(BZ2_bzCompressInit) 
216,238c216
<    }
<    DState;
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>    (BZ2_bzCompressInit) 
217,238c217
<    DState;
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>    BZ2_bzCompressInit) 
217,238c217
<    DState;
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>    DState) 
223,239c223
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> ( bz_stream* strm, 
238,239c238
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> bz_stream* strm, 
238,239c238
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> int * strm, 
238,239c238
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> int BZ_APIstrm, 
238,239c238
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
---
> int BZ_API(, 
238,240c238
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
> int BZ_API(BZ2_bzCompressInitint        blockSize100k,
239,240c239
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     blockSize100k,
239,240c239
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
---
>                     ( ,
239,241c239
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( bz_streamint        verbosity,
239,241c239
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( bz_stream* verbosity,
239,241c239
<                     ( bz_stream* strm, 
<                      int        blockSize100k,
<                      int        verbosity,
---
>                     ( bz_stream* strm,
(96.5 %, 7241 bytes)
239,242c239
<                     ( bz_stream* verbosity,
<                      int        workFactor )
< {
<    if (!1 );
---
>                     ( bz_stream* if (!1 );
239,242c239
<                     ( bz_stream* verbosity,
<                      int        workFactor )
< {
<    if (!1 );
---
>                     ( bz_stream* verbosity(!1 );
240,242c240
<                      int        workFactor )
< {
<    if (!1 );
---
>                      !1 );
240,242c240
<                      int        workFactor )
< {
<    if (!1 );
---
>                      int        1 );
240,242c240
<                      int        workFactor )
< {
<    if (!1 );
---
>                      int        workFactor );
241,242c241
< {
<    if (!1 );
---
> ;
242d241
<    if (!1 );
242,245c242
<    if (!1 );
<    ;
< 
<    0;
---
>    if 0;
242,245c242
<    if (!1 );
<    ;
< 
<    0;
---
>    if (;
242,246c242
<    if (!1 );
<    ;
< 
<    0;
<    ;
---
>    if (!;
242,247c242
<    if (!1 );
<    ;
< 
<    0;
<    ;
<    return BZ_OK;
---
>    if (!1 return BZ_OK;
242,247c242
<    if (!1 );
<    ;
< 
<    0;
<    ;
<    return BZ_OK;
---
>    if (!1 )BZ_OK;
(96.5 %, 7228 bytes)
243,246d242
< 
<    0;
<    ;
<    return BZ_OK;
244,247c244
<    0;
<    ;
<    return BZ_OK;
< }
---
>    }
244,259c244
<    0;
<    ;
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    0(BZ2_bzCompress) ( bz_stream *strm, int action )
(96.5 %, 7199 bytes)
242,255c242
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
>    bz_stream *strm, int action )
243,255c243
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
> *strm, int action )
255c255
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
> strm, int action )
255c255
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
> (, int action )
255c255
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
> (BZ2_bzCompressint action )
255c255
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
> (BZ2_bzCompress) action )
255c255
< (BZ2_bzCompress) ( bz_stream *strm, int action )
---
> (BZ2_bzCompress) ( )
255,256c255
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
---
> (BZ2_bzCompress) ( bz_stream {
255,258c255
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    return BZ_OK;
---
> (BZ2_bzCompress) ( bz_stream *return BZ_OK;
255,258c255
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    return BZ_OK;
---
> (BZ2_bzCompress) ( bz_stream *strmBZ_OK;
255,258c255
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    return BZ_OK;
---
> (BZ2_bzCompress) ( bz_stream *strm, ;
255,259c255
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    return BZ_OK;
< }
---
> (BZ2_bzCompress) ( bz_stream *strm, int }
255,267c255
< (BZ2_bzCompress) ( bz_stream *strm, int action )
< {
<    
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> (BZ2_bzCompress) ( bz_stream *strm, int action int BZ_API(BZ2_bzDecompressInit) 
256,267c256
< {
<    
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> BZ_API(BZ2_bzDecompressInit) 
258,267c258
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    (BZ2_bzDecompressInit) 
258,267c258
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    return BZ2_bzDecompressInit) 
(96.5 %, 7171 bytes)
255,267c255
< (BZ2_bzCompress) ( )
< {
<    
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> (BZ2_bzCompress) ( int BZ_API(BZ2_bzDecompressInit) 
256,267c256
< {
<    
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> BZ_API(BZ2_bzDecompressInit) 
258,267c258
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    (BZ2_bzDecompressInit) 
258,267c258
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    return BZ2_bzDecompressInit) 
258,267c258
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    return BZ_OK) 
259,268c259
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> ( bz_stream* strm, 
267,268c267
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> bz_stream* strm, 
267,268c267
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> int * strm, 
267,268c267
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> int BZ_APIstrm, 
267,268c267
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> int BZ_API(, 
267,269c267
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> int BZ_API(BZ2_bzDecompressInitint        verbosity,
268,269c268
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      verbosity,
268,269c268
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( ,
268,270c268
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_streamint        small )
268,270c268
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_stream* small )
268,270c268
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_stream* strm)
269,271c269
<                        int        verbosity,
<                        int        small )
< {
---
>                        {
269,272c269
<                        int        verbosity,
<                        int        small )
< {
<    }
---
>                        int        }
269,279c269
<                        int        verbosity,
<                        int        small )
< {
<    }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>                        int        verbosity#define BZ_SETERR(eee)                    \
270,279c270
<                        int        small )
< {
<    }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>                        define BZ_SETERR(eee)                    \
270,279c270
<                        int        small )
< {
<    }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>                        int        BZ_SETERR(eee)                    \
270,279c270
<                        int        small )
< {
<    }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>                        int        small (eee)                    \
271,279c271
< {
<    }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
> eee)                    \
272,279c272
<    }
< 
< 
< 
< 
< 
< 
< #define BZ_SETERR(eee)                    \
---
>    )                    \
279c279
< #define BZ_SETERR(eee)                    \
---
> \
279,282c279
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
---
> #typedef 
279,283c279
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> #define struct {
279,283c279
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
---
> #define BZ_SETERR{
279,284c279
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define BZ_SETERR(FILE*     handle;
279,284c279
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define BZ_SETERR(eee*     handle;
279,284c279
< #define BZ_SETERR(eee)                    \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> #define BZ_SETERR(eee)                    handle;
282,284c282
< typedef 
<    struct {
<       FILE*     handle;
---
> ;
283,285c283
<    struct {
<       FILE*     handle;
<       Char      ;
---
>    Char      ;
(96.5 %, 7129 bytes)
279,284c279
< \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> handle;
282,284c282
< typedef 
<    struct {
<       FILE*     handle;
---
> ;
283,285c283
<    struct {
<       FILE*     handle;
<       Char      ;
---
>    Char      ;
283,285c283
<    struct {
<       FILE*     handle;
<       Char      ;
---
>    struct ;
284,285d283
<       FILE*     handle;
<       Char      ;
284,286c284
<       FILE*     handle;
<       Char      ;
<       Bool      writing;
---
>       FILEwriting;
284,286c284
<       FILE*     handle;
<       Char      ;
<       Bool      writing;
---
>       FILE*     ;
284,287c284
<       FILE*     handle;
<       Char      ;
<       Bool      writing;
<       bz_stream strm}
---
>       FILE*     handlebz_stream strm}
285,287c285
<       Char      ;
<       Bool      writing;
<       bz_stream strm}
---
>       strm}
285,287c285
<       Char      ;
<       Bool      writing;
<       bz_stream strm}
---
>       Char      }
286,288c286
<       Bool      writing;
<       bz_stream strm}
<    bzFile;
---
>       bzFile;
286,288c286
<       Bool      writing;
<       bz_stream strm}
<    bzFile;
---
>       Bool      ;
286,296c286
<       Bool      writing;
<       bz_stream strm}
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       Bool      writingBZFILE* BZ_API(BZ2_bzWriteOpen) 
287,296c287
<       bz_stream strm}
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       * BZ_API(BZ2_bzWriteOpen) 
287,296c287
<       bz_stream strm}
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream BZ_API(BZ2_bzWriteOpen) 
287,296c287
<       bz_stream strm}
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strm(BZ2_bzWriteOpen) 
288,296c288
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    BZ2_bzWriteOpen) 
288,296c288
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    bzFile) 
296,297c296
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> ( int*  bzerror,      
296,297c296
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILEint*  bzerror,      
296,297c296
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* *  bzerror,      
296,297c296
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_APIbzerror,      
296,297c296
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API(,      
296,298c296
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzWriteOpenFILE* f, 
297,298c297
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     * f, 
297,298c297
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( f, 
297,298c297
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int, 
297,299c297
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  int   blockSize100k, 
297,299c297
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  bzerrorblockSize100k, 
298,299c298
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       , 
298,300c298
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILEint   verbosity,
298,300c298
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* verbosity,
298,300c298
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* f,
299,300d298
<                       int   blockSize100k, 
<                       int   verbosity,
299,300d298
<                       int   blockSize100k, 
<                       int   verbosity,
299,301c299
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   blockSize100k)
300,302c300
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       {
300,303c300
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   Int32   ret;
300,303c300
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       int   verbosityret;
301,303c301
<                       int   workFactor )
< {
<    Int32   ret;
---
>                       ;
301,304c301
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf ;
---
>                       int   bzFile* bzf ;
301,304c301
<                       int   workFactor )
< {
<    Int32   ret;
<    bzFile* bzf ;
---
>                       int   workFactor * bzf ;
302,304c302
< {
<    Int32   ret;
<    bzFile* bzf ;
---
> bzf ;
303,304c303
<    Int32   ret;
<    bzFile* bzf ;
---
>    ;
303,305c303
<    Int32   ret;
<    bzFile* bzf ;
<    bzf= bzf;   
---
>    Int32   bzf= bzf;   
303,305c303
<    Int32   ret;
<    bzFile* bzf ;
<    bzf= bzf;   
---
>    Int32   ret= bzf;   
304,305c304
<    bzFile* bzf ;
<    bzf= bzf;   
---
>    bzf;   
304,305c304
<    bzFile* bzf ;
<    bzf= bzf;   
---
>    bzFile;   
(96.5 %, 7104 bytes)
303,309c303
<    Int32   bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    Int32   BZ_API(BZ2_bzWrite)
303,309c303
<    Int32   bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    Int32   bzf(BZ2_bzWrite)
303,309c303
<    Int32   bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    Int32   bzf= BZ2_bzWrite)
303,309c303
<    Int32   bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    Int32   bzf= bzf)
304,310c304
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> ( int*    bzerror, 
309,310c309
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> int*    bzerror, 
309,310c309
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void *    bzerror, 
309,310c309
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_APIbzerror, 
309,310c309
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API(, 
309,311c309
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void BZ_API(BZ2_bzWriteBZFILE* b, 
310,311c310
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              * b, 
310,311c310
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( b, 
310,311c310
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int, 
310,312c310
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    void*   buf, 
310,312c310
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    bzerror*   buf, 
311,312c311
<                BZFILE* b, 
<                void*   buf, 
---
>                buf, 
311,312c311
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE, 
311,313c311
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* int     len )
311,313c311
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* blen )
312,313c312
<                void*   buf, 
<                int     len )
---
>                )
312,314c312
<                void*   buf, 
<                int     len )
< {
---
>                void{
312,315c312
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                void*   Int32   ret;
312,315c312
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                void*   bufret;
313,315c313
<                int     len )
< {
<    Int32   ret;
---
>                ;
313,316c313
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>                int     bzFile* bzf = ((bzf->handle))
313,316c313
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>                int     len * bzf = ((bzf->handle))
314,316c314
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
> bzf = ((bzf->handle))
315,316c315
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>    = ((bzf->handle))
315,316c315
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>    Int32   ((bzf->handle))
315,316c315
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>    Int32   ret(bzf->handle))
316c316
<    bzFile* bzf = ((bzf->handle))
---
>    bzf->handle))
316c316
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile->handle))
316c316
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* handle))
316c316
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf ))
316c316
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = )
316,317c316
<    bzFile* bzf = ((bzf->handle))
<       ;
---
>    bzFile* bzf = (;
316,319c316
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
---
>    bzFile* bzf = ((len;
316,319c316
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
---
>    bzFile* bzf = ((bzf;
316,320c316
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
---
>    bzFile* bzf = ((bzf->{
316,321c316
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
<       }
---
>    bzFile* bzf = ((bzf->handle}
316,322c316
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
<       }
< }
---
>    bzFile* bzf = ((bzf->handle)}
317,326c317
<       ;
< 
<    len;
<    {
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       void BZ_API(BZ2_bzWriteClose)
319,326c319
<    len;
<    {
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ_API(BZ2_bzWriteClose)
319,326c319
<    len;
<    {
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    len(BZ2_bzWriteClose)
320,326c320
<    {
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    BZ2_bzWriteClose)
321,326c321
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       )
322,327c322
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
326,327c326
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> int*          bzerror, 
326,327c326
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void *          bzerror, 
326,327c326
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_APIbzerror, 
326,327c326
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API(, 
326,328c326
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteCloseBZFILE*       b, 
327,328c327
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   *       b, 
327,328c327
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( b, 
327,328c327
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int, 
327,329c327
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          int           abandon,
327,329c327
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerrorabandon,
328,329c328
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     ,
328,330c328
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILEunsigned int* nbytes_in,
328,330c328
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       int* nbytes_in,
328,330c328
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       b* nbytes_in,
329,330c329
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     nbytes_in,
329,330c329
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           ,
329,331c329
<                     int           abandon,
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int           abandonunsigned int* nbytes_out )
330,331c330
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
330,331c330
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out )
330,331c330
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned intnbytes_out )
330,331c330
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned int* )
330,332c330
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
< {
---
>                     unsigned int* nbytes_in{
331,333c331
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     BZ2_bzWriteClose64 ( bzerror, b, abandon, 
331,333c331
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned ( bzerror, b, abandon, 
331,333c331
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned intbzerror, b, abandon, 
331,333c331
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* , b, abandon, 
331,333c331
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* nbytes_out b, abandon, 
332,333c332
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
> , abandon, 
333c333
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    abandon, 
333c333
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    BZ2_bzWriteClose64 , 
333,334c333
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( nbytes_in, NULL, nbytes_out, NULL );
333,334c333
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, NULL, nbytes_out, NULL );
333,334c333
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, NULL, nbytes_out, NULL );
333,334c333
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, b, nbytes_out, NULL );
333,334c333
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, b, nbytes_out, NULL );
333,334c333
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, b, abandon, NULL );
334c334
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         NULL );
334c334
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_in);
334c334
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_in, ;
334,335c334
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
>                         nbytes_in, NULL}
334,338c334
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL, void BZ_API(BZ2_bzWriteClose64)
334,338c334
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL, nbytes_outBZ_API(BZ2_bzWriteClose64)
334,338c334
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL, nbytes_out, (BZ2_bzWriteClose64)
334,338c334
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL, nbytes_out, NULL BZ2_bzWriteClose64)
334,338c334
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL, nbytes_out, NULL ))
335,339c335
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
338,339c338
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> int*          bzerror, 
338,339c338
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void *          bzerror, 
338,339c338
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_APIbzerror, 
338,339c338
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API(, 
338,340c338
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void BZ_API(BZ2_bzWriteClose64BZFILE*       b, 
339,340c339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   *       b, 
339,340c339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( b, 
339,340c339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int, 
339,341c339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          int           abandon,
339,341c339
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerrorabandon,
340,341c340
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     ,
340,342c340
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILEunsigned int* nbytes_in_lo32,
340,342c340
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       int* nbytes_in_lo32,
340,342c340
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       b* nbytes_in_lo32,
341,342c341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     nbytes_in_lo32,
341,342c341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           ,
341,343c341
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int           abandonunsigned int* nbytes_in_hi32,
342,343c342
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
342,343c342
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32,
342,343c342
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned intnbytes_in_hi32,
342,343c342
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned int* ,
342,344c342
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_lo32unsigned int* nbytes_out_lo32,
343,344c343
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     int* nbytes_out_lo32,
343,344c343
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
343,344c343
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intnbytes_out_lo32,
343,344c343
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* ,
343,345c343
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_in_hi32unsigned int* nbytes_out_hi32 )
344,345c344
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     int* nbytes_out_hi32 )
344,345c344
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
344,345c344
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intnbytes_out_hi32 )
344,345c344
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* )
344,346c344
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int* nbytes_out_lo32{
345,348c345
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     bzFile* bzf ;
345,348c345
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned * bzf ;
345,348c345
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned intbzf ;
345,348c345
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned int* ;
345,349c345
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) ;
---
>                     unsigned int* nbytes_out_hi32 if (!(bzf)!= NULL) ;
346,349c346
< {
<    
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) ;
---
> (!(bzf)!= NULL) ;
348,349c348
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) ;
---
>    !(bzf)!= NULL) ;
348,349c348
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) ;
---
>    bzFile(bzf)!= NULL) ;
348,349c348
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) ;
---
>    bzFile* bzf)!= NULL) ;
348,349c348
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) ;
---
>    bzFile* bzf )!= NULL) ;
349c349
<    if (!(bzf)!= NULL) ;
---
>    != NULL) ;
349c349
<    if (!(bzf)!= NULL) ;
---
>    if NULL) ;
349c349
<    if (!(bzf)!= NULL) ;
---
>    if () ;
349c349
<    if (!(bzf)!= NULL) ;
---
>    if (!;
349,350c349
<    if (!(bzf)!= NULL) ;
<    0;
---
>    if (!(0;
349,350c349
<    if (!(bzf)!= NULL) ;
<    0;
---
>    if (!(bzf;
349,351c349
<    if (!(bzf)!= NULL) ;
<    0;
< }
---
>    if (!(bzf)}
349,355c349
<    if (!(bzf)!= NULL) ;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (!(bzf)!= BZFILE* BZ_API(BZ2_bzReadOpen) 
349,355c349
<    if (!(bzf)!= NULL) ;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (!(bzf)!= NULL* BZ_API(BZ2_bzReadOpen) 
349,355c349
<    if (!(bzf)!= NULL) ;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (!(bzf)!= NULL) BZ_API(BZ2_bzReadOpen) 
350,355c350
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    (BZ2_bzReadOpen) 
350,355c350
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    0BZ2_bzReadOpen) 
351,355c351
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> ) 
355,356c355
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> ( int*  bzerror, 
355,356c355
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILEint*  bzerror, 
355,356c355
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* *  bzerror, 
355,356c355
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_APIbzerror, 
355,356c355
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_API(, 
355,357c355
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> BZFILE* BZ_API(BZ2_bzReadOpenFILE* f, 
356,357c356
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    * f, 
356,357c356
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( f, 
356,357c356
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int, 
356,358c356
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  int   verbosity,
356,358c356
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  bzerrorverbosity,
357,358c357
<                      FILE* f, 
<                      int   verbosity,
---
>                      ,
357,359c357
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILEint   small,
357,359c357
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE* small,
357,359c357
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE* f,
358,359d357
<                      int   verbosity,
<                      int   small,
358,360c358
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   * unused,
358,360c358
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   verbosityunused,
359,360c359
<                      int   small,
<                      void* unused,
---
>                      ,
359,361c359
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   int   nUnused )
359,361c359
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   smallnUnused )
360,361c360
<                      void* unused,
<                      int   nUnused )
---
>                      )
360,362c360
<                      void* unused,
<                      int   nUnused )
< {
---
>                      void{
360,363c360
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      void* bzFile* bzf = (f ||
360,363c360
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      void* unused* bzf = (f ||
361,363c361
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      bzf = (f ||
361,363c361
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      int   = (f ||
361,363c361
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      int   nUnused (f ||
362,363c362
< {
<    bzFile* bzf = (f ||
---
> f ||
363c363
<    bzFile* bzf = (f ||
---
>    ||
363,364c363
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
363,364c363
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* (nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
363,364c363
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
363,364c363
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf = < 0 || nUnused > BZ_MAX_UNUSED)))
363,364c363
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf = (0 || nUnused > BZ_MAX_UNUSED)))
363,364c363
<    bzFile* bzf = (f ||
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>    bzFile* bzf = (f || nUnused > BZ_MAX_UNUSED)))
364c364
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        nUnused > BZ_MAX_UNUSED)))
364c364
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        (> BZ_MAX_UNUSED)))
364c364
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ((BZ_MAX_UNUSED)))
364c364
<        ((nUnused < 0 || nUnused > BZ_MAX_UNUSED)))
---
>        ((nUnused )))
(96.5 %, 7079 bytes)
364,370c364
<        ((BZ_MAX_UNUSED)))
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( )
---
>        ((void BZ_API(BZ2_bzReadClose) ( )
364,370c364
<        ((BZ_MAX_UNUSED)))
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( )
---
>        ((BZ_MAX_UNUSEDBZ_API(BZ2_bzReadClose) ( )
364,370c364
<        ((BZ_MAX_UNUSED)))
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( )
---
>        ((BZ_MAX_UNUSED)(BZ2_bzReadClose) ( )
364,370c364
<        ((BZ_MAX_UNUSED)))
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( )
---
>        ((BZ_MAX_UNUSED))BZ2_bzReadClose) ( )
365,370c365
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( )
---
>       ) ( )
366,370c366
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( )
---
> ( )
370c370
< void BZ_API(BZ2_bzReadClose) ( )
---
> )
370,371c370
< void BZ_API(BZ2_bzReadClose) ( )
< {
---
> void {
370,372c370
< void BZ_API(BZ2_bzReadClose) ( )
< {
<    bzFile* bzf ;
---
> void BZ_APIbzFile* bzf ;
370,372c370
< void BZ_API(BZ2_bzReadClose) ( )
< {
<    bzFile* bzf ;
---
> void BZ_API(* bzf ;
370,372c370
< void BZ_API(BZ2_bzReadClose) ( )
< {
<    bzFile* bzf ;
---
> void BZ_API(BZ2_bzReadClosebzf ;
370,372c370
< void BZ_API(BZ2_bzReadClose) ( )
< {
<    bzFile* bzf ;
---
> void BZ_API(BZ2_bzReadClose) ;
370,373c370
< void BZ_API(BZ2_bzReadClose) ( )
< {
<    bzFile* bzf ;
< }
---
> void BZ_API(BZ2_bzReadClose) ( }
371,376d370
< {
<    bzFile* bzf ;
< }
< 
< 
< 
372,377c372
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    BZ_API(BZ2_bzRead) 
372,377c372
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile(BZ2_bzRead) 
372,377c372
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* BZ2_bzRead) 
372,377c372
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf ) 
373,378c373
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> ( int*    bzerror, 
377,378c377
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int*    bzerror, 
377,378c377
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int *    bzerror, 
377,378c377
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_APIbzerror, 
377,378c377
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API(, 
377,379c377
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> int BZ_API(BZ2_bzReadBZFILE* b, 
378,379c378
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            * b, 
378,379c378
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( b, 
378,379c378
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int, 
378,380c378
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    void*   buf, 
378,380c378
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    bzerror*   buf, 
379,380c379
<              BZFILE* b, 
<              void*   buf, 
---
>              buf, 
379,380c379
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE, 
379,381c379
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* int     len )
379,381c379
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* blen )
380,381c380
<              void*   buf, 
<              int     len )
---
>              )
380,382c380
<              void*   buf, 
<              int     len )
< {
---
>              void{
380,384c380
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   bzFile* bzf = (bzFile*)b;
380,384c380
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              void*   buf* bzf = (bzFile*)b;
381,384c381
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              bzf = (bzFile*)b;
381,384c381
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              int     = (bzFile*)b;
381,384c381
<              int     len )
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
>              int     len (bzFile*)b;
382,384c382
< {
<    
<    bzFile* bzf = (bzFile*)b;
---
> bzFile*)b;
384c384
<    bzFile* bzf = (bzFile*)b;
---
>    *)b;
384c384
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile)b;
384c384
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* b;
384c384
<    bzFile* bzf = (bzFile*)b;
---
>    bzFile* bzf ;
384,386c384
<    bzFile* bzf = (bzFile*)b;
< 
<    }
---
>    bzFile* bzf = }
384,390c384
<    bzFile* bzf = (bzFile*)b;
< 
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* bzf = (void BZ_API(BZ2_bzReadGetUnused) 
384,390c384
<    bzFile* bzf = (bzFile*)b;
< 
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* bzf = (bzFileBZ_API(BZ2_bzReadGetUnused) 
384,390c384
<    bzFile* bzf = (bzFile*)b;
< 
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* bzf = (bzFile*(BZ2_bzReadGetUnused) 
384,390c384
<    bzFile* bzf = (bzFile*)b;
< 
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* bzf = (bzFile*)BZ2_bzReadGetUnused) 
384,390c384
<    bzFile* bzf = (bzFile*)b;
< 
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* bzf = (bzFile*)b) 
386,391c386
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    ( int*    bzerror, 
390,391c390
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> int*    bzerror, 
(96.6 %, 7067 bytes)
384,390c384
<    bzFile* bzf ;
< 
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* bzf ) 
386,391c386
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
>    ( int*    bzerror, 
390,391c390
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> int*    bzerror, 
390,391c390
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void *    bzerror, 
390,391c390
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_APIbzerror, 
390,391c390
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(, 
390,392c390
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void BZ_API(BZ2_bzReadGetUnusedBZFILE* b, 
391,392c391
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      * b, 
391,392c391
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( b, 
391,392c391
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int, 
391,393c391
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    void**  unused, 
391,393c391
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerror**  unused, 
392,393c392
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        *  unused, 
392,393c392
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILEunused, 
392,393c392
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* , 
392,394c392
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* bint*    nUnused )
393,394c393
<                        void**  unused, 
<                        int*    nUnused )
---
>                        *    nUnused )
393,394c393
<                        void**  unused, 
<                        int*    nUnused )
---
>                        voidnUnused )
393,394c393
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*)
393,395c393
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        void**  {
393,396c393
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile* bzf = bzf->strm.next_in;
---
>                        void**  unusedbzFile* bzf = bzf->strm.next_in;
394,396c394
<                        int*    nUnused )
< {
<    bzFile* bzf = bzf->strm.next_in;
---
>                        * bzf = bzf->strm.next_in;
394,396c394
<                        int*    nUnused )
< {
<    bzFile* bzf = bzf->strm.next_in;
---
>                        intbzf = bzf->strm.next_in;
394,396c394
<                        int*    nUnused )
< {
<    bzFile* bzf = bzf->strm.next_in;
---
>                        int*    = bzf->strm.next_in;
394,396c394
<                        int*    nUnused )
< {
<    bzFile* bzf = bzf->strm.next_in;
---
>                        int*    nUnused bzf->strm.next_in;
395,396c395
< {
<    bzFile* bzf = bzf->strm.next_in;
---
> ->strm.next_in;
396c396
<    bzFile* bzf = bzf->strm.next_in;
---
>    strm.next_in;
396c396
<    bzFile* bzf = bzf->strm.next_in;
---
>    bzFile.next_in;
396c396
<    bzFile* bzf = bzf->strm.next_in;
---
>    bzFile* next_in;
396c396
<    bzFile* bzf = bzf->strm.next_in;
---
>    bzFile* bzf ;
(96.6 %, 7051 bytes)
396,405c396
<    bzFile* next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    bzFile* BZ2_bzBuffToBuffCompress) 
396,405c396
<    bzFile* next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    bzFile* next_in) 
397,406c397
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> ( char*         dest, 
405,406c405
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> char*         dest, 
405,406c405
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int *         dest, 
405,406c405
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_APIdest, 
405,406c405
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API(, 
405,407c405
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffCompressunsigned int* destLen,
406,407c406
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          int* destLen,
406,407c406
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( * destLen,
406,407c406
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( chardestLen,
406,407c406
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         ,
406,408c406
<                          ( char*         dest, 
<                            unsigned int* destLen,
<                            char*         source, 
---
>                          ( char*         destchar*         source, 
407,408c407
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            *         source, 
407,408c407
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned source, 
407,408c407
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned int, 
407,409c407
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* unsigned int  sourceLen,
407,409c407
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* destLenint  sourceLen,
408,409c408
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            sourceLen,
408,409c408
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char,
408,410c408
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         int           blockSize100k, 
408,410c408
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         sourceblockSize100k, 
409,410c409
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            , 
409,411c409
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int           verbosity, 
409,411c409
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  verbosity, 
409,411c409
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  sourceLen, 
410,411d409
<                            int           blockSize100k, 
<                            int           verbosity, 
410,411d409
<                            int           blockSize100k, 
<                            int           verbosity, 
410,412c410
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           blockSize100k)
411,413c411
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            {
411,414c411
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           bz_stream strm;
411,414c411
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           verbositystrm;
412,414c412
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            ;
412,415c412
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           int ret;
412,415c412
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           workFactor ret;
413,415c413
< {
<    bz_stream strm;
<    int ret;
---
> ;
414,416d413
<    bz_stream strm;
<    int ret;
< 
414,417c414
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
---
>    bz_stream (verbosity > 4 ||
414,417c414
<    bz_stream strm;
<    int ret;
< 
<    if (verbosity > 4 ||
---
>    bz_stream strmverbosity > 4 ||
415,417c415
<    int ret;
< 
<    if (verbosity > 4 ||
---
>    > 4 ||
415,417c415
<    int ret;
< 
<    if (verbosity > 4 ||
---
>    int 4 ||
415,417c415
<    int ret;
< 
<    if (verbosity > 4 ||
---
>    int ret||
417,418c417
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    workFactor == 0) workFactor = source;
417,418c417
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    if == 0) workFactor = source;
417,418c417
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    if (0) workFactor = source;
417,418c417
<    if (verbosity > 4 ||
<        workFactor == 0) workFactor = source;
---
>    if (verbosity ) workFactor = source;
(96.6 %, 7013 bytes)
417,418c417
<    if (0) workFactor = source;
<    return ret;
---
>    if (return ret;
417,418c417
<    if (0) workFactor = source;
<    return ret;
---
>    if (0ret;
417,418c417
<    if (0) workFactor = source;
<    return ret;
---
>    if (0) ;
417,419c417
<    if (0) workFactor = source;
<    return ret;
< }
---
>    if (0) workFactor }
417,423c417
<    if (0) workFactor = source;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (0) workFactor = int BZ_API(BZ2_bzBuffToBuffDecompress) 
417,423c417
<    if (0) workFactor = source;
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (0) workFactor = sourceBZ_API(BZ2_bzBuffToBuffDecompress) 
418,423c418
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    (BZ2_bzBuffToBuffDecompress) 
418,423c418
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    return BZ2_bzBuffToBuffDecompress) 
418,423c418
<    return ret;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    return ret) 
419,424c419
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> ( char*         dest, 
423,424c423
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> char*         dest, 
423,424c423
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int *         dest, 
(96.6 %, 6979 bytes)
417,422c417
<    if (0) ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if (0) ) 
418,423c418
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> ( char*         dest, 
422,423c422
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> char*         dest, 
422,423c422
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int *         dest, 
422,423c422
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_APIdest, 
422,423c422
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API(, 
422,424c422
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
> int BZ_API(BZ2_bzBuffToBuffDecompressunsigned int* destLen,
423,424c423
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            int* destLen,
423,424c423
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( * destLen,
423,424c423
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( chardestLen,
423,424c423
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         ,
423,425c423
<                            ( char*         dest, 
<                              unsigned int* destLen,
<                              char*         source, 
---
>                            ( char*         destchar*         source, 
424,425c424
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              *         source, 
424,425c424
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned source, 
424,425c424
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int, 
424,426c424
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* unsigned int  sourceLen,
424,426c424
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* destLenint  sourceLen,
425,426c425
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              sourceLen,
425,426c425
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char,
425,427c425
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         int           small,
425,427c425
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         sourcesmall,
426,427c426
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              ,
426,428c426
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int           verbosity )
426,428c426
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int  verbosity )
426,428c426
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int  sourceLen)
427,429c427
<                              int           small,
<                              int           verbosity )
< {
---
>                              {
427,430c427
<                              int           small,
<                              int           verbosity )
< {
<    ; 
---
>                              int           ; 
427,431c427
<                              int           small,
<                              int           verbosity )
< {
<    ; 
< BZ_VERSION;
---
>                              int           smallBZ_VERSION;
428,431c428
<                              int           verbosity )
< {
<    ; 
< BZ_VERSION;
---
>                              ;
428,432c428
<                              int           verbosity )
< {
<    ; 
< BZ_VERSION;
< }
---
>                              int           }
428,437c428
<                              int           verbosity )
< {
<    ; 
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
---
>                              int           verbosity static
429,437d428
< {
<    ; 
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
430,438c430
<    ; 
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    * bzopen_or_bzdopen
431,438c431
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
> bzopen_or_bzdopen
431,439c431
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const ,
---
> BZ_VERSION( const ,
432,439c432
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ( const ,
---
> const ,
437,439c437
< static
< BZFILE * bzopen_or_bzdopen
<                ( const ,
---
> ,
438,440c438
< BZFILE * bzopen_or_bzdopen
<                ( const ,
<                  int open_mode)      
---
> int open_mode)      
438,440c438
< BZFILE * bzopen_or_bzdopen
<                ( const ,
<                  int open_mode)      
---
> BZFILE open_mode)      
438,440c438
< BZFILE * bzopen_or_bzdopen
<                ( const ,
<                  int open_mode)      
---
> BZFILE * )      
439,441c439
<                ( const ,
<                  int open_mode)      
< ;
---
>                ;
439,446c439
<                ( const ,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( BZFILE * BZ_API(BZ2_bzopen)
439,446c439
<                ( const ,
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                ( const * BZ_API(BZ2_bzopen)
440,446c440
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  BZ_API(BZ2_bzopen)
440,446c440
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  int (BZ2_bzopen)
440,446c440
<                  int open_mode)      
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                  int open_modeBZ2_bzopen)
441,446c441
< ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> )
446,447c446
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const mode )
---
> ( const mode )
446,447c446
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const mode )
---
> BZFILE const mode )
(96.6 %, 6931 bytes)
439,444c439
<                ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>                )
444,445c444
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const mode )
---
> ( const mode )
444,445c444
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const mode )
---
> BZFILE const mode )
444,445c444
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const mode )
---
> BZFILE * mode )
444,445c444
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const mode )
---
> BZFILE * BZ_API)
444,446c444
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const mode )
< {
---
> BZFILE * BZ_API({
444,447c444
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const mode )
< {
<    return 0;
---
> BZFILE * BZ_API(BZ2_bzopenreturn 0;
445,447c445
<                ( const mode )
< {
<    return 0;
---
>                0;
445,447c445
<                ( const mode )
< {
<    return 0;
---
>                ( ;
445,448c445
<                ( const mode )
< {
<    return 0;
< }
---
>                ( const }
445,452c445
<                ( const mode )
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>                ( const mode BZFILE * BZ_API(BZ2_bzdopen)
446,452c446
< {
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> * BZ_API(BZ2_bzdopen)
447,452c447
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    BZ_API(BZ2_bzdopen)
447,452c447
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    return (BZ2_bzdopen)
447,452c447
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    return 0BZ2_bzdopen)
448,452c448
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> )
452,453c452
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> ( int fd,
452,453c452
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE int fd,
452,453c452
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE * fd,
452,453c452
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
---
> BZFILE * BZ_API,
452,454c452
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const buf, int len )
---
> BZFILE * BZ_API(const buf, int len )
452,454c452
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int fd,
<                  const buf, int len )
---
> BZFILE * BZ_API(BZ2_bzdopenbuf, int len )
453,454c453
<                ( int fd,
<                  const buf, int len )
---
>                , int len )
453,454c453
<                ( int fd,
<                  const buf, int len )
---
>                ( int len )
453,454c453
<                ( int fd,
<                  const buf, int len )
---
>                ( int len )
(96.6 %, 6895 bytes)
453,455c453
<                ( int len )
< {
<    int bzerr, nread;
---
>                ( , nread;
453,455c453
<                ( int len )
< {
<    int bzerr, nread;
---
>                ( int nread;
453,455c453
<                ( int len )
< {
<    int bzerr, nread;
---
>                ( int len ;
454,456c454
< {
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
> if (bzerr == BZ_STREAM_END) {
455,456c455
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    (bzerr == BZ_STREAM_END) {
455,456c455
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr == BZ_STREAM_END) {
455,456c455
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr== BZ_STREAM_END) {
455,456c455
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr, BZ_STREAM_END) {
455,456c455
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr, nread) {
456c456
<    if (bzerr == BZ_STREAM_END) {
---
>    {
456,457c456
<    if (bzerr == BZ_STREAM_END) {
<       -1;
---
>    if -1;
456,457c456
<    if (bzerr == BZ_STREAM_END) {
<       -1;
---
>    if (1;
456,457c456
<    if (bzerr == BZ_STREAM_END) {
<       -1;
---
>    if (bzerr ;
456,458c456
<    if (bzerr == BZ_STREAM_END) {
<       -1;
<    }
---
>    if (bzerr == }
456,459c456
<    if (bzerr == BZ_STREAM_END) {
<       -1;
<    }
< }
---
>    if (bzerr == BZ_STREAM_END}
456,463c456
<    if (bzerr == BZ_STREAM_END) {
<       -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
>    if (bzerr == BZ_STREAM_END) int BZ_API(BZ2_bzwrite) (BZFILE* b)
457,463c457
<       -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
>       BZ_API(BZ2_bzwrite) (BZFILE* b)
457,463c457
<       -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
>       -(BZ2_bzwrite) (BZFILE* b)
457,463c457
<       -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
>       -1BZ2_bzwrite) (BZFILE* b)
458,463c458
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
>    ) (BZFILE* b)
459,463c459
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> (BZFILE* b)
463c463
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> BZFILE* b)
463c463
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> int * b)
463c463
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> int BZ_APIb)
463c463
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> int BZ_API()
463,464c463
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
< {
---
> int BZ_API(BZ2_bzwrite{
463,465c463
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
< {
<    int ;
---
> int BZ_API(BZ2_bzwrite) int ;
463,465c463
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
< {
<    int ;
---
> int BZ_API(BZ2_bzwrite) (;
463,466c463
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
< {
<    int ;
<    FILE handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILEFILE handle;
463,466c463
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
< {
<    int ;
<    FILE handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* handle;
463,466c463
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
< {
<    int ;
<    FILE handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* b;
464,468c464
< {
<    int ;
<    FILE handle;
<    
<    if (b==NULL){
---
> if (b==NULL){
465,468c465
<    int ;
<    FILE handle;
<    
<    if (b==NULL){
---
>    (b==NULL){
465,468c465
<    int ;
<    FILE handle;
<    
<    if (b==NULL){
---
>    int b==NULL){
466,468c466
<    FILE handle;
<    
<    if (b==NULL){
---
>    ==NULL){
466,468c466
<    FILE handle;
<    
<    if (b==NULL){
---
>    FILE NULL){
466,468c466
<    FILE handle;
<    
<    if (b==NULL){
---
>    FILE handle){
468c468
<    if (b==NULL){
---
>    {
468,469c468
<    if (b==NULL){
<       ;
---
>    if ;
468,470c468
<    if (b==NULL){
<       ;
<       ;
---
>    if (;
468,471c468
<    if (b==NULL){
<       ;
<       ;
<    }
---
>    if (b}
468,472c468
<    if (b==NULL){
<       ;
<       ;
<    }
< }
---
>    if (b==}
468,477c468
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b==NULLstatic char *bzerrorstrings[] = {
468,477c468
<    if (b==NULL){
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    if (b==NULL)char *bzerrorstrings[] = {
469,477c469
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       *bzerrorstrings[] = {
470,477c470
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       bzerrorstrings[] = {
(96.6 %, 6883 bytes)
468,477c468
<    {
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    char *bzerrorstrings[] = {
469,477c469
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       *bzerrorstrings[] = {
470,477c470
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       bzerrorstrings[] = {
471,477c471
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    [] = {
472,477c472
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> ] = {
477c477
< static char *bzerrorstrings[] = {
---
> = {
477c477
< static char *bzerrorstrings[] = {
---
> static {
477,478c477
< static char *bzerrorstrings[] = {
<        "OK"
---
> static char "OK"
477,479c477
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
---
> static char *,"???"   
477,479c477
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
---
> static char *bzerrorstrings"???"   
477,480c477
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
---
> static char *bzerrorstrings[,"???"   
477,480c477
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
---
> static char *bzerrorstrings[] "???"   
477,481c477
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
< };
---
> static char *bzerrorstrings[] = };
478,481c478
<        "OK"
<       ,"???"   
<       ,"???"   
< };
---
>        ;
479,484c479
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
>       const char * BZ_API(BZ2_bzerror) ()
479,484c479
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
>       ,char * BZ_API(BZ2_bzerror) ()
480,484c480
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
>       * BZ_API(BZ2_bzerror) ()
480,484c480
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
>       ,BZ_API(BZ2_bzerror) ()
481,484c481
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
> (BZ2_bzerror) ()
481,484c481
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
> }BZ2_bzerror) ()
484c484
< const char * BZ_API(BZ2_bzerror) ()
---
> ) ()
484c484
< const char * BZ_API(BZ2_bzerror) ()
---
> const ()
484c484
< const char * BZ_API(BZ2_bzerror) ()
---
> const char )
484,485c484
< const char * BZ_API(BZ2_bzerror) ()
< {
---
> const char * {
484,486c484
< const char * BZ_API(BZ2_bzerror) ()
< {
<    ;
---
> const char * BZ_API;
484,487c484
< const char * BZ_API(BZ2_bzerror) ()
< {
<    ;
< }
---
> const char * BZ_API(}
484,516c484
< const char * BZ_API(BZ2_bzerror) ()
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define 
\ No newline at end of file
---
> const char * BZ_API(BZ2_bzerror#define define 
\ No newline at end of file
484,516c484
< const char * BZ_API(BZ2_bzerror) ()
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define 
\ No newline at end of file
---
> const char * BZ_API(BZ2_bzerror) define define 
\ No newline at end of file
484,516c484
< const char * BZ_API(BZ2_bzerror) ()
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define 
\ No newline at end of file
---
> const char * BZ_API(BZ2_bzerror) (define 
\ No newline at end of file
485,516d484
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define 
\ No newline at end of file
486,516c486
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define 
\ No newline at end of file
---
>    
\ No newline at end of file
487,516d486
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define define 
\ No newline at end of file
516d515
< #define define 
\ No newline at end of file
516c516
< #define define 
\ No newline at end of file
---
> #
\ No newline at end of file
516c516
< #define define 
\ No newline at end of file
---
> #define 
\ No newline at end of file
(96.6 %, 6868 bytes)
===< pass_clex :: rm-toks-5 >===
9,11c9
< #2
< 
< #define BZ_OK                3
---
> 3
9,12c9
< #2
< 
< #define BZ_OK                3
< #define BZ_STREAM_END        4
---
> ##define BZ_STREAM_END        4
11,12c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
---
> define BZ_STREAM_END        4
11,12c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
---
> #BZ_STREAM_END        4
11,12c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
---
> #define 4
11,13c11
< #define BZ_OK                3
< #define BZ_STREAM_END        4
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> #define BZ_OK                #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> #BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> #define BZ_CONFIG_ERROR      (-9)
12,13c12
< #define BZ_STREAM_END        4
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> #define BZ_STREAM_END        (-9)
13c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> -9)
13c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> #9)
13c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
---
> #define )
13,15c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
---
> #define BZ_PARAM_ERROR       typedef 
13,16c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      struct {
13,16c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      ({
13,17c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-char *next_in;
13,17c13
< #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_PARAM_ERROR       BZ_CONFIG_ERROR      (-9*next_in;
(96.7 %, 6816 bytes)
12,15c12
< #define BZ_STREAM_END        (-9)
< 
< typedef 
<    struct {
---
> #define BZ_STREAM_END        struct {
12,15c12
< #define BZ_STREAM_END        (-9)
< 
< typedef 
<    struct {
---
> #define BZ_STREAM_END        ({
12,16c12
< #define BZ_STREAM_END        (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_STREAM_END        (-char *next_in;
12,16c12
< #define BZ_STREAM_END        (-9)
< 
< typedef 
<    struct {
<       char *next_in;
---
> #define BZ_STREAM_END        (-9*next_in;
14,16c14
< typedef 
<    struct {
<       char *next_in;
---
> next_in;
15,16c15
<    struct {
<       char *next_in;
---
>    ;
15,17c15
<    struct {
<       char *next_in;
<       ;
---
>    struct ;
16,18d15
<       char *next_in;
<       ;
< 
16,19c16
<       char *next_in;
<       ;
< 
<       void *state;
---
>       char *state;
(96.7 %, 6786 bytes)
16,18c16
<       void *state;
< 
<       void *(*bzalloc)(void );
---
>       *(*bzalloc)(void );
16,18c16
<       void *state;
< 
<       void *(*bzalloc)(void );
---
>       void (*bzalloc)(void );
16,18c16
<       void *state;
< 
<       void *(*bzalloc)(void );
---
>       void **bzalloc)(void );
16,18c16
<       void *state;
< 
<       void *(*bzalloc)(void );
---
>       void *statebzalloc)(void );
18c18
<       void *(*bzalloc)(void );
---
>       )(void );
18c18
<       void *(*bzalloc)(void );
---
>       void (void );
18c18
<       void *(*bzalloc)(void );
---
>       void *void );
18c18
<       void *(*bzalloc)(void );
---
>       void *();
18c18
<       void *(*bzalloc)(void );
---
>       void *(*;
18,19c18
<       void *(*bzalloc)(void );
<       void *opaque;
---
>       void *(*bzallocvoid *opaque;
(96.7 %, 6765 bytes)
16c16
<       void (*bzalloc)(void );
---
>       void void );
16c16
<       void (*bzalloc)(void );
---
>       void ();
16c16
<       void (*bzalloc)(void );
---
>       void (*;
16,17c16
<       void (*bzalloc)(void );
<       void *opaque;
---
>       void (*bzallocvoid *opaque;
16,17c16
<       void (*bzalloc)(void );
<       void *opaque;
---
>       void (*bzalloc)*opaque;
16,17c16
<       void (*bzalloc)(void );
<       void *opaque;
---
>       void (*bzalloc)(opaque;
16,17c16
<       void (*bzalloc)(void );
<       void *opaque;
---
>       void (*bzalloc)(void ;
16,18c16
<       void (*bzalloc)(void );
<       void *opaque;
<    } 
---
>       void (*bzalloc)(void )} 
17,19c17
<       void *opaque;
<    } 
<    bz_stream;
---
>       bz_stream;
17,19c17
<       void *opaque;
<    } 
<    bz_stream;
---
>       void ;
17,23c17
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *#include <stdio.h>
17,23c17
<       void *opaque;
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void *opaqueinclude <stdio.h>
18,23c18
<    } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    <stdio.h>
19,23c19
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    stdio.h>
19,23c19
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_stream.h>
23c23
< #include <stdio.h>
---
> h>
23c23
< #include <stdio.h>
---
> #>
(96.7 %, 6740 bytes)
16,21c16
<       void (*bzalloc)(void )} 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       void (*bzalloc)(void )<stdio.h>
17,21c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    stdio.h>
17,21c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_stream.h>
21c21
< #include <stdio.h>
---
> h>
21c21
< #include <stdio.h>
---
> #>
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include #   define BZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <define BZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdioBZ_API(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.(func) func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.hfunc) func
23c23
< #   define BZ_API(func) func
---
> ) func
23c23
< #   define BZ_API(func) func
---
> #   func
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define #   define BZ_EXTERN extern
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_APIdefine BZ_EXTERN extern
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(BZ_EXTERN extern
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(funcextern
23,29c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
---
> #   define BZ_API(func) (BZ2_bzDecompressInit) ( 
24,29c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
---
> BZ2_bzDecompressInit) ( 
24,29c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
---
> #   ) ( 
24,29c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
---
> #   define ( 
24,30c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> #   define BZ_EXTERN bz_stream *strm, 
29,30c29
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> *strm, 
29,30c29
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> (strm, 
29,30c29
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> (BZ2_bzDecompressInit, 
29,31c29
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
<       int       verbosity, 
---
> (BZ2_bzDecompressInit) int       verbosity, 
30,31c30
<       bz_stream *strm, 
<       int       verbosity, 
---
>       verbosity, 
30,31c30
<       bz_stream *strm, 
<       int       verbosity, 
---
>       bz_stream , 
30,32c30
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
>       bz_stream *int       );
30,32c30
<       bz_stream *strm, 
<       int       verbosity, 
<       int       );
---
>       bz_stream *strm);
31,32c31
<       int       verbosity, 
<       int       );
---
>       ;
31,38c31
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       int       #define BZ_MAX_UNUSED 5000
31,38c31
<       int       verbosity, 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       int       verbositydefine BZ_MAX_UNUSED 5000
32,38c32
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       BZ_MAX_UNUSED 5000
32,38c32
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       int       5000
32,40c32
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
>       int       )typedef void BZFILE;
38,40c38
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> void BZFILE;
38,40c38
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #BZFILE;
38,40c38
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #define ;
38,42c38
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> #define BZ_MAX_UNUSED BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
40,42c40
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzReadOpen) ( 
40,42c40
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef * BZ_API(BZ2_bzReadOpen) ( 
40,42c40
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZ_API(BZ2_bzReadOpen) ( 
40,42c40
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZFILE(BZ2_bzReadOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ2_bzReadOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN ) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN BZFILE( 
42,43c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* int*  bzerror,   
42,43c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_API*  bzerror,   
42,43c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_API(bzerror,   
42,43c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen,   
42,44c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) FILE* f, 
43,44c43
<       int*  bzerror,   
<       FILE* f, 
---
>       * f, 
43,44c43
<       int*  bzerror,   
<       FILE* f, 
---
>       intf, 
43,44c43
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  , 
43,45c43
<       int*  bzerror,   
<       FILE* f, 
<       int   verbosity, 
---
>       int*  bzerrorint   verbosity, 
44,45c44
<       FILE* f, 
<       int   verbosity, 
---
>       verbosity, 
44,45c44
<       FILE* f, 
<       int   verbosity, 
---
>       FILE, 
44,46c44
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILE* int   small,
44,46c44
<       FILE* f, 
<       int   verbosity, 
<       int   small,
---
>       FILE* fsmall,
45,46c45
<       int   verbosity, 
<       int   small,
---
>       ,
45,47c45
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   void* unused,    
45,47c45
<       int   verbosity, 
<       int   small,
<       void* unused,    
---
>       int   verbosity* unused,    
46,47c46
<       int   small,
<       void* unused,    
---
>       unused,    
46,47c46
<       int   small,
<       void* unused,    
---
>       int   ,    
46,48c46
<       int   small,
<       void* unused,    
<       int   nUnused 
---
>       int   smallint   nUnused 
47,48c47
<       void* unused,    
<       int   nUnused 
---
>       nUnused 
47,49c47
<       void* unused,    
<       int   nUnused 
<    );
---
>       void);
47,49c47
<       void* unused,    
<       int   nUnused 
<    );
---
>       void* ;
47,51c47
<       void* unused,    
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void* unusedBZ_EXTERN void ;
48,51c48
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       void ;
48,51c48
<       int   nUnused 
<    );
< 
< BZ_EXTERN void ;
---
>       int   ;
49,53c49
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
49,53c49
<    );
< 
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
>    )void BZ_API(BZ2_bzReadGetUnused) ( 
51,53c51
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_API(BZ2_bzReadGetUnused) ( 
51,53c51
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN (BZ2_bzReadGetUnused) ( 
51,53c51
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ2_bzReadGetUnused) ( 
53c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> ) ( 
53c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN ( 
53,54c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void int*    bzerror, 
53,54c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API*    bzerror, 
53,54c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(bzerror, 
53,54c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused, 
53,55c53
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) BZFILE* b, 
54,55c54
<       int*    bzerror, 
<       BZFILE* b, 
---
>       * b, 
54,55c54
<       int*    bzerror, 
<       BZFILE* b, 
---
>       intb, 
54,55c54
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
54,56c54
<       int*    bzerror, 
<       BZFILE* b, 
<       void**  unused,  
---
>       int*    bzerrorvoid**  unused,  
55,56c55
<       BZFILE* b, 
<       void**  unused,  
---
>       **  unused,  
55,56c55
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE*  unused,  
55,56c55
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* unused,  
55,56c55
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* b,  
56d55
<       void**  unused,  
56,57c56
<       void**  unused,  
<       int*    nUnused 
---
>       void*    nUnused 
56,57c56
<       void**  unused,  
<       int*    nUnused 
---
>       void*nUnused 
56,58c56
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void**  );
56,58c56
<       void**  unused,  
<       int*    nUnused 
<    );
---
>       void**  unused;
57,60c57
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
57,60c57
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       intint BZ_API(BZ2_bzRead) ( 
57,60c57
<       int*    nUnused 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    BZ_API(BZ2_bzRead) ( 
58,60c58
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    (BZ2_bzRead) ( 
58,60c58
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    )BZ2_bzRead) ( 
60c60
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> ) ( 
60c60
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN ( 
60,61c60
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int int*    bzerror, 
60,61c60
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_API*    bzerror, 
60,61c60
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_API(bzerror, 
60,61c60
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead, 
60,62c60
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN int BZ_API(BZ2_bzRead) BZFILE* b, 
61,62c61
<       int*    bzerror, 
<       BZFILE* b, 
---
>       * b, 
61,62c61
<       int*    bzerror, 
<       BZFILE* b, 
---
>       intb, 
61,62c61
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
61,63c61
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerrorvoid*   buf, 
62,63c62
<       BZFILE* b, 
<       void*   buf, 
---
>       *   buf, 
62,63c62
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILEbuf, 
62,63c62
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
62,64c62
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* bint     len 
63,64c63
<       void*   buf, 
<       int     len 
---
>       len 
63,65c63
<       void*   buf, 
<       int     len 
<    );
---
>       void);
63,65c63
<       void*   buf, 
<       int     len 
<    );
---
>       void*   ;
63,67c63
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       void*   bufBZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
64,67c64
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
64,67c64
<       int     len 
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int     * BZ_API(BZ2_bzWriteOpen) ( 
65,67c65
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    BZ_API(BZ2_bzWriteOpen) ( 
65,67c65
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )(BZ2_bzWriteOpen) ( 
67c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ2_bzWriteOpen) ( 
67c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN ) ( 
67c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILE( 
67,68c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* int*  bzerror,      
67,68c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_API*  bzerror,      
67,68c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_API(bzerror,      
67,68c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen,      
67,69c67
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
<       FILE* f, 
---
> BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) FILE* f, 
68,69c68
<       int*  bzerror,      
<       FILE* f, 
---
>       * f, 
68,69c68
<       int*  bzerror,      
<       FILE* f, 
---
>       intf, 
68,69c68
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  , 
68,70c68
<       int*  bzerror,      
<       FILE* f, 
<       int   blockSize100k, 
---
>       int*  bzerrorint   blockSize100k, 
69,70c69
<       FILE* f, 
<       int   blockSize100k, 
---
>       blockSize100k, 
69,70c69
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE, 
69,71c69
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILE* int   verbosity, 
69,71c69
<       FILE* f, 
<       int   blockSize100k, 
<       int   verbosity, 
---
>       FILE* fverbosity, 
70,71c70
<       int   blockSize100k, 
<       int   verbosity, 
---
>       , 
70,72c70
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int   int   workFactor 
70,72c70
<       int   blockSize100k, 
<       int   verbosity, 
<       int   workFactor 
---
>       int   blockSize100kworkFactor 
71,73c71
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       );
71,73c71
<       int   verbosity, 
<       int   workFactor 
<    );
---
>       int   ;
71,75c71
<       int   verbosity, 
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   verbosityBZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
72,75c72
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       void BZ_API(BZ2_bzWrite) ( 
72,75c72
<       int   workFactor 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   BZ_API(BZ2_bzWrite) ( 
73,75c73
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    (BZ2_bzWrite) ( 
73,75c73
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    )BZ2_bzWrite) ( 
75c75
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> ) ( 
75c75
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN ( 
75,76c75
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void int*    bzerror, 
75,76c75
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API*    bzerror, 
75,76c75
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(bzerror, 
75,76c75
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite, 
75,77c75
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
<       BZFILE* b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWrite) BZFILE* b, 
76,77c76
<       int*    bzerror, 
<       BZFILE* b, 
---
>       * b, 
76,77c76
<       int*    bzerror, 
<       BZFILE* b, 
---
>       intb, 
76,77c76
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    , 
76,78c76
<       int*    bzerror, 
<       BZFILE* b, 
<       void*   buf, 
---
>       int*    bzerrorvoid*   buf, 
77,78c77
<       BZFILE* b, 
<       void*   buf, 
---
>       *   buf, 
77,78c77
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILEbuf, 
77,78c77
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* , 
77,79c77
<       BZFILE* b, 
<       void*   buf, 
<       int     len 
---
>       BZFILE* bint     len 
78,79c78
<       void*   buf, 
<       int     len 
---
>       len 
78,80c78
<       void*   buf, 
<       int     len 
<    );
---
>       void);
78,80c78
<       void*   buf, 
<       int     len 
<    );
---
>       void*   ;
78,82c78
<       void*   buf, 
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void*   bufBZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
79,82c79
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       void BZ_API(BZ2_bzWriteClose) ( 
79,82c79
<       int     len 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int     BZ_API(BZ2_bzWriteClose) ( 
80,82c80
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    (BZ2_bzWriteClose) ( 
80,82c80
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )BZ2_bzWriteClose) ( 
82c82
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> ) ( 
82c82
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN ( 
82,83c82
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void int*          bzerror, 
82,83c82
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API*          bzerror, 
82,83c82
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(bzerror, 
82,83c82
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose, 
82,84c82
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose) BZFILE*       b, 
83,84c83
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       *       b, 
83,84c83
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       intb, 
83,84c83
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
83,85c83
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          bzerrorint           abandon, 
84,85c84
<       BZFILE*       b, 
<       int           abandon, 
---
>       abandon, 
84,85c84
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE, 
84,86c84
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       unsigned int* nbytes_in, 
84,86c84
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       BZFILE*       bint* nbytes_in, 
85,86c85
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       * nbytes_in, 
85,86c85
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           nbytes_in, 
86d85
<       unsigned int* nbytes_in, 
86d85
<       unsigned int* nbytes_in, 
86d85
<       unsigned int* nbytes_in, 
86d85
<       unsigned int* nbytes_in, 
86d85
<       unsigned int* nbytes_in, 
86,88c86
<       unsigned int* nbytes_in, 
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* nbytes_in);
87,88c87
<       unsigned int* nbytes_out 
<    );
---
>       ;
87,90c87
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
87,90c87
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned intvoid BZ_API(BZ2_bzWriteClose64) ( 
87,90c87
<       unsigned int* nbytes_out 
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned int* BZ_API(BZ2_bzWriteClose64) ( 
88,90c88
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    (BZ2_bzWriteClose64) ( 
88,90c88
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    )BZ2_bzWriteClose64) ( 
90c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> ) ( 
90c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN ( 
90,91c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void int*          bzerror, 
90,91c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API*          bzerror, 
90,91c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(bzerror, 
90,91c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64, 
90,92c90
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
<       BZFILE*       b, 
---
> BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) BZFILE*       b, 
91,92c91
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       *       b, 
91,92c91
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       intb, 
91,92c91
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          , 
91,93c91
<       int*          bzerror, 
<       BZFILE*       b, 
<       int           abandon, 
---
>       int*          bzerrorint           abandon, 
92,93c92
<       BZFILE*       b, 
<       int           abandon, 
---
>       abandon, 
92,93c92
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE, 
92,94c92
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       unsigned int* nbytes_in_lo32, 
92,94c92
<       BZFILE*       b, 
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       BZFILE*       bint* nbytes_in_lo32, 
93,94c93
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       * nbytes_in_lo32, 
93,94c93
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           nbytes_in_lo32, 
94d93
<       unsigned int* nbytes_in_lo32, 
94d93
<       unsigned int* nbytes_in_lo32, 
94d93
<       unsigned int* nbytes_in_lo32, 
94d93
<       unsigned int* nbytes_in_lo32, 
94d93
<       unsigned int* nbytes_in_lo32, 
95d94
<       unsigned int* nbytes_in_hi32, 
95d94
<       unsigned int* nbytes_in_hi32, 
95d94
<       unsigned int* nbytes_in_hi32, 
95d94
<       unsigned int* nbytes_in_hi32, 
95d94
<       unsigned int* nbytes_in_hi32, 
96d95
<       unsigned int* nbytes_out_lo32, 
96d95
<       unsigned int* nbytes_out_lo32, 
96d95
<       unsigned int* nbytes_out_lo32, 
96d95
<       unsigned int* nbytes_out_lo32, 
96d95
<       unsigned int* nbytes_out_lo32, 
96,98c96
<       unsigned int* nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* nbytes_out_lo32);
97,98c97
<       unsigned int* nbytes_out_hi32
<    );
---
>       ;
97,103c97
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
97,103c97
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned intint BZ_API(BZ2_bzBuffToBuffCompress) ( 
97,103c97
<       unsigned int* nbytes_out_hi32
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned int* BZ_API(BZ2_bzBuffToBuffCompress) ( 
98,103c98
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    (BZ2_bzBuffToBuffCompress) ( 
98,103c98
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    )BZ2_bzBuffToBuffCompress) ( 
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> ) ( 
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN ( 
103,104c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int char*         dest, 
103,104c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API*         dest, 
103,104c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(dest, 
103,104c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress, 
103,105c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) unsigned int* destLen,
104,105c104
<       char*         dest, 
<       unsigned int* destLen,
---
>       int* destLen,
104,105c104
<       char*         dest, 
<       unsigned int* destLen,
---
>       char* destLen,
104,105c104
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         destLen,
104,105c104
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         dest,
105d104
<       unsigned int* destLen,
105,106c105
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned *         source, 
105,106c105
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned intsource, 
105,106c105
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int* , 
105,107c105
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLenunsigned int  sourceLen,
106,107c106
<       char*         source, 
<       unsigned int  sourceLen,
---
>       int  sourceLen,
106,107c106
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charsourceLen,
106,107c106
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         ,
106,108c106
<       char*         source, 
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       char*         sourceint           blockSize100k, 
107,108c107
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       blockSize100k, 
107,108c107
<       unsigned int  sourceLen,
<       int           blockSize100k, 
---
>       unsigned , 
107,109c107
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  int           verbosity, 
107,109c107
<       unsigned int  sourceLen,
<       int           blockSize100k, 
<       int           verbosity, 
---
>       unsigned int  sourceLenverbosity, 
108,109c108
<       int           blockSize100k, 
<       int           verbosity, 
---
>       , 
108,110c108
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       int           int           workFactor 
108,110c108
<       int           blockSize100k, 
<       int           verbosity, 
<       int           workFactor 
---
>       int           blockSize100kworkFactor 
109,111c109
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       );
109,111c109
<       int           verbosity, 
<       int           workFactor 
<    );
---
>       int           ;
109,113c109
<       int           verbosity, 
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           verbosityBZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
110,113c110
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
110,113c110
<       int           workFactor 
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           BZ_API(BZ2_bzBuffToBuffDecompress) ( 
111,113c111
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    (BZ2_bzBuffToBuffDecompress) ( 
111,113c111
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    )BZ2_bzBuffToBuffDecompress) ( 
113c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> ) ( 
113c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN ( 
113,114c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int char*         dest, 
113,114c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API*         dest, 
113,114c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(dest, 
113,114c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress, 
113,115c113
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
<       unsigned int* destLen,
---
> BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) unsigned int* destLen,
114,115c114
<       char*         dest, 
<       unsigned int* destLen,
---
>       int* destLen,
114,115c114
<       char*         dest, 
<       unsigned int* destLen,
---
>       char* destLen,
114,115c114
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         destLen,
114,115c114
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         dest,
115d114
<       unsigned int* destLen,
115,116c115
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned *         source, 
115,116c115
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned intsource, 
115,116c115
<       unsigned int* destLen,
<       char*         source, 
---
>       unsigned int* , 
115,117c115
<       unsigned int* destLen,
<       char*         source, 
<       unsigned int  sourceLen,
---
>       unsigned int* destLenunsigned int  sourceLen,
116,117c116
<       char*         source, 
<       unsigned int  sourceLen,
---
>       int  sourceLen,
116,117c116
<       char*         source, 
<       unsigned int  sourceLen,
---
>       charsourceLen,
116,117c116
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         ,
116,118c116
<       char*         source, 
<       unsigned int  sourceLen,
<       int           small, 
---
>       char*         sourceint           small, 
117,118c117
<       unsigned int  sourceLen,
<       int           small, 
---
>       small, 
117,118c117
<       unsigned int  sourceLen,
<       int           small, 
---
>       unsigned , 
117,119c117
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  int           );
117,119c117
<       unsigned int  sourceLen,
<       int           small, 
<       int           );
---
>       unsigned int  sourceLen);
118,119c118
<       int           small, 
<       int           );
---
>       ;
118,121c118
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       int           BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
118,121c118
<       int           small, 
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       int           smallBZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
119,121c119
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       * BZ_API(BZ2_bzcloseBZ2_bzerror) (
119,121c119
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       int           BZ_API(BZ2_bzcloseBZ2_bzerror) (
119,121c119
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
>       int           )(BZ2_bzcloseBZ2_bzerror) (
121c121
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> BZ2_bzcloseBZ2_bzerror) (
121c121
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> BZ_EXTERN ) (
121c121
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
---
> BZ_EXTERN BZFILE (
121,122c121
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       );
---
> BZ_EXTERN BZFILE * );
121,122c121
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       );
---
> BZ_EXTERN BZFILE * BZ_API;
121,132c121
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN BZFILE * BZ_API(#define _BZLIB_PRIVATE_H
121,132c121
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerrordefine _BZLIB_PRIVATE_H
121,132c121
< BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) (
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_EXTERN BZFILE * BZ_API(BZ2_bzcloseBZ2_bzerror) _BZLIB_PRIVATE_H
122,134c122
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       #define BZ_VERSION  "1.0.2, 30-Dec-2001"
122,134c122
<       );
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
>       )define BZ_VERSION  "1.0.2, 30-Dec-2001"
132,134c132
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_VERSION  "1.0.2, 30-Dec-2001"
132,134c132
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #"1.0.2, 30-Dec-2001"
132,136c132
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define typedef char            Char;
134,136c134
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> char            Char;
(96.7 %, 6706 bytes)
121,133c121
< BZ_EXTERN BZFILE * BZ_API;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_EXTERN BZFILE * BZ_APIdefine BZ_VERSION  "1.0.2, 30-Dec-2001"
131,133c131
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> BZ_VERSION  "1.0.2, 30-Dec-2001"
131,133c131
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #"1.0.2, 30-Dec-2001"
131,135c131
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define typedef char            Char;
133,135c133
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> char            Char;
133,135c133
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #Char;
133,135c133
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define ;
133,136c133
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
< typedef unsigned char   Bool;
---
> #define BZ_VERSION  typedef unsigned char   Bool;
135,136c135
< typedef char            Char;
< typedef unsigned char   Bool;
---
> unsigned char   Bool;
135,136c135
< typedef char            Char;
< typedef unsigned char   Bool;
---
> typedef char   Bool;
135,136c135
< typedef char            Char;
< typedef unsigned char   Bool;
---
> typedef char            Bool;
136d135
< typedef unsigned char   Bool;
136d135
< typedef unsigned char   Bool;
136d135
< typedef unsigned char   Bool;
136,137c136
< typedef unsigned char   Bool;
< typedef Int32;
---
> typedef unsigned ;
136,138c136
< typedef unsigned char   Bool;
< typedef Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   typedef unsigned int    UInt32;
136,138c136
< typedef unsigned char   Bool;
< typedef Int32;
< typedef unsigned int    UInt32;
---
> typedef unsigned char   Boolunsigned int    UInt32;
137,138c137
< typedef Int32;
< typedef unsigned int    UInt32;
---
> int    UInt32;
137,138c137
< typedef Int32;
< typedef unsigned int    UInt32;
---
> typedef UInt32;
138d137
< typedef unsigned int    UInt32;
138d137
< typedef unsigned int    UInt32;
138,139c138
< typedef unsigned int    UInt32;
< UInt16;
---
> typedef ;
138,141c138
< typedef unsigned int    UInt32;
< UInt16;
< 
< struct {
---
> typedef unsigned struct {
138,141c138
< typedef unsigned int    UInt32;
< UInt16;
< 
< struct {
---
> typedef unsigned int    {
139,143d138
< UInt16;
< 
< struct {
<       
<       ;
139,155c139
< UInt16;
< 
< struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
---
> ;
139,161c139
< UInt16;
< 
< struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
> UInt16UInt32   calculatedCombinedCRC;
141,161c141
< struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
> calculatedCombinedCRC;
141,161c141
< struct {
<       
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
---
> struct ;
143,207c143
<       ;
< 
<       
<       
<       
<       
<       
<       
<       
<       
< 
<       
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
---
>       }
155,208c155
<       ;
< 
<       
<       
<       
<       
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       DState;
161,208c161
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
---
>       ;
161,214c161
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< ;
---
>       UInt32   ;
161,229c161
<       UInt32   calculatedCombinedCRC;
< 
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
< 
<       
<       
<       
<       
< 
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<       
<        
<       
<       
<       
<       
<       
<       
<       
< 
<    }
<    DState;
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>       UInt32   calculatedCombinedCRCint BZ_API(BZ2_bzCompressInit) 
207,229c207
<    }
<    DState;
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>    BZ_API(BZ2_bzCompressInit) 
208,229c208
<    DState;
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>    (BZ2_bzCompressInit) 
(96.9 %, 6275 bytes)
143,165c143
<       }
<    DState;
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>       BZ_API(BZ2_bzCompressInit) 
144,165c144
<    DState;
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>    (BZ2_bzCompressInit) 
144,165c144
<    DState;
< 
< 
< 
< 
< 
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
>    DStateBZ2_bzCompressInit) 
150,165c150
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzCompressInit) 
---
> ) 
165,166c165
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* verbosity,
---
> ( bz_stream* verbosity,
165,166c165
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* verbosity,
---
> int bz_stream* verbosity,
165,166c165
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* verbosity,
---
> int BZ_API* verbosity,
165,166c165
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* verbosity,
---
> int BZ_API(verbosity,
165,166c165
< int BZ_API(BZ2_bzCompressInit) 
<                     ( bz_stream* verbosity,
---
> int BZ_API(BZ2_bzCompressInit,
166,167c166
<                     ( bz_stream* verbosity,
<                      int        workFactor )
---
>                     int        workFactor )
166,167c166
<                     ( bz_stream* verbosity,
<                      int        workFactor )
---
>                     ( workFactor )
(97.0 %, 6236 bytes)
144,145c144
<    (BZ2_bzCompressInit) 
<                     ( bz_stream* verbosity,
---
>    * verbosity,
144,145c144
<    (BZ2_bzCompressInit) 
<                     ( bz_stream* verbosity,
---
>    (verbosity,
144,145c144
<    (BZ2_bzCompressInit) 
<                     ( bz_stream* verbosity,
---
>    (BZ2_bzCompressInit,
145,146c145
<                     ( bz_stream* verbosity,
<                      int        workFactor )
---
>                     int        workFactor )
145,146c145
<                     ( bz_stream* verbosity,
<                      int        workFactor )
---
>                     ( workFactor )
145,146c145
<                     ( bz_stream* verbosity,
<                      int        workFactor )
---
>                     ( bz_stream)
145,147c145
<                     ( bz_stream* verbosity,
<                      int        workFactor )
< {
---
>                     ( bz_stream* {
145,148c145
<                     ( bz_stream* verbosity,
<                      int        workFactor )
< {
<    ;
---
>                     ( bz_stream* verbosity;
146,149c146
<                      int        workFactor )
< {
<    ;
< }
---
>                      }
146,161c146
<                      int        workFactor )
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( )
---
>                      int        (BZ2_bzCompress) ( )
146,161c146
<                      int        workFactor )
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( )
---
>                      int        workFactor BZ2_bzCompress) ( )
147,161c147
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( )
---
> ) ( )
148,161c148
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( )
---
>    ( )
149,161c149
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( )
---
> )
(97.0 %, 6182 bytes)
145,160c145
<                     ( workFactor )
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( )
---
>                     ( (BZ2_bzCompress) ( )
145,160c145
<                     ( workFactor )
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( )
---
>                     ( workFactor BZ2_bzCompress) ( )
146,160c146
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( )
---
> ) ( )
147,160c147
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( )
---
>    ( )
148,160c148
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( )
---
> )
160d159
< (BZ2_bzCompress) ( )
160,163c160
< (BZ2_bzCompress) ( )
< {
<    
<    return BZ_OK;
---
> (return BZ_OK;
160,163c160
< (BZ2_bzCompress) ( )
< {
<    
<    return BZ_OK;
---
> (BZ2_bzCompressBZ_OK;
160,163c160
< (BZ2_bzCompress) ( )
< {
<    
<    return BZ_OK;
---
> (BZ2_bzCompress) ;
160,164c160
< (BZ2_bzCompress) ( )
< {
<    
<    return BZ_OK;
< }
---
> (BZ2_bzCompress) ( }
161,171d160
< {
<    
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
163,172c163
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    BZ_API(BZ2_bzDecompressInit) 
163,172c163
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    return (BZ2_bzDecompressInit) 
163,172c163
<    return BZ_OK;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    return BZ_OKBZ2_bzDecompressInit) 
164,172c164
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
> ) 
172,173c172
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> ( bz_stream* strm, 
172,173c172
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> int bz_stream* strm, 
172,173c172
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> int BZ_API* strm, 
172,173c172
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> int BZ_API(strm, 
172,173c172
< int BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> int BZ_API(BZ2_bzDecompressInit, 
173,174c173
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      int        verbosity,
173,174c173
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( verbosity,
173,174c173
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream,
173,175c173
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_stream* int        small )
173,175c173
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_stream* strmsmall )
174,175c174
<                        int        verbosity,
<                        int        small )
---
>                        )
174,176c174
<                        int        verbosity,
<                        int        small )
< {
---
>                        int        {
174,177c174
<                        int        verbosity,
<                        int        small )
< {
<    }
---
>                        int        verbosity}
175,184c175
<                        int        small )
< {
<    }
< 
< 
< 
< 
< 
< 
< \
---
>                        \
175,187c175
<                        int        small )
< {
<    }
< 
< 
< 
< 
< 
< 
< \
< 
< 
< typedef 
---
>                        int        typedef 
175,188c175
<                        int        small )
< {
<    }
< 
< 
< 
< 
< 
< 
< \
< 
< 
< typedef 
<    struct {
---
>                        int        small struct {
177,188d176
<    }
< 
< 
< 
< 
< 
< 
< \
< 
< 
< typedef 
<    struct {
177,189c177
<    }
< 
< 
< 
< 
< 
< 
< \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    FILE*     handle;
184,189c184
< \
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> *     handle;
187,189c187
< typedef 
<    struct {
<       FILE*     handle;
---
> handle;
188,189c188
<    struct {
<       FILE*     handle;
---
>    ;
188,190c188
<    struct {
<       FILE*     handle;
<       Char      ;
---
>    struct Char      ;
189,190c189
<       FILE*     handle;
<       Char      ;
---
>       ;
189,191c189
<       FILE*     handle;
<       Char      ;
<       Bool      writing;
---
>       FILEBool      writing;
189,191c189
<       FILE*     handle;
<       Char      ;
<       Bool      writing;
---
>       FILE*     writing;
190,191d189
<       Char      ;
<       Bool      writing;
190,191d189
<       Char      ;
<       Bool      writing;
(97.0 %, 6139 bytes)
190,191d189
<       bz_stream strm}
<    bzFile;
190,199c190
<       bz_stream strm}
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       BZFILE* BZ_API(BZ2_bzWriteOpen) 
190,199c190
<       bz_stream strm}
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream * BZ_API(BZ2_bzWriteOpen) 
190,199c190
<       bz_stream strm}
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>       bz_stream strmBZ_API(BZ2_bzWriteOpen) 
191,199c191
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    (BZ2_bzWriteOpen) 
191,199c191
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    bzFileBZ2_bzWriteOpen) 
199c199
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> ) 
199,200c199
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE( int*  bzerror,      
199,200c199
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* int*  bzerror,      
199,200c199
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API*  bzerror,      
199,200c199
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API(bzerror,      
199,200c199
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> BZFILE* BZ_API(BZ2_bzWriteOpen,      
200,201c200
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     FILE* f, 
200,201c200
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( * f, 
200,201c200
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( intf, 
200,201c200
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  , 
200,202c200
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  bzerrorint   blockSize100k, 
201,202c201
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       blockSize100k, 
201,202c201
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE, 
201,203c201
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* int   verbosity,
201,203c201
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* fverbosity,
202,203c202
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       ,
202,204c202
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   int   workFactor )
202,204c202
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   blockSize100kworkFactor )
203,204c203
<                       int   verbosity,
<                       int   workFactor )
---
>                       )
203,205c203
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       int   {
203,206c203
<                       int   verbosity,
<                       int   workFactor )
< {
<    Int32   bzf= bzf;   
---
>                       int   verbosityInt32   bzf= bzf;   
204,206c204
<                       int   workFactor )
< {
<    Int32   bzf= bzf;   
---
>                       bzf= bzf;   
204,206c204
<                       int   workFactor )
< {
<    Int32   bzf= bzf;   
---
>                       int   = bzf;   
204,206c204
<                       int   workFactor )
< {
<    Int32   bzf= bzf;   
---
>                       int   workFactor bzf;   
205,206c205
< {
<    Int32   bzf= bzf;   
---
> ;   
206,207c206
<    Int32   bzf= bzf;   
< }
---
>    }
206,212c206
<    Int32   bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    Int32   void BZ_API(BZ2_bzWrite)
206,212c206
<    Int32   bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    Int32   bzfBZ_API(BZ2_bzWrite)
206,212c206
<    Int32   bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    Int32   bzf= (BZ2_bzWrite)
206,212c206
<    Int32   bzf= bzf;   
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    Int32   bzf= bzfBZ2_bzWrite)
207,212c207
< }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
> )
212,213c212
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> ( int*    bzerror, 
212,213c212
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void int*    bzerror, 
212,213c212
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API*    bzerror, 
(97.0 %, 6118 bytes)
206,211c206
<    }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    )
211,212c211
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> ( int*    bzerror, 
211,212c211
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void int*    bzerror, 
211,212c211
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API*    bzerror, 
211,212c211
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API(bzerror, 
211,212c211
< void BZ_API(BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void BZ_API(BZ2_bzWrite, 
212,213c212
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              BZFILE* b, 
212,213c212
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( * b, 
212,213c212
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( intb, 
212,213c212
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    , 
212,214c212
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    bzerrorvoid*   buf, 
213,214c213
<                BZFILE* b, 
<                void*   buf, 
---
>                *   buf, 
213,214c213
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILEbuf, 
213,214c213
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* , 
213,215c213
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* bint     len )
214,215c214
<                void*   buf, 
<                int     len )
---
>                len )
214,215c214
<                void*   buf, 
<                int     len )
---
>                void)
214,216c214
<                void*   buf, 
<                int     len )
< {
---
>                void*   {
214,217c214
<                void*   buf, 
<                int     len )
< {
<    Int32   ret;
---
>                void*   bufInt32   ret;
215,217c215
<                int     len )
< {
<    Int32   ret;
---
>                ret;
215,217c215
<                int     len )
< {
<    Int32   ret;
---
>                int     ;
215,218c215
<                int     len )
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>                int     len bzFile* bzf = ((bzf->handle))
216,218c216
< {
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
> * bzf = ((bzf->handle))
217,218c217
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>    bzf = ((bzf->handle))
217,218c217
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>    Int32   = ((bzf->handle))
217,218c217
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>    Int32   ret((bzf->handle))
218c218
<    bzFile* bzf = ((bzf->handle))
---
>    (bzf->handle))
218c218
<    bzFile* bzf = ((bzf->handle))
---
>    bzFilebzf->handle))
218c218
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* ->handle))
218c218
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf handle))
218c218
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = ))
218c218
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = ()
218,219c218
<    bzFile* bzf = ((bzf->handle))
<       ;
---
>    bzFile* bzf = ((;
218,221c218
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
---
>    bzFile* bzf = ((bzflen;
218,221c218
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
---
>    bzFile* bzf = ((bzf->;
218,222c218
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
---
>    bzFile* bzf = ((bzf->handle{
218,223c218
<    bzFile* bzf = ((bzf->handle))
<       ;
< 
<    len;
<    {
<       }
---
>    bzFile* bzf = ((bzf->handle)}
219,222d218
<       ;
< 
<    len;
<    {
224d219
< }
221,228c221
<    len;
<    {
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    void BZ_API(BZ2_bzWriteClose)
221,228c221
<    len;
<    {
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    lenBZ_API(BZ2_bzWriteClose)
222,228c222
<    {
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>    (BZ2_bzWriteClose)
223,228c223
<       }
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
>       BZ2_bzWriteClose)
224,228c224
< }
< 
< 
< 
< void BZ_API(BZ2_bzWriteClose)
---
> )
228,229c228
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
228,229c228
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void int*          bzerror, 
228,229c228
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API*          bzerror, 
228,229c228
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API(bzerror, 
228,229c228
< void BZ_API(BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void BZ_API(BZ2_bzWriteClose, 
229,230c229
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   BZFILE*       b, 
229,230c229
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( *       b, 
229,230c229
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( intb, 
229,230c229
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
229,231c229
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerrorint           abandon,
230,231c230
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     abandon,
230,231c230
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE,
230,232c230
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       unsigned int* nbytes_in,
230,232c230
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     BZFILE*       bint* nbytes_in,
231,232c231
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     * nbytes_in,
231,232c231
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           nbytes_in,
232d231
<                     unsigned int* nbytes_in,
232d231
<                     unsigned int* nbytes_in,
232d231
<                     unsigned int* nbytes_in,
232d231
<                     unsigned int* nbytes_in,
232d231
<                     unsigned int* nbytes_in,
232,233c232
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_in)
233,234c233
<                     unsigned int* nbytes_out )
< {
---
>                     {
233,235c233
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned BZ2_bzWriteClose64 ( bzerror, b, abandon, 
233,235c233
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int( bzerror, b, abandon, 
233,235c233
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* bzerror, b, abandon, 
233,235c233
<                     unsigned int* nbytes_out )
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>                     unsigned int* nbytes_out , b, abandon, 
234,235c234
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
> b, abandon, 
235c235
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    , abandon, 
235c235
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    BZ2_bzWriteClose64 abandon, 
235c235
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    BZ2_bzWriteClose64 ( , 
235,236c235
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerrornbytes_in, NULL, nbytes_out, NULL );
235,236c235
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, , NULL, nbytes_out, NULL );
235,236c235
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, bNULL, nbytes_out, NULL );
235,236c235
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, b, , nbytes_out, NULL );
235,236c235
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, b, abandonnbytes_out, NULL );
236c236
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         , NULL );
236c236
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_inNULL );
236c236
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_in, );
236c236
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_in, NULL;
236,237c236
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
>                         nbytes_in, NULL, }
236,240c236
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL, nbytes_outvoid BZ_API(BZ2_bzWriteClose64)
236,240c236
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL, nbytes_out, BZ_API(BZ2_bzWriteClose64)
236,240c236
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL, nbytes_out, NULL (BZ2_bzWriteClose64)
236,240c236
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
>                         nbytes_in, NULL, nbytes_out, NULL )BZ2_bzWriteClose64)
237,240c237
< }
< 
< 
< void BZ_API(BZ2_bzWriteClose64)
---
> )
240,241c240
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> ( int*          bzerror, 
240,241c240
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void int*          bzerror, 
240,241c240
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API*          bzerror, 
240,241c240
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API(bzerror, 
240,241c240
< void BZ_API(BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void BZ_API(BZ2_bzWriteClose64, 
241,242c241
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   BZFILE*       b, 
241,242c241
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( *       b, 
241,242c241
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( intb, 
241,242c241
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
241,243c241
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerrorint           abandon,
242,243c242
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     abandon,
242,243c242
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE,
242,244c242
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       unsigned int* nbytes_in_lo32,
242,244c242
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     BZFILE*       bint* nbytes_in_lo32,
243,244c243
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     * nbytes_in_lo32,
243,244c243
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           nbytes_in_lo32,
244d243
<                     unsigned int* nbytes_in_lo32,
244d243
<                     unsigned int* nbytes_in_lo32,
244d243
<                     unsigned int* nbytes_in_lo32,
244d243
<                     unsigned int* nbytes_in_lo32,
244d243
<                     unsigned int* nbytes_in_lo32,
245d244
<                     unsigned int* nbytes_in_hi32,
245d244
<                     unsigned int* nbytes_in_hi32,
245d244
<                     unsigned int* nbytes_in_hi32,
245d244
<                     unsigned int* nbytes_in_hi32,
245d244
<                     unsigned int* nbytes_in_hi32,
246d245
<                     unsigned int* nbytes_out_lo32,
246d245
<                     unsigned int* nbytes_out_lo32,
246d245
<                     unsigned int* nbytes_out_lo32,
246d245
<                     unsigned int* nbytes_out_lo32,
246d245
<                     unsigned int* nbytes_out_lo32,
246,247c246
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_lo32)
247,248c247
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     {
247,250c247
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned bzFile* bzf ;
247,250c247
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned int* bzf ;
247,250c247
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned int* bzf ;
247,250c247
<                     unsigned int* nbytes_out_hi32 )
< {
<    
<    bzFile* bzf ;
---
>                     unsigned int* nbytes_out_hi32 ;
248,251c248
< {
<    
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) ;
---
> if (!(bzf)!= NULL) ;
250,251c250
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) ;
---
>    (!(bzf)!= NULL) ;
250,251c250
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) ;
---
>    bzFile!(bzf)!= NULL) ;
250,251c250
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) ;
---
>    bzFile* (bzf)!= NULL) ;
250,251c250
<    bzFile* bzf ;
<    if (!(bzf)!= NULL) ;
---
>    bzFile* bzf bzf)!= NULL) ;
251c251
<    if (!(bzf)!= NULL) ;
---
>    )!= NULL) ;
251c251
<    if (!(bzf)!= NULL) ;
---
>    if != NULL) ;
251c251
<    if (!(bzf)!= NULL) ;
---
>    if (NULL) ;
251c251
<    if (!(bzf)!= NULL) ;
---
>    if (!) ;
251c251
<    if (!(bzf)!= NULL) ;
---
>    if (!(;
251,252c251
<    if (!(bzf)!= NULL) ;
<    0;
---
>    if (!(bzf0;
251,252c251
<    if (!(bzf)!= NULL) ;
<    0;
---
>    if (!(bzf);
251,253c251
<    if (!(bzf)!= NULL) ;
<    0;
< }
---
>    if (!(bzf)!= }
251,257c251
<    if (!(bzf)!= NULL) ;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (!(bzf)!= NULLBZFILE* BZ_API(BZ2_bzReadOpen) 
251,257c251
<    if (!(bzf)!= NULL) ;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (!(bzf)!= NULL) * BZ_API(BZ2_bzReadOpen) 
252,257c252
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    BZ_API(BZ2_bzReadOpen) 
(97.0 %, 6109 bytes)
251,253c251
<    if (NULL) ;
<    0;
< }
---
>    if (}
251,257c251
<    if (NULL) ;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (NULLBZFILE* BZ_API(BZ2_bzReadOpen) 
251,257c251
<    if (NULL) ;
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    if (NULL) * BZ_API(BZ2_bzReadOpen) 
252,257c252
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    BZ_API(BZ2_bzReadOpen) 
252,257c252
<    0;
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    0(BZ2_bzReadOpen) 
253,257c253
< }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZ2_bzReadOpen) 
257c257
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> ) 
257,258c257
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE( int*  bzerror, 
257,258c257
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* int*  bzerror, 
257,258c257
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_API*  bzerror, 
257,258c257
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_API(bzerror, 
257,258c257
< BZFILE* BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> BZFILE* BZ_API(BZ2_bzReadOpen, 
258,259c258
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    FILE* f, 
258,259c258
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( * f, 
258,259c258
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( intf, 
258,259c258
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  , 
258,260c258
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  bzerrorint   verbosity,
259,260c259
<                      FILE* f, 
<                      int   verbosity,
---
>                      verbosity,
259,260c259
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE,
259,261c259
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE* int   small,
259,261c259
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE* fsmall,
260,261c260
<                      int   verbosity,
<                      int   small,
---
>                      ,
260,262c260
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   void* unused,
260,262c260
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   verbosity* unused,
261,262c261
<                      int   small,
<                      void* unused,
---
>                      unused,
261,262c261
<                      int   small,
<                      void* unused,
---
>                      int   ,
261,263c261
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   smallint   nUnused )
262,263c262
<                      void* unused,
<                      int   nUnused )
---
>                      nUnused )
262,263c262
<                      void* unused,
<                      int   nUnused )
---
>                      void)
262,264c262
<                      void* unused,
<                      int   nUnused )
< {
---
>                      void* {
262,265c262
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      void* unusedbzFile* bzf = (f ||
263,265c263
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      * bzf = (f ||
263,265c263
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      int   bzf = (f ||
263,265c263
<                      int   nUnused )
< {
<    bzFile* bzf = (f ||
---
>                      int   nUnused = (f ||
264,265c264
< {
<    bzFile* bzf = (f ||
---
> (f ||
265c265
<    bzFile* bzf = (f ||
---
>    f ||
265c265
<    bzFile* bzf = (f ||
---
>    bzFile||
265,266c265
<    bzFile* bzf = (f ||
<        ((BZ_MAX_UNUSED)))
---
>    bzFile* ((BZ_MAX_UNUSED)))
265,266c265
<    bzFile* bzf = (f ||
<        ((BZ_MAX_UNUSED)))
---
>    bzFile* bzf (BZ_MAX_UNUSED)))
265,266c265
<    bzFile* bzf = (f ||
<        ((BZ_MAX_UNUSED)))
---
>    bzFile* bzf = BZ_MAX_UNUSED)))
265,266c265
<    bzFile* bzf = (f ||
<        ((BZ_MAX_UNUSED)))
---
>    bzFile* bzf = ()))
265,266c265
<    bzFile* bzf = (f ||
<        ((BZ_MAX_UNUSED)))
---
>    bzFile* bzf = (f ))
266c266
<        ((BZ_MAX_UNUSED)))
---
>        )
266,267c266
<        ((BZ_MAX_UNUSED)))
<       ;   
---
>        (;   
266,268c266
<        ((BZ_MAX_UNUSED)))
<       ;   
< }
---
>        ((}
266,272c266
<        ((BZ_MAX_UNUSED)))
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( )
---
>        ((BZ_MAX_UNUSEDvoid BZ_API(BZ2_bzReadClose) ( )
266,272c266
<        ((BZ_MAX_UNUSED)))
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( )
---
>        ((BZ_MAX_UNUSED)BZ_API(BZ2_bzReadClose) ( )
266,272c266
<        ((BZ_MAX_UNUSED)))
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( )
---
>        ((BZ_MAX_UNUSED))(BZ2_bzReadClose) ( )
267,272c267
<       ;   
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( )
---
>       BZ2_bzReadClose) ( )
268,272c268
< }
< 
< 
< 
< void BZ_API(BZ2_bzReadClose) ( )
---
> ) ( )
272c272
< void BZ_API(BZ2_bzReadClose) ( )
---
> ( )
272c272
< void BZ_API(BZ2_bzReadClose) ( )
---
> void )
272,273c272
< void BZ_API(BZ2_bzReadClose) ( )
< {
---
> void BZ_API{
272,274c272
< void BZ_API(BZ2_bzReadClose) ( )
< {
<    bzFile* bzf ;
---
> void BZ_API(bzFile* bzf ;
272,274c272
< void BZ_API(BZ2_bzReadClose) ( )
< {
<    bzFile* bzf ;
---
> void BZ_API(BZ2_bzReadClose* bzf ;
272,274c272
< void BZ_API(BZ2_bzReadClose) ( )
< {
<    bzFile* bzf ;
---
> void BZ_API(BZ2_bzReadClose) bzf ;
272,274c272
< void BZ_API(BZ2_bzReadClose) ( )
< {
<    bzFile* bzf ;
---
> void BZ_API(BZ2_bzReadClose) ( ;
273,274d272
< {
<    bzFile* bzf ;
274,279c274
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    int BZ_API(BZ2_bzRead) 
274,279c274
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFileBZ_API(BZ2_bzRead) 
274,279c274
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* (BZ2_bzRead) 
274,279c274
<    bzFile* bzf ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
>    bzFile* bzf BZ2_bzRead) 
275,279c275
< }
< 
< 
< 
< int BZ_API(BZ2_bzRead) 
---
> ) 
279,280c279
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> ( int*    bzerror, 
279,280c279
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int int*    bzerror, 
279,280c279
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API*    bzerror, 
279,280c279
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API(bzerror, 
279,280c279
< int BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> int BZ_API(BZ2_bzRead, 
280,281c280
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            BZFILE* b, 
280,281c280
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( * b, 
280,281c280
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( intb, 
280,281c280
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    , 
280,282c280
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    bzerrorvoid*   buf, 
281,282c281
<              BZFILE* b, 
<              void*   buf, 
---
>              *   buf, 
281,282c281
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILEbuf, 
281,282c281
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* , 
281,283c281
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* bint     len )
282,283c282
<              void*   buf, 
<              int     len )
---
>              len )
282,283c282
<              void*   buf, 
<              int     len )
---
>              void)
282,284c282
<              void*   buf, 
<              int     len )
< {
---
>              void*   {
282,286c282
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile* bzf ;
---
>              void*   bufbzFile* bzf ;
283,286c283
<              int     len )
< {
<    
<    bzFile* bzf ;
---
>              * bzf ;
283,286c283
<              int     len )
< {
<    
<    bzFile* bzf ;
---
>              int     bzf ;
283,286c283
<              int     len )
< {
<    
<    bzFile* bzf ;
---
>              int     len ;
284,288c284
< {
<    
<    bzFile* bzf ;
< 
<    }
---
> }
286,292c286
<    bzFile* bzf ;
< 
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    void BZ_API(BZ2_bzReadGetUnused) 
286,292c286
<    bzFile* bzf ;
< 
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFileBZ_API(BZ2_bzReadGetUnused) 
286,292c286
<    bzFile* bzf ;
< 
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* (BZ2_bzReadGetUnused) 
286,292c286
<    bzFile* bzf ;
< 
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    bzFile* bzf BZ2_bzReadGetUnused) 
288,292c288
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    ) 
292,293c292
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> ( int*    bzerror, 
292,293c292
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void int*    bzerror, 
292,293c292
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API*    bzerror, 
292,293c292
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(bzerror, 
292,293c292
< void BZ_API(BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void BZ_API(BZ2_bzReadGetUnused, 
293,294c293
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      BZFILE* b, 
293,294c293
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( * b, 
293,294c293
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( intb, 
293,294c293
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
293,295c293
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerrorvoid**  unused, 
294,295c294
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        **  unused, 
294,295c294
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE*  unused, 
294,295c294
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* unused, 
295d294
<                        void**  unused, 
295d294
<                        void**  unused, 
295,296c295
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*    nUnused )
295,296c295
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*nUnused )
295,296c295
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  )
295,297c295
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        void**  unused{
296,298c296
<                        int*    nUnused )
< {
<    bzFile* next_in;
---
>                        bzFile* next_in;
296,298c296
<                        int*    nUnused )
< {
<    bzFile* next_in;
---
>                        int* next_in;
296,298c296
<                        int*    nUnused )
< {
<    bzFile* next_in;
---
>                        int*    next_in;
296,298c296
<                        int*    nUnused )
< {
<    bzFile* next_in;
---
>                        int*    nUnused ;
297,298d296
< {
<    bzFile* next_in;
298,307c298
<    bzFile* next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    int BZ_API(BZ2_bzBuffToBuffCompress) 
298,307c298
<    bzFile* next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    bzFileBZ_API(BZ2_bzBuffToBuffCompress) 
298,307c298
<    bzFile* next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    bzFile* (BZ2_bzBuffToBuffCompress) 
298,307c298
<    bzFile* next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
>    bzFile* next_inBZ2_bzBuffToBuffCompress) 
299,307c299
< }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> ) 
307,308c307
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> ( char*         dest, 
307,308c307
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int char*         dest, 
307,308c307
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API*         dest, 
307,308c307
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API(dest, 
307,308c307
< int BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> int BZ_API(BZ2_bzBuffToBuffCompress, 
308,309c308
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          unsigned int* destLen,
308,309c308
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( int* destLen,
308,309c308
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char* destLen,
308,309c308
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         destLen,
308,309c308
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         dest,
309d308
<                            unsigned int* destLen,
309,310c309
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned *         source, 
309,310c309
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned intsource, 
309,310c309
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned int* , 
309,311c309
<                            unsigned int* destLen,
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            unsigned int* destLenunsigned int  sourceLen,
310,311c310
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            int  sourceLen,
310,311c310
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            charsourceLen,
310,311c310
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         ,
310,312c310
<                            char*         source, 
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            char*         sourceint           blockSize100k, 
311,312c311
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            blockSize100k, 
311,312c311
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned , 
311,313c311
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  int           verbosity, 
311,313c311
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned int  sourceLenverbosity, 
312,313c312
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            , 
312,314c312
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           int           workFactor )
312,314c312
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           blockSize100kworkFactor )
313,314c313
<                            int           verbosity, 
<                            int           workFactor )
---
>                            )
313,315c313
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            int           {
313,316c313
<                            int           verbosity, 
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           verbositybz_stream strm;
314,316c314
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            strm;
314,316c314
<                            int           workFactor )
< {
<    bz_stream strm;
---
>                            int           ;
314,317c314
<                            int           workFactor )
< {
<    bz_stream strm;
<    int ret;
---
>                            int           workFactor int ret;
315,317c315
< {
<    bz_stream strm;
<    int ret;
---
> ret;
316,317c316
<    bz_stream strm;
<    int ret;
---
>    ;
316,319c316
<    bz_stream strm;
<    int ret;
< 
<    if (0) ;
---
>    bz_stream if (0) ;
316,319c316
<    bz_stream strm;
<    int ret;
< 
<    if (0) ;
---
>    bz_stream strm(0) ;
317,319c317
<    int ret;
< 
<    if (0) ;
---
>    0) ;
317,319c317
<    int ret;
< 
<    if (0) ;
---
>    int ) ;
318,319d317
< 
<    if (0) ;
(97.0 %, 6083 bytes)
317,318d316
< 
<    if (0) ;
318,319c318
<    if (0) ;
< }
---
>    }
318,323c318
<    if (0) ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    if int BZ_API(BZ2_bzBuffToBuffDecompress) 
(97.0 %, 6070 bytes)
316,321c316
<    ;
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    BZ2_bzBuffToBuffDecompress) 
317,321c317
< }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> ) 
321,322c321
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> ( char*         dest, 
321,322c321
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int char*         dest, 
321,322c321
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API*         dest, 
321,322c321
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API(dest, 
321,322c321
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> int BZ_API(BZ2_bzBuffToBuffDecompress, 
322,323c322
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            unsigned int* destLen,
322,323c322
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( int* destLen,
322,323c322
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char* destLen,
322,323c322
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         destLen,
322,323c322
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         dest,
323d322
<                              unsigned int* destLen,
323,324c323
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned *         source, 
323,324c323
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned intsource, 
323,324c323
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int* , 
323,325c323
<                              unsigned int* destLen,
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              unsigned int* destLenunsigned int  sourceLen,
324,325c324
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              int  sourceLen,
324,325c324
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              charsourceLen,
324,325c324
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         ,
324,326c324
<                              char*         source, 
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              char*         sourceint           small,
325,326c325
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              small,
325,326c325
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned ,
325,327c325
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int  int           verbosity )
325,327c325
<                              unsigned int  sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned int  sourceLenverbosity )
326,327c326
<                              int           small,
<                              int           verbosity )
---
>                              )
326,328c326
<                              int           small,
<                              int           verbosity )
< {
---
>                              int           {
326,329c326
<                              int           small,
<                              int           verbosity )
< {
<    ; 
---
>                              int           small; 
327,330c327
<                              int           verbosity )
< {
<    ; 
< BZ_VERSION;
---
>                              BZ_VERSION;
327,330c327
<                              int           verbosity )
< {
<    ; 
< BZ_VERSION;
---
>                              int           ;
327,331c327
<                              int           verbosity )
< {
<    ; 
< BZ_VERSION;
< }
---
>                              int           verbosity }
328,335d327
< {
<    ; 
< BZ_VERSION;
< }
< 
< 
< 
< 
329,337c329
<    ; 
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
>    BZFILE * bzopen_or_bzdopen
330,337c330
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
> * bzopen_or_bzdopen
330,337c330
< BZ_VERSION;
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
---
> BZ_VERSIONbzopen_or_bzdopen
331,338c331
< }
< 
< 
< 
< 
< static
< BZFILE * bzopen_or_bzdopen
<                ;
---
> ;
336,342d335
< static
< BZFILE * bzopen_or_bzdopen
<                ;
< 
< 
< 
< 
337,343c337
< BZFILE * bzopen_or_bzdopen
<                ;
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
> * BZ_API(BZ2_bzopen)
(97.1 %, 6015 bytes)
336c336
< BZFILE * BZ_API(BZ2_bzopen)
---
> )
336,337c336
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const mode )
---
> BZFILE ( const mode )
336,337c336
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const mode )
---
> BZFILE * const mode )
336,337c336
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const mode )
---
> BZFILE * BZ_APImode )
336,337c336
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const mode )
---
> BZFILE * BZ_API()
336,338c336
< BZFILE * BZ_API(BZ2_bzopen)
<                ( const mode )
< {
---
> BZFILE * BZ_API(BZ2_bzopen{
337,339c337
<                ( const mode )
< {
<    return 0;
---
>                return 0;
337,339c337
<                ( const mode )
< {
<    return 0;
---
>                ( 0;
337,339c337
<                ( const mode )
< {
<    return 0;
---
>                ( const ;
337,340c337
<                ( const mode )
< {
<    return 0;
< }
---
>                ( const mode }
338,343d337
< {
<    return 0;
< }
< 
< 
< 
339,344c339
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    * BZ_API(BZ2_bzdopen)
339,344c339
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    return BZ_API(BZ2_bzdopen)
339,344c339
<    return 0;
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    return 0(BZ2_bzdopen)
340,344c340
< }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZ2_bzdopen)
344c344
< BZFILE * BZ_API(BZ2_bzdopen)
---
> )
344,345c344
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int len )
---
> BZFILE ( int len )
344,345c344
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int len )
---
> BZFILE * int len )
344,345c344
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int len )
---
> BZFILE * BZ_APIlen )
344,345c344
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int len )
---
> BZFILE * BZ_API()
344,346c344
< BZFILE * BZ_API(BZ2_bzdopen)
<                ( int len )
< {
---
> BZFILE * BZ_API(BZ2_bzdopen{
345,347c345
<                ( int len )
< {
<    int bzerr, nread;
---
>                int bzerr, nread;
345,347c345
<                ( int len )
< {
<    int bzerr, nread;
---
>                ( bzerr, nread;
345,347c345
<                ( int len )
< {
<    int bzerr, nread;
---
>                ( int , nread;
345,347c345
<                ( int len )
< {
<    int bzerr, nread;
---
>                ( int len nread;
346,347c346
< {
<    int bzerr, nread;
---
> ;
347d346
<    int bzerr, nread;
347,348c347
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int (bzerr == BZ_STREAM_END) {
347,348c347
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerrbzerr == BZ_STREAM_END) {
347,348c347
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr, == BZ_STREAM_END) {
347,348c347
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr, nreadBZ_STREAM_END) {
348c348
<    if (bzerr == BZ_STREAM_END) {
---
>    ) {
348c348
<    if (bzerr == BZ_STREAM_END) {
---
>    if {
348,349c348
<    if (bzerr == BZ_STREAM_END) {
<       -1;
---
>    if (-1;
348,349c348
<    if (bzerr == BZ_STREAM_END) {
<       -1;
---
>    if (bzerr 1;
348,349c348
<    if (bzerr == BZ_STREAM_END) {
<       -1;
---
>    if (bzerr == ;
348,350c348
<    if (bzerr == BZ_STREAM_END) {
<       -1;
<    }
---
>    if (bzerr == BZ_STREAM_END}
348,351c348
<    if (bzerr == BZ_STREAM_END) {
<       -1;
<    }
< }
---
>    if (bzerr == BZ_STREAM_END) }
349,355c349
<       -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
>       int BZ_API(BZ2_bzwrite) (BZFILE* b)
349,355c349
<       -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
>       -BZ_API(BZ2_bzwrite) (BZFILE* b)
349,355c349
<       -1;
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
>       -1(BZ2_bzwrite) (BZFILE* b)
350,355c350
<    }
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
>    BZ2_bzwrite) (BZFILE* b)
351,355c351
< }
< 
< 
< 
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> ) (BZFILE* b)
355c355
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> (BZFILE* b)
355c355
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> int BZFILE* b)
355c355
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> int BZ_API* b)
355c355
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> int BZ_API(b)
355c355
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> int BZ_API(BZ2_bzwrite)
355,356c355
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
< {
---
> int BZ_API(BZ2_bzwrite) {
355,357c355
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
< {
<    int ;
---
> int BZ_API(BZ2_bzwrite) (int ;
355,357c355
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
< {
<    int ;
---
> int BZ_API(BZ2_bzwrite) (BZFILE;
355,358c355
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
< {
<    int ;
<    FILE handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* FILE handle;
355,358c355
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
< {
<    int ;
<    FILE handle;
---
> int BZ_API(BZ2_bzwrite) (BZFILE* bhandle;
356,358c356
< {
<    int ;
<    FILE handle;
---
> ;
357,359d356
<    int ;
<    FILE handle;
<    
358,361d357
<    FILE handle;
<    
<    {
<       ;
358,362c358
<    FILE handle;
<    
<    {
<       ;
<       ;
---
>    ;
358,363c358
<    FILE handle;
<    
<    {
<       ;
<       ;
<    }
---
>    FILE }
358,364c358
<    FILE handle;
<    
<    {
<       ;
<       ;
<    }
< }
---
>    FILE handle}
360,369c360
<    {
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    static char *bzerrorstrings[] = {
361,369c361
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       char *bzerrorstrings[] = {
362,369c362
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       *bzerrorstrings[] = {
363,369c363
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    bzerrorstrings[] = {
(97.1 %, 5986 bytes)
357,366c357
<    {
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    static char *bzerrorstrings[] = {
358,366c358
<       ;
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       char *bzerrorstrings[] = {
359,366c359
<       ;
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>       *bzerrorstrings[] = {
360,366c360
<    }
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
>    bzerrorstrings[] = {
361,366c361
< }
< 
< 
< 
< 
< static char *bzerrorstrings[] = {
---
> [] = {
366c366
< static char *bzerrorstrings[] = {
---
> ] = {
366c366
< static char *bzerrorstrings[] = {
---
> static = {
366c366
< static char *bzerrorstrings[] = {
---
> static char {
366,367c366
< static char *bzerrorstrings[] = {
<        "OK"
---
> static char *"OK"
366,368c366
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
---
> static char *bzerrorstrings,"???"   
366,368c366
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
---
> static char *bzerrorstrings["???"   
366,369c366
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
---
> static char *bzerrorstrings[] ,"???"   
366,369c366
< static char *bzerrorstrings[] = {
<        "OK"
<       ,"???"   
<       ,"???"   
---
> static char *bzerrorstrings[] = "???"   
367,370c367
<        "OK"
<       ,"???"   
<       ,"???"   
< };
---
>        };
368,370c368
<       ,"???"   
<       ,"???"   
< };
---
>       ;
368,373c368
<       ,"???"   
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
>       ,const char * BZ_API(BZ2_bzerror) ()
369,373c369
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
>       char * BZ_API(BZ2_bzerror) ()
369,373c369
<       ,"???"   
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
>       ,* BZ_API(BZ2_bzerror) ()
370,373c370
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
> BZ_API(BZ2_bzerror) ()
370,373c370
< };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
> }(BZ2_bzerror) ()
373c373
< const char * BZ_API(BZ2_bzerror) ()
---
> BZ2_bzerror) ()
373c373
< const char * BZ_API(BZ2_bzerror) ()
---
> const ) ()
(97.1 %, 5949 bytes)
367,370c367
<        };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
>        BZ_API(BZ2_bzerror) ()
367,370c367
<        };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
>        }(BZ2_bzerror) ()
370c370
< const char * BZ_API(BZ2_bzerror) ()
---
> BZ2_bzerror) ()
370c370
< const char * BZ_API(BZ2_bzerror) ()
---
> const ) ()
370c370
< const char * BZ_API(BZ2_bzerror) ()
---
> const char ()
370c370
< const char * BZ_API(BZ2_bzerror) ()
---
> const char * )
370,371c370
< const char * BZ_API(BZ2_bzerror) ()
< {
---
> const char * BZ_API{
370,372c370
< const char * BZ_API(BZ2_bzerror) ()
< {
<    ;
---
> const char * BZ_API(;
370,373c370
< const char * BZ_API(BZ2_bzerror) ()
< {
<    ;
< }
---
> const char * BZ_API(BZ2_bzerror}
370,401c370
< const char * BZ_API(BZ2_bzerror) ()
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> const char * BZ_API(BZ2_bzerror) 
\ No newline at end of file
370,401c370
< const char * BZ_API(BZ2_bzerror) ()
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
> const char * BZ_API(BZ2_bzerror) (
\ No newline at end of file
371,401d370
< {
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
372,401c372
<    ;
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    
\ No newline at end of file
373,401d372
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
===< pass_clex :: rm-toks-1 >===
9c9
< #2
---
> 2
9,11c9
< #2
< 
< #define BZ_OK                3
---
> ##define BZ_OK                3
11c11
< #define BZ_OK                3
---
> define BZ_OK                3
11c11
< #define BZ_OK                3
---
> #BZ_OK                3
11c11
< #define BZ_OK                3
---
> #define 3
11,12c11
< #define BZ_OK                3
< #define BZ_STREAM_END        (-9)
---
> #define BZ_OK                #define BZ_STREAM_END        (-9)
12c12
< #define BZ_STREAM_END        (-9)
---
> define BZ_STREAM_END        (-9)
12c12
< #define BZ_STREAM_END        (-9)
---
> #BZ_STREAM_END        (-9)
12c12
< #define BZ_STREAM_END        (-9)
---
> #define (-9)
12c12
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        -9)
12c12
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        (9)
12c12
< #define BZ_STREAM_END        (-9)
---
> #define BZ_STREAM_END        (-)
12,14c12
< #define BZ_STREAM_END        (-9)
< 
< typedef 
---
> #define BZ_STREAM_END        (-9typedef 
14,15c14
< typedef 
<    struct {
---
> struct {
15c15
<    struct {
---
>    {
15,16c15
<    struct {
<       void (*bzalloc)(void )} 
---
>    struct void (*bzalloc)(void )} 
16c16
<       void (*bzalloc)(void )} 
---
>       (*bzalloc)(void )} 
16c16
<       void (*bzalloc)(void )} 
---
>       void *bzalloc)(void )} 
16c16
<       void (*bzalloc)(void )} 
---
>       void (bzalloc)(void )} 
(97.1 %, 5948 bytes)
12c12
< #define BZ_STREAM_END        (9)
---
> #define BZ_STREAM_END        ()
12,14c12
< #define BZ_STREAM_END        (9)
< 
< typedef 
---
> #define BZ_STREAM_END        (9typedef 
14,15c14
< typedef 
<    struct {
---
> struct {
15c15
<    struct {
---
>    {
15,16c15
<    struct {
<       void (*bzalloc)(void )} 
---
>    struct void (*bzalloc)(void )} 
16c16
<       void (*bzalloc)(void )} 
---
>       (*bzalloc)(void )} 
16c16
<       void (*bzalloc)(void )} 
---
>       void *bzalloc)(void )} 
16c16
<       void (*bzalloc)(void )} 
---
>       void (bzalloc)(void )} 
16c16
<       void (*bzalloc)(void )} 
---
>       void (*)(void )} 
16c16
<       void (*bzalloc)(void )} 
---
>       void (*bzalloc(void )} 
16c16
<       void (*bzalloc)(void )} 
---
>       void (*bzalloc)void )} 
16c16
<       void (*bzalloc)(void )} 
---
>       void (*bzalloc)()} 
16c16
<       void (*bzalloc)(void )} 
---
>       void (*bzalloc)(void } 
16,17c16
<       void (*bzalloc)(void )} 
<    bz_stream;
---
>       void (*bzalloc)(void )bz_stream;
17c17
<    bz_stream;
---
>    ;
17,21c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_stream#include <stdio.h>
21c21
< #include <stdio.h>
---
> include <stdio.h>
21c21
< #include <stdio.h>
---
> #<stdio.h>
21c21
< #include <stdio.h>
---
> #include stdio.h>
21c21
< #include <stdio.h>
---
> #include <.h>
21c21
< #include <stdio.h>
---
> #include <stdioh>
(97.1 %, 5943 bytes)
16c16
<       void (*bzalloc)()} 
---
>       void (*bzalloc)(} 
16,17c16
<       void (*bzalloc)()} 
<    bz_stream;
---
>       void (*bzalloc)()bz_stream;
17c17
<    bz_stream;
---
>    ;
17,21c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_stream#include <stdio.h>
21c21
< #include <stdio.h>
---
> include <stdio.h>
21c21
< #include <stdio.h>
---
> #<stdio.h>
21c21
< #include <stdio.h>
---
> #include stdio.h>
21c21
< #include <stdio.h>
---
> #include <.h>
21c21
< #include <stdio.h>
---
> #include <stdioh>
21c21
< #include <stdio.h>
---
> #include <stdio.>
21,23c21
< #include <stdio.h>
< 
< #   define BZ_API(func) func
---
> #include <stdio.h#   define BZ_API(func) func
23c23
< #   define BZ_API(func) func
---
> define BZ_API(func) func
23c23
< #   define BZ_API(func) func
---
> #   BZ_API(func) func
23c23
< #   define BZ_API(func) func
---
> #   define (func) func
23c23
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc) func
23c23
< #   define BZ_API(func) func
---
> #   define BZ_API() func
23c23
< #   define BZ_API(func) func
---
> #   define BZ_API(funcfunc
23,24c23
< #   define BZ_API(func) func
< #   define BZ_EXTERN extern
---
> #   define BZ_API(func) #   define BZ_EXTERN extern
24c24
< #   define BZ_EXTERN extern
---
> define BZ_EXTERN extern
24c24
< #   define BZ_EXTERN extern
---
> #   BZ_EXTERN extern
24c24
< #   define BZ_EXTERN extern
---
> #   define extern
24,29c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< (BZ2_bzDecompressInit) ( 
---
> #   define BZ_EXTERN (BZ2_bzDecompressInit) ( 
29c29
< (BZ2_bzDecompressInit) ( 
---
> BZ2_bzDecompressInit) ( 
29c29
< (BZ2_bzDecompressInit) ( 
---
> () ( 
29c29
< (BZ2_bzDecompressInit) ( 
---
> (BZ2_bzDecompressInit( 
29,30c29
< (BZ2_bzDecompressInit) ( 
<       bz_stream *strm, 
---
> (BZ2_bzDecompressInit) bz_stream *strm, 
30c30
<       bz_stream *strm, 
---
>       *strm, 
30c30
<       bz_stream *strm, 
---
>       bz_stream strm, 
30c30
<       bz_stream *strm, 
---
>       bz_stream *, 
30,31c30
<       bz_stream *strm, 
<       int       verbosity, 
---
>       bz_stream *strmint       verbosity, 
31c31
<       int       verbosity, 
---
>       verbosity, 
31c31
<       int       verbosity, 
---
>       int       , 
(97.1 %, 5939 bytes)
30,31c30
<       bz_stream *, 
<       int       verbosity, 
---
>       bz_stream *int       verbosity, 
31c31
<       int       verbosity, 
---
>       verbosity, 
31c31
<       int       verbosity, 
---
>       int       , 
31,32c31
<       int       verbosity, 
<       int       );
---
>       int       verbosityint       );
32c32
<       int       );
---
>       );
32c32
<       int       );
---
>       int       ;
32,38c32
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       int       )#define BZ_MAX_UNUSED 5000
38c38
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
38c38
< #define BZ_MAX_UNUSED 5000
---
> #BZ_MAX_UNUSED 5000
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define 5000
38,40c38
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #define BZ_MAX_UNUSED typedef void BZFILE;
(97.1 %, 5930 bytes)
31,32c31
<       int       , 
<       int       );
---
>       int       int       );
32c32
<       int       );
---
>       );
32c32
<       int       );
---
>       int       ;
32,38c32
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       int       )#define BZ_MAX_UNUSED 5000
38c38
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
38c38
< #define BZ_MAX_UNUSED 5000
---
> #BZ_MAX_UNUSED 5000
38c38
< #define BZ_MAX_UNUSED 5000
---
> #define 5000
38,40c38
< #define BZ_MAX_UNUSED 5000
< 
< typedef void BZFILE;
---
> #define BZ_MAX_UNUSED typedef void BZFILE;
40c40
< typedef void BZFILE;
---
> void BZFILE;
40c40
< typedef void BZFILE;
---
> typedef BZFILE;
40c40
< typedef void BZFILE;
---
> typedef void ;
40,42c40
< typedef void BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef void BZFILEBZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzReadOpen) ( 
(97.1 %, 5925 bytes)
40c40
< typedef BZFILE;
---
> typedef ;
40,42c40
< typedef BZFILE;
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> typedef BZFILEBZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzReadOpen) ( 
42c42
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzReadOpen) ( 
(97.1 %, 5915 bytes)
42c42
< BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API(BZ2_bzReadOpen) ( 
42c42
< BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZFILEBZ_API(BZ2_bzReadOpen) ( 
42c42
< BZFILE* BZ_API(BZ2_bzReadOpen) ( 
---
> BZFILE* (BZ2_bzReadOpen) ( 
(97.1 %, 5909 bytes)
42c42
< * BZ_API(BZ2_bzReadOpen) ( 
---
> BZ_API(BZ2_bzReadOpen) ( 
42c42
< * BZ_API(BZ2_bzReadOpen) ( 
---
> * (BZ2_bzReadOpen) ( 
42c42
< * BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_APIBZ2_bzReadOpen) ( 
42c42
< * BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API() ( 
42c42
< * BZ_API(BZ2_bzReadOpen) ( 
---
> * BZ_API(BZ2_bzReadOpen( 
42,43c42
< * BZ_API(BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> * BZ_API(BZ2_bzReadOpen) int*  bzerror,   
43c43
<       int*  bzerror,   
---
>       *  bzerror,   
43c43
<       int*  bzerror,   
---
>       intbzerror,   
43c43
<       int*  bzerror,   
---
>       int*  ,   
(97.1 %, 5903 bytes)
42c42
< * (BZ2_bzReadOpen) ( 
---
> * BZ2_bzReadOpen) ( 
42c42
< * (BZ2_bzReadOpen) ( 
---
> * () ( 
42c42
< * (BZ2_bzReadOpen) ( 
---
> * (BZ2_bzReadOpen( 
42,43c42
< * (BZ2_bzReadOpen) ( 
<       int*  bzerror,   
---
> * (BZ2_bzReadOpen) int*  bzerror,   
43c43
<       int*  bzerror,   
---
>       *  bzerror,   
43c43
<       int*  bzerror,   
---
>       intbzerror,   
43c43
<       int*  bzerror,   
---
>       int*  ,   
43,44c43
<       int*  bzerror,   
<       FILE* f, 
---
>       int*  bzerrorFILE* f, 
44c44
<       FILE* f, 
---
>       * f, 
44c44
<       FILE* f, 
---
>       FILEf, 
44c44
<       FILE* f, 
---
>       FILE* , 
(97.1 %, 5896 bytes)
43,44c43
<       int*  ,   
<       FILE* f, 
---
>       int*  FILE* f, 
44c44
<       FILE* f, 
---
>       * f, 
44c44
<       FILE* f, 
---
>       FILEf, 
44c44
<       FILE* f, 
---
>       FILE* , 
44,45c44
<       FILE* f, 
<       int   verbosity, 
---
>       FILE* fint   verbosity, 
45c45
<       int   verbosity, 
---
>       verbosity, 
45c45
<       int   verbosity, 
---
>       int   , 
(97.1 %, 5895 bytes)
44,45c44
<       FILE* , 
<       int   verbosity, 
---
>       FILE* int   verbosity, 
45c45
<       int   verbosity, 
---
>       verbosity, 
45c45
<       int   verbosity, 
---
>       int   , 
45,46c45
<       int   verbosity, 
<       int   small,
---
>       int   verbosityint   small,
46c46
<       int   small,
---
>       small,
46c46
<       int   small,
---
>       int   ,
(97.1 %, 5886 bytes)
45,46c45
<       int   , 
<       int   small,
---
>       int   int   small,
46c46
<       int   small,
---
>       small,
46c46
<       int   small,
---
>       int   ,
46,47c46
<       int   small,
<       void* unused,    
---
>       int   smallvoid* unused,    
47c47
<       void* unused,    
---
>       * unused,    
47c47
<       void* unused,    
---
>       voidunused,    
47c47
<       void* unused,    
---
>       void* ,    
(97.1 %, 5881 bytes)
46,47c46
<       int   ,
<       void* unused,    
---
>       int   void* unused,    
47c47
<       void* unused,    
---
>       * unused,    
47c47
<       void* unused,    
---
>       voidunused,    
47c47
<       void* unused,    
---
>       void* ,    
47,48c47
<       void* unused,    
<       int   nUnused 
---
>       void* unusedint   nUnused 
48c48
<       int   nUnused 
---
>       nUnused 
48,49c48
<       int   nUnused 
<    );
---
>       int   );
(97.1 %, 5875 bytes)
47,48c47
<       void* ,    
<       int   nUnused 
---
>       void* int   nUnused 
48c48
<       int   nUnused 
---
>       nUnused 
48,49c48
<       int   nUnused 
<    );
---
>       int   );
49c49
<    );
---
>    ;
49,51c49
<    );
< 
< BZ_EXTERN void ;
---
>    )BZ_EXTERN void ;
51c51
< BZ_EXTERN void ;
---
> void ;
(97.1 %, 5863 bytes)
48c48
<       int   );
---
>       int   ;
48,50c48
<       int   );
< 
< BZ_EXTERN void ;
---
>       int   )BZ_EXTERN void ;
50c50
< BZ_EXTERN void ;
---
> void ;
50c50
< BZ_EXTERN void ;
---
> BZ_EXTERN ;
50,52c50
< BZ_EXTERN void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
(97.1 %, 5853 bytes)
50c50
< void ;
---
> ;
50,52c50
< void ;
< 
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
52c52
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API(BZ2_bzReadGetUnused) ( 
(97.1 %, 5848 bytes)
50,51d49
< ;
< 
52c52
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API(BZ2_bzReadGetUnused) ( 
52c52
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzReadGetUnused) ( 
(97.1 %, 5845 bytes)
50c50
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API(BZ2_bzReadGetUnused) ( 
50c50
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzReadGetUnused) ( 
50c50
< BZ_EXTERN void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_EXTERN void (BZ2_bzReadGetUnused) ( 
(97.2 %, 5835 bytes)
50c50
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> BZ_API(BZ2_bzReadGetUnused) ( 
50c50
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void (BZ2_bzReadGetUnused) ( 
50c50
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_APIBZ2_bzReadGetUnused) ( 
50c50
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API() ( 
50c50
< void BZ_API(BZ2_bzReadGetUnused) ( 
---
> void BZ_API(BZ2_bzReadGetUnused( 
50,51c50
< void BZ_API(BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> void BZ_API(BZ2_bzReadGetUnused) int*    bzerror, 
51c51
<       int*    bzerror, 
---
>       *    bzerror, 
51c51
<       int*    bzerror, 
---
>       intbzerror, 
51c51
<       int*    bzerror, 
---
>       int*    , 
(97.2 %, 5829 bytes)
50c50
< void (BZ2_bzReadGetUnused) ( 
---
> void BZ2_bzReadGetUnused) ( 
50c50
< void (BZ2_bzReadGetUnused) ( 
---
> void () ( 
50c50
< void (BZ2_bzReadGetUnused) ( 
---
> void (BZ2_bzReadGetUnused( 
50,51c50
< void (BZ2_bzReadGetUnused) ( 
<       int*    bzerror, 
---
> void (BZ2_bzReadGetUnused) int*    bzerror, 
51c51
<       int*    bzerror, 
---
>       *    bzerror, 
51c51
<       int*    bzerror, 
---
>       intbzerror, 
51c51
<       int*    bzerror, 
---
>       int*    , 
51,52c51
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerrorBZFILE* b, 
52c52
<       BZFILE* b, 
---
>       * b, 
52c52
<       BZFILE* b, 
---
>       BZFILEb, 
52c52
<       BZFILE* b, 
---
>       BZFILE* , 
(97.2 %, 5822 bytes)
51,52c51
<       int*    , 
<       BZFILE* b, 
---
>       int*    BZFILE* b, 
52c52
<       BZFILE* b, 
---
>       * b, 
52c52
<       BZFILE* b, 
---
>       BZFILEb, 
52c52
<       BZFILE* b, 
---
>       BZFILE* , 
52,53c52
<       BZFILE* b, 
<       void**  unused,  
---
>       BZFILE* bvoid**  unused,  
53c53
<       void**  unused,  
---
>       **  unused,  
53c53
<       void**  unused,  
---
>       void*  unused,  
53c53
<       void**  unused,  
---
>       void*unused,  
53c53
<       void**  unused,  
---
>       void**  ,  
(97.2 %, 5821 bytes)
52,53c52
<       BZFILE* , 
<       void**  unused,  
---
>       BZFILE* void**  unused,  
53c53
<       void**  unused,  
---
>       **  unused,  
53c53
<       void**  unused,  
---
>       void*  unused,  
53c53
<       void**  unused,  
---
>       void*unused,  
53c53
<       void**  unused,  
---
>       void**  ,  
53,54c53
<       void**  unused,  
<       int*    nUnused 
---
>       void**  unusedint*    nUnused 
54c54
<       int*    nUnused 
---
>       *    nUnused 
54c54
<       int*    nUnused 
---
>       intnUnused 
54,55c54
<       int*    nUnused 
<    );
---
>       int*    );
(97.2 %, 5815 bytes)
53,54c53
<       void**  ,  
<       int*    nUnused 
---
>       void**  int*    nUnused 
54c54
<       int*    nUnused 
---
>       *    nUnused 
54c54
<       int*    nUnused 
---
>       intnUnused 
54,55c54
<       int*    nUnused 
<    );
---
>       int*    );
55c55
<    );
---
>    ;
55,57c55
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>    )BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
57c57
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> int BZ_API(BZ2_bzRead) ( 
(97.2 %, 5803 bytes)
54c54
<       int*    );
---
>       int*    ;
54,56c54
<       int*    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
>       int*    )BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
56c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> int BZ_API(BZ2_bzRead) ( 
56c56
< BZ_EXTERN int BZ_API(BZ2_bzRead) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzRead) ( 
(97.2 %, 5793 bytes)
56c56
< int BZ_API(BZ2_bzRead) ( 
---
> BZ_API(BZ2_bzRead) ( 
56c56
< int BZ_API(BZ2_bzRead) ( 
---
> int (BZ2_bzRead) ( 
56c56
< int BZ_API(BZ2_bzRead) ( 
---
> int BZ_APIBZ2_bzRead) ( 
(97.2 %, 5789 bytes)
56c56
< BZ_API(BZ2_bzRead) ( 
---
> (BZ2_bzRead) ( 
56c56
< BZ_API(BZ2_bzRead) ( 
---
> BZ_APIBZ2_bzRead) ( 
56c56
< BZ_API(BZ2_bzRead) ( 
---
> BZ_API() ( 
56c56
< BZ_API(BZ2_bzRead) ( 
---
> BZ_API(BZ2_bzRead( 
56,57c56
< BZ_API(BZ2_bzRead) ( 
<       int*    bzerror, 
---
> BZ_API(BZ2_bzRead) int*    bzerror, 
57c57
<       int*    bzerror, 
---
>       *    bzerror, 
57c57
<       int*    bzerror, 
---
>       intbzerror, 
57c57
<       int*    bzerror, 
---
>       int*    , 
(97.2 %, 5783 bytes)
56c56
< (BZ2_bzRead) ( 
---
> BZ2_bzRead) ( 
56c56
< (BZ2_bzRead) ( 
---
> () ( 
56c56
< (BZ2_bzRead) ( 
---
> (BZ2_bzRead( 
56,57c56
< (BZ2_bzRead) ( 
<       int*    bzerror, 
---
> (BZ2_bzRead) int*    bzerror, 
57c57
<       int*    bzerror, 
---
>       *    bzerror, 
57c57
<       int*    bzerror, 
---
>       intbzerror, 
57c57
<       int*    bzerror, 
---
>       int*    , 
57,58c57
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerrorBZFILE* b, 
58c58
<       BZFILE* b, 
---
>       * b, 
58c58
<       BZFILE* b, 
---
>       BZFILEb, 
58c58
<       BZFILE* b, 
---
>       BZFILE* , 
(97.2 %, 5776 bytes)
57,58c57
<       int*    , 
<       BZFILE* b, 
---
>       int*    BZFILE* b, 
58c58
<       BZFILE* b, 
---
>       * b, 
58c58
<       BZFILE* b, 
---
>       BZFILEb, 
58c58
<       BZFILE* b, 
---
>       BZFILE* , 
58,59c58
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* bvoid*   buf, 
59c59
<       void*   buf, 
---
>       *   buf, 
59c59
<       void*   buf, 
---
>       voidbuf, 
59c59
<       void*   buf, 
---
>       void*   , 
(97.2 %, 5775 bytes)
58,59c58
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE* void*   buf, 
59c59
<       void*   buf, 
---
>       *   buf, 
59c59
<       void*   buf, 
---
>       voidbuf, 
59c59
<       void*   buf, 
---
>       void*   , 
59,60c59
<       void*   buf, 
<       int     len 
---
>       void*   bufint     len 
60c60
<       int     len 
---
>       len 
60,61c60
<       int     len 
<    );
---
>       int     );
(97.2 %, 5772 bytes)
59,60c59
<       void*   , 
<       int     len 
---
>       void*   int     len 
60c60
<       int     len 
---
>       len 
60,61c60
<       int     len 
<    );
---
>       int     );
61c61
<    );
---
>    ;
61,63c61
<    );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>    )BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
63c63
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
(97.2 %, 5764 bytes)
60c60
<       int     );
---
>       int     ;
60,62c60
<       int     );
< 
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
>       int     )BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
62c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
62c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN * BZ_API(BZ2_bzWriteOpen) ( 
62c62
< BZ_EXTERN BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_EXTERN BZFILEBZ_API(BZ2_bzWriteOpen) ( 
(97.2 %, 5754 bytes)
62c62
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> * BZ_API(BZ2_bzWriteOpen) ( 
62c62
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILEBZ_API(BZ2_bzWriteOpen) ( 
62c62
< BZFILE* BZ_API(BZ2_bzWriteOpen) ( 
---
> BZFILE* (BZ2_bzWriteOpen) ( 
(97.2 %, 5748 bytes)
62c62
< * BZ_API(BZ2_bzWriteOpen) ( 
---
> BZ_API(BZ2_bzWriteOpen) ( 
62c62
< * BZ_API(BZ2_bzWriteOpen) ( 
---
> * (BZ2_bzWriteOpen) ( 
62c62
< * BZ_API(BZ2_bzWriteOpen) ( 
---
> * BZ_APIBZ2_bzWriteOpen) ( 
62c62
< * BZ_API(BZ2_bzWriteOpen) ( 
---
> * BZ_API() ( 
62c62
< * BZ_API(BZ2_bzWriteOpen) ( 
---
> * BZ_API(BZ2_bzWriteOpen( 
62,63c62
< * BZ_API(BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> * BZ_API(BZ2_bzWriteOpen) int*  bzerror,      
63c63
<       int*  bzerror,      
---
>       *  bzerror,      
63c63
<       int*  bzerror,      
---
>       intbzerror,      
63c63
<       int*  bzerror,      
---
>       int*  ,      
(97.2 %, 5742 bytes)
62c62
< * (BZ2_bzWriteOpen) ( 
---
> * BZ2_bzWriteOpen) ( 
62c62
< * (BZ2_bzWriteOpen) ( 
---
> * () ( 
62c62
< * (BZ2_bzWriteOpen) ( 
---
> * (BZ2_bzWriteOpen( 
62,63c62
< * (BZ2_bzWriteOpen) ( 
<       int*  bzerror,      
---
> * (BZ2_bzWriteOpen) int*  bzerror,      
63c63
<       int*  bzerror,      
---
>       *  bzerror,      
63c63
<       int*  bzerror,      
---
>       intbzerror,      
63c63
<       int*  bzerror,      
---
>       int*  ,      
63,64c63
<       int*  bzerror,      
<       FILE* f, 
---
>       int*  bzerrorFILE* f, 
64c64
<       FILE* f, 
---
>       * f, 
64c64
<       FILE* f, 
---
>       FILEf, 
64c64
<       FILE* f, 
---
>       FILE* , 
(97.2 %, 5735 bytes)
63,64c63
<       int*  ,      
<       FILE* f, 
---
>       int*  FILE* f, 
64c64
<       FILE* f, 
---
>       * f, 
64c64
<       FILE* f, 
---
>       FILEf, 
64c64
<       FILE* f, 
---
>       FILE* , 
64,65c64
<       FILE* f, 
<       int   blockSize100k, 
---
>       FILE* fint   blockSize100k, 
65c65
<       int   blockSize100k, 
---
>       blockSize100k, 
65c65
<       int   blockSize100k, 
---
>       int   , 
(97.2 %, 5734 bytes)
64,65c64
<       FILE* , 
<       int   blockSize100k, 
---
>       FILE* int   blockSize100k, 
65c65
<       int   blockSize100k, 
---
>       blockSize100k, 
65c65
<       int   blockSize100k, 
---
>       int   , 
65,66c65
<       int   blockSize100k, 
<       int   verbosity, 
---
>       int   blockSize100kint   verbosity, 
66c66
<       int   verbosity, 
---
>       verbosity, 
66c66
<       int   verbosity, 
---
>       int   , 
(97.2 %, 5721 bytes)
65,66c65
<       int   , 
<       int   verbosity, 
---
>       int   int   verbosity, 
66c66
<       int   verbosity, 
---
>       verbosity, 
66c66
<       int   verbosity, 
---
>       int   , 
66,67c66
<       int   verbosity, 
<       int   workFactor 
---
>       int   verbosityint   workFactor 
67c67
<       int   workFactor 
---
>       workFactor 
67,68c67
<       int   workFactor 
<    );
---
>       int   );
(97.2 %, 5712 bytes)
66,67c66
<       int   , 
<       int   workFactor 
---
>       int   int   workFactor 
67c67
<       int   workFactor 
---
>       workFactor 
67,68c67
<       int   workFactor 
<    );
---
>       int   );
68c68
<    );
---
>    ;
68,70c68
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>    )BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
70c70
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> void BZ_API(BZ2_bzWrite) ( 
(97.2 %, 5697 bytes)
67c67
<       int   );
---
>       int   ;
67,69c67
<       int   );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
>       int   )BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
69c69
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> void BZ_API(BZ2_bzWrite) ( 
69c69
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzWrite) ( 
69c69
< BZ_EXTERN void BZ_API(BZ2_bzWrite) ( 
---
> BZ_EXTERN void (BZ2_bzWrite) ( 
(97.2 %, 5687 bytes)
69c69
< void BZ_API(BZ2_bzWrite) ( 
---
> BZ_API(BZ2_bzWrite) ( 
69c69
< void BZ_API(BZ2_bzWrite) ( 
---
> void (BZ2_bzWrite) ( 
69c69
< void BZ_API(BZ2_bzWrite) ( 
---
> void BZ_APIBZ2_bzWrite) ( 
69c69
< void BZ_API(BZ2_bzWrite) ( 
---
> void BZ_API() ( 
69c69
< void BZ_API(BZ2_bzWrite) ( 
---
> void BZ_API(BZ2_bzWrite( 
69,70c69
< void BZ_API(BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> void BZ_API(BZ2_bzWrite) int*    bzerror, 
70c70
<       int*    bzerror, 
---
>       *    bzerror, 
70c70
<       int*    bzerror, 
---
>       intbzerror, 
70c70
<       int*    bzerror, 
---
>       int*    , 
(97.2 %, 5681 bytes)
69c69
< void (BZ2_bzWrite) ( 
---
> void BZ2_bzWrite) ( 
69c69
< void (BZ2_bzWrite) ( 
---
> void () ( 
69c69
< void (BZ2_bzWrite) ( 
---
> void (BZ2_bzWrite( 
69,70c69
< void (BZ2_bzWrite) ( 
<       int*    bzerror, 
---
> void (BZ2_bzWrite) int*    bzerror, 
70c70
<       int*    bzerror, 
---
>       *    bzerror, 
70c70
<       int*    bzerror, 
---
>       intbzerror, 
70c70
<       int*    bzerror, 
---
>       int*    , 
70,71c70
<       int*    bzerror, 
<       BZFILE* b, 
---
>       int*    bzerrorBZFILE* b, 
71c71
<       BZFILE* b, 
---
>       * b, 
71c71
<       BZFILE* b, 
---
>       BZFILEb, 
71c71
<       BZFILE* b, 
---
>       BZFILE* , 
(97.2 %, 5674 bytes)
70,71c70
<       int*    , 
<       BZFILE* b, 
---
>       int*    BZFILE* b, 
71c71
<       BZFILE* b, 
---
>       * b, 
71c71
<       BZFILE* b, 
---
>       BZFILEb, 
71c71
<       BZFILE* b, 
---
>       BZFILE* , 
71,72c71
<       BZFILE* b, 
<       void*   buf, 
---
>       BZFILE* bvoid*   buf, 
72c72
<       void*   buf, 
---
>       *   buf, 
72c72
<       void*   buf, 
---
>       voidbuf, 
72c72
<       void*   buf, 
---
>       void*   , 
(97.2 %, 5673 bytes)
71,72c71
<       BZFILE* , 
<       void*   buf, 
---
>       BZFILE* void*   buf, 
72c72
<       void*   buf, 
---
>       *   buf, 
72c72
<       void*   buf, 
---
>       voidbuf, 
72c72
<       void*   buf, 
---
>       void*   , 
72,73c72
<       void*   buf, 
<       int     len 
---
>       void*   bufint     len 
73c73
<       int     len 
---
>       len 
73,74c73
<       int     len 
<    );
---
>       int     );
(97.2 %, 5670 bytes)
72,73c72
<       void*   , 
<       int     len 
---
>       void*   int     len 
73c73
<       int     len 
---
>       len 
73,74c73
<       int     len 
<    );
---
>       int     );
74c74
<    );
---
>    ;
74,76c74
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>    )BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
76c76
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> void BZ_API(BZ2_bzWriteClose) ( 
(97.2 %, 5662 bytes)
73c73
<       int     );
---
>       int     ;
73,75c73
<       int     );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
>       int     )BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
75c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> void BZ_API(BZ2_bzWriteClose) ( 
75c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzWriteClose) ( 
75c75
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose) ( 
(97.2 %, 5652 bytes)
75c75
< void BZ_API(BZ2_bzWriteClose) ( 
---
> BZ_API(BZ2_bzWriteClose) ( 
75c75
< void BZ_API(BZ2_bzWriteClose) ( 
---
> void (BZ2_bzWriteClose) ( 
75c75
< void BZ_API(BZ2_bzWriteClose) ( 
---
> void BZ_APIBZ2_bzWriteClose) ( 
75c75
< void BZ_API(BZ2_bzWriteClose) ( 
---
> void BZ_API() ( 
75c75
< void BZ_API(BZ2_bzWriteClose) ( 
---
> void BZ_API(BZ2_bzWriteClose( 
75,76c75
< void BZ_API(BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> void BZ_API(BZ2_bzWriteClose) int*          bzerror, 
76c76
<       int*          bzerror, 
---
>       *          bzerror, 
76c76
<       int*          bzerror, 
---
>       intbzerror, 
76c76
<       int*          bzerror, 
---
>       int*          , 
(97.2 %, 5646 bytes)
75c75
< void (BZ2_bzWriteClose) ( 
---
> void BZ2_bzWriteClose) ( 
75c75
< void (BZ2_bzWriteClose) ( 
---
> void () ( 
75c75
< void (BZ2_bzWriteClose) ( 
---
> void (BZ2_bzWriteClose( 
75,76c75
< void (BZ2_bzWriteClose) ( 
<       int*          bzerror, 
---
> void (BZ2_bzWriteClose) int*          bzerror, 
76c76
<       int*          bzerror, 
---
>       *          bzerror, 
76c76
<       int*          bzerror, 
---
>       intbzerror, 
76c76
<       int*          bzerror, 
---
>       int*          , 
76,77c76
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerrorBZFILE*       b, 
77c77
<       BZFILE*       b, 
---
>       *       b, 
77c77
<       BZFILE*       b, 
---
>       BZFILEb, 
77c77
<       BZFILE*       b, 
---
>       BZFILE*       , 
(97.2 %, 5639 bytes)
76,77c76
<       int*          , 
<       BZFILE*       b, 
---
>       int*          BZFILE*       b, 
77c77
<       BZFILE*       b, 
---
>       *       b, 
77c77
<       BZFILE*       b, 
---
>       BZFILEb, 
77c77
<       BZFILE*       b, 
---
>       BZFILE*       , 
77,78c77
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       bint           abandon, 
78c78
<       int           abandon, 
---
>       abandon, 
78c78
<       int           abandon, 
---
>       int           , 
(97.2 %, 5638 bytes)
77,78c77
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*       int           abandon, 
78c78
<       int           abandon, 
---
>       abandon, 
78c78
<       int           abandon, 
---
>       int           , 
78,79c78
<       int           abandon, 
<       unsigned int* nbytes_in, 
---
>       int           abandonunsigned int* nbytes_in, 
79c79
<       unsigned int* nbytes_in, 
---
>       int* nbytes_in, 
79c79
<       unsigned int* nbytes_in, 
---
>       unsigned * nbytes_in, 
(97.3 %, 5631 bytes)
78,79c78
<       int           , 
<       unsigned int* nbytes_in, 
---
>       int           unsigned int* nbytes_in, 
79c79
<       unsigned int* nbytes_in, 
---
>       int* nbytes_in, 
79c79
<       unsigned int* nbytes_in, 
---
>       unsigned * nbytes_in, 
79c79
<       unsigned int* nbytes_in, 
---
>       unsigned intnbytes_in, 
79c79
<       unsigned int* nbytes_in, 
---
>       unsigned int* , 
(97.3 %, 5628 bytes)
79c79
<       unsigned * nbytes_in, 
---
>       unsigned nbytes_in, 
79c79
<       unsigned * nbytes_in, 
---
>       unsigned * , 
79,80c79
<       unsigned * nbytes_in, 
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_inunsigned int* nbytes_out 
80c80
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
80c80
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_out 
(97.3 %, 5619 bytes)
79,80c79
<       unsigned * , 
<       unsigned int* nbytes_out 
---
>       unsigned * unsigned int* nbytes_out 
80c80
<       unsigned int* nbytes_out 
---
>       int* nbytes_out 
80c80
<       unsigned int* nbytes_out 
---
>       unsigned * nbytes_out 
80c80
<       unsigned int* nbytes_out 
---
>       unsigned intnbytes_out 
80,81c80
<       unsigned int* nbytes_out 
<    );
---
>       unsigned int* );
(97.3 %, 5616 bytes)
80c80
<       unsigned * nbytes_out 
---
>       unsigned nbytes_out 
80,81c80
<       unsigned * nbytes_out 
<    );
---
>       unsigned * );
81c81
<    );
---
>    ;
81,83c81
<    );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>    )BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
83c83
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> void BZ_API(BZ2_bzWriteClose64) ( 
(97.3 %, 5601 bytes)
80c80
<       unsigned * );
---
>       unsigned * ;
80,82c80
<       unsigned * );
< 
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
>       unsigned * )BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
82c82
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> void BZ_API(BZ2_bzWriteClose64) ( 
82c82
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzWriteClose64) ( 
82c82
< BZ_EXTERN void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_EXTERN void (BZ2_bzWriteClose64) ( 
(97.3 %, 5591 bytes)
82c82
< void BZ_API(BZ2_bzWriteClose64) ( 
---
> BZ_API(BZ2_bzWriteClose64) ( 
82c82
< void BZ_API(BZ2_bzWriteClose64) ( 
---
> void (BZ2_bzWriteClose64) ( 
82c82
< void BZ_API(BZ2_bzWriteClose64) ( 
---
> void BZ_APIBZ2_bzWriteClose64) ( 
82c82
< void BZ_API(BZ2_bzWriteClose64) ( 
---
> void BZ_API() ( 
82c82
< void BZ_API(BZ2_bzWriteClose64) ( 
---
> void BZ_API(BZ2_bzWriteClose64( 
82,83c82
< void BZ_API(BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> void BZ_API(BZ2_bzWriteClose64) int*          bzerror, 
83c83
<       int*          bzerror, 
---
>       *          bzerror, 
83c83
<       int*          bzerror, 
---
>       intbzerror, 
83c83
<       int*          bzerror, 
---
>       int*          , 
(97.3 %, 5585 bytes)
82c82
< void (BZ2_bzWriteClose64) ( 
---
> void BZ2_bzWriteClose64) ( 
82c82
< void (BZ2_bzWriteClose64) ( 
---
> void () ( 
82c82
< void (BZ2_bzWriteClose64) ( 
---
> void (BZ2_bzWriteClose64( 
82,83c82
< void (BZ2_bzWriteClose64) ( 
<       int*          bzerror, 
---
> void (BZ2_bzWriteClose64) int*          bzerror, 
83c83
<       int*          bzerror, 
---
>       *          bzerror, 
83c83
<       int*          bzerror, 
---
>       intbzerror, 
83c83
<       int*          bzerror, 
---
>       int*          , 
83,84c83
<       int*          bzerror, 
<       BZFILE*       b, 
---
>       int*          bzerrorBZFILE*       b, 
84c84
<       BZFILE*       b, 
---
>       *       b, 
84c84
<       BZFILE*       b, 
---
>       BZFILEb, 
84c84
<       BZFILE*       b, 
---
>       BZFILE*       , 
(97.3 %, 5578 bytes)
83,84c83
<       int*          , 
<       BZFILE*       b, 
---
>       int*          BZFILE*       b, 
84c84
<       BZFILE*       b, 
---
>       *       b, 
84c84
<       BZFILE*       b, 
---
>       BZFILEb, 
84c84
<       BZFILE*       b, 
---
>       BZFILE*       , 
84,85c84
<       BZFILE*       b, 
<       int           abandon, 
---
>       BZFILE*       bint           abandon, 
85c85
<       int           abandon, 
---
>       abandon, 
85c85
<       int           abandon, 
---
>       int           , 
(97.3 %, 5577 bytes)
84,85c84
<       BZFILE*       , 
<       int           abandon, 
---
>       BZFILE*       int           abandon, 
85c85
<       int           abandon, 
---
>       abandon, 
85c85
<       int           abandon, 
---
>       int           , 
85,86c85
<       int           abandon, 
<       unsigned int* nbytes_in_lo32, 
---
>       int           abandonunsigned int* nbytes_in_lo32, 
86c86
<       unsigned int* nbytes_in_lo32, 
---
>       int* nbytes_in_lo32, 
86c86
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned * nbytes_in_lo32, 
(97.3 %, 5570 bytes)
85,86c85
<       int           , 
<       unsigned int* nbytes_in_lo32, 
---
>       int           unsigned int* nbytes_in_lo32, 
86c86
<       unsigned int* nbytes_in_lo32, 
---
>       int* nbytes_in_lo32, 
86c86
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned * nbytes_in_lo32, 
86c86
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned intnbytes_in_lo32, 
86c86
<       unsigned int* nbytes_in_lo32, 
---
>       unsigned int* , 
(97.3 %, 5567 bytes)
86c86
<       unsigned * nbytes_in_lo32, 
---
>       unsigned nbytes_in_lo32, 
86c86
<       unsigned * nbytes_in_lo32, 
---
>       unsigned * , 
86,87c86
<       unsigned * nbytes_in_lo32, 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_lo32unsigned int* nbytes_in_hi32, 
87c87
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
87c87
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32, 
(97.3 %, 5553 bytes)
86,87c86
<       unsigned * , 
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * unsigned int* nbytes_in_hi32, 
87c87
<       unsigned int* nbytes_in_hi32, 
---
>       int* nbytes_in_hi32, 
87c87
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned * nbytes_in_hi32, 
87c87
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned intnbytes_in_hi32, 
87c87
<       unsigned int* nbytes_in_hi32, 
---
>       unsigned int* , 
(97.3 %, 5550 bytes)
87c87
<       unsigned * nbytes_in_hi32, 
---
>       unsigned nbytes_in_hi32, 
87c87
<       unsigned * nbytes_in_hi32, 
---
>       unsigned * , 
87,88c87
<       unsigned * nbytes_in_hi32, 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_in_hi32unsigned int* nbytes_out_lo32, 
88c88
<       unsigned int* nbytes_out_lo32, 
---
>       int* nbytes_out_lo32, 
88c88
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
(97.3 %, 5536 bytes)
87,88c87
<       unsigned * , 
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * unsigned int* nbytes_out_lo32, 
88c88
<       unsigned int* nbytes_out_lo32, 
---
>       int* nbytes_out_lo32, 
88c88
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned * nbytes_out_lo32, 
88c88
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned intnbytes_out_lo32, 
88c88
<       unsigned int* nbytes_out_lo32, 
---
>       unsigned int* , 
(97.3 %, 5533 bytes)
88c88
<       unsigned * nbytes_out_lo32, 
---
>       unsigned nbytes_out_lo32, 
88c88
<       unsigned * nbytes_out_lo32, 
---
>       unsigned * , 
88,89c88
<       unsigned * nbytes_out_lo32, 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_lo32unsigned int* nbytes_out_hi32
89c89
<       unsigned int* nbytes_out_hi32
---
>       int* nbytes_out_hi32
89c89
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
(97.3 %, 5518 bytes)
88,89c88
<       unsigned * , 
<       unsigned int* nbytes_out_hi32
---
>       unsigned * unsigned int* nbytes_out_hi32
89c89
<       unsigned int* nbytes_out_hi32
---
>       int* nbytes_out_hi32
89c89
<       unsigned int* nbytes_out_hi32
---
>       unsigned * nbytes_out_hi32
89c89
<       unsigned int* nbytes_out_hi32
---
>       unsigned intnbytes_out_hi32
89,90c89
<       unsigned int* nbytes_out_hi32
<    );
---
>       unsigned int* );
(97.3 %, 5515 bytes)
89c89
<       unsigned * nbytes_out_hi32
---
>       unsigned nbytes_out_hi32
89,90c89
<       unsigned * nbytes_out_hi32
<    );
---
>       unsigned * );
90c90
<    );
---
>    ;
90,95c90
<    );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>    )BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
95c95
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> int BZ_API(BZ2_bzBuffToBuffCompress) ( 
(97.3 %, 5496 bytes)
89c89
<       unsigned * );
---
>       unsigned * ;
89,94c89
<       unsigned * );
< 
< 
< 
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
>       unsigned * )BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
94c94
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> int BZ_API(BZ2_bzBuffToBuffCompress) ( 
94c94
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzBuffToBuffCompress) ( 
(97.3 %, 5486 bytes)
94c94
< int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_API(BZ2_bzBuffToBuffCompress) ( 
94c94
< int BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> int (BZ2_bzBuffToBuffCompress) ( 
(97.3 %, 5482 bytes)
94c94
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> (BZ2_bzBuffToBuffCompress) ( 
94c94
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_APIBZ2_bzBuffToBuffCompress) ( 
94c94
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_API() ( 
94c94
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
---
> BZ_API(BZ2_bzBuffToBuffCompress( 
94,95c94
< BZ_API(BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffCompress) char*         dest, 
95c95
<       char*         dest, 
---
>       *         dest, 
95c95
<       char*         dest, 
---
>       chardest, 
95c95
<       char*         dest, 
---
>       char*         , 
(97.3 %, 5476 bytes)
94c94
< (BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress) ( 
94c94
< (BZ2_bzBuffToBuffCompress) ( 
---
> () ( 
94c94
< (BZ2_bzBuffToBuffCompress) ( 
---
> (BZ2_bzBuffToBuffCompress( 
94,95c94
< (BZ2_bzBuffToBuffCompress) ( 
<       char*         dest, 
---
> (BZ2_bzBuffToBuffCompress) char*         dest, 
95c95
<       char*         dest, 
---
>       *         dest, 
95c95
<       char*         dest, 
---
>       chardest, 
95c95
<       char*         dest, 
---
>       char*         , 
95,96c95
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         destunsigned int* destLen,
96c96
<       unsigned int* destLen,
---
>       int* destLen,
96c96
<       unsigned int* destLen,
---
>       unsigned * destLen,
(97.3 %, 5472 bytes)
95,96c95
<       char*         , 
<       unsigned int* destLen,
---
>       char*         unsigned int* destLen,
96c96
<       unsigned int* destLen,
---
>       int* destLen,
96c96
<       unsigned int* destLen,
---
>       unsigned * destLen,
96c96
<       unsigned int* destLen,
---
>       unsigned intdestLen,
96c96
<       unsigned int* destLen,
---
>       unsigned int* ,
(97.3 %, 5469 bytes)
96c96
<       unsigned * destLen,
---
>       unsigned destLen,
96c96
<       unsigned * destLen,
---
>       unsigned * ,
96,97c96
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLenchar*         source, 
97c97
<       char*         source, 
---
>       *         source, 
97c97
<       char*         source, 
---
>       charsource, 
97c97
<       char*         source, 
---
>       char*         , 
(97.3 %, 5462 bytes)
96,97c96
<       unsigned * ,
<       char*         source, 
---
>       unsigned * char*         source, 
97c97
<       char*         source, 
---
>       *         source, 
97c97
<       char*         source, 
---
>       charsource, 
97c97
<       char*         source, 
---
>       char*         , 
97,98c97
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceunsigned int  sourceLen,
98c98
<       unsigned int  sourceLen,
---
>       int  sourceLen,
98c98
<       unsigned int  sourceLen,
---
>       unsigned sourceLen,
(97.3 %, 5456 bytes)
97,98c97
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*         unsigned int  sourceLen,
98c98
<       unsigned int  sourceLen,
---
>       int  sourceLen,
98c98
<       unsigned int  sourceLen,
---
>       unsigned sourceLen,
98c98
<       unsigned int  sourceLen,
---
>       unsigned int  ,
(97.3 %, 5451 bytes)
98c98
<       unsigned sourceLen,
---
>       unsigned ,
98,99c98
<       unsigned sourceLen,
<       int           blockSize100k, 
---
>       unsigned sourceLenint           blockSize100k, 
99c99
<       int           blockSize100k, 
---
>       blockSize100k, 
99c99
<       int           blockSize100k, 
---
>       int           , 
(97.3 %, 5442 bytes)
98,99c98
<       unsigned ,
<       int           blockSize100k, 
---
>       unsigned int           blockSize100k, 
99c99
<       int           blockSize100k, 
---
>       blockSize100k, 
99c99
<       int           blockSize100k, 
---
>       int           , 
99,100c99
<       int           blockSize100k, 
<       int           verbosity, 
---
>       int           blockSize100kint           verbosity, 
100c100
<       int           verbosity, 
---
>       verbosity, 
100c100
<       int           verbosity, 
---
>       int           , 
(97.4 %, 5429 bytes)
99,100c99
<       int           , 
<       int           verbosity, 
---
>       int           int           verbosity, 
100c100
<       int           verbosity, 
---
>       verbosity, 
100c100
<       int           verbosity, 
---
>       int           , 
100,101c100
<       int           verbosity, 
<       int           workFactor 
---
>       int           verbosityint           workFactor 
101c101
<       int           workFactor 
---
>       workFactor 
101,102c101
<       int           workFactor 
<    );
---
>       int           );
(97.4 %, 5420 bytes)
100,101c100
<       int           , 
<       int           workFactor 
---
>       int           int           workFactor 
101c101
<       int           workFactor 
---
>       workFactor 
101,102c101
<       int           workFactor 
<    );
---
>       int           );
102c102
<    );
---
>    ;
102,104c102
<    );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>    )BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
104c104
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
(97.4 %, 5405 bytes)
101c101
<       int           );
---
>       int           ;
101,103c101
<       int           );
< 
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
>       int           )BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN BZ_API(BZ2_bzBuffToBuffDecompress) ( 
103c103
< BZ_EXTERN int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_EXTERN int (BZ2_bzBuffToBuffDecompress) ( 
(97.4 %, 5395 bytes)
103c103
< int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) ( 
103c103
< int BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> int (BZ2_bzBuffToBuffDecompress) ( 
(97.4 %, 5391 bytes)
103c103
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress) ( 
103c103
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_APIBZ2_bzBuffToBuffDecompress) ( 
103c103
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API() ( 
103c103
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
---
> BZ_API(BZ2_bzBuffToBuffDecompress( 
103,104c103
< BZ_API(BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) char*         dest, 
104c104
<       char*         dest, 
---
>       *         dest, 
104c104
<       char*         dest, 
---
>       chardest, 
104c104
<       char*         dest, 
---
>       char*         , 
(97.4 %, 5385 bytes)
103c103
< (BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress) ( 
103c103
< (BZ2_bzBuffToBuffDecompress) ( 
---
> () ( 
103c103
< (BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress( 
103,104c103
< (BZ2_bzBuffToBuffDecompress) ( 
<       char*         dest, 
---
> (BZ2_bzBuffToBuffDecompress) char*         dest, 
104c104
<       char*         dest, 
---
>       *         dest, 
104c104
<       char*         dest, 
---
>       chardest, 
104c104
<       char*         dest, 
---
>       char*         , 
104,105c104
<       char*         dest, 
<       unsigned int* destLen,
---
>       char*         destunsigned int* destLen,
105c105
<       unsigned int* destLen,
---
>       int* destLen,
105c105
<       unsigned int* destLen,
---
>       unsigned * destLen,
(97.4 %, 5381 bytes)
104,105c104
<       char*         , 
<       unsigned int* destLen,
---
>       char*         unsigned int* destLen,
105c105
<       unsigned int* destLen,
---
>       int* destLen,
105c105
<       unsigned int* destLen,
---
>       unsigned * destLen,
105c105
<       unsigned int* destLen,
---
>       unsigned intdestLen,
105c105
<       unsigned int* destLen,
---
>       unsigned int* ,
(97.4 %, 5378 bytes)
105c105
<       unsigned * destLen,
---
>       unsigned destLen,
105c105
<       unsigned * destLen,
---
>       unsigned * ,
105,106c105
<       unsigned * destLen,
<       char*         source, 
---
>       unsigned * destLenchar*         source, 
106c106
<       char*         source, 
---
>       *         source, 
106c106
<       char*         source, 
---
>       charsource, 
106c106
<       char*         source, 
---
>       char*         , 
(97.4 %, 5371 bytes)
105,106c105
<       unsigned * ,
<       char*         source, 
---
>       unsigned * char*         source, 
106c106
<       char*         source, 
---
>       *         source, 
106c106
<       char*         source, 
---
>       charsource, 
106c106
<       char*         source, 
---
>       char*         , 
106,107c106
<       char*         source, 
<       unsigned int  sourceLen,
---
>       char*         sourceunsigned int  sourceLen,
107c107
<       unsigned int  sourceLen,
---
>       int  sourceLen,
107c107
<       unsigned int  sourceLen,
---
>       unsigned sourceLen,
(97.4 %, 5365 bytes)
106,107c106
<       char*         , 
<       unsigned int  sourceLen,
---
>       char*         unsigned int  sourceLen,
107c107
<       unsigned int  sourceLen,
---
>       int  sourceLen,
107c107
<       unsigned int  sourceLen,
---
>       unsigned sourceLen,
107c107
<       unsigned int  sourceLen,
---
>       unsigned int  ,
(97.4 %, 5360 bytes)
107c107
<       unsigned sourceLen,
---
>       unsigned ,
107,108c107
<       unsigned sourceLen,
<       int           small, 
---
>       unsigned sourceLenint           small, 
108c108
<       int           small, 
---
>       small, 
108c108
<       int           small, 
---
>       int           , 
(97.4 %, 5351 bytes)
107,108c107
<       unsigned ,
<       int           small, 
---
>       unsigned int           small, 
108c108
<       int           small, 
---
>       small, 
108c108
<       int           small, 
---
>       int           , 
108,109c108
<       int           small, 
<       int           );
---
>       int           smallint           );
109c109
<       int           );
---
>       );
109c109
<       int           );
---
>       int           ;
109,111c109
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API;
---
>       int           )BZ_EXTERN BZFILE * BZ_API;
111c111
< BZ_EXTERN BZFILE * BZ_API;
---
> BZFILE * BZ_API;
(97.4 %, 5346 bytes)
108,109c108
<       int           , 
<       int           );
---
>       int           int           );
109c109
<       int           );
---
>       );
109c109
<       int           );
---
>       int           ;
109,111c109
<       int           );
< 
< BZ_EXTERN BZFILE * BZ_API;
---
>       int           )BZ_EXTERN BZFILE * BZ_API;
111c111
< BZ_EXTERN BZFILE * BZ_API;
---
> BZFILE * BZ_API;
111c111
< BZ_EXTERN BZFILE * BZ_API;
---
> BZ_EXTERN * BZ_API;
(97.4 %, 5336 bytes)
111c111
< BZFILE * BZ_API;
---
> * BZ_API;
111c111
< BZFILE * BZ_API;
---
> BZFILE BZ_API;
111c111
< BZFILE * BZ_API;
---
> BZFILE * ;
(97.4 %, 5329 bytes)
111c111
< * BZ_API;
---
> BZ_API;
111c111
< * BZ_API;
---
> * ;
111,121c111
< * BZ_API;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> * BZ_API#define _BZLIB_PRIVATE_H
121c121
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
121c121
< #define _BZLIB_PRIVATE_H
---
> #_BZLIB_PRIVATE_H
121,123c121
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define #define BZ_VERSION  "1.0.2, 30-Dec-2001"
123c123
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
123c123
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #BZ_VERSION  "1.0.2, 30-Dec-2001"
123c123
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define "1.0.2, 30-Dec-2001"
(97.4 %, 5327 bytes)
111c111
< BZ_API;
---
> ;
111,121c111
< BZ_API;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< #define _BZLIB_PRIVATE_H
---
> BZ_API#define _BZLIB_PRIVATE_H
121c121
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
121c121
< #define _BZLIB_PRIVATE_H
---
> #_BZLIB_PRIVATE_H
121,123c121
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define #define BZ_VERSION  "1.0.2, 30-Dec-2001"
123c123
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
123c123
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #BZ_VERSION  "1.0.2, 30-Dec-2001"
123c123
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define "1.0.2, 30-Dec-2001"
123,125c123
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define BZ_VERSION  typedef char            Char;
(97.4 %, 5321 bytes)
111,120d110
< ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
121c121
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
121c121
< #define _BZLIB_PRIVATE_H
---
> #_BZLIB_PRIVATE_H
121,123c121
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define #define BZ_VERSION  "1.0.2, 30-Dec-2001"
123c123
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
123c123
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #BZ_VERSION  "1.0.2, 30-Dec-2001"
123c123
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define "1.0.2, 30-Dec-2001"
123,125c123
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define BZ_VERSION  typedef char            Char;
(97.4 %, 5310 bytes)
111c111
< #define _BZLIB_PRIVATE_H
---
> define _BZLIB_PRIVATE_H
111c111
< #define _BZLIB_PRIVATE_H
---
> #_BZLIB_PRIVATE_H
111,113c111
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define #define BZ_VERSION  "1.0.2, 30-Dec-2001"
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> define BZ_VERSION  "1.0.2, 30-Dec-2001"
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #BZ_VERSION  "1.0.2, 30-Dec-2001"
113c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
---
> #define "1.0.2, 30-Dec-2001"
113,115c113
< #define BZ_VERSION  "1.0.2, 30-Dec-2001"
< 
< typedef char            Char;
---
> #define BZ_VERSION  typedef char            Char;
115c115
< typedef char            Char;
---
> char            Char;
115c115
< typedef char            Char;
---
> typedef Char;
(97.4 %, 5288 bytes)
113c113
< #define BZ_VERSION  typedef char            Char;
---
> #define BZ_VERSION  char            Char;
113c113
< #define BZ_VERSION  typedef char            Char;
---
> #define BZ_VERSION  typedef Char;
(97.4 %, 5280 bytes)
113c113
< #define BZ_VERSION  char            Char;
---
> #define BZ_VERSION  Char;
113c113
< #define BZ_VERSION  char            Char;
---
> #define BZ_VERSION  char            ;
113,114c113
< #define BZ_VERSION  char            Char;
< typedef unsigned char   Bool;
---
> #define BZ_VERSION  char            Chartypedef unsigned char   Bool;
114c114
< typedef unsigned char   Bool;
---
> unsigned char   Bool;
(97.4 %, 5276 bytes)
113,114c113
< #define BZ_VERSION  char            ;
< typedef unsigned char   Bool;
---
> #define BZ_VERSION  char            typedef unsigned char   Bool;
114c114
< typedef unsigned char   Bool;
---
> unsigned char   Bool;
114c114
< typedef unsigned char   Bool;
---
> typedef char   Bool;
(97.4 %, 5268 bytes)
114c114
< unsigned char   Bool;
---
> char   Bool;
114c114
< unsigned char   Bool;
---
> unsigned Bool;
(97.4 %, 5259 bytes)
114c114
< char   Bool;
---
> Bool;
114c114
< char   Bool;
---
> char   ;
114,115c114
< char   Bool;
< typedef Int32;
---
> char   Booltypedef Int32;
(97.4 %, 5252 bytes)
114c114
< Bool;
---
> ;
114,115c114
< Bool;
< typedef Int32;
---
> Booltypedef Int32;
115c115
< typedef Int32;
---
> Int32;
115c115
< typedef Int32;
---
> typedef ;
115,116c115
< typedef Int32;
< typedef unsigned int    UInt32;
---
> typedef Int32typedef unsigned int    UInt32;
116c116
< typedef unsigned int    UInt32;
---
> unsigned int    UInt32;
(97.4 %, 5248 bytes)
114d113
< ;
115c115
< typedef Int32;
---
> Int32;
115c115
< typedef Int32;
---
> typedef ;
115,116c115
< typedef Int32;
< typedef unsigned int    UInt32;
---
> typedef Int32typedef unsigned int    UInt32;
116c116
< typedef unsigned int    UInt32;
---
> unsigned int    UInt32;
(97.4 %, 5246 bytes)
114c114
< typedef Int32;
---
> Int32;
114c114
< typedef Int32;
---
> typedef ;
114,115c114
< typedef Int32;
< typedef unsigned int    UInt32;
---
> typedef Int32typedef unsigned int    UInt32;
115c115
< typedef unsigned int    UInt32;
---
> unsigned int    UInt32;
115c115
< typedef unsigned int    UInt32;
---
> typedef int    UInt32;
(97.4 %, 5238 bytes)
115c115
< unsigned int    UInt32;
---
> int    UInt32;
115c115
< unsigned int    UInt32;
---
> unsigned UInt32;
(97.4 %, 5229 bytes)
115c115
< int    UInt32;
---
> UInt32;
115c115
< int    UInt32;
---
> int    ;
115,116c115
< int    UInt32;
< UInt16;
---
> int    UInt32UInt16;
(97.5 %, 5222 bytes)
115c115
< UInt32;
---
> ;
115,116c115
< UInt32;
< UInt16;
---
> UInt32UInt16;
(97.5 %, 5216 bytes)
115d114
< ;
116c116
< UInt16;
---
> ;
(97.5 %, 5214 bytes)
115c115
< UInt16;
---
> ;
115,117c115
< UInt16;
< 
< struct {
---
> UInt16struct {
117c117
< struct {
---
> {
117,119c117
< struct {
<       
<       }
---
> struct }
119,120c119
<       }
<    (BZ2_bzCompressInit) 
---
>       (BZ2_bzCompressInit) 
120c120
<    (BZ2_bzCompressInit) 
---
>    BZ2_bzCompressInit) 
120c120
<    (BZ2_bzCompressInit) 
---
>    () 
120,121c120
<    (BZ2_bzCompressInit) 
<                     ( workFactor )
---
>    (BZ2_bzCompressInit( workFactor )
121c121
<                     ( workFactor )
---
>                     workFactor )
(97.5 %, 5208 bytes)
115,116d114
< ;
< 
117c117
< struct {
---
> {
117,119c117
< struct {
<       
<       }
---
> struct }
119,120c119
<       }
<    (BZ2_bzCompressInit) 
---
>       (BZ2_bzCompressInit) 
120c120
<    (BZ2_bzCompressInit) 
---
>    BZ2_bzCompressInit) 
120c120
<    (BZ2_bzCompressInit) 
---
>    () 
120,121c120
<    (BZ2_bzCompressInit) 
<                     ( workFactor )
---
>    (BZ2_bzCompressInit( workFactor )
(97.5 %, 5205 bytes)
115c115
< struct {
---
> {
115,117c115
< struct {
<       
<       }
---
> struct }
117,118c117
<       }
<    (BZ2_bzCompressInit) 
---
>       (BZ2_bzCompressInit) 
118c118
<    (BZ2_bzCompressInit) 
---
>    BZ2_bzCompressInit) 
118c118
<    (BZ2_bzCompressInit) 
---
>    () 
118,119c118
<    (BZ2_bzCompressInit) 
<                     ( workFactor )
---
>    (BZ2_bzCompressInit( workFactor )
119c119
<                     ( workFactor )
---
>                     workFactor )
119c119
<                     ( workFactor )
---
>                     ( )
119,120c119
<                     ( workFactor )
< {
---
>                     ( workFactor {
120,121c120
< {
<    ;
---
> ;
121,122c121
<    ;
< }
---
>    }
(97.5 %, 5194 bytes)
119,120c119
<                     ( )
< {
---
>                     ( {
120,121c120
< {
<    ;
---
> ;
121,122c121
<    ;
< }
---
>    }
122,133d121
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
134c134
< (BZ2_bzCompress) ( )
---
> BZ2_bzCompress) ( )
134c134
< (BZ2_bzCompress) ( )
---
> () ( )
134c134
< (BZ2_bzCompress) ( )
---
> (BZ2_bzCompress( )
134c134
< (BZ2_bzCompress) ( )
---
> (BZ2_bzCompress) )
134,135c134
< (BZ2_bzCompress) ( )
< {
---
> (BZ2_bzCompress) ( {
135,137c135
< {
<    
<    return BZ_OK;
---
> return BZ_OK;
137c137
<    return BZ_OK;
---
>    BZ_OK;
(97.5 %, 5192 bytes)
121,133c121
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< (BZ2_bzCompress) ( )
---
>    (BZ2_bzCompress) ( )
133c133
< (BZ2_bzCompress) ( )
---
> BZ2_bzCompress) ( )
133c133
< (BZ2_bzCompress) ( )
---
> () ( )
133c133
< (BZ2_bzCompress) ( )
---
> (BZ2_bzCompress( )
133c133
< (BZ2_bzCompress) ( )
---
> (BZ2_bzCompress) )
133,134c133
< (BZ2_bzCompress) ( )
< {
---
> (BZ2_bzCompress) ( {
134,136c134
< {
<    
<    return BZ_OK;
---
> return BZ_OK;
136c136
<    return BZ_OK;
---
>    BZ_OK;
136c136
<    return BZ_OK;
---
>    return ;
(97.5 %, 5185 bytes)
136c136
<    BZ_OK;
---
>    ;
136,137c136
<    BZ_OK;
< }
---
>    BZ_OK}
137,144d136
< }
< 
< 
< 
< 
< 
< 
< 
145c145
< int BZ_API(BZ2_bzDecompressInit) 
---
> BZ_API(BZ2_bzDecompressInit) 
(97.5 %, 5180 bytes)
136,137c136
<    ;
< }
---
>    }
137,144d136
< }
< 
< 
< 
< 
< 
< 
< 
145c145
< int BZ_API(BZ2_bzDecompressInit) 
---
> BZ_API(BZ2_bzDecompressInit) 
(97.5 %, 5178 bytes)
136,144c136
<    }
< 
< 
< 
< 
< 
< 
< 
< int BZ_API(BZ2_bzDecompressInit) 
---
>    int BZ_API(BZ2_bzDecompressInit) 
144c144
< int BZ_API(BZ2_bzDecompressInit) 
---
> BZ_API(BZ2_bzDecompressInit) 
144c144
< int BZ_API(BZ2_bzDecompressInit) 
---
> int (BZ2_bzDecompressInit) 
144c144
< int BZ_API(BZ2_bzDecompressInit) 
---
> int BZ_APIBZ2_bzDecompressInit) 
(97.5 %, 5174 bytes)
144c144
< BZ_API(BZ2_bzDecompressInit) 
---
> (BZ2_bzDecompressInit) 
144c144
< BZ_API(BZ2_bzDecompressInit) 
---
> BZ_APIBZ2_bzDecompressInit) 
144c144
< BZ_API(BZ2_bzDecompressInit) 
---
> BZ_API() 
144,145c144
< BZ_API(BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> BZ_API(BZ2_bzDecompressInit( bz_stream* strm, 
145c145
<                      ( bz_stream* strm, 
---
>                      bz_stream* strm, 
145c145
<                      ( bz_stream* strm, 
---
>                      ( * strm, 
145c145
<                      ( bz_stream* strm, 
---
>                      ( bz_streamstrm, 
145c145
<                      ( bz_stream* strm, 
---
>                      ( bz_stream* , 
145,146c145
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strmint        verbosity,
(97.5 %, 5168 bytes)
144c144
< (BZ2_bzDecompressInit) 
---
> BZ2_bzDecompressInit) 
144c144
< (BZ2_bzDecompressInit) 
---
> () 
144,145c144
< (BZ2_bzDecompressInit) 
<                      ( bz_stream* strm, 
---
> (BZ2_bzDecompressInit( bz_stream* strm, 
145c145
<                      ( bz_stream* strm, 
---
>                      bz_stream* strm, 
145c145
<                      ( bz_stream* strm, 
---
>                      ( * strm, 
145c145
<                      ( bz_stream* strm, 
---
>                      ( bz_streamstrm, 
145c145
<                      ( bz_stream* strm, 
---
>                      ( bz_stream* , 
145,146c145
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strmint        verbosity,
146c146
<                        int        verbosity,
---
>                        verbosity,
146c146
<                        int        verbosity,
---
>                        int        ,
146,147c146
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosityint        small )
147c147
<                        int        small )
---
>                        small )
147c147
<                        int        small )
---
>                        int        )
147,148c147
<                        int        small )
< {
---
>                        int        small {
148,149c148
< {
<    }
---
> }
149,156c149
<    }
< 
< 
< 
< 
< 
< 
< \
---
>    \
156,158d155
< \
< 
< 
159,160c159
< typedef 
<    struct {
---
> struct {
160c160
<    struct {
---
>    {
160,161c160
<    struct {
<       FILE*     handle;
---
>    struct FILE*     handle;
161c161
<       FILE*     handle;
---
>       *     handle;
161c161
<       FILE*     handle;
---
>       FILEhandle;
161c161
<       FILE*     handle;
---
>       FILE*     ;
161,162c161
<       FILE*     handle;
<       bz_stream strm}
---
>       FILE*     handlebz_stream strm}
162c162
<       bz_stream strm}
---
>       strm}
(97.5 %, 5164 bytes)
156,157c156
< typedef 
<    struct {
---
> struct {
157c157
<    struct {
---
>    {
157,158c157
<    struct {
<       FILE*     handle;
---
>    struct FILE*     handle;
158c158
<       FILE*     handle;
---
>       *     handle;
158c158
<       FILE*     handle;
---
>       FILEhandle;
158c158
<       FILE*     handle;
---
>       FILE*     ;
158,159c158
<       FILE*     handle;
<       bz_stream strm}
---
>       FILE*     handlebz_stream strm}
159c159
<       bz_stream strm}
---
>       strm}
159c159
<       bz_stream strm}
---
>       bz_stream }
159,160c159
<       bz_stream strm}
<    bzFile;
---
>       bz_stream strmbzFile;
160c160
<    bzFile;
---
>    ;
160,168c160
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
>    bzFileBZFILE* BZ_API(BZ2_bzWriteOpen) 
168c168
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API(BZ2_bzWriteOpen) 
168c168
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILEBZ_API(BZ2_bzWriteOpen) 
168c168
< BZFILE* BZ_API(BZ2_bzWriteOpen) 
---
> BZFILE* (BZ2_bzWriteOpen) 
(97.5 %, 5158 bytes)
168c168
< * BZ_API(BZ2_bzWriteOpen) 
---
> BZ_API(BZ2_bzWriteOpen) 
168c168
< * BZ_API(BZ2_bzWriteOpen) 
---
> * (BZ2_bzWriteOpen) 
168c168
< * BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_APIBZ2_bzWriteOpen) 
168c168
< * BZ_API(BZ2_bzWriteOpen) 
---
> * BZ_API() 
168,169c168
< * BZ_API(BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> * BZ_API(BZ2_bzWriteOpen( int*  bzerror,      
169c169
<                     ( int*  bzerror,      
---
>                     int*  bzerror,      
169c169
<                     ( int*  bzerror,      
---
>                     ( *  bzerror,      
169c169
<                     ( int*  bzerror,      
---
>                     ( intbzerror,      
169c169
<                     ( int*  bzerror,      
---
>                     ( int*  ,      
169,170c169
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerrorFILE* f, 
(97.5 %, 5152 bytes)
168c168
< * (BZ2_bzWriteOpen) 
---
> * BZ2_bzWriteOpen) 
168c168
< * (BZ2_bzWriteOpen) 
---
> * () 
168,169c168
< * (BZ2_bzWriteOpen) 
<                     ( int*  bzerror,      
---
> * (BZ2_bzWriteOpen( int*  bzerror,      
169c169
<                     ( int*  bzerror,      
---
>                     int*  bzerror,      
169c169
<                     ( int*  bzerror,      
---
>                     ( *  bzerror,      
169c169
<                     ( int*  bzerror,      
---
>                     ( intbzerror,      
169c169
<                     ( int*  bzerror,      
---
>                     ( int*  ,      
169,170c169
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerrorFILE* f, 
170c170
<                       FILE* f, 
---
>                       * f, 
170c170
<                       FILE* f, 
---
>                       FILEf, 
170c170
<                       FILE* f, 
---
>                       FILE* , 
170,171c170
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* fint   blockSize100k, 
171c171
<                       int   blockSize100k, 
---
>                       blockSize100k, 
171c171
<                       int   blockSize100k, 
---
>                       int   , 
171,172c171
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100kint   verbosity,
172c172
<                       int   verbosity,
---
>                       verbosity,
172c172
<                       int   verbosity,
---
>                       int   ,
172,173c172
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosityint   workFactor )
173c173
<                       int   workFactor )
---
>                       workFactor )
173c173
<                       int   workFactor )
---
>                       int   )
173,174c173
<                       int   workFactor )
< {
---
>                       int   workFactor {
174,175c174
< {
<    }
---
> }
175,180c175
<    }
< 
< 
< 
< 
< void BZ_API(BZ2_bzWrite)
---
>    void BZ_API(BZ2_bzWrite)
180c180
< void BZ_API(BZ2_bzWrite)
---
> BZ_API(BZ2_bzWrite)
180c180
< void BZ_API(BZ2_bzWrite)
---
> void (BZ2_bzWrite)
180c180
< void BZ_API(BZ2_bzWrite)
---
> void BZ_APIBZ2_bzWrite)
(97.5 %, 5146 bytes)
180c180
< void (BZ2_bzWrite)
---
> void BZ2_bzWrite)
180c180
< void (BZ2_bzWrite)
---
> void ()
180,181c180
< void (BZ2_bzWrite)
<              ( int*    bzerror, 
---
> void (BZ2_bzWrite( int*    bzerror, 
181c181
<              ( int*    bzerror, 
---
>              int*    bzerror, 
181c181
<              ( int*    bzerror, 
---
>              ( *    bzerror, 
181c181
<              ( int*    bzerror, 
---
>              ( intbzerror, 
181c181
<              ( int*    bzerror, 
---
>              ( int*    , 
181,182c181
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerrorBZFILE* b, 
182c182
<                BZFILE* b, 
---
>                * b, 
182c182
<                BZFILE* b, 
---
>                BZFILEb, 
182c182
<                BZFILE* b, 
---
>                BZFILE* , 
182,183c182
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE* bvoid*   buf, 
183c183
<                void*   buf, 
---
>                *   buf, 
183c183
<                void*   buf, 
---
>                voidbuf, 
183c183
<                void*   buf, 
---
>                void*   , 
183,184c183
<                void*   buf, 
<                int     len )
---
>                void*   bufint     len )
184c184
<                int     len )
---
>                len )
184c184
<                int     len )
---
>                int     )
184,185c184
<                int     len )
< {
---
>                int     len {
185,186c185
< {
<    Int32   ret;
---
> Int32   ret;
186c186
<    Int32   ret;
---
>    ret;
186c186
<    Int32   ret;
---
>    Int32   ;
186,187c186
<    Int32   ret;
<    bzFile* bzf = ((bzf->handle))
---
>    Int32   retbzFile* bzf = ((bzf->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    * bzf = ((bzf->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFilebzf = ((bzf->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* = ((bzf->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf ((bzf->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = (bzf->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = (bzf->handle))
(97.5 %, 5143 bytes)
186,187c186
<    Int32   ;
<    bzFile* bzf = ((bzf->handle))
---
>    Int32   bzFile* bzf = ((bzf->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    * bzf = ((bzf->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFilebzf = ((bzf->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* = ((bzf->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf ((bzf->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = (bzf->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = (bzf->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = ((->handle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = ((bzfhandle))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = ((bzf->))
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = ((bzf->handle)
187,188c187
<    bzFile* bzf = ((bzf->handle))
<       ;
---
>    bzFile* bzf = ((bzf->handle);
188,190c188
<       ;
< 
<    len;
---
>       len;
190c190
<    len;
---
>    ;
190,191c190
<    len;
<    {
---
>    len{
191,192c191
<    {
<       }
---
>    }
193d192
< }
193,196d192
< }
< 
< 
< 
197c197
< void BZ_API(BZ2_bzWriteClose)
---
> BZ_API(BZ2_bzWriteClose)
(97.5 %, 5140 bytes)
190d189
<    ;
191,192c191
<    {
<       }
---
>    }
193d192
< }
193,196d192
< }
< 
< 
< 
197c197
< void BZ_API(BZ2_bzWriteClose)
---
> BZ_API(BZ2_bzWriteClose)
(97.5 %, 5135 bytes)
190,191c190
<    {
<       }
---
>    }
192d191
< }
192,195d191
< }
< 
< 
< 
196c196
< void BZ_API(BZ2_bzWriteClose)
---
> BZ_API(BZ2_bzWriteClose)
196c196
< void BZ_API(BZ2_bzWriteClose)
---
> void (BZ2_bzWriteClose)
196c196
< void BZ_API(BZ2_bzWriteClose)
---
> void BZ_APIBZ2_bzWriteClose)
(97.5 %, 5129 bytes)
196c196
< void (BZ2_bzWriteClose)
---
> void BZ2_bzWriteClose)
196c196
< void (BZ2_bzWriteClose)
---
> void ()
196,197c196
< void (BZ2_bzWriteClose)
<                   ( int*          bzerror, 
---
> void (BZ2_bzWriteClose( int*          bzerror, 
197c197
<                   ( int*          bzerror, 
---
>                   int*          bzerror, 
197c197
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
197c197
<                   ( int*          bzerror, 
---
>                   ( intbzerror, 
197c197
<                   ( int*          bzerror, 
---
>                   ( int*          , 
197,198c197
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerrorBZFILE*       b, 
198c198
<                     BZFILE*       b, 
---
>                     *       b, 
198c198
<                     BZFILE*       b, 
---
>                     BZFILEb, 
198c198
<                     BZFILE*       b, 
---
>                     BZFILE*       , 
198,199c198
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       bint           abandon,
199c199
<                     int           abandon,
---
>                     abandon,
199c199
<                     int           abandon,
---
>                     int           ,
199,200c199
<                     int           abandon,
<                     unsigned int* nbytes_in,
---
>                     int           abandonunsigned int* nbytes_in,
200c200
<                     unsigned int* nbytes_in,
---
>                     int* nbytes_in,
200c200
<                     unsigned int* nbytes_in,
---
>                     unsigned * nbytes_in,
200c200
<                     unsigned int* nbytes_in,
---
>                     unsigned intnbytes_in,
200c200
<                     unsigned int* nbytes_in,
---
>                     unsigned int* ,
200,201c200
<                     unsigned int* nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned int* nbytes_inunsigned int* nbytes_out )
201c201
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
201c201
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out )
(97.5 %, 5126 bytes)
200c200
<                     unsigned * nbytes_in,
---
>                     unsigned nbytes_in,
200c200
<                     unsigned * nbytes_in,
---
>                     unsigned * ,
200,201c200
<                     unsigned * nbytes_in,
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_inunsigned int* nbytes_out )
201c201
<                     unsigned int* nbytes_out )
---
>                     int* nbytes_out )
201c201
<                     unsigned int* nbytes_out )
---
>                     unsigned * nbytes_out )
201c201
<                     unsigned int* nbytes_out )
---
>                     unsigned intnbytes_out )
201c201
<                     unsigned int* nbytes_out )
---
>                     unsigned int* )
201,202c201
<                     unsigned int* nbytes_out )
< {
---
>                     unsigned int* nbytes_out {
202,203c202
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
> BZ2_bzWriteClose64 ( bzerror, b, abandon, 
203c203
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    ( bzerror, b, abandon, 
(97.5 %, 5123 bytes)
201c201
<                     unsigned * nbytes_out )
---
>                     unsigned nbytes_out )
201c201
<                     unsigned * nbytes_out )
---
>                     unsigned * )
201,202c201
<                     unsigned * nbytes_out )
< {
---
>                     unsigned * nbytes_out {
202,203c202
< {
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
> BZ2_bzWriteClose64 ( bzerror, b, abandon, 
203c203
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    ( bzerror, b, abandon, 
203c203
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    BZ2_bzWriteClose64 bzerror, b, abandon, 
203c203
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    BZ2_bzWriteClose64 ( , b, abandon, 
203c203
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    BZ2_bzWriteClose64 ( bzerrorb, abandon, 
203c203
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    BZ2_bzWriteClose64 ( bzerror, , abandon, 
203c203
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    BZ2_bzWriteClose64 ( bzerror, babandon, 
203c203
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
---
>    BZ2_bzWriteClose64 ( bzerror, b, , 
203,204c203
<    BZ2_bzWriteClose64 ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    BZ2_bzWriteClose64 ( bzerror, b, abandonnbytes_in, NULL, nbytes_out, NULL );
204c204
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         , NULL, nbytes_out, NULL );
204c204
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_inNULL, nbytes_out, NULL );
(97.5 %, 5104 bytes)
203c203
<    ( bzerror, b, abandon, 
---
>    bzerror, b, abandon, 
203c203
<    ( bzerror, b, abandon, 
---
>    ( , b, abandon, 
203c203
<    ( bzerror, b, abandon, 
---
>    ( bzerrorb, abandon, 
203c203
<    ( bzerror, b, abandon, 
---
>    ( bzerror, , abandon, 
203c203
<    ( bzerror, b, abandon, 
---
>    ( bzerror, babandon, 
203c203
<    ( bzerror, b, abandon, 
---
>    ( bzerror, b, , 
203,204c203
<    ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>    ( bzerror, b, abandonnbytes_in, NULL, nbytes_out, NULL );
204c204
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         , NULL, nbytes_out, NULL );
204c204
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_inNULL, nbytes_out, NULL );
204c204
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_in, , nbytes_out, NULL );
204c204
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_in, NULLnbytes_out, NULL );
204c204
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_in, NULL, , NULL );
204c204
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_in, NULL, nbytes_outNULL );
204c204
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_in, NULL, nbytes_out, );
204c204
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>                         nbytes_in, NULL, nbytes_out, NULL ;
204,205c204
<                         nbytes_in, NULL, nbytes_out, NULL );
< }
---
>                         nbytes_in, NULL, nbytes_out, NULL )}
205,207d204
< }
< 
< 
208c208
< void BZ_API(BZ2_bzWriteClose64)
---
> BZ_API(BZ2_bzWriteClose64)
208c208
< void BZ_API(BZ2_bzWriteClose64)
---
> void (BZ2_bzWriteClose64)
208c208
< void BZ_API(BZ2_bzWriteClose64)
---
> void BZ_APIBZ2_bzWriteClose64)
(97.5 %, 5098 bytes)
208c208
< void (BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64)
208c208
< void (BZ2_bzWriteClose64)
---
> void ()
208,209c208
< void (BZ2_bzWriteClose64)
<                   ( int*          bzerror, 
---
> void (BZ2_bzWriteClose64( int*          bzerror, 
209c209
<                   ( int*          bzerror, 
---
>                   int*          bzerror, 
209c209
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
209c209
<                   ( int*          bzerror, 
---
>                   ( intbzerror, 
209c209
<                   ( int*          bzerror, 
---
>                   ( int*          , 
209,210c209
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerrorBZFILE*       b, 
210c210
<                     BZFILE*       b, 
---
>                     *       b, 
210c210
<                     BZFILE*       b, 
---
>                     BZFILEb, 
210c210
<                     BZFILE*       b, 
---
>                     BZFILE*       , 
210,211c210
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE*       bint           abandon,
211c211
<                     int           abandon,
---
>                     abandon,
211c211
<                     int           abandon,
---
>                     int           ,
211,212c211
<                     int           abandon,
<                     unsigned int* nbytes_in_lo32,
---
>                     int           abandonunsigned int* nbytes_in_lo32,
212c212
<                     unsigned int* nbytes_in_lo32,
---
>                     int* nbytes_in_lo32,
212c212
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32,
212c212
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned intnbytes_in_lo32,
212c212
<                     unsigned int* nbytes_in_lo32,
---
>                     unsigned int* ,
212,213c212
<                     unsigned int* nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned int* nbytes_in_lo32unsigned int* nbytes_in_hi32,
213c213
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
213c213
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32,
(97.5 %, 5095 bytes)
212c212
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned nbytes_in_lo32,
212c212
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * ,
212,213c212
<                     unsigned * nbytes_in_lo32,
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32unsigned int* nbytes_in_hi32,
213c213
<                     unsigned int* nbytes_in_hi32,
---
>                     int* nbytes_in_hi32,
213c213
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32,
213c213
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned intnbytes_in_hi32,
213c213
<                     unsigned int* nbytes_in_hi32,
---
>                     unsigned int* ,
213,214c213
<                     unsigned int* nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* nbytes_in_hi32unsigned int* nbytes_out_lo32,
214c214
<                     unsigned int* nbytes_out_lo32,
---
>                     int* nbytes_out_lo32,
214c214
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
(97.5 %, 5092 bytes)
213c213
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned nbytes_in_hi32,
213c213
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * ,
213,214c213
<                     unsigned * nbytes_in_hi32,
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32unsigned int* nbytes_out_lo32,
214c214
<                     unsigned int* nbytes_out_lo32,
---
>                     int* nbytes_out_lo32,
214c214
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32,
214c214
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned intnbytes_out_lo32,
214c214
<                     unsigned int* nbytes_out_lo32,
---
>                     unsigned int* ,
214,215c214
<                     unsigned int* nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* nbytes_out_lo32unsigned int* nbytes_out_hi32 )
215c215
<                     unsigned int* nbytes_out_hi32 )
---
>                     int* nbytes_out_hi32 )
215c215
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
(97.5 %, 5089 bytes)
214c214
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned nbytes_out_lo32,
214c214
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * ,
214,215c214
<                     unsigned * nbytes_out_lo32,
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32unsigned int* nbytes_out_hi32 )
215c215
<                     unsigned int* nbytes_out_hi32 )
---
>                     int* nbytes_out_hi32 )
215c215
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 )
215c215
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned intnbytes_out_hi32 )
215c215
<                     unsigned int* nbytes_out_hi32 )
---
>                     unsigned int* )
215,216c215
<                     unsigned int* nbytes_out_hi32 )
< {
---
>                     unsigned int* nbytes_out_hi32 {
216,218c216
< {
<    
<    bzFile* bzf ;
---
> bzFile* bzf ;
218c218
<    bzFile* bzf ;
---
>    * bzf ;
218c218
<    bzFile* bzf ;
---
>    bzFilebzf ;
218c218
<    bzFile* bzf ;
---
>    bzFile* ;
218,219c218
<    bzFile* bzf ;
<    if (NULL) ;
---
>    bzFile* bzf if (NULL) ;
(97.5 %, 5086 bytes)
215c215
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned nbytes_out_hi32 )
215c215
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * )
215,216c215
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_out_hi32 {
216,218c216
< {
<    
<    bzFile* bzf ;
---
> bzFile* bzf ;
218c218
<    bzFile* bzf ;
---
>    * bzf ;
218c218
<    bzFile* bzf ;
---
>    bzFilebzf ;
218c218
<    bzFile* bzf ;
---
>    bzFile* ;
218,219c218
<    bzFile* bzf ;
<    if (NULL) ;
---
>    bzFile* bzf if (NULL) ;
219c219
<    if (NULL) ;
---
>    (NULL) ;
219c219
<    if (NULL) ;
---
>    if NULL) ;
219c219
<    if (NULL) ;
---
>    if () ;
219c219
<    if (NULL) ;
---
>    if (NULL;
219,220c219
<    if (NULL) ;
<    0;
---
>    if (NULL) 0;
(97.5 %, 5083 bytes)
219c219
<    (NULL) ;
---
>    NULL) ;
219c219
<    (NULL) ;
---
>    () ;
219c219
<    (NULL) ;
---
>    (NULL;
219,220c219
<    (NULL) ;
<    0;
---
>    (NULL) 0;
220c220
<    0;
---
>    ;
220,221c220
<    0;
< }
---
>    0}
221,224d220
< }
< 
< 
< 
225c225
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> * BZ_API(BZ2_bzReadOpen) 
(97.5 %, 5082 bytes)
220,221c220
<    ;
< }
---
>    }
221,224d220
< }
< 
< 
< 
225c225
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> * BZ_API(BZ2_bzReadOpen) 
(97.5 %, 5080 bytes)
220,224c220
<    }
< 
< 
< 
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
>    BZFILE* BZ_API(BZ2_bzReadOpen) 
224c224
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> * BZ_API(BZ2_bzReadOpen) 
224c224
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILEBZ_API(BZ2_bzReadOpen) 
224c224
< BZFILE* BZ_API(BZ2_bzReadOpen) 
---
> BZFILE* (BZ2_bzReadOpen) 
(97.5 %, 5074 bytes)
224c224
< * BZ_API(BZ2_bzReadOpen) 
---
> BZ_API(BZ2_bzReadOpen) 
224c224
< * BZ_API(BZ2_bzReadOpen) 
---
> * (BZ2_bzReadOpen) 
224c224
< * BZ_API(BZ2_bzReadOpen) 
---
> * BZ_APIBZ2_bzReadOpen) 
224c224
< * BZ_API(BZ2_bzReadOpen) 
---
> * BZ_API() 
224,225c224
< * BZ_API(BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> * BZ_API(BZ2_bzReadOpen( int*  bzerror, 
225c225
<                    ( int*  bzerror, 
---
>                    int*  bzerror, 
225c225
<                    ( int*  bzerror, 
---
>                    ( *  bzerror, 
225c225
<                    ( int*  bzerror, 
---
>                    ( intbzerror, 
225c225
<                    ( int*  bzerror, 
---
>                    ( int*  , 
(97.5 %, 5068 bytes)
224c224
< * (BZ2_bzReadOpen) 
---
> * BZ2_bzReadOpen) 
224c224
< * (BZ2_bzReadOpen) 
---
> * () 
224,225c224
< * (BZ2_bzReadOpen) 
<                    ( int*  bzerror, 
---
> * (BZ2_bzReadOpen( int*  bzerror, 
225c225
<                    ( int*  bzerror, 
---
>                    int*  bzerror, 
225c225
<                    ( int*  bzerror, 
---
>                    ( *  bzerror, 
225c225
<                    ( int*  bzerror, 
---
>                    ( intbzerror, 
225c225
<                    ( int*  bzerror, 
---
>                    ( int*  , 
225,226c225
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( int*  bzerrorFILE* f, 
226c226
<                      FILE* f, 
---
>                      * f, 
226c226
<                      FILE* f, 
---
>                      FILEf, 
226c226
<                      FILE* f, 
---
>                      FILE* , 
226,227c226
<                      FILE* f, 
<                      int   verbosity,
---
>                      FILE* fint   verbosity,
227c227
<                      int   verbosity,
---
>                      verbosity,
227c227
<                      int   verbosity,
---
>                      int   ,
227,228c227
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosityint   small,
228c228
<                      int   small,
---
>                      small,
228c228
<                      int   small,
---
>                      int   ,
228,229c228
<                      int   small,
<                      void* unused,
---
>                      int   smallvoid* unused,
229c229
<                      void* unused,
---
>                      * unused,
229c229
<                      void* unused,
---
>                      voidunused,
229c229
<                      void* unused,
---
>                      void* ,
229,230c229
<                      void* unused,
<                      int   nUnused )
---
>                      void* unusedint   nUnused )
230c230
<                      int   nUnused )
---
>                      nUnused )
230c230
<                      int   nUnused )
---
>                      int   )
230,231c230
<                      int   nUnused )
< {
---
>                      int   nUnused {
231,232c231
< {
<    bzFile* bzf = (f ||
---
> bzFile* bzf = (f ||
232c232
<    bzFile* bzf = (f ||
---
>    * bzf = (f ||
232c232
<    bzFile* bzf = (f ||
---
>    bzFilebzf = (f ||
232c232
<    bzFile* bzf = (f ||
---
>    bzFile* = (f ||
232c232
<    bzFile* bzf = (f ||
---
>    bzFile* bzf (f ||
232c232
<    bzFile* bzf = (f ||
---
>    bzFile* bzf = f ||
232c232
<    bzFile* bzf = (f ||
---
>    bzFile* bzf = (||
232,233c232
<    bzFile* bzf = (f ||
<        ((BZ_MAX_UNUSED)))
---
>    bzFile* bzf = (f ((BZ_MAX_UNUSED)))
233c233
<        ((BZ_MAX_UNUSED)))
---
>        (BZ_MAX_UNUSED)))
233c233
<        ((BZ_MAX_UNUSED)))
---
>        (BZ_MAX_UNUSED)))
233c233
<        ((BZ_MAX_UNUSED)))
---
>        (()))
233c233
<        ((BZ_MAX_UNUSED)))
---
>        ((BZ_MAX_UNUSED))
233c233
<        ((BZ_MAX_UNUSED)))
---
>        ((BZ_MAX_UNUSED))
233,234c233
<        ((BZ_MAX_UNUSED)))
<       ;   
---
>        ((BZ_MAX_UNUSED));   
234,235c234
<       ;   
< }
---
>       }
235,238d234
< }
< 
< 
< 
239c239
< void BZ_API(BZ2_bzReadClose) ( )
---
> BZ_API(BZ2_bzReadClose) ( )
239c239
< void BZ_API(BZ2_bzReadClose) ( )
---
> void (BZ2_bzReadClose) ( )
(97.5 %, 5063 bytes)
239c239
< BZ_API(BZ2_bzReadClose) ( )
---
> (BZ2_bzReadClose) ( )
239c239
< BZ_API(BZ2_bzReadClose) ( )
---
> BZ_APIBZ2_bzReadClose) ( )
239c239
< BZ_API(BZ2_bzReadClose) ( )
---
> BZ_API() ( )
239c239
< BZ_API(BZ2_bzReadClose) ( )
---
> BZ_API(BZ2_bzReadClose( )
239c239
< BZ_API(BZ2_bzReadClose) ( )
---
> BZ_API(BZ2_bzReadClose) )
239,240c239
< BZ_API(BZ2_bzReadClose) ( )
< {
---
> BZ_API(BZ2_bzReadClose) ( {
240,241c240
< {
<    bzFile* bzf ;
---
> bzFile* bzf ;
241c241
<    bzFile* bzf ;
---
>    * bzf ;
241c241
<    bzFile* bzf ;
---
>    bzFilebzf ;
(97.5 %, 5057 bytes)
239c239
< (BZ2_bzReadClose) ( )
---
> BZ2_bzReadClose) ( )
239c239
< (BZ2_bzReadClose) ( )
---
> () ( )
239c239
< (BZ2_bzReadClose) ( )
---
> (BZ2_bzReadClose( )
239c239
< (BZ2_bzReadClose) ( )
---
> (BZ2_bzReadClose) )
239,240c239
< (BZ2_bzReadClose) ( )
< {
---
> (BZ2_bzReadClose) ( {
240,241c240
< {
<    bzFile* bzf ;
---
> bzFile* bzf ;
241c241
<    bzFile* bzf ;
---
>    * bzf ;
241c241
<    bzFile* bzf ;
---
>    bzFilebzf ;
241c241
<    bzFile* bzf ;
---
>    bzFile* ;
241,242c241
<    bzFile* bzf ;
< }
---
>    bzFile* bzf }
242,245d241
< }
< 
< 
< 
246c246
< int BZ_API(BZ2_bzRead) 
---
> BZ_API(BZ2_bzRead) 
246c246
< int BZ_API(BZ2_bzRead) 
---
> int (BZ2_bzRead) 
(97.5 %, 5053 bytes)
246c246
< BZ_API(BZ2_bzRead) 
---
> (BZ2_bzRead) 
246c246
< BZ_API(BZ2_bzRead) 
---
> BZ_APIBZ2_bzRead) 
246c246
< BZ_API(BZ2_bzRead) 
---
> BZ_API() 
246,247c246
< BZ_API(BZ2_bzRead) 
<            ( int*    bzerror, 
---
> BZ_API(BZ2_bzRead( int*    bzerror, 
247c247
<            ( int*    bzerror, 
---
>            int*    bzerror, 
247c247
<            ( int*    bzerror, 
---
>            ( *    bzerror, 
247c247
<            ( int*    bzerror, 
---
>            ( intbzerror, 
247c247
<            ( int*    bzerror, 
---
>            ( int*    , 
247,248c247
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerrorBZFILE* b, 
(97.5 %, 5047 bytes)
246c246
< (BZ2_bzRead) 
---
> BZ2_bzRead) 
246c246
< (BZ2_bzRead) 
---
> () 
246,247c246
< (BZ2_bzRead) 
<            ( int*    bzerror, 
---
> (BZ2_bzRead( int*    bzerror, 
247c247
<            ( int*    bzerror, 
---
>            int*    bzerror, 
247c247
<            ( int*    bzerror, 
---
>            ( *    bzerror, 
247c247
<            ( int*    bzerror, 
---
>            ( intbzerror, 
247c247
<            ( int*    bzerror, 
---
>            ( int*    , 
247,248c247
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerrorBZFILE* b, 
248c248
<              BZFILE* b, 
---
>              * b, 
248c248
<              BZFILE* b, 
---
>              BZFILEb, 
248c248
<              BZFILE* b, 
---
>              BZFILE* , 
248,249c248
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE* bvoid*   buf, 
249c249
<              void*   buf, 
---
>              *   buf, 
249c249
<              void*   buf, 
---
>              voidbuf, 
249c249
<              void*   buf, 
---
>              void*   , 
249,250c249
<              void*   buf, 
<              int     len )
---
>              void*   bufint     len )
250c250
<              int     len )
---
>              len )
250c250
<              int     len )
---
>              int     )
250,251c250
<              int     len )
< {
---
>              int     len {
251,253c251
< {
<    
<    bzFile* bzf ;
---
> bzFile* bzf ;
253c253
<    bzFile* bzf ;
---
>    * bzf ;
253c253
<    bzFile* bzf ;
---
>    bzFilebzf ;
253c253
<    bzFile* bzf ;
---
>    bzFile* ;
253,255c253
<    bzFile* bzf ;
< 
<    }
---
>    bzFile* bzf }
255,259c255
<    }
< 
< 
< 
< void BZ_API(BZ2_bzReadGetUnused) 
---
>    void BZ_API(BZ2_bzReadGetUnused) 
259c259
< void BZ_API(BZ2_bzReadGetUnused) 
---
> BZ_API(BZ2_bzReadGetUnused) 
259c259
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void (BZ2_bzReadGetUnused) 
259c259
< void BZ_API(BZ2_bzReadGetUnused) 
---
> void BZ_APIBZ2_bzReadGetUnused) 
(97.5 %, 5041 bytes)
259c259
< void (BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused) 
259c259
< void (BZ2_bzReadGetUnused) 
---
> void () 
259,260c259
< void (BZ2_bzReadGetUnused) 
<                      ( int*    bzerror, 
---
> void (BZ2_bzReadGetUnused( int*    bzerror, 
260c260
<                      ( int*    bzerror, 
---
>                      int*    bzerror, 
260c260
<                      ( int*    bzerror, 
---
>                      ( *    bzerror, 
260c260
<                      ( int*    bzerror, 
---
>                      ( intbzerror, 
260c260
<                      ( int*    bzerror, 
---
>                      ( int*    , 
260,261c260
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerrorBZFILE* b, 
261c261
<                        BZFILE* b, 
---
>                        * b, 
261c261
<                        BZFILE* b, 
---
>                        BZFILEb, 
261c261
<                        BZFILE* b, 
---
>                        BZFILE* , 
261,262c261
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE* bvoid**  unused, 
262c262
<                        void**  unused, 
---
>                        **  unused, 
262c262
<                        void**  unused, 
---
>                        void*  unused, 
262c262
<                        void**  unused, 
---
>                        void*unused, 
262c262
<                        void**  unused, 
---
>                        void**  , 
262,263c262
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unusedint*    nUnused )
263c263
<                        int*    nUnused )
---
>                        *    nUnused )
263c263
<                        int*    nUnused )
---
>                        intnUnused )
263c263
<                        int*    nUnused )
---
>                        int*    )
263,264c263
<                        int*    nUnused )
< {
---
>                        int*    nUnused {
264,265c264
< {
<    bzFile* next_in;
---
> bzFile* next_in;
265c265
<    bzFile* next_in;
---
>    * next_in;
265c265
<    bzFile* next_in;
---
>    bzFilenext_in;
265c265
<    bzFile* next_in;
---
>    bzFile* ;
265,266c265
<    bzFile* next_in;
< }
---
>    bzFile* next_in}
266,273d265
< }
< 
< 
< 
< 
< 
< 
< 
274c274
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> BZ_API(BZ2_bzBuffToBuffCompress) 
274c274
< int BZ_API(BZ2_bzBuffToBuffCompress) 
---
> int (BZ2_bzBuffToBuffCompress) 
(97.5 %, 5037 bytes)
274c274
< BZ_API(BZ2_bzBuffToBuffCompress) 
---
> (BZ2_bzBuffToBuffCompress) 
274c274
< BZ_API(BZ2_bzBuffToBuffCompress) 
---
> BZ_APIBZ2_bzBuffToBuffCompress) 
274c274
< BZ_API(BZ2_bzBuffToBuffCompress) 
---
> BZ_API() 
274,275c274
< BZ_API(BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffCompress( char*         dest, 
275c275
<                          ( char*         dest, 
---
>                          char*         dest, 
275c275
<                          ( char*         dest, 
---
>                          ( *         dest, 
275c275
<                          ( char*         dest, 
---
>                          ( chardest, 
275c275
<                          ( char*         dest, 
---
>                          ( char*         , 
275,276c275
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         destunsigned int* destLen,
(97.5 %, 5031 bytes)
274c274
< (BZ2_bzBuffToBuffCompress) 
---
> BZ2_bzBuffToBuffCompress) 
274c274
< (BZ2_bzBuffToBuffCompress) 
---
> () 
274,275c274
< (BZ2_bzBuffToBuffCompress) 
<                          ( char*         dest, 
---
> (BZ2_bzBuffToBuffCompress( char*         dest, 
275c275
<                          ( char*         dest, 
---
>                          char*         dest, 
275c275
<                          ( char*         dest, 
---
>                          ( *         dest, 
275c275
<                          ( char*         dest, 
---
>                          ( chardest, 
275c275
<                          ( char*         dest, 
---
>                          ( char*         , 
275,276c275
<                          ( char*         dest, 
<                            unsigned int* destLen,
---
>                          ( char*         destunsigned int* destLen,
276c276
<                            unsigned int* destLen,
---
>                            int* destLen,
276c276
<                            unsigned int* destLen,
---
>                            unsigned * destLen,
276c276
<                            unsigned int* destLen,
---
>                            unsigned intdestLen,
276c276
<                            unsigned int* destLen,
---
>                            unsigned int* ,
276,277c276
<                            unsigned int* destLen,
<                            char*         source, 
---
>                            unsigned int* destLenchar*         source, 
277c277
<                            char*         source, 
---
>                            *         source, 
277c277
<                            char*         source, 
---
>                            charsource, 
277c277
<                            char*         source, 
---
>                            char*         , 
277,278c277
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         sourceunsigned int  sourceLen,
278c278
<                            unsigned int  sourceLen,
---
>                            int  sourceLen,
278c278
<                            unsigned int  sourceLen,
---
>                            unsigned sourceLen,
(97.5 %, 5028 bytes)
276c276
<                            unsigned * destLen,
---
>                            unsigned destLen,
276c276
<                            unsigned * destLen,
---
>                            unsigned * ,
276,277c276
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLenchar*         source, 
277c277
<                            char*         source, 
---
>                            *         source, 
277c277
<                            char*         source, 
---
>                            charsource, 
277c277
<                            char*         source, 
---
>                            char*         , 
277,278c277
<                            char*         source, 
<                            unsigned int  sourceLen,
---
>                            char*         sourceunsigned int  sourceLen,
278c278
<                            unsigned int  sourceLen,
---
>                            int  sourceLen,
278c278
<                            unsigned int  sourceLen,
---
>                            unsigned sourceLen,
278c278
<                            unsigned int  sourceLen,
---
>                            unsigned int  ,
278,279c278
<                            unsigned int  sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned int  sourceLenint           blockSize100k, 
279c279
<                            int           blockSize100k, 
---
>                            blockSize100k, 
279c279
<                            int           blockSize100k, 
---
>                            int           , 
279,280c279
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100kint           verbosity, 
280c280
<                            int           verbosity, 
---
>                            verbosity, 
280c280
<                            int           verbosity, 
---
>                            int           , 
280,281c280
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosityint           workFactor )
(97.5 %, 5023 bytes)
278c278
<                            unsigned sourceLen,
---
>                            unsigned ,
278,279c278
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned sourceLenint           blockSize100k, 
279c279
<                            int           blockSize100k, 
---
>                            blockSize100k, 
279c279
<                            int           blockSize100k, 
---
>                            int           , 
279,280c279
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100kint           verbosity, 
280c280
<                            int           verbosity, 
---
>                            verbosity, 
280c280
<                            int           verbosity, 
---
>                            int           , 
280,281c280
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosityint           workFactor )
281c281
<                            int           workFactor )
---
>                            workFactor )
281c281
<                            int           workFactor )
---
>                            int           )
281,282c281
<                            int           workFactor )
< {
---
>                            int           workFactor {
282,283c282
< {
<    ;
---
> ;
283,284c283
<    ;
< }
---
>    }
284,287d283
< }
< 
< 
< 
288c288
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) 
(97.5 %, 5021 bytes)
283,287c283
<    }
< 
< 
< 
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
>    int BZ_API(BZ2_bzBuffToBuffDecompress) 
287c287
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> BZ_API(BZ2_bzBuffToBuffDecompress) 
287c287
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int (BZ2_bzBuffToBuffDecompress) 
287c287
< int BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> int BZ_APIBZ2_bzBuffToBuffDecompress) 
(97.6 %, 5017 bytes)
287c287
< BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> (BZ2_bzBuffToBuffDecompress) 
287c287
< BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> BZ_APIBZ2_bzBuffToBuffDecompress) 
287c287
< BZ_API(BZ2_bzBuffToBuffDecompress) 
---
> BZ_API() 
287,288c287
< BZ_API(BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> BZ_API(BZ2_bzBuffToBuffDecompress( char*         dest, 
288c288
<                            ( char*         dest, 
---
>                            char*         dest, 
288c288
<                            ( char*         dest, 
---
>                            ( *         dest, 
288c288
<                            ( char*         dest, 
---
>                            ( chardest, 
288c288
<                            ( char*         dest, 
---
>                            ( char*         , 
288,289c288
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         destunsigned int* destLen,
(97.6 %, 5011 bytes)
287c287
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ2_bzBuffToBuffDecompress) 
287c287
< (BZ2_bzBuffToBuffDecompress) 
---
> () 
287,288c287
< (BZ2_bzBuffToBuffDecompress) 
<                            ( char*         dest, 
---
> (BZ2_bzBuffToBuffDecompress( char*         dest, 
288c288
<                            ( char*         dest, 
---
>                            char*         dest, 
288c288
<                            ( char*         dest, 
---
>                            ( *         dest, 
288c288
<                            ( char*         dest, 
---
>                            ( chardest, 
288c288
<                            ( char*         dest, 
---
>                            ( char*         , 
288,289c288
<                            ( char*         dest, 
<                              unsigned int* destLen,
---
>                            ( char*         destunsigned int* destLen,
289c289
<                              unsigned int* destLen,
---
>                              int* destLen,
289c289
<                              unsigned int* destLen,
---
>                              unsigned * destLen,
289c289
<                              unsigned int* destLen,
---
>                              unsigned intdestLen,
289c289
<                              unsigned int* destLen,
---
>                              unsigned int* ,
289,290c289
<                              unsigned int* destLen,
<                              char*         source, 
---
>                              unsigned int* destLenchar*         source, 
290c290
<                              char*         source, 
---
>                              *         source, 
290c290
<                              char*         source, 
---
>                              charsource, 
290c290
<                              char*         source, 
---
>                              char*         , 
290,291c290
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         sourceunsigned int  sourceLen,
291c291
<                              unsigned int  sourceLen,
---
>                              int  sourceLen,
(97.6 %, 5008 bytes)
289c289
<                              unsigned * destLen,
---
>                              unsigned destLen,
289c289
<                              unsigned * destLen,
---
>                              unsigned * ,
289,290c289
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLenchar*         source, 
290c290
<                              char*         source, 
---
>                              *         source, 
290c290
<                              char*         source, 
---
>                              charsource, 
290c290
<                              char*         source, 
---
>                              char*         , 
290,291c290
<                              char*         source, 
<                              unsigned int  sourceLen,
---
>                              char*         sourceunsigned int  sourceLen,
291c291
<                              unsigned int  sourceLen,
---
>                              int  sourceLen,
291c291
<                              unsigned int  sourceLen,
---
>                              unsigned sourceLen,
291c291
<                              unsigned int  sourceLen,
---
>                              unsigned int  ,
291,292c291
<                              unsigned int  sourceLen,
<                              int           small,
---
>                              unsigned int  sourceLenint           small,
292c292
<                              int           small,
---
>                              small,
292c292
<                              int           small,
---
>                              int           ,
292,293c292
<                              int           small,
<                              int           verbosity )
---
>                              int           smallint           verbosity )
293c293
<                              int           verbosity )
---
>                              verbosity )
293c293
<                              int           verbosity )
---
>                              int           )
293,294c293
<                              int           verbosity )
< {
---
>                              int           verbosity {
(97.6 %, 5003 bytes)
291c291
<                              unsigned sourceLen,
---
>                              unsigned ,
291,292c291
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned sourceLenint           small,
292c292
<                              int           small,
---
>                              small,
292c292
<                              int           small,
---
>                              int           ,
292,293c292
<                              int           small,
<                              int           verbosity )
---
>                              int           smallint           verbosity )
293c293
<                              int           verbosity )
---
>                              verbosity )
293c293
<                              int           verbosity )
---
>                              int           )
293,294c293
<                              int           verbosity )
< {
---
>                              int           verbosity {
294,295c294
< {
<    ; 
---
> ; 
295,296c295
<    ; 
< BZ_VERSION;
---
>    BZ_VERSION;
296c296
< BZ_VERSION;
---
> ;
(97.6 %, 5000 bytes)
295c295
<    BZ_VERSION;
---
>    ;
295,296c295
<    BZ_VERSION;
< }
---
>    BZ_VERSION}
(97.6 %, 4990 bytes)
295,296c295
<    ;
< }
---
>    }
296,300d295
< }
< 
< 
< 
< 
301c301
< BZFILE * BZ_API(BZ2_bzopen)
---
> * BZ_API(BZ2_bzopen)
(97.6 %, 4988 bytes)
295,300c295
<    }
< 
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzopen)
---
>    BZFILE * BZ_API(BZ2_bzopen)
300c300
< BZFILE * BZ_API(BZ2_bzopen)
---
> * BZ_API(BZ2_bzopen)
300c300
< BZFILE * BZ_API(BZ2_bzopen)
---
> BZFILE BZ_API(BZ2_bzopen)
(97.6 %, 4981 bytes)
300c300
< * BZ_API(BZ2_bzopen)
---
> BZ_API(BZ2_bzopen)
300c300
< * BZ_API(BZ2_bzopen)
---
> * (BZ2_bzopen)
(97.6 %, 4979 bytes)
300c300
< BZ_API(BZ2_bzopen)
---
> (BZ2_bzopen)
300c300
< BZ_API(BZ2_bzopen)
---
> BZ_APIBZ2_bzopen)
300c300
< BZ_API(BZ2_bzopen)
---
> BZ_API()
300,301c300
< BZ_API(BZ2_bzopen)
<                ( const mode )
---
> BZ_API(BZ2_bzopen( const mode )
301c301
<                ( const mode )
---
>                const mode )
301c301
<                ( const mode )
---
>                ( mode )
(97.6 %, 4973 bytes)
300c300
< (BZ2_bzopen)
---
> BZ2_bzopen)
300c300
< (BZ2_bzopen)
---
> ()
300,301c300
< (BZ2_bzopen)
<                ( const mode )
---
> (BZ2_bzopen( const mode )
301c301
<                ( const mode )
---
>                const mode )
301c301
<                ( const mode )
---
>                ( mode )
301c301
<                ( const mode )
---
>                ( const )
301,302c301
<                ( const mode )
< {
---
>                ( const mode {
302,303c302
< {
<    return 0;
---
> return 0;
303c303
<    return 0;
---
>    0;
(97.6 %, 4967 bytes)
301c301
<                ( mode )
---
>                ( )
301,302c301
<                ( mode )
< {
---
>                ( mode {
302,303c302
< {
<    return 0;
---
> return 0;
303c303
<    return 0;
---
>    0;
(97.6 %, 4962 bytes)
301,302c301
<                ( )
< {
---
>                ( {
302,303c302
< {
<    return 0;
---
> return 0;
303c303
<    return 0;
---
>    0;
303c303
<    return 0;
---
>    return ;
303,304c303
<    return 0;
< }
---
>    return 0}
(97.6 %, 4955 bytes)
303c303
<    0;
---
>    ;
303,304c303
<    0;
< }
---
>    0}
304,307d303
< }
< 
< 
< 
308c308
< BZFILE * BZ_API(BZ2_bzdopen)
---
> * BZ_API(BZ2_bzdopen)
(97.6 %, 4954 bytes)
303,304c303
<    ;
< }
---
>    }
304,307d303
< }
< 
< 
< 
308c308
< BZFILE * BZ_API(BZ2_bzdopen)
---
> * BZ_API(BZ2_bzdopen)
(97.6 %, 4952 bytes)
303,307c303
<    }
< 
< 
< 
< BZFILE * BZ_API(BZ2_bzdopen)
---
>    BZFILE * BZ_API(BZ2_bzdopen)
307c307
< BZFILE * BZ_API(BZ2_bzdopen)
---
> * BZ_API(BZ2_bzdopen)
307c307
< BZFILE * BZ_API(BZ2_bzdopen)
---
> BZFILE BZ_API(BZ2_bzdopen)
(97.6 %, 4945 bytes)
307c307
< * BZ_API(BZ2_bzdopen)
---
> BZ_API(BZ2_bzdopen)
307c307
< * BZ_API(BZ2_bzdopen)
---
> * (BZ2_bzdopen)
307c307
< * BZ_API(BZ2_bzdopen)
---
> * BZ_APIBZ2_bzdopen)
(97.6 %, 4943 bytes)
307c307
< BZ_API(BZ2_bzdopen)
---
> (BZ2_bzdopen)
307c307
< BZ_API(BZ2_bzdopen)
---
> BZ_APIBZ2_bzdopen)
307c307
< BZ_API(BZ2_bzdopen)
---
> BZ_API()
307,308c307
< BZ_API(BZ2_bzdopen)
<                ( int len )
---
> BZ_API(BZ2_bzdopen( int len )
308c308
<                ( int len )
---
>                int len )
308c308
<                ( int len )
---
>                ( len )
(97.6 %, 4937 bytes)
307c307
< (BZ2_bzdopen)
---
> BZ2_bzdopen)
307c307
< (BZ2_bzdopen)
---
> ()
307,308c307
< (BZ2_bzdopen)
<                ( int len )
---
> (BZ2_bzdopen( int len )
308c308
<                ( int len )
---
>                int len )
308c308
<                ( int len )
---
>                ( len )
308c308
<                ( int len )
---
>                ( int )
308,309c308
<                ( int len )
< {
---
>                ( int len {
309,310c309
< {
<    int bzerr, nread;
---
> int bzerr, nread;
310c310
<    int bzerr, nread;
---
>    bzerr, nread;
310c310
<    int bzerr, nread;
---
>    int , nread;
310c310
<    int bzerr, nread;
---
>    int bzerrnread;
310c310
<    int bzerr, nread;
---
>    int bzerr, ;
310,311c310
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr, nreadif (bzerr == BZ_STREAM_END) {
(97.6 %, 4933 bytes)
308c308
<                ( len )
---
>                ( )
308,309c308
<                ( len )
< {
---
>                ( len {
309,310c309
< {
<    int bzerr, nread;
---
> int bzerr, nread;
310c310
<    int bzerr, nread;
---
>    bzerr, nread;
310c310
<    int bzerr, nread;
---
>    int , nread;
310c310
<    int bzerr, nread;
---
>    int bzerrnread;
310c310
<    int bzerr, nread;
---
>    int bzerr, ;
310,311c310
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr, nreadif (bzerr == BZ_STREAM_END) {
311c311
<    if (bzerr == BZ_STREAM_END) {
---
>    (bzerr == BZ_STREAM_END) {
(97.6 %, 4929 bytes)
308,309c308
<                ( )
< {
---
>                ( {
309,310c309
< {
<    int bzerr, nread;
---
> int bzerr, nread;
310c310
<    int bzerr, nread;
---
>    bzerr, nread;
310c310
<    int bzerr, nread;
---
>    int , nread;
310c310
<    int bzerr, nread;
---
>    int bzerrnread;
310c310
<    int bzerr, nread;
---
>    int bzerr, ;
310,311c310
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr, nreadif (bzerr == BZ_STREAM_END) {
311c311
<    if (bzerr == BZ_STREAM_END) {
---
>    (bzerr == BZ_STREAM_END) {
311c311
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_STREAM_END) {
311c311
<    if (bzerr == BZ_STREAM_END) {
---
>    if (== BZ_STREAM_END) {
311c311
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr BZ_STREAM_END) {
311c311
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == ) {
311c311
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END{
311,312c311
<    if (bzerr == BZ_STREAM_END) {
<       -1;
---
>    if (bzerr == BZ_STREAM_END) -1;
312c312
<       -1;
---
>       1;
312c312
<       -1;
---
>       -;
312,313c312
<       -1;
<    }
---
>       -1}
314d313
< }
314,317d313
< }
< 
< 
< 
318c318
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> BZ_API(BZ2_bzwrite) (BZFILE* b)
(97.6 %, 4928 bytes)
312c312
<       1;
---
>       ;
312,313c312
<       1;
<    }
---
>       1}
314d313
< }
314,317d313
< }
< 
< 
< 
318c318
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> BZ_API(BZ2_bzwrite) (BZFILE* b)
(97.6 %, 4927 bytes)
312,313c312
<       ;
<    }
---
>       }
314d313
< }
314,317d313
< }
< 
< 
< 
318c318
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> BZ_API(BZ2_bzwrite) (BZFILE* b)
(97.6 %, 4922 bytes)
313d312
< }
313,316d312
< }
< 
< 
< 
317c317
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> BZ_API(BZ2_bzwrite) (BZFILE* b)
317c317
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> int (BZ2_bzwrite) (BZFILE* b)
317c317
< int BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> int BZ_APIBZ2_bzwrite) (BZFILE* b)
(97.6 %, 4918 bytes)
317c317
< BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> (BZ2_bzwrite) (BZFILE* b)
317c317
< BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> BZ_APIBZ2_bzwrite) (BZFILE* b)
317c317
< BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> BZ_API() (BZFILE* b)
317c317
< BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> BZ_API(BZ2_bzwrite(BZFILE* b)
317c317
< BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> BZ_API(BZ2_bzwrite) BZFILE* b)
317c317
< BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> BZ_API(BZ2_bzwrite) (* b)
317c317
< BZ_API(BZ2_bzwrite) (BZFILE* b)
---
> BZ_API(BZ2_bzwrite) (BZFILEb)
(97.6 %, 4912 bytes)
317c317
< (BZ2_bzwrite) (BZFILE* b)
---
> BZ2_bzwrite) (BZFILE* b)
317c317
< (BZ2_bzwrite) (BZFILE* b)
---
> () (BZFILE* b)
317c317
< (BZ2_bzwrite) (BZFILE* b)
---
> (BZ2_bzwrite(BZFILE* b)
317c317
< (BZ2_bzwrite) (BZFILE* b)
---
> (BZ2_bzwrite) BZFILE* b)
317c317
< (BZ2_bzwrite) (BZFILE* b)
---
> (BZ2_bzwrite) (* b)
317c317
< (BZ2_bzwrite) (BZFILE* b)
---
> (BZ2_bzwrite) (BZFILEb)
317c317
< (BZ2_bzwrite) (BZFILE* b)
---
> (BZ2_bzwrite) (BZFILE* )
317,318c317
< (BZ2_bzwrite) (BZFILE* b)
< {
---
> (BZ2_bzwrite) (BZFILE* b{
319d318
<    {
319,320c319
<    {
<       ;
---
>    ;
321d320
<       ;
(97.6 %, 4910 bytes)
317,318c317
< (BZ2_bzwrite) (BZFILEb)
< {
---
> (BZ2_bzwrite) (BZFILEb{
319d318
<    {
319,320c319
<    {
<       ;
---
>    ;
321d320
<       ;
321,322c321
<       ;
<    }
---
>       }
(97.6 %, 4902 bytes)
320,321c320
<       ;
<    }
---
>       }
322d321
< }
322,326d321
< }
< 
< 
< 
< 
327c327
< static char *bzerrorstrings[] = {
---
> char *bzerrorstrings[] = {
(97.6 %, 4897 bytes)
321d320
< }
321,325d320
< }
< 
< 
< 
< 
326c326
< static char *bzerrorstrings[] = {
---
> char *bzerrorstrings[] = {
326c326
< static char *bzerrorstrings[] = {
---
> static *bzerrorstrings[] = {
(97.6 %, 4890 bytes)
326c326
< char *bzerrorstrings[] = {
---
> *bzerrorstrings[] = {
326c326
< char *bzerrorstrings[] = {
---
> char bzerrorstrings[] = {
326c326
< char *bzerrorstrings[] = {
---
> char *[] = {
326c326
< char *bzerrorstrings[] = {
---
> char *bzerrorstrings] = {
326c326
< char *bzerrorstrings[] = {
---
> char *bzerrorstrings[= {
326c326
< char *bzerrorstrings[] = {
---
> char *bzerrorstrings[] {
326,327c326
< char *bzerrorstrings[] = {
<        };
---
> char *bzerrorstrings[] = };
327c327
<        };
---
>        ;
(97.6 %, 4885 bytes)
326c326
< *bzerrorstrings[] = {
---
> bzerrorstrings[] = {
326c326
< *bzerrorstrings[] = {
---
> *[] = {
326c326
< *bzerrorstrings[] = {
---
> *bzerrorstrings] = {
326c326
< *bzerrorstrings[] = {
---
> *bzerrorstrings[= {
326c326
< *bzerrorstrings[] = {
---
> *bzerrorstrings[] {
326,327c326
< *bzerrorstrings[] = {
<        };
---
> *bzerrorstrings[] = };
327c327
<        };
---
>        ;
327,330c327
<        };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
>        }const char * BZ_API(BZ2_bzerror) ()
330c330
< const char * BZ_API(BZ2_bzerror) ()
---
> char * BZ_API(BZ2_bzerror) ()
(97.6 %, 4884 bytes)
326c326
< bzerrorstrings[] = {
---
> [] = {
326c326
< bzerrorstrings[] = {
---
> bzerrorstrings] = {
326c326
< bzerrorstrings[] = {
---
> bzerrorstrings[= {
326c326
< bzerrorstrings[] = {
---
> bzerrorstrings[] {
326,327c326
< bzerrorstrings[] = {
<        };
---
> bzerrorstrings[] = };
327c327
<        };
---
>        ;
327,330c327
<        };
< 
< 
< const char * BZ_API(BZ2_bzerror) ()
---
>        }const char * BZ_API(BZ2_bzerror) ()
330c330
< const char * BZ_API(BZ2_bzerror) ()
---
> char * BZ_API(BZ2_bzerror) ()
330c330
< const char * BZ_API(BZ2_bzerror) ()
---
> const * BZ_API(BZ2_bzerror) ()
(97.6 %, 4878 bytes)
330c330
< char * BZ_API(BZ2_bzerror) ()
---
> * BZ_API(BZ2_bzerror) ()
330c330
< char * BZ_API(BZ2_bzerror) ()
---
> char BZ_API(BZ2_bzerror) ()
330c330
< char * BZ_API(BZ2_bzerror) ()
---
> char * (BZ2_bzerror) ()
(97.6 %, 4873 bytes)
330c330
< * BZ_API(BZ2_bzerror) ()
---
> BZ_API(BZ2_bzerror) ()
330c330
< * BZ_API(BZ2_bzerror) ()
---
> * (BZ2_bzerror) ()
(97.6 %, 4871 bytes)
330c330
< BZ_API(BZ2_bzerror) ()
---
> (BZ2_bzerror) ()
330c330
< BZ_API(BZ2_bzerror) ()
---
> BZ_APIBZ2_bzerror) ()
330c330
< BZ_API(BZ2_bzerror) ()
---
> BZ_API() ()
330c330
< BZ_API(BZ2_bzerror) ()
---
> BZ_API(BZ2_bzerror()
330c330
< BZ_API(BZ2_bzerror) ()
---
> BZ_API(BZ2_bzerror) )
330,331c330
< BZ_API(BZ2_bzerror) ()
< {
---
> BZ_API(BZ2_bzerror) ({
331,332c331
< {
<    ;
---
> ;
332,333c332
<    ;
< }
---
>    }
(97.6 %, 4865 bytes)
330c330
< (BZ2_bzerror) ()
---
> BZ2_bzerror) ()
330c330
< (BZ2_bzerror) ()
---
> () ()
330c330
< (BZ2_bzerror) ()
---
> (BZ2_bzerror()
330c330
< (BZ2_bzerror) ()
---
> (BZ2_bzerror) )
330,331c330
< (BZ2_bzerror) ()
< {
---
> (BZ2_bzerror) ({
331,332c331
< {
<    ;
---
> ;
332,333c332
<    ;
< }
---
>    }
333,361d332
< }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
(97.6 %, 4863 bytes)
332,360c332
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
---
>    
\ No newline at end of file
Termination check: size was 204936; now 4863
===< pass_balanced :: parens-only >===
12c12
< #define BZ_STREAM_END        (9)
---
> #define BZ_STREAM_END        9
360a361
>  
\ No newline at end of file
16c16
<       void (*bzalloc)()} 
---
>       void *bzalloc()} 
360a361
>  
\ No newline at end of file
16c16
<       void (*bzalloc)()} 
---
>       void (*bzalloc)} 
360a361
>  
\ No newline at end of file
(97.6 %, 4862 bytes)
16c16
<       void (*bzalloc)()} 
---
>       void *bzalloc()} 
16c16
<       void (*bzalloc)()} 
---
>       void (*bzalloc)} 
23c23
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
(97.6 %, 4860 bytes)
23c23
< #   define BZ_API(func) func
---
> #   define BZ_APIfunc func
29c29
< (BZ2_bzDecompressInit) ( 
---
> BZ2_bzDecompressInit ( 
29c29
< (BZ2_bzDecompressInit) ( 
---
> (BZ2_bzDecompressInit)  
32c32
<       int       );
---
>       int       ;
(97.6 %, 4858 bytes)
29c29
< (BZ2_bzDecompressInit) ( 
---
> BZ2_bzDecompressInit ( 
29c29
< (BZ2_bzDecompressInit) ( 
---
> (BZ2_bzDecompressInit)  
32c32
<       int       );
---
>       int       ;
42c42
< * (BZ2_bzReadOpen) ( 
---
> * BZ2_bzReadOpen ( 
(97.6 %, 4856 bytes)
29c29
< BZ2_bzDecompressInit ( 
---
> BZ2_bzDecompressInit  
32c32
<       int       );
---
>       int       ;
42c42
< * (BZ2_bzReadOpen) ( 
---
> * BZ2_bzReadOpen ( 
42c42
< * (BZ2_bzReadOpen) ( 
---
> * (BZ2_bzReadOpen)  
48c48
<       int   );
---
>       int   ;
50c50
< void (BZ2_bzReadGetUnused) ( 
---
> void BZ2_bzReadGetUnused ( 
(97.6 %, 4854 bytes)
42c42
< * BZ2_bzReadOpen ( 
---
> * BZ2_bzReadOpen  
48c48
<       int   );
---
>       int   ;
50c50
< void (BZ2_bzReadGetUnused) ( 
---
> void BZ2_bzReadGetUnused ( 
50c50
< void (BZ2_bzReadGetUnused) ( 
---
> void (BZ2_bzReadGetUnused)  
54c54
<       int*    );
---
>       int*    ;
56c56
< (BZ2_bzRead) ( 
---
> BZ2_bzRead ( 
(97.6 %, 4852 bytes)
50c50
< void BZ2_bzReadGetUnused ( 
---
> void BZ2_bzReadGetUnused  
54c54
<       int*    );
---
>       int*    ;
56c56
< (BZ2_bzRead) ( 
---
> BZ2_bzRead ( 
56c56
< (BZ2_bzRead) ( 
---
> (BZ2_bzRead)  
60c60
<       int     );
---
>       int     ;
62c62
< * (BZ2_bzWriteOpen) ( 
---
> * BZ2_bzWriteOpen ( 
(97.6 %, 4850 bytes)
56c56
< BZ2_bzRead ( 
---
> BZ2_bzRead  
60c60
<       int     );
---
>       int     ;
62c62
< * (BZ2_bzWriteOpen) ( 
---
> * BZ2_bzWriteOpen ( 
62c62
< * (BZ2_bzWriteOpen) ( 
---
> * (BZ2_bzWriteOpen)  
67c67
<       int   );
---
>       int   ;
69c69
< void (BZ2_bzWrite) ( 
---
> void BZ2_bzWrite ( 
(97.6 %, 4848 bytes)
62c62
< * BZ2_bzWriteOpen ( 
---
> * BZ2_bzWriteOpen  
67c67
<       int   );
---
>       int   ;
69c69
< void (BZ2_bzWrite) ( 
---
> void BZ2_bzWrite ( 
69c69
< void (BZ2_bzWrite) ( 
---
> void (BZ2_bzWrite)  
73c73
<       int     );
---
>       int     ;
75c75
< void (BZ2_bzWriteClose) ( 
---
> void BZ2_bzWriteClose ( 
(97.6 %, 4846 bytes)
69c69
< void BZ2_bzWrite ( 
---
> void BZ2_bzWrite  
73c73
<       int     );
---
>       int     ;
75c75
< void (BZ2_bzWriteClose) ( 
---
> void BZ2_bzWriteClose ( 
75c75
< void (BZ2_bzWriteClose) ( 
---
> void (BZ2_bzWriteClose)  
80c80
<       unsigned * );
---
>       unsigned * ;
82c82
< void (BZ2_bzWriteClose64) ( 
---
> void BZ2_bzWriteClose64 ( 
(97.6 %, 4844 bytes)
75c75
< void BZ2_bzWriteClose ( 
---
> void BZ2_bzWriteClose  
80c80
<       unsigned * );
---
>       unsigned * ;
82c82
< void (BZ2_bzWriteClose64) ( 
---
> void BZ2_bzWriteClose64 ( 
82c82
< void (BZ2_bzWriteClose64) ( 
---
> void (BZ2_bzWriteClose64)  
89c89
<       unsigned * );
---
>       unsigned * ;
94c94
< (BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress ( 
(97.6 %, 4842 bytes)
82c82
< void BZ2_bzWriteClose64 ( 
---
> void BZ2_bzWriteClose64  
89c89
<       unsigned * );
---
>       unsigned * ;
94c94
< (BZ2_bzBuffToBuffCompress) ( 
---
> BZ2_bzBuffToBuffCompress ( 
94c94
< (BZ2_bzBuffToBuffCompress) ( 
---
> (BZ2_bzBuffToBuffCompress)  
101c101
<       int           );
---
>       int           ;
103c103
< (BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress ( 
(97.6 %, 4840 bytes)
94c94
< BZ2_bzBuffToBuffCompress ( 
---
> BZ2_bzBuffToBuffCompress  
101c101
<       int           );
---
>       int           ;
103c103
< (BZ2_bzBuffToBuffDecompress) ( 
---
> BZ2_bzBuffToBuffDecompress ( 
103c103
< (BZ2_bzBuffToBuffDecompress) ( 
---
> (BZ2_bzBuffToBuffDecompress)  
109c109
<       int           );
---
>       int           ;
118c118
<    (BZ2_bzCompressInit) 
---
>    BZ2_bzCompressInit 
(97.6 %, 4838 bytes)
103c103
< BZ2_bzBuffToBuffDecompress ( 
---
> BZ2_bzBuffToBuffDecompress  
109c109
<       int           );
---
>       int           ;
118c118
<    (BZ2_bzCompressInit) 
---
>    BZ2_bzCompressInit 
119c119
<                     ( )
---
>                      
133c133
< (BZ2_bzCompress) ( )
---
> BZ2_bzCompress ( )
133c133
< (BZ2_bzCompress) ( )
---
> (BZ2_bzCompress)  
(97.6 %, 4836 bytes)
119c119
<                     ( )
---
>                      
133c133
< (BZ2_bzCompress) ( )
---
> BZ2_bzCompress ( )
133c133
< (BZ2_bzCompress) ( )
---
> (BZ2_bzCompress)  
144c144
< (BZ2_bzDecompressInit) 
---
> BZ2_bzDecompressInit 
(97.6 %, 4834 bytes)
133c133
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  
144c144
< (BZ2_bzDecompressInit) 
---
> BZ2_bzDecompressInit 
145c145
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
147c147
<                        int        small )
---
>                        int        small 
168c168
< * (BZ2_bzWriteOpen) 
---
> * BZ2_bzWriteOpen 
(97.6 %, 4832 bytes)
145c145
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
147c147
<                        int        small )
---
>                        int        small 
168c168
< * (BZ2_bzWriteOpen) 
---
> * BZ2_bzWriteOpen 
169c169
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
173c173
<                       int   workFactor )
---
>                       int   workFactor 
180c180
< void (BZ2_bzWrite)
---
> void BZ2_bzWrite
(97.6 %, 4830 bytes)
169c169
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
173c173
<                       int   workFactor )
---
>                       int   workFactor 
180c180
< void (BZ2_bzWrite)
---
> void BZ2_bzWrite
181c181
<              ( int*    bzerror, 
---
>               int*    bzerror, 
184c184
<                int     len )
---
>                int     len 
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = (bzf->handle)
(97.6 %, 4828 bytes)
181c181
<              ( int*    bzerror, 
---
>               int*    bzerror, 
184c184
<                int     len )
---
>                int     len 
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = (bzf->handle)
187c187
<    bzFile* bzf = ((bzf->handle))
---
>    bzFile* bzf = (bzf->handle)
196c196
< void (BZ2_bzWriteClose)
---
> void BZ2_bzWriteClose
(97.6 %, 4826 bytes)
187c187
<    bzFile* bzf = (bzf->handle)
---
>    bzFile* bzf = bzf->handle
196c196
< void (BZ2_bzWriteClose)
---
> void BZ2_bzWriteClose
197c197
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
201c201
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
203,204c203,204
<    ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>     bzerror, b, abandon, 
>                         nbytes_in, NULL, nbytes_out, NULL ;
(97.6 %, 4824 bytes)
196c196
< void (BZ2_bzWriteClose)
---
> void BZ2_bzWriteClose
197c197
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
201c201
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
203,204c203,204
<    ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>     bzerror, b, abandon, 
>                         nbytes_in, NULL, nbytes_out, NULL ;
(97.6 %, 4822 bytes)
197c197
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
201c201
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
203,204c203,204
<    ( bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL );
---
>     bzerror, b, abandon, 
>                         nbytes_in, NULL, nbytes_out, NULL ;
208c208
< void (BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64
(97.6 %, 4820 bytes)
208c208
< void (BZ2_bzWriteClose64)
---
> void BZ2_bzWriteClose64
209c209
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
215c215
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
219c219
<    (NULL) ;
---
>    NULL ;
(97.6 %, 4818 bytes)
209c209
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
215c215
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
219c219
<    (NULL) ;
---
>    NULL ;
224c224
< * (BZ2_bzReadOpen) 
---
> * BZ2_bzReadOpen 
(97.6 %, 4816 bytes)
224c224
< * (BZ2_bzReadOpen) 
---
> * BZ2_bzReadOpen 
225c225
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
230c230
<                      int   nUnused )
---
>                      int   nUnused 
232,233c232,233
<    bzFile* bzf = (f ||
<        ((BZ_MAX_UNUSED)))
---
>    bzFile* bzf = f ||
>        ((BZ_MAX_UNUSED))
(97.7 %, 4814 bytes)
225c225
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
230c230
<                      int   nUnused )
---
>                      int   nUnused 
232,233c232,233
<    bzFile* bzf = (f ||
<        ((BZ_MAX_UNUSED)))
---
>    bzFile* bzf = f ||
>        ((BZ_MAX_UNUSED))
233c233
<        ((BZ_MAX_UNUSED)))
---
>        (BZ_MAX_UNUSED))
(97.7 %, 4812 bytes)
233c233
<        ((BZ_MAX_UNUSED))
---
>        (BZ_MAX_UNUSED)
233c233
<        ((BZ_MAX_UNUSED))
---
>        (BZ_MAX_UNUSED)
239c239
< (BZ2_bzReadClose) ( )
---
> BZ2_bzReadClose ( )
(97.7 %, 4810 bytes)
233c233
<        (BZ_MAX_UNUSED)
---
>        BZ_MAX_UNUSED
239c239
< (BZ2_bzReadClose) ( )
---
> BZ2_bzReadClose ( )
(97.7 %, 4808 bytes)
239c239
< (BZ2_bzReadClose) ( )
---
> BZ2_bzReadClose ( )
239c239
< (BZ2_bzReadClose) ( )
---
> (BZ2_bzReadClose)  
246c246
< (BZ2_bzRead) 
---
> BZ2_bzRead 
(97.7 %, 4806 bytes)
239c239
< BZ2_bzReadClose ( )
---
> BZ2_bzReadClose  
246c246
< (BZ2_bzRead) 
---
> BZ2_bzRead 
247c247
<            ( int*    bzerror, 
---
>             int*    bzerror, 
250c250
<              int     len )
---
>              int     len 
259c259
< void (BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused 
(97.7 %, 4804 bytes)
247c247
<            ( int*    bzerror, 
---
>             int*    bzerror, 
250c250
<              int     len )
---
>              int     len 
259c259
< void (BZ2_bzReadGetUnused) 
---
> void BZ2_bzReadGetUnused 
260c260
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
263c263
<                        int*    nUnused )
---
>                        int*    nUnused 
274c274
< (BZ2_bzBuffToBuffCompress) 
---
> BZ2_bzBuffToBuffCompress 
(97.7 %, 4802 bytes)
260c260
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
263c263
<                        int*    nUnused )
---
>                        int*    nUnused 
274c274
< (BZ2_bzBuffToBuffCompress) 
---
> BZ2_bzBuffToBuffCompress 
275c275
<                          ( char*         dest, 
---
>                           char*         dest, 
281c281
<                            int           workFactor )
---
>                            int           workFactor 
287c287
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ2_bzBuffToBuffDecompress 
(97.7 %, 4800 bytes)
275c275
<                          ( char*         dest, 
---
>                           char*         dest, 
281c281
<                            int           workFactor )
---
>                            int           workFactor 
287c287
< (BZ2_bzBuffToBuffDecompress) 
---
> BZ2_bzBuffToBuffDecompress 
288c288
<                            ( char*         dest, 
---
>                             char*         dest, 
293c293
<                              int           verbosity )
---
>                              int           verbosity 
300c300
< (BZ2_bzopen)
---
> BZ2_bzopen
(97.7 %, 4798 bytes)
288c288
<                            ( char*         dest, 
---
>                             char*         dest, 
293c293
<                              int           verbosity )
---
>                              int           verbosity 
300c300
< (BZ2_bzopen)
---
> BZ2_bzopen
301c301
<                ( )
---
>                 
307c307
< (BZ2_bzdopen)
---
> BZ2_bzdopen
(97.7 %, 4796 bytes)
301c301
<                ( )
---
>                 
307c307
< (BZ2_bzdopen)
---
> BZ2_bzdopen
308c308
<                ( )
---
>                 
311c311
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_STREAM_END {
317c317
< (BZ2_bzwrite) (BZFILEb)
---
> BZ2_bzwrite (BZFILEb)
(97.7 %, 4794 bytes)
308c308
<                ( )
---
>                 
311c311
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_STREAM_END {
317c317
< (BZ2_bzwrite) (BZFILEb)
---
> BZ2_bzwrite (BZFILEb)
317c317
< (BZ2_bzwrite) (BZFILEb)
---
> (BZ2_bzwrite) BZFILEb
330c330
< (BZ2_bzerror) ()
---
> BZ2_bzerror ()
(97.7 %, 4792 bytes)
317c317
< BZ2_bzwrite (BZFILEb)
---
> BZ2_bzwrite BZFILEb
330c330
< (BZ2_bzerror) ()
---
> BZ2_bzerror ()
330c330
< (BZ2_bzerror) ()
---
> (BZ2_bzerror) 
(97.7 %, 4790 bytes)
330c330
< BZ2_bzerror ()
---
> BZ2_bzerror 
===< pass_clang :: remove-namespace >===
===< pass_clang :: simple-inliner >===
===< pass_clang :: reduce-pointer-level >===
158c158
<       FILE*     handle;
---
>       FILE     handle;
187c187
<    bzFile* bzf = bzf->handle
---
>    bzFile bzf = bzf->handle
218c218
<    bzFile* bzf ;
---
>    bzFile bzf ;
241c241
<    bzFile* bzf ;
---
>    bzFile bzf ;
(97.7 %, 4789 bytes)
241c241
<    bzFile* bzf ;
---
>    bzFile bzf ;
253c253
<    bzFile* bzf ;
---
>    bzFile bzf ;
(97.7 %, 4788 bytes)
253c253
<    bzFile* bzf ;
---
>    bzFile bzf ;
265c265
<    bzFile* next_in;
---
>    bzFile next_in;
(97.7 %, 4787 bytes)
265c265
<    bzFile* next_in;
---
>    bzFile next_in;
(97.7 %, 4786 bytes)
===< pass_clang :: remove-unused-field >===
16c16
<       void (*bzalloc)} 
---
>       } 
158c158
<       FILE*     handle;
---
>       
159c159
<       bz_stream strm}
---
>       }
(97.7 %, 4771 bytes)
158c158
<       FILE*     handle;
---
>       
159c159
<       bz_stream strm}
---
>       }
(97.7 %, 4757 bytes)
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: simplify-recursive-template-instantiation >===
===< pass_ints :: d >===
===< pass_clex :: rm-toks-7 >===
9,12c9
< #2
< 
< #define BZ_OK                3
< #define BZ_STREAM_END        9
---
> define BZ_STREAM_END        9
9,12c9
< #2
< 
< #define BZ_OK                3
< #define BZ_STREAM_END        9
---
> #BZ_STREAM_END        9
11,12c11
< #define BZ_OK                3
< #define BZ_STREAM_END        9
---
> 9
11,14c11
< #define BZ_OK                3
< #define BZ_STREAM_END        9
< 
< typedef 
---
> #typedef 
11,15c11
< #define BZ_OK                3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
---
> #define struct {
11,15c11
< #define BZ_OK                3
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
---
> #define BZ_OK                {
12,16c12
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       } 
---
> } 
12,17c12
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       } 
<    bz_stream;
---
> #bz_stream;
12,17c12
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       } 
<    bz_stream;
---
> #define ;
12,21c12
< #define BZ_STREAM_END        9
< 
< typedef 
<    struct {
<       } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END        #include <stdio.h>
14,21c14
< typedef 
<    struct {
<       } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
> include <stdio.h>
15,21c15
<    struct {
<       } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    <stdio.h>
15,21c15
<    struct {
<       } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    struct stdio.h>
16,21c16
<       } 
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>       .h>
17,21c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    h>
17,21c17
<    bz_stream;
< 
< 
< 
< #include <stdio.h>
---
>    bz_stream>
21,22d20
< #include <stdio.h>
< 
21,23c21
< #include <stdio.h>
< 
< #   define BZ_APIfunc func
---
> #define BZ_APIfunc func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_APIfunc func
---
> #include BZ_APIfunc func
21,23c21
< #include <stdio.h>
< 
< #   define BZ_APIfunc func
---
> #include <func
21,24c21
< #include <stdio.h>
< 
< #   define BZ_APIfunc func
< #   define BZ_EXTERN extern
---
> #include <stdio#   define BZ_EXTERN extern
21,24c21
< #include <stdio.h>
< 
< #   define BZ_APIfunc func
< #   define BZ_EXTERN extern
---
> #include <stdio.define BZ_EXTERN extern
21,24c21
< #include <stdio.h>
< 
< #   define BZ_APIfunc func
< #   define BZ_EXTERN extern
---
> #include <stdio.hBZ_EXTERN extern
23,24c23
< #   define BZ_APIfunc func
< #   define BZ_EXTERN extern
---
> extern
23,29c23
< #   define BZ_APIfunc func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ2_bzDecompressInit ( 
---
> #   BZ2_bzDecompressInit ( 
23,29c23
< #   define BZ_APIfunc func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ2_bzDecompressInit ( 
---
> #   define ( 
23,30c23
< #   define BZ_APIfunc func
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
> #   define BZ_APIfunc bz_stream *, 
24,30c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
> *, 
24,30c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
> #   , 
24,31c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
<       int       , 
---
> #   define int       , 
24,31c24
< #   define BZ_EXTERN extern
< 
< 
< 
< 
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
<       int       , 
---
> #   define BZ_EXTERN , 
29,32c29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
<       int       , 
<       int       );
---
> int       );
29,32c29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
<       int       , 
<       int       );
---
> BZ2_bzDecompressInit );
(97.7 %, 4709 bytes)
23,30c23
< extern
< 
< 
< 
< 
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
<       int       , 
---
> , 
28,31c28
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
<       int       , 
<       int       );
---
> int       );
28,31c28
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
<       int       , 
<       int       );
---
> BZ2_bzDecompressInit );
29,31c29
<       bz_stream *, 
<       int       , 
<       int       );
---
>       ;
29,37c29
<       bz_stream *, 
<       int       , 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       bz_stream #define BZ_MAX_UNUSED 5000
29,37c29
<       bz_stream *, 
<       int       , 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       bz_stream *define BZ_MAX_UNUSED 5000
30,37c30
<       int       , 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       BZ_MAX_UNUSED 5000
30,37c30
<       int       , 
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
---
>       int       5000
31,39c31
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef BZFILE;
---
>       typedef BZFILE;
31,39c31
<       int       );
< 
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef BZFILE;
---
>       int       BZFILE;
33,40d32
< 
< 
< 
< 
< #define BZ_MAX_UNUSED 5000
< 
< typedef BZFILE;
< 
37,40d36
< #define BZ_MAX_UNUSED 5000
< 
< typedef BZFILE;
< 
37,41c37
< #define BZ_MAX_UNUSED 5000
< 
< typedef BZFILE;
< 
< * BZ2_bzReadOpen ( 
---
> #BZ2_bzReadOpen ( 
37,41c37
< #define BZ_MAX_UNUSED 5000
< 
< typedef BZFILE;
< 
< * BZ2_bzReadOpen ( 
---
> #define ( 
37,42c37
< #define BZ_MAX_UNUSED 5000
< 
< typedef BZFILE;
< 
< * BZ2_bzReadOpen ( 
<       int*  ,   
---
> #define BZ_MAX_UNUSED int*  ,   
39,42c39
< typedef BZFILE;
< 
< * BZ2_bzReadOpen ( 
<       int*  ,   
---
> *  ,   
39,42c39
< typedef BZFILE;
< 
< * BZ2_bzReadOpen ( 
<       int*  ,   
---
> typedef ,   
39,43c39
< typedef BZFILE;
< 
< * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> typedef BZFILEFILE* , 
41,43c41
< * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> * , 
41,43c41
< * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
---
> * , 
41,44c41
< * BZ2_bzReadOpen ( 
<       int*  ,   
<       FILE* , 
<       int   , 
---
> * BZ2_bzReadOpen int   , 
42,44c42
<       int*  ,   
<       FILE* , 
<       int   , 
---
>       , 
42,45c42
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
>       intint   ,
42,45c42
<       int*  ,   
<       FILE* , 
<       int   , 
<       int   ,
---
>       int*  ,
43,45d42
<       FILE* , 
<       int   , 
<       int   ,
43,46c43
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
>       FILE* ,    
43,46c43
<       FILE* , 
<       int   , 
<       int   ,
<       void* ,    
---
>       FILE* ,    
44,46d43
<       int   , 
<       int   ,
<       void* ,    
44,46d43
<       int   , 
<       int   ,
<       void* ,    
45,47c45
<       int   ,
<       void* ,    
<       int   );
---
>       ;
45,49c45
<       int   ,
<       void* ,    
<       int   );
< 
< void BZ2_bzReadGetUnused ( 
---
>       int   void BZ2_bzReadGetUnused ( 
46,49c46
<       void* ,    
<       int   );
< 
< void BZ2_bzReadGetUnused ( 
---
>       BZ2_bzReadGetUnused ( 
46,49c46
<       void* ,    
<       int   );
< 
< void BZ2_bzReadGetUnused ( 
---
>       void( 
46,50c46
<       void* ,    
<       int   );
< 
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
>       void* int*    , 
47,50c47
<       int   );
< 
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
>       *    , 
47,50c47
<       int   );
< 
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
>       int   , 
47,51c47
<       int   );
< 
< void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE* , 
---
>       int   )BZFILE* , 
49,51c49
< void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE* , 
---
> * , 
49,51c49
< void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE* , 
---
> void , 
49,52c49
< void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE* , 
<       void**  ,  
---
> void BZ2_bzReadGetUnused void**  ,  
50,52c50
<       int*    , 
<       BZFILE* , 
<       void**  ,  
---
>       **  ,  
50,52c50
<       int*    , 
<       BZFILE* , 
<       void**  ,  
---
>       int*  ,  
50,52c50
<       int*    , 
<       BZFILE* , 
<       void**  ,  
---
>       int*    ,  
51,52d50
<       BZFILE* , 
<       void**  ,  
51,53c51
<       BZFILE* , 
<       void**  ,  
<       int*    );
---
>       BZFILE*    );
51,53c51
<       BZFILE* , 
<       void**  ,  
<       int*    );
---
>       BZFILE* );
52,53c52
<       void**  ,  
<       int*    );
---
>       ;
52,55c52
<       void**  ,  
<       int*    );
< 
< BZ2_bzRead ( 
---
>       voidBZ2_bzRead ( 
52,55c52
<       void**  ,  
<       int*    );
< 
< BZ2_bzRead ( 
---
>       void*( 
52,56c52
<       void**  ,  
<       int*    );
< 
< BZ2_bzRead ( 
<       int*    , 
---
>       void**  int*    , 
53,56c53
<       int*    );
< 
< BZ2_bzRead ( 
<       int*    , 
---
>       *    , 
53,56c53
<       int*    );
< 
< BZ2_bzRead ( 
<       int*    , 
---
>       int, 
53,57c53
<       int*    );
< 
< BZ2_bzRead ( 
<       int*    , 
<       BZFILE* , 
---
>       int*    BZFILE* , 
53,57c53
<       int*    );
< 
< BZ2_bzRead ( 
<       int*    , 
<       BZFILE* , 
---
>       int*    )* , 
55,57c55
< BZ2_bzRead ( 
<       int*    , 
<       BZFILE* , 
---
> , 
55,58c55
< BZ2_bzRead ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
---
> BZ2_bzRead void*   , 
56,58c56
<       int*    , 
<       BZFILE* , 
<       void*   , 
---
>       *   , 
56,58c56
<       int*    , 
<       BZFILE* , 
<       void*   , 
---
>       int, 
56,59c56
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
---
>       int*    int     );
57,59c57
<       BZFILE* , 
<       void*   , 
<       int     );
---
>       );
57,59c57
<       BZFILE* , 
<       void*   , 
<       int     );
---
>       BZFILE;
57,61c57
<       BZFILE* , 
<       void*   , 
<       int     );
< 
< * BZ2_bzWriteOpen ( 
---
>       BZFILE* * BZ2_bzWriteOpen ( 
58,61c58
<       void*   , 
<       int     );
< 
< * BZ2_bzWriteOpen ( 
---
>       BZ2_bzWriteOpen ( 
58,61c58
<       void*   , 
<       int     );
< 
< * BZ2_bzWriteOpen ( 
---
>       void( 
58,62c58
<       void*   , 
<       int     );
< 
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
>       void*   int*  ,      
59,62c59
<       int     );
< 
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
>       *  ,      
59,62c59
<       int     );
< 
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
>       int     ,      
59,63c59
<       int     );
< 
< * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
---
>       int     )FILE* , 
61,63c61
< * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
---
> * , 
61,63c61
< * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
---
> * , 
61,64c61
< * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
---
> * BZ2_bzWriteOpen int   , 
62,64c62
<       int*  ,      
<       FILE* , 
<       int   , 
---
>       , 
62,65c62
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
---
>       intint   , 
62,65c62
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
---
>       int*  , 
63,65d62
<       FILE* , 
<       int   , 
<       int   , 
63,66c63
<       FILE* , 
<       int   , 
<       int   , 
<       int   );
---
>       FILE);
63,66c63
<       FILE* , 
<       int   , 
<       int   , 
<       int   );
---
>       FILE* ;
64,68c64
<       int   , 
<       int   , 
<       int   );
< 
< void BZ2_bzWrite ( 
---
>       void BZ2_bzWrite ( 
64,68c64
<       int   , 
<       int   , 
<       int   );
< 
< void BZ2_bzWrite ( 
---
>       int   BZ2_bzWrite ( 
65,68c65
<       int   , 
<       int   );
< 
< void BZ2_bzWrite ( 
---
>       ( 
65,69c65
<       int   , 
<       int   );
< 
< void BZ2_bzWrite ( 
<       int*    , 
---
>       int   int*    , 
66,69c66
<       int   );
< 
< void BZ2_bzWrite ( 
<       int*    , 
---
>       *    , 
66,69c66
<       int   );
< 
< void BZ2_bzWrite ( 
<       int*    , 
---
>       int   , 
66,70c66
<       int   );
< 
< void BZ2_bzWrite ( 
<       int*    , 
<       BZFILE* , 
---
>       int   )BZFILE* , 
68,70c68
< void BZ2_bzWrite ( 
<       int*    , 
<       BZFILE* , 
---
> * , 
68,70c68
< void BZ2_bzWrite ( 
<       int*    , 
<       BZFILE* , 
---
> void , 
68,71c68
< void BZ2_bzWrite ( 
<       int*    , 
<       BZFILE* , 
<       void*   , 
---
> void BZ2_bzWrite void*   , 
69,71c69
<       int*    , 
<       BZFILE* , 
<       void*   , 
---
>       *   , 
69,71c69
<       int*    , 
<       BZFILE* , 
<       void*   , 
---
>       int, 
69,72c69
<       int*    , 
<       BZFILE* , 
<       void*   , 
<       int     );
---
>       int*    int     );
70,72c70
<       BZFILE* , 
<       void*   , 
<       int     );
---
>       );
70,72c70
<       BZFILE* , 
<       void*   , 
<       int     );
---
>       BZFILE;
70,74c70
<       BZFILE* , 
<       void*   , 
<       int     );
< 
< void BZ2_bzWriteClose ( 
---
>       BZFILE* void BZ2_bzWriteClose ( 
71,74c71
<       void*   , 
<       int     );
< 
< void BZ2_bzWriteClose ( 
---
>       BZ2_bzWriteClose ( 
71,74c71
<       void*   , 
<       int     );
< 
< void BZ2_bzWriteClose ( 
---
>       void( 
71,75c71
<       void*   , 
<       int     );
< 
< void BZ2_bzWriteClose ( 
<       int*          , 
---
>       void*   int*          , 
72,75c72
<       int     );
< 
< void BZ2_bzWriteClose ( 
<       int*          , 
---
>       *          , 
72,75c72
<       int     );
< 
< void BZ2_bzWriteClose ( 
<       int*          , 
---
>       int     , 
72,76c72
<       int     );
< 
< void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE*       , 
---
>       int     )BZFILE*       , 
74,76c74
< void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE*       , 
---
> *       , 
74,76c74
< void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE*       , 
---
> void , 
74,77c74
< void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
---
> void BZ2_bzWriteClose int           , 
75,77c75
<       int*          , 
<       BZFILE*       , 
<       int           , 
---
>       , 
75,78c75
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
---
>       intunsigned * , 
75,78c75
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
---
>       int*          * , 
76,78c76
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
---
>       , 
76,79c76
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
---
>       BZFILEunsigned * );
76,79c76
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
---
>       BZFILE*       * );
77,79c77
<       int           , 
<       unsigned * , 
<       unsigned * );
---
>       );
77,79c77
<       int           , 
<       unsigned * , 
<       unsigned * );
---
>       int           ;
78,81c78
<       unsigned * , 
<       unsigned * );
< 
< void BZ2_bzWriteClose64 ( 
---
>       void BZ2_bzWriteClose64 ( 
78,81c78
<       unsigned * , 
<       unsigned * );
< 
< void BZ2_bzWriteClose64 ( 
---
>       unsigned BZ2_bzWriteClose64 ( 
78,81c78
<       unsigned * , 
<       unsigned * );
< 
< void BZ2_bzWriteClose64 ( 
---
>       unsigned * ( 
79,81d78
<       unsigned * );
< 
< void BZ2_bzWriteClose64 ( 
79,82c79
<       unsigned * );
< 
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       unsigned *          , 
79,82c79
<       unsigned * );
< 
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>       unsigned * , 
79,83c79
<       unsigned * );
< 
< void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE*       , 
---
>       unsigned * )BZFILE*       , 
81,83c81
< void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE*       , 
---
> *       , 
81,83c81
< void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE*       , 
---
> void , 
81,84c81
< void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE*       , 
<       int           , 
---
> void BZ2_bzWriteClose64 int           , 
82,84c82
<       int*          , 
<       BZFILE*       , 
<       int           , 
---
>       , 
82,85c82
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
---
>       intunsigned * , 
82,85c82
<       int*          , 
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
---
>       int*          * , 
83,85c83
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
---
>       , 
83,86c83
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       BZFILEunsigned * , 
83,86c83
<       BZFILE*       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       BZFILE*       * , 
84,86c84
<       int           , 
<       unsigned * , 
<       unsigned * , 
---
>       , 
84,87c84
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       int           unsigned * , 
85,87c85
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       * , 
85,87c85
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
---
>       unsigned , 
85,88c85
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
---
>       unsigned * unsigned * );
86,88c86
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
---
>       * );
86,88c86
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
---
>       unsigned );
86,88c86
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
---
>       unsigned * ;
87,93c87
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
---
>       BZ2_bzBuffToBuffCompress ( 
87,93c87
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
---
>       unsigned ( 
87,94c87
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       unsigned * char*         , 
88,94c88
<       unsigned * );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       *         , 
88,94c88
<       unsigned * );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>       unsigned , 
88,95c88
<       unsigned * );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned * unsigned * ,
88,95c88
<       unsigned * );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
>       unsigned * )* ,
93,95c93
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
---
> ,
93,96c93
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
> BZ2_bzBuffToBuffCompress char*         , 
94,96c94
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       *         , 
94,96c94
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       char, 
94,97c94
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
>       char*         unsigned ,
95,97c95
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
>       ,
95,98c95
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
---
>       unsigned int           , 
95,98c95
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
---
>       unsigned * , 
96,98d95
<       char*         , 
<       unsigned ,
<       int           , 
96,99c96
<       char*         , 
<       unsigned ,
<       int           , 
<       int           , 
---
>       char, 
96,100c96
<       char*         , 
<       unsigned ,
<       int           , 
<       int           , 
<       int           );
---
>       char*         int           );
97,100c97
<       unsigned ,
<       int           , 
<       int           , 
<       int           );
---
>       );
97,100c97
<       unsigned ,
<       int           , 
<       int           , 
<       int           );
---
>       unsigned ;
98,102c98
<       int           , 
<       int           , 
<       int           );
< 
< BZ2_bzBuffToBuffDecompress ( 
---
>       BZ2_bzBuffToBuffDecompress ( 
98,102c98
<       int           , 
<       int           , 
<       int           );
< 
< BZ2_bzBuffToBuffDecompress ( 
---
>       int           ( 
99,102d98
<       int           , 
<       int           );
< 
< BZ2_bzBuffToBuffDecompress ( 
99,103c99
<       int           , 
<       int           );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       int           *         , 
100,103c100
<       int           );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>       , 
100,104c100
<       int           );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
>       int           unsigned * ,
100,104c100
<       int           );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
>       int           )* ,
102,104c102
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
---
> ,
102,105c102
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
---
> BZ2_bzBuffToBuffDecompress char*         , 
103,105c103
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       *         , 
103,105c103
<       char*         , 
<       unsigned * ,
<       char*         , 
---
>       char, 
103,106c103
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
>       char*         unsigned ,
104,106c104
<       unsigned * ,
<       char*         , 
<       unsigned ,
---
>       ,
104,107c104
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
---
>       unsigned int           , 
104,107c104
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
---
>       unsigned * , 
105,107d104
<       char*         , 
<       unsigned ,
<       int           , 
105,108c105
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
>       char);
105,108c105
<       char*         , 
<       unsigned ,
<       int           , 
<       int           );
---
>       char*         ;
106,110c106
<       unsigned ,
<       int           , 
<       int           );
< 
< #define _BZLIB_PRIVATE_H
---
>       #define _BZLIB_PRIVATE_H
106,110c106
<       unsigned ,
<       int           , 
<       int           );
< 
< #define _BZLIB_PRIVATE_H
---
>       unsigned define _BZLIB_PRIVATE_H
107,110c107
<       int           , 
<       int           );
< 
< #define _BZLIB_PRIVATE_H
---
>       _BZLIB_PRIVATE_H
107,112c107
<       int           , 
<       int           );
< 
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  char            ;
---
>       int           #define BZ_VERSION  char            ;
108,112c108
<       int           );
< 
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  char            ;
---
>       define BZ_VERSION  char            ;
108,112c108
<       int           );
< 
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  char            ;
---
>       int           BZ_VERSION  char            ;
108,112c108
<       int           );
< 
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  char            ;
---
>       int           )char            ;
110,112c110
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  char            ;
---
> ;
110,113c110
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  char            ;
< typedef Int32;
---
> #typedef Int32;
110,113c110
< #define _BZLIB_PRIVATE_H
< 
< #define BZ_VERSION  char            ;
< typedef Int32;
---
> #define Int32;
(97.7 %, 4647 bytes)
110,115c110
< ;
< typedef Int32;
< struct {
<       
<       }
<    BZ2_bzCompressInit 
---
> BZ2_bzCompressInit 
111,116c111
< typedef Int32;
< struct {
<       
<       }
<    BZ2_bzCompressInit 
<                     ( )
---
> ( )
111,116c111
< typedef Int32;
< struct {
<       
<       }
<    BZ2_bzCompressInit 
<                     ( )
---
> typedef )
111,117c111
< typedef Int32;
< struct {
<       
<       }
<    BZ2_bzCompressInit 
<                     ( )
< {
---
> typedef Int32{
112,118c112
< struct {
<       
<       }
<    BZ2_bzCompressInit 
<                     ( )
< {
<    }
---
> }
112,130c112
< struct {
<       
<       }
<    BZ2_bzCompressInit 
<                     ( )
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
---
> struct BZ2_bzCompress ( )
114,130c114
<       }
<    BZ2_bzCompressInit 
<                     ( )
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
---
>       ( )
115,130c115
<    BZ2_bzCompressInit 
<                     ( )
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
---
>    )
116,131c116
<                     ( )
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
---
>                     {
116,133c116
<                     ( )
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<    }
---
>                     ( }
117,140d116
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<    }
< 
< 
< 
< 
< 
< 
< 
118,142c118
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<    }
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>    ( bz_stream* strm, 
130,142c130
< BZ2_bzCompress ( )
< {
<    
<    }
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> bz_stream* strm, 
130,142c130
< BZ2_bzCompress ( )
< {
<    
<    }
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> BZ2_bzCompress * strm, 
130,142c130
< BZ2_bzCompress ( )
< {
<    
<    }
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> BZ2_bzCompress ( strm, 
131,142c131
< {
<    
<    }
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
> , 
133,143c133
<    }
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>    int        verbosity,
141,143c141
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
> verbosity,
142,143c142
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ,
142,144c142
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( int        small )
142,144c142
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_streamsmall )
142,144c142
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
---
>                      ( bz_stream* )
142,145c142
<                      ( bz_stream* strm, 
<                        int        verbosity,
<                        int        small )
< {
---
>                      ( bz_stream* strm{
143,146c143
<                        int        verbosity,
<                        int        small )
< {
<    }
---
>                        }
143,153c143
<                        int        verbosity,
<                        int        small )
< {
<    }
< 
< 
< 
< 
< 
< 
< typedef 
---
>                        int        typedef 
143,154c143
<                        int        verbosity,
<                        int        small )
< {
<    }
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
---
>                        int        verbositystruct {
144,154c144
<                        int        small )
< {
<    }
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
---
>                        {
144,155c144
<                        int        small )
< {
<    }
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>                        int        FILE*     handle;
144,155c144
<                        int        small )
< {
<    }
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>                        int        small *     handle;
145,155c145
< {
<    }
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
> handle;
146,155c146
<    }
< 
< 
< 
< 
< 
< 
< typedef 
<    struct {
<       FILE*     handle;
---
>    ;
153,156c153
< typedef 
<    struct {
<       FILE*     handle;
<       }
---
> }
154,156d153
<    struct {
<       FILE*     handle;
<       }
154,157c154
<    struct {
<       FILE*     handle;
<       }
<    bzFile;
---
>    struct ;
155,165c155
<       FILE*     handle;
<       }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
---
>       * BZ2_bzWriteOpen 
155,165c155
<       FILE*     handle;
<       }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
---
>       FILEBZ2_bzWriteOpen 
155,166c155
<       FILE*     handle;
<       }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       FILE*     ( int*  bzerror,      
155,166c155
<       FILE*     handle;
<       }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       FILE*     handleint*  bzerror,      
156,166c156
<       }
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>       *  bzerror,      
157,166c157
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>    bzerror,      
157,166c157
<    bzFile;
< 
< 
< 
< 
< 
< 
< 
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>    bzFile,      
165,167c165
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> FILE* f, 
165,167c165
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
---
> * * f, 
166,167c166
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     f, 
166,167c166
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( , 
166,168c166
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( intint   blockSize100k, 
166,168c166
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  blockSize100k, 
166,168c166
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                     ( int*  bzerror, 
167,168d166
<                       FILE* f, 
<                       int   blockSize100k, 
167,169c167
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILEverbosity,
167,169c167
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       FILE* ,
167,170c167
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       FILE* fint   workFactor )
168,170c168
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       workFactor )
168,170c168
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   )
168,171c168
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
---
>                       int   blockSize100k{
169,172c169
<                       int   verbosity,
<                       int   workFactor )
< {
<    }
---
>                       }
169,177c169
<                       int   verbosity,
<                       int   workFactor )
< {
<    }
< 
< 
< 
< 
< void BZ2_bzWrite
---
>                       int   void BZ2_bzWrite
169,177c169
<                       int   verbosity,
<                       int   workFactor )
< {
<    }
< 
< 
< 
< 
< void BZ2_bzWrite
---
>                       int   verbosityBZ2_bzWrite
170,178c170
<                       int   workFactor )
< {
<    }
< 
< 
< 
< 
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
>                       ( int*    bzerror, 
170,178c170
<                       int   workFactor )
< {
<    }
< 
< 
< 
< 
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   int*    bzerror, 
170,178c170
<                       int   workFactor )
< {
<    }
< 
< 
< 
< 
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
>                       int   workFactor *    bzerror, 
171,178c171
< {
<    }
< 
< 
< 
< 
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
> bzerror, 
172,178c172
<    }
< 
< 
< 
< 
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
>    , 
177,179c177
< void BZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> BZFILE* b, 
177,179c177
< void BZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE* b, 
---
> void * b, 
178,179c178
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              b, 
178,179c178
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( , 
178,180c178
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( intvoid*   buf, 
178,180c178
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    *   buf, 
178,180c178
<              ( int*    bzerror, 
<                BZFILE* b, 
<                void*   buf, 
---
>              ( int*    bzerrorbuf, 
179,180c179
<                BZFILE* b, 
<                void*   buf, 
---
>                , 
179,181c179
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILEint     len )
179,181c179
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* len )
179,181c179
<                BZFILE* b, 
<                void*   buf, 
<                int     len )
---
>                BZFILE* b)
180,182c180
<                void*   buf, 
<                int     len )
< {
---
>                {
180,183c180
<                void*   buf, 
<                int     len )
< {
<    Int32   ;
---
>                voidInt32   ;
180,183c180
<                void*   buf, 
<                int     len )
< {
<    Int32   ;
---
>                void*   ;
180,184c180
<                void*   buf, 
<                int     len )
< {
<    Int32   ;
<    bzFile* bzf = bzf->handle
---
>                void*   bufbzFile* bzf = bzf->handle
181,184c181
<                int     len )
< {
<    Int32   ;
<    bzFile* bzf = bzf->handle
---
>                * bzf = bzf->handle
181,184c181
<                int     len )
< {
<    Int32   ;
<    bzFile* bzf = bzf->handle
---
>                int     bzf = bzf->handle
181,184c181
<                int     len )
< {
<    Int32   ;
<    bzFile* bzf = bzf->handle
---
>                int     len = bzf->handle
182,184c182
< {
<    Int32   ;
<    bzFile* bzf = bzf->handle
---
> bzf->handle
183,184c183
<    Int32   ;
<    bzFile* bzf = bzf->handle
---
>    ->handle
183,184c183
<    Int32   ;
<    bzFile* bzf = bzf->handle
---
>    Int32   handle
184,185c184
<    bzFile* bzf = bzf->handle
<       ;
---
>    ;
(97.7 %, 4623 bytes)
183,193c183
<    Int32   handle
<       ;
< 
<    {
<       }
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>    Int32   ( int*          bzerror, 
184,193c184
<       ;
< 
<    {
<       }
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>       int*          bzerror, 
186,193c186
<    {
<       }
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>    *          bzerror, 
187,193c187
<       }
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>       bzerror, 
188,193c188
< }
< 
< 
< 
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> , 
192,194c192
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> BZFILE*       b, 
192,194c192
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void *       b, 
193,194c193
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   b, 
193,194c193
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( , 
193,195c193
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( intint           abandon,
193,195c193
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          abandon,
193,195c193
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerror,
194,195d193
<                     BZFILE*       b, 
<                     int           abandon,
194,196c194
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     BZFILE* nbytes_in,
194,196c194
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     BZFILE*       nbytes_in,
194,196c194
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     BZFILE*       b,
195,196d194
<                     int           abandon,
<                     unsigned * nbytes_in,
195,197c195
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     int           * nbytes_out )
195,197c195
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     int           abandonnbytes_out )
196,197c196
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     )
196,198c196
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
---
>                     unsigned {
196,199c196
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<     bzerror, b, abandon, 
---
>                     unsigned * bzerror, b, abandon, 
196,199c196
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<     bzerror, b, abandon, 
---
>                     unsigned * nbytes_in, b, abandon, 
197,199c197
<                     unsigned * nbytes_out )
< {
<     bzerror, b, abandon, 
---
>                     b, abandon, 
197,199c197
<                     unsigned * nbytes_out )
< {
<     bzerror, b, abandon, 
---
>                     unsigned , abandon, 
197,199c197
<                     unsigned * nbytes_out )
< {
<     bzerror, b, abandon, 
---
>                     unsigned * abandon, 
197,199c197
<                     unsigned * nbytes_out )
< {
<     bzerror, b, abandon, 
---
>                     unsigned * nbytes_out , 
198,200c198
< {
<     bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
> nbytes_in, NULL, nbytes_out, NULL ;
199,200c199
<     bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>     , NULL, nbytes_out, NULL ;
199,200c199
<     bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>     bzerrorNULL, nbytes_out, NULL ;
199,200c199
<     bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>     bzerror, , nbytes_out, NULL ;
199,200c199
<     bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>     bzerror, bnbytes_out, NULL ;
199,200c199
<     bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>     bzerror, b, , NULL ;
199,200c199
<     bzerror, b, abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>     bzerror, b, abandonNULL ;
200c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>                         ;
200,201c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
< }
---
>                         nbytes_in}
200,204c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
< }
< 
< 
< void BZ2_bzWriteClose64
---
>                         nbytes_in, void BZ2_bzWriteClose64
200,204c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
< }
< 
< 
< void BZ2_bzWriteClose64
---
>                         nbytes_in, NULLBZ2_bzWriteClose64
200,205c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
< }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, ( int*          bzerror, 
200,205c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
< }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, nbytes_outint*          bzerror, 
200,205c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
< }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, nbytes_out, *          bzerror, 
200,205c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
< }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>                         nbytes_in, NULL, nbytes_out, NULL bzerror, 
201,205c201
< }
< 
< 
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> , 
204,206c204
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> BZFILE*       b, 
204,206c204
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
> void *       b, 
205,206c205
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   b, 
205,206c205
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( , 
205,207c205
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( intint           abandon,
205,207c205
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          abandon,
205,207c205
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
<                     int           abandon,
---
>                   ( int*          bzerror,
206,207d205
<                     BZFILE*       b, 
<                     int           abandon,
206,208c206
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     BZFILE* nbytes_in_lo32,
206,208c206
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     BZFILE*       nbytes_in_lo32,
206,208c206
<                     BZFILE*       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     BZFILE*       b,
207,208d206
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
207,209c207
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     int           * nbytes_in_hi32,
207,209c207
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     int           abandonnbytes_in_hi32,
208,209c208
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     ,
208,210c208
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned unsigned * nbytes_out_lo32,
208,210c208
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * * nbytes_out_lo32,
208,210c208
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_in_lo32nbytes_out_lo32,
209,210c209
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     ,
209,211c209
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned unsigned * nbytes_out_hi32 )
209,211c209
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * * nbytes_out_hi32 )
209,211c209
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_in_hi32nbytes_out_hi32 )
210,211c210
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     )
210,212c210
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned {
210,214c210
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    bzFile bzf ;
---
>                     unsigned * bzFile bzf ;
210,214c210
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    bzFile bzf ;
---
>                     unsigned * nbytes_out_lo32bzf ;
211,214c211
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    bzFile bzf ;
---
>                     ;
211,215c211
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    bzFile bzf ;
<    NULL ;
---
>                     unsigned NULL ;
211,215c211
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    bzFile bzf ;
<    NULL ;
---
>                     unsigned * ;
211,216c211
<                     unsigned * nbytes_out_hi32 )
< {
<    
<    bzFile bzf ;
<    NULL ;
<    }
---
>                     unsigned * nbytes_out_hi32 }
212,219d211
< {
<    
<    bzFile bzf ;
<    NULL ;
<    }
< 
< 
< 
214,220c214
<    bzFile bzf ;
<    NULL ;
<    }
< 
< 
< 
< * BZ2_bzReadOpen 
---
>    BZ2_bzReadOpen 
214,221c214
<    bzFile bzf ;
<    NULL ;
<    }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>    bzFile ( int*  bzerror, 
214,221c214
<    bzFile bzf ;
<    NULL ;
<    }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>    bzFile bzf int*  bzerror, 
215,221c215
<    NULL ;
<    }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>    *  bzerror, 
215,221c215
<    NULL ;
<    }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>    NULL bzerror, 
216,221c216
<    }
< 
< 
< 
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>    , 
220,222c220
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> FILE* f, 
220,222c220
< * BZ2_bzReadOpen 
<                    ( int*  bzerror, 
<                      FILE* f, 
---
> * * f, 
221,222c221
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    f, 
221,222c221
<                    ( int*  bzerror, 
<                      FILE* f, 
---
>                    ( , 
221,223c221
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( intint   verbosity,
221,223c221
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  verbosity,
221,223c221
<                    ( int*  bzerror, 
<                      FILE* f, 
<                      int   verbosity,
---
>                    ( int*  bzerror,
222,223d221
<                      FILE* f, 
<                      int   verbosity,
222,224c222
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILEsmall,
222,224c222
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
---
>                      FILE* ,
222,225c222
<                      FILE* f, 
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      FILE* fvoid* unused,
223,225c223
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      * unused,
223,225c223
<                      int   verbosity,
<                      int   small,
<                      void* unused,
---
>                      int   unused,
224,225d223
<                      int   small,
<                      void* unused,
224,225d223
<                      int   small,
<                      void* unused,
224,225d223
<                      int   small,
<                      void* unused,
224,226c224
<                      int   small,
<                      void* unused,
<                      int   nUnused )
---
>                      int   small)
225,227c225
<                      void* unused,
<                      int   nUnused )
< {
---
>                      {
225,228c225
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = f ||
---
>                      voidbzFile* bzf = f ||
225,228c225
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = f ||
---
>                      void* * bzf = f ||
225,228c225
<                      void* unused,
<                      int   nUnused )
< {
<    bzFile* bzf = f ||
---
>                      void* unusedbzf = f ||
226,228c226
<                      int   nUnused )
< {
<    bzFile* bzf = f ||
---
>                      = f ||
226,228c226
<                      int   nUnused )
< {
<    bzFile* bzf = f ||
---
>                      int   f ||
226,228c226
<                      int   nUnused )
< {
<    bzFile* bzf = f ||
---
>                      int   nUnused ||
227,229c227
< {
<    bzFile* bzf = f ||
<        BZ_MAX_UNUSED
---
> BZ_MAX_UNUSED
228,230c228
<    bzFile* bzf = f ||
<        BZ_MAX_UNUSED
<       ;   
---
>    ;   
228,231c228
<    bzFile* bzf = f ||
<        BZ_MAX_UNUSED
<       ;   
< }
---
>    bzFile}
228,235c228
<    bzFile* bzf = f ||
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
< BZ2_bzReadClose ( )
---
>    bzFile* BZ2_bzReadClose ( )
228,235c228
<    bzFile* bzf = f ||
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
< BZ2_bzReadClose ( )
---
>    bzFile* bzf ( )
228,235c228
<    bzFile* bzf = f ||
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
< BZ2_bzReadClose ( )
---
>    bzFile* bzf = )
228,236c228
<    bzFile* bzf = f ||
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
< BZ2_bzReadClose ( )
< {
---
>    bzFile* bzf = f {
229,237c229
<        BZ_MAX_UNUSED
<       ;   
< }
< 
< 
< 
< BZ2_bzReadClose ( )
< {
<    bzFile bzf ;
---
>        bzFile bzf ;
230,237c230
<       ;   
< }
< 
< 
< 
< BZ2_bzReadClose ( )
< {
<    bzFile bzf ;
---
>       bzf ;
231,237c231
< }
< 
< 
< 
< BZ2_bzReadClose ( )
< {
<    bzFile bzf ;
---
> ;
(97.8 %, 4577 bytes)
228,235c228
<    ;   
< }
< 
< 
< 
< BZ2_bzReadClose ( )
< {
<    bzFile bzf ;
---
>    bzf ;
229,235c229
< }
< 
< 
< 
< BZ2_bzReadClose ( )
< {
<    bzFile bzf ;
---
> ;
233,235d232
< BZ2_bzReadClose ( )
< {
<    bzFile bzf ;
233,240c233
< BZ2_bzReadClose ( )
< {
<    bzFile bzf ;
< }
< 
< 
< 
< BZ2_bzRead 
---
> BZ2_bzReadClose BZ2_bzRead 
233,241c233
< BZ2_bzReadClose ( )
< {
<    bzFile bzf ;
< }
< 
< 
< 
< BZ2_bzRead 
<            ( int*    bzerror, 
---
> BZ2_bzReadClose ( ( int*    bzerror, 
234,241c234
< {
<    bzFile bzf ;
< }
< 
< 
< 
< BZ2_bzRead 
<            ( int*    bzerror, 
---
> int*    bzerror, 
235,241c235
<    bzFile bzf ;
< }
< 
< 
< 
< BZ2_bzRead 
<            ( int*    bzerror, 
---
>    *    bzerror, 
235,241c235
<    bzFile bzf ;
< }
< 
< 
< 
< BZ2_bzRead 
<            ( int*    bzerror, 
---
>    bzFile bzerror, 
235,241c235
<    bzFile bzf ;
< }
< 
< 
< 
< BZ2_bzRead 
<            ( int*    bzerror, 
---
>    bzFile bzf , 
236,242c236
< }
< 
< 
< 
< BZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> BZFILE* b, 
(97.8 %, 4536 bytes)
229,235c229
< ;
< }
< 
< 
< 
< BZ2_bzRead 
<            ( int*    bzerror, 
---
> , 
230,236c230
< }
< 
< 
< 
< BZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> BZFILE* b, 
234,236c234
< BZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE* b, 
---
> * b, 
235,236c235
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            b, 
235,236c235
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( , 
235,237c235
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( intvoid*   buf, 
235,237c235
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    *   buf, 
235,237c235
<            ( int*    bzerror, 
<              BZFILE* b, 
<              void*   buf, 
---
>            ( int*    bzerrorbuf, 
236,237c236
<              BZFILE* b, 
<              void*   buf, 
---
>              , 
236,238c236
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILEint     len )
236,238c236
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* len )
236,238c236
<              BZFILE* b, 
<              void*   buf, 
<              int     len )
---
>              BZFILE* b)
237,239c237
<              void*   buf, 
<              int     len )
< {
---
>              {
237,241c237
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile bzf ;
---
>              voidbzFile bzf ;
237,241c237
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile bzf ;
---
>              void*   bzf ;
237,241c237
<              void*   buf, 
<              int     len )
< {
<    
<    bzFile bzf ;
---
>              void*   buf;
238,243c238
<              int     len )
< {
<    
<    bzFile bzf ;
< 
<    }
---
>              }
238,247c238
<              int     len )
< {
<    
<    bzFile bzf ;
< 
<    }
< 
< 
< 
< void BZ2_bzReadGetUnused 
---
>              int     void BZ2_bzReadGetUnused 
238,247c238
<              int     len )
< {
<    
<    bzFile bzf ;
< 
<    }
< 
< 
< 
< void BZ2_bzReadGetUnused 
---
>              int     len BZ2_bzReadGetUnused 
239,248c239
< {
<    
<    bzFile bzf ;
< 
<    }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> ( int*    bzerror, 
241,248c241
<    bzFile bzf ;
< 
<    }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>    int*    bzerror, 
241,248c241
<    bzFile bzf ;
< 
<    }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>    bzFile *    bzerror, 
241,248c241
<    bzFile bzf ;
< 
<    }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>    bzFile bzf bzerror, 
243,248c243
<    }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>    , 
247,249c247
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> BZFILE* b, 
247,249c247
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
> void * b, 
248,249c248
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      b, 
248,249c248
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( , 
248,250c248
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( intvoid**  unused, 
248,250c248
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    **  unused, 
248,250c248
<                      ( int*    bzerror, 
<                        BZFILE* b, 
<                        void**  unused, 
---
>                      ( int*    bzerror*  unused, 
249,250c249
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        unused, 
249,250c249
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE, 
249,251c249
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* int*    nUnused )
249,251c249
<                        BZFILE* b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                        BZFILE* b*    nUnused )
250,251c250
<                        void**  unused, 
<                        int*    nUnused )
---
>                        nUnused )
250,251c250
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void)
250,252c250
<                        void**  unused, 
<                        int*    nUnused )
< {
---
>                        void*{
250,253c250
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile next_in;
---
>                        void**  bzFile next_in;
250,253c250
<                        void**  unused, 
<                        int*    nUnused )
< {
<    bzFile next_in;
---
>                        void**  unusednext_in;
251,253c251
<                        int*    nUnused )
< {
<    bzFile next_in;
---
>                        ;
251,254c251
<                        int*    nUnused )
< {
<    bzFile next_in;
< }
---
>                        int}
251,262c251
<                        int*    nUnused )
< {
<    bzFile next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress 
---
>                        int*    BZ2_bzBuffToBuffCompress 
251,263c251
<                        int*    nUnused )
< {
<    bzFile next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>                        int*    nUnused ( char*         dest, 
252,263c252
< {
<    bzFile next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
> char*         dest, 
253,263c253
<    bzFile next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>    *         dest, 
253,263c253
<    bzFile next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>    bzFile dest, 
253,263c253
<    bzFile next_in;
< }
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>    bzFile next_in, 
254,264c254
< }
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
---
> unsigned * destLen,
262,264c262
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
---
> * destLen,
263,264c263
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          destLen,
263,264c263
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( ,
263,265c263
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
---
>                          ( charchar*         source, 
263,265c263
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
---
>                          ( char*         *         source, 
263,265c263
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
---
>                          ( char*         destsource, 
264,265c264
<                            unsigned * destLen,
<                            char*         source, 
---
>                            , 
264,266c264
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            unsigned unsigned sourceLen,
264,266c264
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            unsigned * sourceLen,
265,266d264
<                            char*         source, 
<                            unsigned sourceLen,
265,266d264
<                            char*         source, 
<                            unsigned sourceLen,
265,267c265
<                            char*         source, 
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            charblockSize100k, 
265,267c265
<                            char*         source, 
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            char*         , 
265,268c265
<                            char*         source, 
<                            unsigned sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            char*         sourceint           verbosity, 
266,268c266
<                            unsigned sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            verbosity, 
266,268c266
<                            unsigned sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            unsigned , 
266,269c266
<                            unsigned sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            unsigned sourceLenint           workFactor )
267,269c267
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            workFactor )
267,269c267
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           )
267,270c267
<                            int           blockSize100k, 
<                            int           verbosity, 
<                            int           workFactor )
< {
---
>                            int           blockSize100k{
268,271c268
<                            int           verbosity, 
<                            int           workFactor )
< {
<    }
---
>                            }
268,275c268
<                            int           verbosity, 
<                            int           workFactor )
< {
<    }
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
---
>                            int           BZ2_bzBuffToBuffDecompress 
268,276c268
<                            int           verbosity, 
<                            int           workFactor )
< {
<    }
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           verbosity( char*         dest, 
269,276c269
<                            int           workFactor )
< {
<    }
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            char*         dest, 
269,276c269
<                            int           workFactor )
< {
<    }
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           *         dest, 
269,276c269
<                            int           workFactor )
< {
<    }
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>                            int           workFactor dest, 
270,276c270
< {
<    }
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> , 
271,277c271
<    }
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>    unsigned * destLen,
275,277c275
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
---
> * destLen,
276,277c276
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            destLen,
276,277c276
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( ,
276,278c276
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
>                            ( charchar*         source, 
276,278c276
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
>                            ( char*         *         source, 
276,278c276
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
---
>                            ( char*         destsource, 
277,278c277
<                              unsigned * destLen,
<                              char*         source, 
---
>                              , 
277,279c277
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              unsigned unsigned sourceLen,
277,279c277
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              unsigned * sourceLen,
278,279d277
<                              char*         source, 
<                              unsigned sourceLen,
278,279d277
<                              char*         source, 
<                              unsigned sourceLen,
278,280c278
<                              char*         source, 
<                              unsigned sourceLen,
<                              int           small,
---
>                              charsmall,
278,280c278
<                              char*         source, 
<                              unsigned sourceLen,
<                              int           small,
---
>                              char*         ,
278,281c278
<                              char*         source, 
<                              unsigned sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              char*         sourceint           verbosity )
279,281c279
<                              unsigned sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              verbosity )
279,281c279
<                              unsigned sourceLen,
<                              int           small,
<                              int           verbosity )
---
>                              unsigned )
279,282c279
<                              unsigned sourceLen,
<                              int           small,
<                              int           verbosity )
< {
---
>                              unsigned sourceLen{
280,283c280
<                              int           small,
<                              int           verbosity )
< {
<    }
---
>                              }
280,288c280
<                              int           small,
<                              int           verbosity )
< {
<    }
< 
< 
< 
< 
< BZ2_bzopen
---
>                              int           BZ2_bzopen
280,289c280
<                              int           small,
<                              int           verbosity )
< {
<    }
< 
< 
< 
< 
< BZ2_bzopen
<                ( )
---
>                              int           small( )
281,289c281
<                              int           verbosity )
< {
<    }
< 
< 
< 
< 
< BZ2_bzopen
<                ( )
---
>                              )
281,290c281
<                              int           verbosity )
< {
<    }
< 
< 
< 
< 
< BZ2_bzopen
<                ( )
< {
---
>                              int           {
281,291c281
<                              int           verbosity )
< {
<    }
< 
< 
< 
< 
< BZ2_bzopen
<                ( )
< {
<    }
---
>                              int           verbosity }
282,294d281
< {
<    }
< 
< 
< 
< 
< BZ2_bzopen
<                ( )
< {
<    }
< 
< 
< 
283,296c283
<    }
< 
< 
< 
< 
< BZ2_bzopen
<                ( )
< {
<    }
< 
< 
< 
< BZ2_bzdopen
<                ( )
---
>    ( )
288,296c288
< BZ2_bzopen
<                ( )
< {
<    }
< 
< 
< 
< BZ2_bzdopen
<                ( )
---
> )
289,297c289
<                ( )
< {
<    }
< 
< 
< 
< BZ2_bzdopen
<                ( )
< {
---
>                {
289,298c289
<                ( )
< {
<    }
< 
< 
< 
< BZ2_bzdopen
<                ( )
< {
<    int bzerr, nread;
---
>                ( int bzerr, nread;
290,298c290
< {
<    }
< 
< 
< 
< BZ2_bzdopen
<                ( )
< {
<    int bzerr, nread;
---
> bzerr, nread;
291,298c291
<    }
< 
< 
< 
< BZ2_bzdopen
<                ( )
< {
<    int bzerr, nread;
---
>    , nread;
295,298c295
< BZ2_bzdopen
<                ( )
< {
<    int bzerr, nread;
---
> nread;
296,298c296
<                ( )
< {
<    int bzerr, nread;
---
>                ;
296,299c296
<                ( )
< {
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>                ( if (bzerr == BZ_STREAM_END) {
297,299c297
< {
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
> (bzerr == BZ_STREAM_END) {
298,299c298
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    bzerr == BZ_STREAM_END) {
298,299c298
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int == BZ_STREAM_END) {
298,299c298
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerrBZ_STREAM_END) {
298,299c298
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr, ) {
298,299c298
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr, nread{
299,300c299
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    }
299,301c299
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if }
299,305c299
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
< BZ2_bzwrite (BZFILEb)
---
>    if (BZ2_bzwrite (BZFILEb)
299,305c299
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
< BZ2_bzwrite (BZFILEb)
---
>    if (bzerr (BZFILEb)
299,305c299
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
< BZ2_bzwrite (BZFILEb)
---
>    if (bzerr == BZFILEb)
299,305c299
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
< 
< 
< 
< BZ2_bzwrite (BZFILEb)
---
>    if (bzerr == BZ_STREAM_END)
300,306d299
<       }
< }
< 
< 
< 
< BZ2_bzwrite (BZFILEb)
< {
300,307c300
<       }
< }
< 
< 
< 
< BZ2_bzwrite (BZFILEb)
< {
<    {
---
>       {
302,308d301
< 
< 
< 
< BZ2_bzwrite (BZFILEb)
< {
<    {
<       }
305,308d304
< BZ2_bzwrite (BZFILEb)
< {
<    {
<       }
305,314c305
< BZ2_bzwrite (BZFILEb)
< {
<    {
<       }
< }
< 
< 
< 
< 
< bzerrorstrings[] = {
---
> BZ2_bzwrite bzerrorstrings[] = {
305,314c305
< BZ2_bzwrite (BZFILEb)
< {
<    {
<       }
< }
< 
< 
< 
< 
< bzerrorstrings[] = {
---
> BZ2_bzwrite ([] = {
305,314c305
< BZ2_bzwrite (BZFILEb)
< {
<    {
<       }
< }
< 
< 
< 
< 
< bzerrorstrings[] = {
---
> BZ2_bzwrite (BZFILEb] = {
306,314c306
< {
<    {
<       }
< }
< 
< 
< 
< 
< bzerrorstrings[] = {
---
> = {
308,314d307
<       }
< }
< 
< 
< 
< 
< bzerrorstrings[] = {
308,315c308
<       }
< }
< 
< 
< 
< 
< bzerrorstrings[] = {
<        };
---
>       };
309,315c309
< }
< 
< 
< 
< 
< bzerrorstrings[] = {
<        };
---
> ;
314,317d313
< bzerrorstrings[] = {
<        };
< 
< 
314,318c314
< bzerrorstrings[] = {
<        };
< 
< 
< BZ2_bzerror ()
---
> bzerrorstrings()
(97.8 %, 4503 bytes)
314,345d313
< BZ2_bzerror ()
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
314,345c314
< BZ2_bzerror ()
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
---
> BZ2_bzerror 
\ No newline at end of file
314,345c314
< BZ2_bzerror ()
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
---
> BZ2_bzerror (
\ No newline at end of file
315,345d314
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
316,345c316
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
<  
\ No newline at end of file
---
>    
\ No newline at end of file
(97.8 %, 4452 bytes)
===< pass_clex :: rm-tok-pattern-4 >===
9c9
< #2
---
> 2
9c9
< #2
---
> 
9c9
< #2
---
> 2
11c11
< #define BZ_OK                3
---
> define BZ_OK                3
9d8
< #2
11c10,11
< #define BZ_OK                3
---
> 
> define BZ_OK                3
9c9
< #2
---
> 2
11c11
< #define BZ_OK                3
---
> # BZ_OK                3
9d8
< #2
11c10,11
< #define BZ_OK                3
---
> 
> # BZ_OK                3
9c9
< #2
---
> 2
11c11
< #define BZ_OK                3
---
>  BZ_OK                3
9d8
< #2
11c10,11
< #define BZ_OK                3
---
> 
>  BZ_OK                3
9c9
< #2
---
> #
(97.8 %, 4450 bytes)
11c11
< #define BZ_OK                3
---
>  BZ_OK                3
11c11
< #define BZ_OK                3
---
> define                 3
11c11
< #define BZ_OK                3
---
>                  3
11c11
< #define BZ_OK                3
---
> define BZ_OK                
11c11
< #define BZ_OK                3
---
>  BZ_OK                
11c11
< #define BZ_OK                3
---
> define                 
11c11
< #define BZ_OK                3
---
>                  
11c11
< #define BZ_OK                3
---
> # BZ_OK                3
11c11
< #define BZ_OK                3
---
> #                 3
(97.8 %, 4437 bytes)
12c12
< #define BZ_STREAM_END        9
---
>          
12c12
< #define BZ_STREAM_END        9
---
> # BZ_STREAM_END        9
12c12
< #define BZ_STREAM_END        9
---
> #         9
12c12
< #define BZ_STREAM_END        9
---
> # BZ_STREAM_END        
12c12
< #define BZ_STREAM_END        9
---
> #         
12c12
< #define BZ_STREAM_END        9
---
> # BZ_STREAM_END        9
14c14
< typedef 
---
>  
12c12
< #define BZ_STREAM_END        9
---
> #         9
14c14
< typedef 
---
>  
12c12
< #define BZ_STREAM_END        9
---
> # BZ_STREAM_END        
14c14
< typedef 
---
>  
12c12
< #define BZ_STREAM_END        9
---
> #         
14c14
< typedef 
---
>  
12c12
< #define BZ_STREAM_END        9
---
> #define         9
12c12
< #define BZ_STREAM_END        9
---
> #define         
12c12
< #define BZ_STREAM_END        9
---
> #define         9
14c14
< typedef 
---
>  
12c12
< #define BZ_STREAM_END        9
---
> #define         
14c14
< typedef 
---
>  
12c12
< #define BZ_STREAM_END        9
---
> #define         9
15c15
<    struct {
---
>     {
12c12
< #define BZ_STREAM_END        9
---
> #define         
15c15
<    struct {
---
>     {
12c12
< #define BZ_STREAM_END        9
---
> #define         9
14,15c14,15
< typedef 
<    struct {
---
>  
>     {
12c12
< #define BZ_STREAM_END        9
---
> #define         
14,15c14,15
< typedef 
<    struct {
---
>  
>     {
12c12
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
12c12
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
14c14
< typedef 
---
>  
12c12
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
15c15
<    struct {
---
>     {
12c12
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
14,15c14,15
< typedef 
<    struct {
---
>  
>     {
12c12
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
15c15
<    struct {
---
>    struct 
12c12
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
14,15c14,15
< typedef 
<    struct {
---
>  
>    struct 
12c12
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
15c15
<    struct {
---
>     
12c12
< #define BZ_STREAM_END        9
---
> #define BZ_STREAM_END        
14,15c14,15
< typedef 
<    struct {
---
>  
>     
14c14
< typedef 
---
>  
14,15c14,15
< typedef 
<    struct {
---
>  
>     {
14,15c14,15
< typedef 
<    struct {
---
>  
>    struct 
14,15c14,15
< typedef 
<    struct {
---
>  
>     
14c14
< typedef 
---
>  
16c16
<       } 
---
>        
14,16c14,16
< typedef 
<    struct {
<       } 
---
>  
>     {
>        
14,16c14,16
< typedef 
<    struct {
<       } 
---
>  
>    struct 
>        
14,16c14,16
< typedef 
<    struct {
<       } 
---
>  
>     
>        
15c15
<    struct {
---
>     {
15c15
<    struct {
---
>     
15,16c15,16
<    struct {
<       } 
---
>     {
>        
15,16c15,16
<    struct {
<       } 
---
>     
>        
15c15
<    struct {
---
>     {
17c17
<    bz_stream;
---
>    ;
15c15
<    struct {
---
>     
17c17
<    bz_stream;
---
>    ;
15,17c15,17
<    struct {
<       } 
<    bz_stream;
---
>     {
>        
>    ;
15,17c15,17
<    struct {
<       } 
<    bz_stream;
---
>     
>        
>    ;
15c15
<    struct {
---
>    struct 
15,16c15,16
<    struct {
<       } 
---
>    struct 
>        
15c15
<    struct {
---
>    struct 
17c17
<    bz_stream;
---
>    ;
15,17c15,17
<    struct {
<       } 
<    bz_stream;
---
>    struct 
>        
>    ;
15c15
<    struct {
---
>    struct 
17c17
<    bz_stream;
---
>    bz_stream
(97.8 %, 4429 bytes)
17c17
<    bz_stream;
---
>    
21c21
< #include <stdio.h>
---
> include <stdio.h>
17c17
<    bz_stream;
---
>    ;
21c21
< #include <stdio.h>
---
> # <stdio.h>
17c17
<    bz_stream;
---
>    
21c21
< #include <stdio.h>
---
> # <stdio.h>
17c17
<    bz_stream;
---
>    ;
21c21
< #include <stdio.h>
---
>  <stdio.h>
17c17
<    bz_stream;
---
>    
21c21
< #include <stdio.h>
---
>  <stdio.h>
17c17
<    bz_stream;
---
>    bz_stream
17c17
<    bz_stream;
---
>    bz_stream
21c21
< #include <stdio.h>
---
> include <stdio.h>
17c17
<    bz_stream;
---
>    bz_stream
21c21
< #include <stdio.h>
---
> # <stdio.h>
17c17
<    bz_stream;
---
>    bz_stream
21c21
< #include <stdio.h>
---
>  <stdio.h>
17c17
<    bz_stream;
---
>    bz_stream
21c21
< #include <stdio.h>
---
> #include stdio.h>
17c17
<    bz_stream;
---
>    bz_stream
21c21
< #include <stdio.h>
---
> include stdio.h>
17c17
<    bz_stream;
---
>    bz_stream
21c21
< #include <stdio.h>
---
> # stdio.h>
17c17
<    bz_stream;
---
>    bz_stream
21c21
< #include <stdio.h>
---
>  stdio.h>
21c21
< #include <stdio.h>
---
> include <stdio.h>
21c21
< #include <stdio.h>
---
>  <stdio.h>
21c21
< #include <stdio.h>
---
> include stdio.h>
21c21
< #include <stdio.h>
---
>  stdio.h>
21c21
< #include <stdio.h>
---
> include <.h>
21c21
< #include <stdio.h>
---
>  <.h>
21c21
< #include <stdio.h>
---
> include .h>
21c21
< #include <stdio.h>
---
>  .h>
21c21
< #include <stdio.h>
---
> # <stdio.h>
21c21
< #include <stdio.h>
---
> # stdio.h>
21c21
< #include <stdio.h>
---
> # <.h>
21c21
< #include <stdio.h>
---
> # .h>
21c21
< #include <stdio.h>
---
> # <stdioh>
21c21
< #include <stdio.h>
---
> # stdioh>
21c21
< #include <stdio.h>
---
> # <h>
21c21
< #include <stdio.h>
---
> # h>
21c21
< #include <stdio.h>
---
> #include stdio.h>
21c21
< #include <stdio.h>
---
> #include .h>
21c21
< #include <stdio.h>
---
> #include stdioh>
21c21
< #include <stdio.h>
---
> #include h>
21c21
< #include <stdio.h>
---
> #include stdio.>
21c21
< #include <stdio.h>
---
> #include .>
21c21
< #include <stdio.h>
---
> #include stdio>
21c21
< #include <stdio.h>
---
> #include >
21c21
< #include <stdio.h>
---
> #include <.h>
21c21
< #include <stdio.h>
---
> #include <h>
21c21
< #include <stdio.h>
---
> #include <.>
21c21
< #include <stdio.h>
---
> #include <>
21c21
< #include <stdio.h>
---
> #include <.h
21c21
< #include <stdio.h>
---
> #include <h
21c21
< #include <stdio.h>
---
> #include <.
21c21
< #include <stdio.h>
---
> #include <
21c21
< #include <stdio.h>
---
> #include <stdioh>
21c21
< #include <stdio.h>
---
> #include <stdio>
21c21
< #include <stdio.h>
---
> #include <stdioh
21c21
< #include <stdio.h>
---
> #include <stdio
21c21,22
< #include <stdio.h>
---
> #include <stdioh>
> 
23d23
< extern
21c21,22
< #include <stdio.h>
---
> #include <stdio>
> 
23d23
< extern
21c21,22
< #include <stdio.h>
---
> #include <stdioh
> 
23d23
< extern
21c21,22
< #include <stdio.h>
---
> #include <stdio
> 
23d23
< extern
21c21
< #include <stdio.h>
---
> #include <stdio.>
21c21
< #include <stdio.h>
---
> #include <stdio.
21c21,22
< #include <stdio.h>
---
> #include <stdio.>
> 
23d23
< extern
21c21,22
< #include <stdio.h>
---
> #include <stdio.
> 
23d23
< extern
21c21
< #include <stdio.h>
---
> #include <stdio.>
28c28
< BZ2_bzDecompressInit ( 
---
>  ( 
21c21
< #include <stdio.h>
---
> #include <stdio.
28c28
< BZ2_bzDecompressInit ( 
---
>  ( 
21c21
< #include <stdio.h>
---
> #include <stdio.>
23d22
< extern
28c27,28
< BZ2_bzDecompressInit ( 
---
> 
>  ( 
21c21
< #include <stdio.h>
---
> #include <stdio.
23d22
< extern
28c27,28
< BZ2_bzDecompressInit ( 
---
> 
>  ( 
21c21
< #include <stdio.h>
---
> #include <stdio.h
21c21,22
< #include <stdio.h>
---
> #include <stdio.h
> 
23d23
< extern
21c21
< #include <stdio.h>
---
> #include <stdio.h
28c28
< BZ2_bzDecompressInit ( 
---
>  ( 
21c21
< #include <stdio.h>
---
> #include <stdio.h
23d22
< extern
28c27,28
< BZ2_bzDecompressInit ( 
---
> 
>  ( 
21c21
< #include <stdio.h>
---
> #include <stdio.h
28c28
< BZ2_bzDecompressInit ( 
---
> BZ2_bzDecompressInit  
21c21
< #include <stdio.h>
---
> #include <stdio.h
23d22
< extern
28c27,28
< BZ2_bzDecompressInit ( 
---
> 
> BZ2_bzDecompressInit  
21c21
< #include <stdio.h>
---
> #include <stdio.h
28c28
< BZ2_bzDecompressInit ( 
---
>   
21c21
< #include <stdio.h>
---
> #include <stdio.h
23d22
< extern
28c27,28
< BZ2_bzDecompressInit ( 
---
> 
>   
23c23
< extern
---
> 
23d22
< extern
28c27,28
< BZ2_bzDecompressInit ( 
---
> 
>  ( 
23d22
< extern
28c27,28
< BZ2_bzDecompressInit ( 
---
> 
> BZ2_bzDecompressInit  
23d22
< extern
28c27,28
< BZ2_bzDecompressInit ( 
---
> 
>   
23c23
< extern
---
> 
29c29
<       bz_stream *, 
---
>        *, 
23d22
< extern
28,29c27,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
> 
>  ( 
>        *, 
23d22
< extern
28,29c27,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
> 
> BZ2_bzDecompressInit  
>        *, 
23d22
< extern
28,29c27,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
> 
>   
>        *, 
28c28
< BZ2_bzDecompressInit ( 
---
>  ( 
(97.8 %, 4423 bytes)
28c28
< BZ2_bzDecompressInit ( 
---
>  ( 
28c28
< BZ2_bzDecompressInit ( 
---
>   
28,29c28,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
>  ( 
>        *, 
28,29c28,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
>   
>        *, 
28,29c28,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
>  ( 
>       bz_stream , 
28,29c28,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
>   
>       bz_stream , 
28,29c28,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
>  ( 
>        , 
28,29c28,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
>   
>        , 
28c28
< BZ2_bzDecompressInit ( 
---
> BZ2_bzDecompressInit  
28,29c28,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
> BZ2_bzDecompressInit  
>        *, 
28,29c28,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
> BZ2_bzDecompressInit  
>       bz_stream , 
28,29c28,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
> BZ2_bzDecompressInit  
>        , 
28,29c28,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
> BZ2_bzDecompressInit  
>       bz_stream * 
28,29c28,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
> BZ2_bzDecompressInit  
>        * 
28,29c28,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
> BZ2_bzDecompressInit  
>       bz_stream  
28,29c28,29
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
---
> BZ2_bzDecompressInit  
>         
29c29
<       bz_stream *, 
---
>        *, 
29c29
<       bz_stream *, 
---
>        , 
29c29
<       bz_stream *, 
---
>        * 
29c29
<       bz_stream *, 
---
>         
29,30c29,30
<       bz_stream *, 
<       int       , 
---
>        *, 
>              , 
29,30c29,30
<       bz_stream *, 
<       int       , 
---
>        , 
>              , 
29,30c29,30
<       bz_stream *, 
<       int       , 
---
>        * 
>              , 
29,30c29,30
<       bz_stream *, 
<       int       , 
---
>         
>              , 
29c29
<       bz_stream *, 
---
>       bz_stream , 
29c29
<       bz_stream *, 
---
>       bz_stream  
29,30c29,30
<       bz_stream *, 
<       int       , 
---
>       bz_stream , 
>              , 
29,30c29,30
<       bz_stream *, 
<       int       , 
---
>       bz_stream  
>              , 
29,30c29,30
<       bz_stream *, 
<       int       , 
---
>       bz_stream , 
>       int        
29,30c29,30
<       bz_stream *, 
<       int       , 
---
>       bz_stream  
>       int        
29,30c29,30
<       bz_stream *, 
<       int       , 
---
>       bz_stream , 
>               
29,30c29,30
<       bz_stream *, 
<       int       , 
---
>       bz_stream  
>               
29c29
<       bz_stream *, 
---
>       bz_stream * 
29,30c29,30
<       bz_stream *, 
<       int       , 
---
>       bz_stream * 
>              , 
29,30c29,30
<       bz_stream *, 
<       int       , 
---
>       bz_stream * 
>       int        
29,30c29,30
<       bz_stream *, 
<       int       , 
---
>       bz_stream * 
>               
29c29
<       bz_stream *, 
---
>       bz_stream * 
31c31
<       int       );
---
>              );
29,31c29,31
<       bz_stream *, 
<       int       , 
<       int       );
---
>       bz_stream * 
>              , 
>              );
29,31c29,31
<       bz_stream *, 
<       int       , 
<       int       );
---
>       bz_stream * 
>       int        
>              );
29,31c29,31
<       bz_stream *, 
<       int       , 
<       int       );
---
>       bz_stream * 
>               
>              );
30c30
<       int       , 
---
>              , 
30c30
<       int       , 
---
>               
30,31c30,31
<       int       , 
<       int       );
---
>              , 
>              );
30,31c30,31
<       int       , 
<       int       );
---
>               
>              );
30,31c30,31
<       int       , 
<       int       );
---
>              , 
>       int       ;
30,31c30,31
<       int       , 
<       int       );
---
>               
>       int       ;
30,31c30,31
<       int       , 
<       int       );
---
>              , 
>              ;
30,31c30,31
<       int       , 
<       int       );
---
>               
>              ;
30c30
<       int       , 
---
>       int        
30,31c30,31
<       int       , 
<       int       );
---
>       int        
>              );
30,31c30,31
<       int       , 
<       int       );
---
>       int        
>       int       ;
30,31c30,31
<       int       , 
<       int       );
---
>       int        
>              ;
30,31c30,31
<       int       , 
<       int       );
---
>       int        
>       int       )
30,31c30,31
<       int       , 
<       int       );
---
>       int        
>              )
30,31c30,31
<       int       , 
<       int       );
---
>       int        
>       int       
30,31c30,31
<       int       , 
<       int       );
---
>       int        
>              
31c31
<       int       );
---
>              );
31c31
<       int       );
---
>              ;
31c31
<       int       );
---
>              )
31c31
<       int       );
---
>              
31c31
<       int       );
---
>              );
37c37
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
31c31
<       int       );
---
>              ;
37c37
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
31c31
<       int       );
---
>              )
37c37
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
31c31
<       int       );
---
>              
37c37
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
31c31
<       int       );
---
>       int       ;
31c31
<       int       );
---
>       int       
31c31
<       int       );
---
>       int       ;
37c37
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
31c31
<       int       );
---
>       int       
37c37
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
31c31
<       int       );
---
>       int       ;
37c37
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 5000
31c31
<       int       );
---
>       int       
37c37
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 5000
31c31
<       int       );
---
>       int       ;
37c37
< #define BZ_MAX_UNUSED 5000
---
>  BZ_MAX_UNUSED 5000
31c31
<       int       );
---
>       int       
37c37
< #define BZ_MAX_UNUSED 5000
---
>  BZ_MAX_UNUSED 5000
31c31
<       int       );
---
>       int       )
31c31
<       int       );
---
>       int       )
37c37
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
31c31
<       int       );
---
>       int       )
37c37
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 5000
31c31
<       int       );
---
>       int       )
37c37
< #define BZ_MAX_UNUSED 5000
---
>  BZ_MAX_UNUSED 5000
31c31
<       int       );
---
>       int       )
37c37
< #define BZ_MAX_UNUSED 5000
---
> #define  5000
31c31
<       int       );
---
>       int       )
37c37
< #define BZ_MAX_UNUSED 5000
---
> define  5000
31c31
<       int       );
---
>       int       )
37c37
< #define BZ_MAX_UNUSED 5000
---
> #  5000
31c31
<       int       );
---
>       int       )
37c37
< #define BZ_MAX_UNUSED 5000
---
>   5000
37c37
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 5000
37c37
< #define BZ_MAX_UNUSED 5000
---
>  BZ_MAX_UNUSED 5000
37c37
< #define BZ_MAX_UNUSED 5000
---
> define  5000
37c37
< #define BZ_MAX_UNUSED 5000
---
>   5000
37c37
< #define BZ_MAX_UNUSED 5000
---
> define BZ_MAX_UNUSED 
37c37
< #define BZ_MAX_UNUSED 5000
---
>  BZ_MAX_UNUSED 
37c37
< #define BZ_MAX_UNUSED 5000
---
> define  
37c37
< #define BZ_MAX_UNUSED 5000
---
>   
37c37
< #define BZ_MAX_UNUSED 5000
---
> # BZ_MAX_UNUSED 5000
37c37
< #define BZ_MAX_UNUSED 5000
---
> #  5000
(97.9 %, 4399 bytes)
39c39
< typedef BZFILE;
---
>  
41c41
< * BZ2_bzReadOpen ( 
---
>  BZ2_bzReadOpen ( 
39c39
< typedef BZFILE;
---
> typedef ;
39c39
< typedef BZFILE;
---
> typedef 
39c39
< typedef BZFILE;
---
> typedef ;
41c41
< * BZ2_bzReadOpen ( 
---
>  BZ2_bzReadOpen ( 
39c39
< typedef BZFILE;
---
> typedef 
41c41
< * BZ2_bzReadOpen ( 
---
>  BZ2_bzReadOpen ( 
39c39
< typedef BZFILE;
---
> typedef ;
41c41
< * BZ2_bzReadOpen ( 
---
> *  ( 
39c39
< typedef BZFILE;
---
> typedef 
41c41
< * BZ2_bzReadOpen ( 
---
> *  ( 
39c39
< typedef BZFILE;
---
> typedef ;
41c41
< * BZ2_bzReadOpen ( 
---
>   ( 
39c39
< typedef BZFILE;
---
> typedef 
41c41
< * BZ2_bzReadOpen ( 
---
>   ( 
39c39
< typedef BZFILE;
---
> typedef BZFILE
39c39
< typedef BZFILE;
---
> typedef BZFILE
41c41
< * BZ2_bzReadOpen ( 
---
>  BZ2_bzReadOpen ( 
39c39
< typedef BZFILE;
---
> typedef BZFILE
41c41
< * BZ2_bzReadOpen ( 
---
> *  ( 
39c39
< typedef BZFILE;
---
> typedef BZFILE
41c41
< * BZ2_bzReadOpen ( 
---
>   ( 
39c39
< typedef BZFILE;
---
> typedef BZFILE
41c41
< * BZ2_bzReadOpen ( 
---
> * BZ2_bzReadOpen  
39c39
< typedef BZFILE;
---
> typedef BZFILE
41c41
< * BZ2_bzReadOpen ( 
---
>  BZ2_bzReadOpen  
39c39
< typedef BZFILE;
---
> typedef BZFILE
41c41
< * BZ2_bzReadOpen ( 
---
> *   
39c39
< typedef BZFILE;
---
> typedef BZFILE
41c41
< * BZ2_bzReadOpen ( 
---
>    
41c41
< * BZ2_bzReadOpen ( 
---
>  BZ2_bzReadOpen ( 
41c41
< * BZ2_bzReadOpen ( 
---
>   ( 
41c41
< * BZ2_bzReadOpen ( 
---
>  BZ2_bzReadOpen  
(97.9 %, 4383 bytes)
41,42c41,42
<   ( 
<       int*  ,   
---
>    
>         ,   
41,42c41,42
<   ( 
<       int*  ,   
---
>    
>       int*     
41,42c41,42
<   ( 
<       int*  ,   
---
>    
>       *     
41,42c41,42
<   ( 
<       int*  ,   
---
>    
>       int     
41,42c41,42
<   ( 
<       int*  ,   
---
>    
>            
42c42
<       int*  ,   
---
>       *  ,   
42c42
<       int*  ,   
---
>         ,   
42c42
<       int*  ,   
---
>       *     
42c42
<       int*  ,   
---
>            
42,43c42,43
<       int*  ,   
<       FILE* , 
---
>       *  ,   
>       * , 
42,43c42,43
<       int*  ,   
<       FILE* , 
---
>         ,   
>       * , 
42,43c42,43
<       int*  ,   
<       FILE* , 
---
>       *     
>       * , 
42,43c42,43
<       int*  ,   
<       FILE* , 
---
>            
>       * , 
42c42
<       int*  ,   
---
>       int  ,   
(97.9 %, 4378 bytes)
43c43
<       FILE* , 
---
>         
43,44c43,44
<       FILE* , 
<       int   , 
---
>       * , 
>          , 
43,44c43,44
<       FILE* , 
<       int   , 
---
>        , 
>          , 
43,44c43,44
<       FILE* , 
<       int   , 
---
>       *  
>          , 
43,44c43,44
<       FILE* , 
<       int   , 
---
>         
>          , 
43c43
<       FILE* , 
---
>       FILE , 
(97.9 %, 4372 bytes)
44,45c44,45
<       int   , 
<       int   ,
---
>           
>          ,
44,45c44,45
<       int   , 
<       int   ,
---
>          , 
>       int   
44,45c44,45
<       int   , 
<       int   ,
---
>           
>       int   
44,45c44,45
<       int   , 
<       int   ,
---
>          , 
>          
44,45c44,45
<       int   , 
<       int   ,
---
>           
>          
44c44
<       int   , 
---
>       int    
44,45c44,45
<       int   , 
<       int   ,
---
>       int    
>          ,
(97.9 %, 4364 bytes)
46,47c46,47
<       void* ,    
<       int   );
---
>            
>          );
46c46
<       void* ,    
---
>       void ,    
46c46
<       void* ,    
---
>       void     
46,47c46,47
<       void* ,    
<       int   );
---
>       void ,    
>          );
46,47c46,47
<       void* ,    
<       int   );
---
>       void     
>          );
(97.9 %, 4355 bytes)
47c47
<          );
---
>          
49c49
< void BZ2_bzReadGetUnused ( 
---
>   ( 
47c47
<          );
---
>          )
47c47
<          );
---
>          )
49c49
< void BZ2_bzReadGetUnused ( 
---
>  BZ2_bzReadGetUnused ( 
47c47
<          );
---
>          )
49c49
< void BZ2_bzReadGetUnused ( 
---
> void  ( 
47c47
<          );
---
>          )
49c49
< void BZ2_bzReadGetUnused ( 
---
>   ( 
47c47
<          );
---
>          )
49c49
< void BZ2_bzReadGetUnused ( 
---
> void BZ2_bzReadGetUnused  
47c47
<          );
---
>          )
49c49
< void BZ2_bzReadGetUnused ( 
---
>  BZ2_bzReadGetUnused  
47c47
<          );
---
>          )
49c49
< void BZ2_bzReadGetUnused ( 
---
> void   
47c47
<          );
---
>          )
49c49
< void BZ2_bzReadGetUnused ( 
---
>    
49c49
< void BZ2_bzReadGetUnused ( 
---
>  BZ2_bzReadGetUnused ( 
49c49
< void BZ2_bzReadGetUnused ( 
---
>   ( 
49c49
< void BZ2_bzReadGetUnused ( 
---
>  BZ2_bzReadGetUnused  
49c49
< void BZ2_bzReadGetUnused ( 
---
>    
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
>  BZ2_bzReadGetUnused ( 
>       *    , 
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
>   ( 
>       *    , 
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
>  BZ2_bzReadGetUnused  
>       *    , 
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
>    
>       *    , 
49c49
< void BZ2_bzReadGetUnused ( 
---
> void  ( 
49c49
< void BZ2_bzReadGetUnused ( 
---
> void   
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> void  ( 
>       *    , 
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> void   
>       *    , 
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> void  ( 
>       int    , 
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> void   
>       int    , 
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> void  ( 
>           , 
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> void   
>           , 
49c49
< void BZ2_bzReadGetUnused ( 
---
> void BZ2_bzReadGetUnused  
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> void BZ2_bzReadGetUnused  
>       *    , 
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> void BZ2_bzReadGetUnused  
>       int    , 
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> void BZ2_bzReadGetUnused  
>           , 
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> void BZ2_bzReadGetUnused  
>       int*     
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> void BZ2_bzReadGetUnused  
>       *     
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> void BZ2_bzReadGetUnused  
>       int     
49,50c49,50
< void BZ2_bzReadGetUnused ( 
<       int*    , 
---
> void BZ2_bzReadGetUnused  
>            
50c50
<       int*    , 
---
>       *    , 
50c50
<       int*    , 
---
>           , 
50c50
<       int*    , 
---
>       *     
50c50
<       int*    , 
---
>            
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       *    , 
>       * , 
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>           , 
>       * , 
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       *     
>       * , 
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>            
>       * , 
50c50
<       int*    , 
---
>       int    , 
50c50
<       int*    , 
---
>       int     
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       int    , 
>       * , 
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       int     
>       * , 
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       int    , 
>       BZFILE , 
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       int     
>       BZFILE , 
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       int    , 
>        , 
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       int     
>        , 
50c50
<       int*    , 
---
>       int*     
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       * , 
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       BZFILE , 
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       int*     
>        , 
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       BZFILE*  
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       *  
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       BZFILE  
50,51c50,51
<       int*    , 
<       BZFILE* , 
---
>       int*     
>         
51c51
<       BZFILE* , 
---
>       * , 
51c51
<       BZFILE* , 
---
>        , 
51c51
<       BZFILE* , 
---
>       *  
51c51
<       BZFILE* , 
---
>         
51,52c51,52
<       BZFILE* , 
<       void**  ,  
---
>       * , 
>       **  ,  
51,52c51,52
<       BZFILE* , 
<       void**  ,  
---
>        , 
>       **  ,  
51,52c51,52
<       BZFILE* , 
<       void**  ,  
---
>       *  
>       **  ,  
51,52c51,52
<       BZFILE* , 
<       void**  ,  
---
>         
>       **  ,  
51c51
<       BZFILE* , 
---
>       BZFILE , 
51c51
<       BZFILE* , 
---
>       BZFILE  
51,52c51,52
<       BZFILE* , 
<       void**  ,  
---
>       BZFILE , 
>       **  ,  
51,52c51,52
<       BZFILE* , 
<       void**  ,  
---
>       BZFILE  
>       **  ,  
51,52c51,52
<       BZFILE* , 
<       void**  ,  
---
>       BZFILE , 
>       void*  ,  
51,52c51,52
<       BZFILE* , 
<       void**  ,  
---
>       BZFILE  
>       void*  ,  
51,52c51,52
<       BZFILE* , 
<       void**  ,  
---
>       BZFILE , 
>       *  ,  
51,52c51,52
<       BZFILE* , 
<       void**  ,  
---
>       BZFILE  
>       *  ,  
51c51
<       BZFILE* , 
---
>       BZFILE*  
(97.9 %, 4354 bytes)
51c51
<       BZFILE , 
---
>       BZFILE  
51,52c51,52
<       BZFILE , 
<       void**  ,  
---
>       BZFILE  
>       **  ,  
51,52c51,52
<       BZFILE , 
<       void**  ,  
---
>       BZFILE  
>       void*  ,  
51,52c51,52
<       BZFILE , 
<       void**  ,  
---
>       BZFILE  
>       *  ,  
51,52c51,52
<       BZFILE , 
<       void**  ,  
---
>       BZFILE  
>       void*  ,  
51,52c51,52
<       BZFILE , 
<       void**  ,  
---
>       BZFILE  
>       *  ,  
51,52c51,52
<       BZFILE , 
<       void**  ,  
---
>       BZFILE  
>       void  ,  
51,52c51,52
<       BZFILE , 
<       void**  ,  
---
>       BZFILE  
>         ,  
52c52
<       void**  ,  
---
>       **  ,  
52c52
<       void**  ,  
---
>       *  ,  
52c52
<       void**  ,  
---
>       *  ,  
52c52
<       void**  ,  
---
>         ,  
52c52
<       void**  ,  
---
>       **    
52c52
<       void**  ,  
---
>       *    
52c52
<       void**  ,  
---
>       *    
52c52
<       void**  ,  
---
>           
52c52
<       void**  ,  
---
>       void*  ,  
52c52
<       void**  ,  
---
>       void  ,  
52c52
<       void**  ,  
---
>       void*    
52c52
<       void**  ,  
---
>       void    
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void*  ,  
>       *    );
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void  ,  
>       *    );
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void*    
>       *    );
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void    
>       *    );
52c52
<       void**  ,  
---
>       void*  ,  
52c52
<       void**  ,  
---
>       void*    
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void*  ,  
>       *    );
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void*    
>       *    );
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void*  ,  
>       int    );
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void*    
>       int    );
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void*  ,  
>           );
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void*    
>           );
52c52
<       void**  ,  
---
>       void**    
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void**    
>       *    );
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void**    
>       int    );
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void**    
>           );
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void**    
>       int*    ;
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void**    
>       *    ;
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void**    
>       int    ;
52,53c52,53
<       void**  ,  
<       int*    );
---
>       void**    
>           ;
53c53
<       int*    );
---
>       *    );
53c53
<       int*    );
---
>           );
53c53
<       int*    );
---
>       *    ;
53c53
<       int*    );
---
>           ;
53c53
<       int*    );
---
>       *    )
53c53
<       int*    );
---
>           )
53c53
<       int*    );
---
>       *    
53c53
<       int*    );
---
>           
53c53
<       int*    );
---
>       int    );
53c53
<       int*    );
---
>       int    ;
53c53
<       int*    );
---
>       int    )
53c53
<       int*    );
---
>       int    
53c53
<       int*    );
---
>       int    );
55c55
< BZ2_bzRead ( 
---
>  ( 
53c53
<       int*    );
---
>       int    ;
55c55
< BZ2_bzRead ( 
---
>  ( 
53c53
<       int*    );
---
>       int    )
55c55
< BZ2_bzRead ( 
---
>  ( 
53c53
<       int*    );
---
>       int    
55c55
< BZ2_bzRead ( 
---
>  ( 
53c53
<       int*    );
---
>       int*    ;
53c53
<       int*    );
---
>       int*    
53c53
<       int*    );
---
>       int*    ;
55c55
< BZ2_bzRead ( 
---
>  ( 
53c53
<       int*    );
---
>       int*    
55c55
< BZ2_bzRead ( 
---
>  ( 
53c53
<       int*    );
---
>       int*    ;
55c55
< BZ2_bzRead ( 
---
> BZ2_bzRead  
53c53
<       int*    );
---
>       int*    
55c55
< BZ2_bzRead ( 
---
> BZ2_bzRead  
53c53
<       int*    );
---
>       int*    ;
55c55
< BZ2_bzRead ( 
---
>   
53c53
<       int*    );
---
>       int*    
55c55
< BZ2_bzRead ( 
---
>   
53c53
<       int*    );
---
>       int*    )
53c53
<       int*    );
---
>       int*    )
55c55
< BZ2_bzRead ( 
---
>  ( 
53c53
<       int*    );
---
>       int*    )
55c55
< BZ2_bzRead ( 
---
> BZ2_bzRead  
53c53
<       int*    );
---
>       int*    )
55c55
< BZ2_bzRead ( 
---
>   
53c53
<       int*    );
---
>       int*    )
56c56
<       int*    , 
---
>       *    , 
53c53
<       int*    );
---
>       int*    )
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
>  ( 
>       *    , 
53c53
<       int*    );
---
>       int*    )
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
> BZ2_bzRead  
>       *    , 
53c53
<       int*    );
---
>       int*    )
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
>   
>       *    , 
55c55
< BZ2_bzRead ( 
---
>  ( 
55c55
< BZ2_bzRead ( 
---
>   
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
>  ( 
>       *    , 
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
>   
>       *    , 
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
>  ( 
>       int    , 
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
>   
>       int    , 
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
>  ( 
>           , 
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
>   
>           , 
55c55
< BZ2_bzRead ( 
---
> BZ2_bzRead  
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
> BZ2_bzRead  
>       *    , 
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
> BZ2_bzRead  
>       int    , 
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
> BZ2_bzRead  
>           , 
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
> BZ2_bzRead  
>       int*     
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
> BZ2_bzRead  
>       *     
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
> BZ2_bzRead  
>       int     
55,56c55,56
< BZ2_bzRead ( 
<       int*    , 
---
> BZ2_bzRead  
>            
56c56
<       int*    , 
---
>       *    , 
56c56
<       int*    , 
---
>           , 
56c56
<       int*    , 
---
>       *     
56c56
<       int*    , 
---
>            
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       *    , 
>       * , 
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>           , 
>       * , 
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       *     
>       * , 
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>            
>       * , 
56c56
<       int*    , 
---
>       int    , 
56c56
<       int*    , 
---
>       int     
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       int    , 
>       * , 
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       int     
>       * , 
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       int    , 
>       BZFILE , 
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       int     
>       BZFILE , 
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       int    , 
>        , 
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       int     
>        , 
56c56
<       int*    , 
---
>       int*     
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       * , 
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       BZFILE , 
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       int*     
>        , 
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       BZFILE*  
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       *  
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       BZFILE  
56,57c56,57
<       int*    , 
<       BZFILE* , 
---
>       int*     
>         
57c57
<       BZFILE* , 
---
>       * , 
57c57
<       BZFILE* , 
---
>        , 
57c57
<       BZFILE* , 
---
>       *  
57c57
<       BZFILE* , 
---
>         
57,58c57,58
<       BZFILE* , 
<       void*   , 
---
>       * , 
>       *   , 
57,58c57,58
<       BZFILE* , 
<       void*   , 
---
>        , 
>       *   , 
57,58c57,58
<       BZFILE* , 
<       void*   , 
---
>       *  
>       *   , 
57,58c57,58
<       BZFILE* , 
<       void*   , 
---
>         
>       *   , 
57c57
<       BZFILE* , 
---
>       BZFILE , 
57c57
<       BZFILE* , 
---
>       BZFILE  
57,58c57,58
<       BZFILE* , 
<       void*   , 
---
>       BZFILE , 
>       *   , 
57,58c57,58
<       BZFILE* , 
<       void*   , 
---
>       BZFILE  
>       *   , 
57,58c57,58
<       BZFILE* , 
<       void*   , 
---
>       BZFILE , 
>       void   , 
57,58c57,58
<       BZFILE* , 
<       void*   , 
---
>       BZFILE  
>       void   , 
57,58c57,58
<       BZFILE* , 
<       void*   , 
---
>       BZFILE , 
>          , 
57,58c57,58
<       BZFILE* , 
<       void*   , 
---
>       BZFILE  
>          , 
57c57
<       BZFILE* , 
---
>       BZFILE*  
(97.9 %, 4353 bytes)
57c57
<       BZFILE , 
---
>       BZFILE  
57,58c57,58
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>       *   , 
57,58c57,58
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>       void   , 
57,58c57,58
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>          , 
57,58c57,58
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>       void*    
57,58c57,58
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>       *    
57,58c57,58
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>       void    
57,58c57,58
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>           
58c58
<       void*   , 
---
>       *   , 
58c58
<       void*   , 
---
>          , 
58c58
<       void*   , 
---
>       *    
58c58
<       void*   , 
---
>           
58,59c58,59
<       void*   , 
<       int     );
---
>       *   , 
>            );
58,59c58,59
<       void*   , 
<       int     );
---
>          , 
>            );
58,59c58,59
<       void*   , 
<       int     );
---
>       *    
>            );
58,59c58,59
<       void*   , 
<       int     );
---
>           
>            );
58c58
<       void*   , 
---
>       void   , 
58c58
<       void*   , 
---
>       void    
58,59c58,59
<       void*   , 
<       int     );
---
>       void   , 
>            );
58,59c58,59
<       void*   , 
<       int     );
---
>       void    
>            );
58,59c58,59
<       void*   , 
<       int     );
---
>       void   , 
>       int     ;
58,59c58,59
<       void*   , 
<       int     );
---
>       void    
>       int     ;
58,59c58,59
<       void*   , 
<       int     );
---
>       void   , 
>            ;
58,59c58,59
<       void*   , 
<       int     );
---
>       void    
>            ;
58c58
<       void*   , 
---
>       void*    
58,59c58,59
<       void*   , 
<       int     );
---
>       void*    
>            );
58,59c58,59
<       void*   , 
<       int     );
---
>       void*    
>       int     ;
58,59c58,59
<       void*   , 
<       int     );
---
>       void*    
>            ;
58,59c58,59
<       void*   , 
<       int     );
---
>       void*    
>       int     )
58,59c58,59
<       void*   , 
<       int     );
---
>       void*    
>            )
58,59c58,59
<       void*   , 
<       int     );
---
>       void*    
>       int     
58,59c58,59
<       void*   , 
<       int     );
---
>       void*    
>            
59c59
<       int     );
---
>            );
59c59
<       int     );
---
>            ;
59c59
<       int     );
---
>            )
59c59
<       int     );
---
>            
59c59
<       int     );
---
>            );
61c61
< * BZ2_bzWriteOpen ( 
---
>  BZ2_bzWriteOpen ( 
59c59
<       int     );
---
>            ;
61c61
< * BZ2_bzWriteOpen ( 
---
>  BZ2_bzWriteOpen ( 
59c59
<       int     );
---
>            )
61c61
< * BZ2_bzWriteOpen ( 
---
>  BZ2_bzWriteOpen ( 
59c59
<       int     );
---
>            
61c61
< * BZ2_bzWriteOpen ( 
---
>  BZ2_bzWriteOpen ( 
59c59
<       int     );
---
>       int     ;
59c59
<       int     );
---
>       int     
59c59
<       int     );
---
>       int     ;
61c61
< * BZ2_bzWriteOpen ( 
---
>  BZ2_bzWriteOpen ( 
59c59
<       int     );
---
>       int     
61c61
< * BZ2_bzWriteOpen ( 
---
>  BZ2_bzWriteOpen ( 
59c59
<       int     );
---
>       int     ;
61c61
< * BZ2_bzWriteOpen ( 
---
> *  ( 
59c59
<       int     );
---
>       int     
61c61
< * BZ2_bzWriteOpen ( 
---
> *  ( 
59c59
<       int     );
---
>       int     ;
61c61
< * BZ2_bzWriteOpen ( 
---
>   ( 
59c59
<       int     );
---
>       int     
61c61
< * BZ2_bzWriteOpen ( 
---
>   ( 
59c59
<       int     );
---
>       int     )
59c59
<       int     );
---
>       int     )
61c61
< * BZ2_bzWriteOpen ( 
---
>  BZ2_bzWriteOpen ( 
59c59
<       int     );
---
>       int     )
61c61
< * BZ2_bzWriteOpen ( 
---
> *  ( 
59c59
<       int     );
---
>       int     )
61c61
< * BZ2_bzWriteOpen ( 
---
>   ( 
59c59
<       int     );
---
>       int     )
61c61
< * BZ2_bzWriteOpen ( 
---
> * BZ2_bzWriteOpen  
59c59
<       int     );
---
>       int     )
61c61
< * BZ2_bzWriteOpen ( 
---
>  BZ2_bzWriteOpen  
59c59
<       int     );
---
>       int     )
61c61
< * BZ2_bzWriteOpen ( 
---
> *   
59c59
<       int     );
---
>       int     )
61c61
< * BZ2_bzWriteOpen ( 
---
>    
61c61
< * BZ2_bzWriteOpen ( 
---
>  BZ2_bzWriteOpen ( 
61c61
< * BZ2_bzWriteOpen ( 
---
>   ( 
61c61
< * BZ2_bzWriteOpen ( 
---
>  BZ2_bzWriteOpen  
61c61
< * BZ2_bzWriteOpen ( 
---
>    
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
>  BZ2_bzWriteOpen ( 
>       *  ,      
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
>   ( 
>       *  ,      
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
>  BZ2_bzWriteOpen  
>       *  ,      
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
>    
>       *  ,      
61c61
< * BZ2_bzWriteOpen ( 
---
> *  ( 
61c61
< * BZ2_bzWriteOpen ( 
---
> *   
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
> *  ( 
>       *  ,      
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
> *   
>       *  ,      
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
> *  ( 
>       int  ,      
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
> *   
>       int  ,      
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
> *  ( 
>         ,      
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
> *   
>         ,      
61c61
< * BZ2_bzWriteOpen ( 
---
> * BZ2_bzWriteOpen  
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
> * BZ2_bzWriteOpen  
>       *  ,      
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
> * BZ2_bzWriteOpen  
>       int  ,      
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
> * BZ2_bzWriteOpen  
>         ,      
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
> * BZ2_bzWriteOpen  
>       int*        
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
> * BZ2_bzWriteOpen  
>       *        
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
> * BZ2_bzWriteOpen  
>       int        
61,62c61,62
< * BZ2_bzWriteOpen ( 
<       int*  ,      
---
> * BZ2_bzWriteOpen  
>               
62c62
<       int*  ,      
---
>       *  ,      
62c62
<       int*  ,      
---
>         ,      
62c62
<       int*  ,      
---
>       *        
62c62
<       int*  ,      
---
>               
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       *  ,      
>       * , 
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>         ,      
>       * , 
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       *        
>       * , 
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>               
>       * , 
62c62
<       int*  ,      
---
>       int  ,      
62c62
<       int*  ,      
---
>       int        
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       int  ,      
>       * , 
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       int        
>       * , 
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       int  ,      
>       FILE , 
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       int        
>       FILE , 
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       int  ,      
>        , 
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       int        
>        , 
62c62
<       int*  ,      
---
>       int*        
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       int*        
>       * , 
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       int*        
>       FILE , 
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       int*        
>        , 
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       int*        
>       FILE*  
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       int*        
>       *  
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       int*        
>       FILE  
62,63c62,63
<       int*  ,      
<       FILE* , 
---
>       int*        
>         
63c63
<       FILE* , 
---
>       * , 
63c63
<       FILE* , 
---
>        , 
63c63
<       FILE* , 
---
>       *  
63c63
<       FILE* , 
---
>         
63,64c63,64
<       FILE* , 
<       int   , 
---
>       * , 
>          , 
63,64c63,64
<       FILE* , 
<       int   , 
---
>        , 
>          , 
63,64c63,64
<       FILE* , 
<       int   , 
---
>       *  
>          , 
63,64c63,64
<       FILE* , 
<       int   , 
---
>         
>          , 
63c63
<       FILE* , 
---
>       FILE , 
63c63
<       FILE* , 
---
>       FILE  
63,64c63,64
<       FILE* , 
<       int   , 
---
>       FILE , 
>          , 
63,64c63,64
<       FILE* , 
<       int   , 
---
>       FILE  
>          , 
63,64c63,64
<       FILE* , 
<       int   , 
---
>       FILE , 
>       int    
63,64c63,64
<       FILE* , 
<       int   , 
---
>       FILE  
>       int    
63,64c63,64
<       FILE* , 
<       int   , 
---
>       FILE , 
>           
63,64c63,64
<       FILE* , 
<       int   , 
---
>       FILE  
>           
63c63
<       FILE* , 
---
>       FILE*  
63,64c63,64
<       FILE* , 
<       int   , 
---
>       FILE*  
>          , 
63,64c63,64
<       FILE* , 
<       int   , 
---
>       FILE*  
>       int    
63,64c63,64
<       FILE* , 
<       int   , 
---
>       FILE*  
>           
63,64c63
<       FILE* , 
<       int   , 
---
>       FILE*  
65a65
>          , 
63,65c63,65
<       FILE* , 
<       int   , 
<       int   , 
---
>       FILE*  
>          , 
>          , 
63,65c63,65
<       FILE* , 
<       int   , 
<       int   , 
---
>       FILE*  
>       int    
>          , 
63,65c63,65
<       FILE* , 
<       int   , 
<       int   , 
---
>       FILE*  
>           
>          , 
64c64
<       int   , 
---
>          , 
64c64
<       int   , 
---
>           
64,65c64,65
<       int   , 
<       int   , 
---
>          , 
>          , 
64,65c64,65
<       int   , 
<       int   , 
---
>           
>          , 
64,65c64,65
<       int   , 
<       int   , 
---
>          , 
>       int    
64,65c64,65
<       int   , 
<       int   , 
---
>           
>       int    
64,65c64,65
<       int   , 
<       int   , 
---
>          , 
>           
64,65c64,65
<       int   , 
<       int   , 
---
>           
>           
64c64
<       int   , 
---
>       int    
64,65c64,65
<       int   , 
<       int   , 
---
>       int    
>          , 
64,65c64,65
<       int   , 
<       int   , 
---
>       int    
>       int    
64,65c64,65
<       int   , 
<       int   , 
---
>       int    
>           
63a64
>       int    
65,66c66
<       int   , 
<       int   );
---
>          );
64,66c64,66
<       int   , 
<       int   , 
<       int   );
---
>       int    
>          , 
>          );
64,66c64,66
<       int   , 
<       int   , 
<       int   );
---
>       int    
>       int    
>          );
64,66c64,66
<       int   , 
<       int   , 
<       int   );
---
>       int    
>           
>          );
65c65
<       int   , 
---
>          , 
65c65
<       int   , 
---
>           
65,66c65,66
<       int   , 
<       int   );
---
>          , 
>          );
65,66c65,66
<       int   , 
<       int   );
---
>           
>          );
65,66c65,66
<       int   , 
<       int   );
---
>          , 
>       int   ;
65,66c65,66
<       int   , 
<       int   );
---
>           
>       int   ;
65,66c65,66
<       int   , 
<       int   );
---
>          , 
>          ;
65,66c65,66
<       int   , 
<       int   );
---
>           
>          ;
65c65
<       int   , 
---
>       int    
65,66c65,66
<       int   , 
<       int   );
---
>       int    
>          );
65,66c65,66
<       int   , 
<       int   );
---
>       int    
>       int   ;
65,66c65,66
<       int   , 
<       int   );
---
>       int    
>          ;
65,66c65,66
<       int   , 
<       int   );
---
>       int    
>       int   )
65,66c65,66
<       int   , 
<       int   );
---
>       int    
>          )
65,66c65,66
<       int   , 
<       int   );
---
>       int    
>       int   
65,66c65,66
<       int   , 
<       int   );
---
>       int    
>          
66c66
<       int   );
---
>          );
66c66
<       int   );
---
>          ;
66c66
<       int   );
---
>          )
66c66
<       int   );
---
>          
66c66
<       int   );
---
>          );
68c68
< void BZ2_bzWrite ( 
---
>  BZ2_bzWrite ( 
66c66
<       int   );
---
>          ;
68c68
< void BZ2_bzWrite ( 
---
>  BZ2_bzWrite ( 
66c66
<       int   );
---
>          )
68c68
< void BZ2_bzWrite ( 
---
>  BZ2_bzWrite ( 
66c66
<       int   );
---
>          
68c68
< void BZ2_bzWrite ( 
---
>  BZ2_bzWrite ( 
66c66
<       int   );
---
>       int   ;
66c66
<       int   );
---
>       int   
66c66
<       int   );
---
>       int   ;
68c68
< void BZ2_bzWrite ( 
---
>  BZ2_bzWrite ( 
66c66
<       int   );
---
>       int   
68c68
< void BZ2_bzWrite ( 
---
>  BZ2_bzWrite ( 
66c66
<       int   );
---
>       int   ;
68c68
< void BZ2_bzWrite ( 
---
> void  ( 
66c66
<       int   );
---
>       int   
68c68
< void BZ2_bzWrite ( 
---
> void  ( 
66c66
<       int   );
---
>       int   ;
68c68
< void BZ2_bzWrite ( 
---
>   ( 
66c66
<       int   );
---
>       int   
68c68
< void BZ2_bzWrite ( 
---
>   ( 
66c66
<       int   );
---
>       int   )
66c66
<       int   );
---
>       int   )
68c68
< void BZ2_bzWrite ( 
---
>  BZ2_bzWrite ( 
66c66
<       int   );
---
>       int   )
68c68
< void BZ2_bzWrite ( 
---
> void  ( 
66c66
<       int   );
---
>       int   )
68c68
< void BZ2_bzWrite ( 
---
>   ( 
66c66
<       int   );
---
>       int   )
68c68
< void BZ2_bzWrite ( 
---
> void BZ2_bzWrite  
66c66
<       int   );
---
>       int   )
68c68
< void BZ2_bzWrite ( 
---
>  BZ2_bzWrite  
66c66
<       int   );
---
>       int   )
68c68
< void BZ2_bzWrite ( 
---
> void   
66c66
<       int   );
---
>       int   )
68c68
< void BZ2_bzWrite ( 
---
>    
68c68
< void BZ2_bzWrite ( 
---
>  BZ2_bzWrite ( 
68c68
< void BZ2_bzWrite ( 
---
>   ( 
68c68
< void BZ2_bzWrite ( 
---
>  BZ2_bzWrite  
68c68
< void BZ2_bzWrite ( 
---
>    
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
>  BZ2_bzWrite ( 
>       *    , 
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
>   ( 
>       *    , 
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
>  BZ2_bzWrite  
>       *    , 
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
>    
>       *    , 
68c68
< void BZ2_bzWrite ( 
---
> void  ( 
68c68
< void BZ2_bzWrite ( 
---
> void   
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
> void  ( 
>       *    , 
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
> void   
>       *    , 
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
> void  ( 
>       int    , 
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
> void   
>       int    , 
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
> void  ( 
>           , 
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
> void   
>           , 
68c68
< void BZ2_bzWrite ( 
---
> void BZ2_bzWrite  
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
> void BZ2_bzWrite  
>       *    , 
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
> void BZ2_bzWrite  
>       int    , 
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
> void BZ2_bzWrite  
>           , 
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
> void BZ2_bzWrite  
>       int*     
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
> void BZ2_bzWrite  
>       *     
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
> void BZ2_bzWrite  
>       int     
68,69c68,69
< void BZ2_bzWrite ( 
<       int*    , 
---
> void BZ2_bzWrite  
>            
69c69
<       int*    , 
---
>       *    , 
69c69
<       int*    , 
---
>           , 
69c69
<       int*    , 
---
>       *     
69c69
<       int*    , 
---
>            
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       *    , 
>       * , 
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>           , 
>       * , 
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       *     
>       * , 
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>            
>       * , 
69c69
<       int*    , 
---
>       int    , 
69c69
<       int*    , 
---
>       int     
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       int    , 
>       * , 
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       int     
>       * , 
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       int    , 
>       BZFILE , 
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       int     
>       BZFILE , 
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       int    , 
>        , 
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       int     
>        , 
69c69
<       int*    , 
---
>       int*     
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       * , 
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       BZFILE , 
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       int*     
>        , 
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       BZFILE*  
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       *  
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       int*     
>       BZFILE  
69,70c69,70
<       int*    , 
<       BZFILE* , 
---
>       int*     
>         
70c70
<       BZFILE* , 
---
>       * , 
70c70
<       BZFILE* , 
---
>        , 
70c70
<       BZFILE* , 
---
>       *  
70c70
<       BZFILE* , 
---
>         
70,71c70,71
<       BZFILE* , 
<       void*   , 
---
>       * , 
>       *   , 
70,71c70,71
<       BZFILE* , 
<       void*   , 
---
>        , 
>       *   , 
70,71c70,71
<       BZFILE* , 
<       void*   , 
---
>       *  
>       *   , 
70,71c70,71
<       BZFILE* , 
<       void*   , 
---
>         
>       *   , 
70c70
<       BZFILE* , 
---
>       BZFILE , 
70c70
<       BZFILE* , 
---
>       BZFILE  
70,71c70,71
<       BZFILE* , 
<       void*   , 
---
>       BZFILE , 
>       *   , 
70,71c70,71
<       BZFILE* , 
<       void*   , 
---
>       BZFILE  
>       *   , 
70,71c70,71
<       BZFILE* , 
<       void*   , 
---
>       BZFILE , 
>       void   , 
70,71c70,71
<       BZFILE* , 
<       void*   , 
---
>       BZFILE  
>       void   , 
70,71c70,71
<       BZFILE* , 
<       void*   , 
---
>       BZFILE , 
>          , 
70,71c70,71
<       BZFILE* , 
<       void*   , 
---
>       BZFILE  
>          , 
70c70
<       BZFILE* , 
---
>       BZFILE*  
70,71c70,71
<       BZFILE* , 
<       void*   , 
---
>       BZFILE*  
>       *   , 
(97.9 %, 4352 bytes)
70c70
<       BZFILE , 
---
>       BZFILE  
70,71c70,71
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>       *   , 
70,71c70,71
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>       void   , 
70,71c70,71
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>          , 
70,71c70,71
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>       void*    
70,71c70,71
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>       *    
70,71c70,71
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>       void    
70,71c70,71
<       BZFILE , 
<       void*   , 
---
>       BZFILE  
>           
71c71
<       void*   , 
---
>       *   , 
71c71
<       void*   , 
---
>          , 
71c71
<       void*   , 
---
>       *    
71c71
<       void*   , 
---
>           
71,72c71,72
<       void*   , 
<       int     );
---
>       *   , 
>            );
71,72c71,72
<       void*   , 
<       int     );
---
>          , 
>            );
71,72c71,72
<       void*   , 
<       int     );
---
>       *    
>            );
71,72c71,72
<       void*   , 
<       int     );
---
>           
>            );
71c71
<       void*   , 
---
>       void   , 
71c71
<       void*   , 
---
>       void    
71,72c71,72
<       void*   , 
<       int     );
---
>       void   , 
>            );
71,72c71,72
<       void*   , 
<       int     );
---
>       void    
>            );
71,72c71,72
<       void*   , 
<       int     );
---
>       void   , 
>       int     ;
71,72c71,72
<       void*   , 
<       int     );
---
>       void    
>       int     ;
71,72c71,72
<       void*   , 
<       int     );
---
>       void   , 
>            ;
71,72c71,72
<       void*   , 
<       int     );
---
>       void    
>            ;
71c71
<       void*   , 
---
>       void*    
71,72c71,72
<       void*   , 
<       int     );
---
>       void*    
>            );
71,72c71,72
<       void*   , 
<       int     );
---
>       void*    
>       int     ;
71,72c71,72
<       void*   , 
<       int     );
---
>       void*    
>            ;
71,72c71,72
<       void*   , 
<       int     );
---
>       void*    
>       int     )
71,72c71,72
<       void*   , 
<       int     );
---
>       void*    
>            )
71,72c71,72
<       void*   , 
<       int     );
---
>       void*    
>       int     
71,72c71,72
<       void*   , 
<       int     );
---
>       void*    
>            
72c72
<       int     );
---
>            );
72c72
<       int     );
---
>            ;
72c72
<       int     );
---
>            )
72c72
<       int     );
---
>            
72c72
<       int     );
---
>            );
74c74
< void BZ2_bzWriteClose ( 
---
>  BZ2_bzWriteClose ( 
72c72
<       int     );
---
>            ;
74c74
< void BZ2_bzWriteClose ( 
---
>  BZ2_bzWriteClose ( 
72c72
<       int     );
---
>            )
74c74
< void BZ2_bzWriteClose ( 
---
>  BZ2_bzWriteClose ( 
72c72
<       int     );
---
>            
74c74
< void BZ2_bzWriteClose ( 
---
>  BZ2_bzWriteClose ( 
72c72
<       int     );
---
>       int     ;
72c72
<       int     );
---
>       int     
72c72
<       int     );
---
>       int     ;
74c74
< void BZ2_bzWriteClose ( 
---
>  BZ2_bzWriteClose ( 
72c72
<       int     );
---
>       int     
74c74
< void BZ2_bzWriteClose ( 
---
>  BZ2_bzWriteClose ( 
72c72
<       int     );
---
>       int     ;
74c74
< void BZ2_bzWriteClose ( 
---
> void  ( 
72c72
<       int     );
---
>       int     
74c74
< void BZ2_bzWriteClose ( 
---
> void  ( 
72c72
<       int     );
---
>       int     ;
74c74
< void BZ2_bzWriteClose ( 
---
>   ( 
72c72
<       int     );
---
>       int     
74c74
< void BZ2_bzWriteClose ( 
---
>   ( 
72c72
<       int     );
---
>       int     )
72c72
<       int     );
---
>       int     )
74c74
< void BZ2_bzWriteClose ( 
---
>  BZ2_bzWriteClose ( 
72c72
<       int     );
---
>       int     )
74c74
< void BZ2_bzWriteClose ( 
---
> void  ( 
72c72
<       int     );
---
>       int     )
74c74
< void BZ2_bzWriteClose ( 
---
>   ( 
72c72
<       int     );
---
>       int     )
74c74
< void BZ2_bzWriteClose ( 
---
> void BZ2_bzWriteClose  
72c72
<       int     );
---
>       int     )
74c74
< void BZ2_bzWriteClose ( 
---
>  BZ2_bzWriteClose  
72c72
<       int     );
---
>       int     )
74c74
< void BZ2_bzWriteClose ( 
---
> void   
72c72
<       int     );
---
>       int     )
74c74
< void BZ2_bzWriteClose ( 
---
>    
74c74
< void BZ2_bzWriteClose ( 
---
>  BZ2_bzWriteClose ( 
74c74
< void BZ2_bzWriteClose ( 
---
>   ( 
74c74
< void BZ2_bzWriteClose ( 
---
>  BZ2_bzWriteClose  
74c74
< void BZ2_bzWriteClose ( 
---
>    
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
>  BZ2_bzWriteClose ( 
>       *          , 
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
>   ( 
>       *          , 
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
>  BZ2_bzWriteClose  
>       *          , 
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
>    
>       *          , 
74c74
< void BZ2_bzWriteClose ( 
---
> void  ( 
74c74
< void BZ2_bzWriteClose ( 
---
> void   
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
> void  ( 
>       *          , 
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
> void   
>       *          , 
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
> void  ( 
>       int          , 
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
> void   
>       int          , 
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
> void  ( 
>                 , 
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
> void   
>                 , 
74c74
< void BZ2_bzWriteClose ( 
---
> void BZ2_bzWriteClose  
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
> void BZ2_bzWriteClose  
>       *          , 
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
> void BZ2_bzWriteClose  
>       int          , 
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
> void BZ2_bzWriteClose  
>                 , 
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
> void BZ2_bzWriteClose  
>       int*           
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
> void BZ2_bzWriteClose  
>       *           
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
> void BZ2_bzWriteClose  
>       int           
74,75c74,75
< void BZ2_bzWriteClose ( 
<       int*          , 
---
> void BZ2_bzWriteClose  
>                  
75c75
<       int*          , 
---
>       *          , 
75c75
<       int*          , 
---
>                 , 
75c75
<       int*          , 
---
>       *           
75c75
<       int*          , 
---
>                  
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       *          , 
>       *       , 
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>                 , 
>       *       , 
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       *           
>       *       , 
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>                  
>       *       , 
75c75
<       int*          , 
---
>       int          , 
75c75
<       int*          , 
---
>       int           
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       int          , 
>       *       , 
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       int           
>       *       , 
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       int          , 
>       BZFILE       , 
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       int           
>       BZFILE       , 
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       int          , 
>              , 
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       int           
>              , 
75c75
<       int*          , 
---
>       int*           
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>       *       , 
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>       BZFILE       , 
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>              , 
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>       BZFILE*        
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>       *        
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>       BZFILE        
75,76c75,76
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>               
76c76
<       BZFILE*       , 
---
>       *       , 
76c76
<       BZFILE*       , 
---
>              , 
76c76
<       BZFILE*       , 
---
>       *        
76c76
<       BZFILE*       , 
---
>               
76,77c76,77
<       BZFILE*       , 
<       int           , 
---
>       *       , 
>                  , 
76,77c76,77
<       BZFILE*       , 
<       int           , 
---
>              , 
>                  , 
76,77c76,77
<       BZFILE*       , 
<       int           , 
---
>       *        
>                  , 
76,77c76,77
<       BZFILE*       , 
<       int           , 
---
>               
>                  , 
76c76
<       BZFILE*       , 
---
>       BZFILE       , 
76c76
<       BZFILE*       , 
---
>       BZFILE        
76,77c76,77
<       BZFILE*       , 
<       int           , 
---
>       BZFILE       , 
>                  , 
76,77c76,77
<       BZFILE*       , 
<       int           , 
---
>       BZFILE        
>                  , 
76,77c76,77
<       BZFILE*       , 
<       int           , 
---
>       BZFILE       , 
>       int            
76,77c76,77
<       BZFILE*       , 
<       int           , 
---
>       BZFILE        
>       int            
76,77c76,77
<       BZFILE*       , 
<       int           , 
---
>       BZFILE       , 
>                   
76,77c76,77
<       BZFILE*       , 
<       int           , 
---
>       BZFILE        
>                   
(97.9 %, 4351 bytes)
76c76
<       BZFILE       , 
---
>       BZFILE        
76,77c76,77
<       BZFILE       , 
<       int           , 
---
>       BZFILE        
>                  , 
76,77c76,77
<       BZFILE       , 
<       int           , 
---
>       BZFILE        
>       int            
76,77c76,77
<       BZFILE       , 
<       int           , 
---
>       BZFILE        
>                   
76c76
<       BZFILE       , 
---
>       BZFILE        
78c78
<       unsigned * , 
---
>        * , 
76,78c76,78
<       BZFILE       , 
<       int           , 
<       unsigned * , 
---
>       BZFILE        
>                  , 
>        * , 
76,78c76,78
<       BZFILE       , 
<       int           , 
<       unsigned * , 
---
>       BZFILE        
>       int            
>        * , 
76,78c76,78
<       BZFILE       , 
<       int           , 
<       unsigned * , 
---
>       BZFILE        
>                   
>        * , 
77c77
<       int           , 
---
>                  , 
77c77
<       int           , 
---
>                   
77,78c77,78
<       int           , 
<       unsigned * , 
---
>                  , 
>        * , 
77,78c77,78
<       int           , 
<       unsigned * , 
---
>                   
>        * , 
77,78c77,78
<       int           , 
<       unsigned * , 
---
>                  , 
>       unsigned  , 
77,78c77,78
<       int           , 
<       unsigned * , 
---
>                   
>       unsigned  , 
77,78c77,78
<       int           , 
<       unsigned * , 
---
>                  , 
>         , 
77,78c77,78
<       int           , 
<       unsigned * , 
---
>                   
>         , 
77c77
<       int           , 
---
>       int            
77,78c77,78
<       int           , 
<       unsigned * , 
---
>       int            
>        * , 
77,78c77,78
<       int           , 
<       unsigned * , 
---
>       int            
>       unsigned  , 
77,78c77,78
<       int           , 
<       unsigned * , 
---
>       int            
>         , 
77,78c77,78
<       int           , 
<       unsigned * , 
---
>       int            
>       unsigned *  
77,78c77,78
<       int           , 
<       unsigned * , 
---
>       int            
>        *  
77,78c77,78
<       int           , 
<       unsigned * , 
---
>       int            
>       unsigned   
77,78c77,78
<       int           , 
<       unsigned * , 
---
>       int            
>          
78c78
<       unsigned * , 
---
>        * , 
78c78
<       unsigned * , 
---
>         , 
78c78
<       unsigned * , 
---
>        *  
78c78
<       unsigned * , 
---
>          
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>        * , 
>        * );
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>         , 
>        * );
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>        *  
>        * );
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>          
>        * );
78c78
<       unsigned * , 
---
>       unsigned  , 
78c78
<       unsigned * , 
---
>       unsigned   
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>       unsigned  , 
>        * );
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>       unsigned   
>        * );
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>       unsigned  , 
>       unsigned  );
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>       unsigned   
>       unsigned  );
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>       unsigned  , 
>         );
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>       unsigned   
>         );
78c78
<       unsigned * , 
---
>       unsigned *  
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>        * );
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>       unsigned  );
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>         );
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>       unsigned * ;
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>        * ;
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>       unsigned  ;
78,79c78,79
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>         ;
79c79
<       unsigned * );
---
>        * );
79c79
<       unsigned * );
---
>         );
79c79
<       unsigned * );
---
>        * ;
79c79
<       unsigned * );
---
>         ;
79c79
<       unsigned * );
---
>        * )
79c79
<       unsigned * );
---
>         )
79c79
<       unsigned * );
---
>        * 
79c79
<       unsigned * );
---
>         
79c79
<       unsigned * );
---
>       unsigned  );
79c79
<       unsigned * );
---
>       unsigned  ;
79c79
<       unsigned * );
---
>       unsigned  )
79c79
<       unsigned * );
---
>       unsigned  
79c79
<       unsigned * );
---
>       unsigned  );
81c81
< void BZ2_bzWriteClose64 ( 
---
>  BZ2_bzWriteClose64 ( 
79c79
<       unsigned * );
---
>       unsigned  ;
81c81
< void BZ2_bzWriteClose64 ( 
---
>  BZ2_bzWriteClose64 ( 
79c79
<       unsigned * );
---
>       unsigned  )
81c81
< void BZ2_bzWriteClose64 ( 
---
>  BZ2_bzWriteClose64 ( 
79c79
<       unsigned * );
---
>       unsigned  
81c81
< void BZ2_bzWriteClose64 ( 
---
>  BZ2_bzWriteClose64 ( 
79c79
<       unsigned * );
---
>       unsigned * ;
79c79
<       unsigned * );
---
>       unsigned * 
79c79
<       unsigned * );
---
>       unsigned * ;
81c81
< void BZ2_bzWriteClose64 ( 
---
>  BZ2_bzWriteClose64 ( 
79c79
<       unsigned * );
---
>       unsigned * 
81c81
< void BZ2_bzWriteClose64 ( 
---
>  BZ2_bzWriteClose64 ( 
79c79
<       unsigned * );
---
>       unsigned * ;
81c81
< void BZ2_bzWriteClose64 ( 
---
> void  ( 
79c79
<       unsigned * );
---
>       unsigned * 
81c81
< void BZ2_bzWriteClose64 ( 
---
> void  ( 
79c79
<       unsigned * );
---
>       unsigned * ;
81c81
< void BZ2_bzWriteClose64 ( 
---
>   ( 
79c79
<       unsigned * );
---
>       unsigned * 
81c81
< void BZ2_bzWriteClose64 ( 
---
>   ( 
79c79
<       unsigned * );
---
>       unsigned * )
79c79
<       unsigned * );
---
>       unsigned * )
81c81
< void BZ2_bzWriteClose64 ( 
---
>  BZ2_bzWriteClose64 ( 
79c79
<       unsigned * );
---
>       unsigned * )
81c81
< void BZ2_bzWriteClose64 ( 
---
> void  ( 
79c79
<       unsigned * );
---
>       unsigned * )
81c81
< void BZ2_bzWriteClose64 ( 
---
>   ( 
79c79
<       unsigned * );
---
>       unsigned * )
81c81
< void BZ2_bzWriteClose64 ( 
---
> void BZ2_bzWriteClose64  
79c79
<       unsigned * );
---
>       unsigned * )
81c81
< void BZ2_bzWriteClose64 ( 
---
>  BZ2_bzWriteClose64  
79c79
<       unsigned * );
---
>       unsigned * )
81c81
< void BZ2_bzWriteClose64 ( 
---
> void   
79c79
<       unsigned * );
---
>       unsigned * )
81c81
< void BZ2_bzWriteClose64 ( 
---
>    
81c81
< void BZ2_bzWriteClose64 ( 
---
>  BZ2_bzWriteClose64 ( 
81c81
< void BZ2_bzWriteClose64 ( 
---
>   ( 
81c81
< void BZ2_bzWriteClose64 ( 
---
>  BZ2_bzWriteClose64  
81c81
< void BZ2_bzWriteClose64 ( 
---
>    
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>  BZ2_bzWriteClose64 ( 
>       *          , 
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>   ( 
>       *          , 
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>  BZ2_bzWriteClose64  
>       *          , 
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
>    
>       *          , 
81c81
< void BZ2_bzWriteClose64 ( 
---
> void  ( 
81c81
< void BZ2_bzWriteClose64 ( 
---
> void   
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> void  ( 
>       *          , 
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> void   
>       *          , 
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> void  ( 
>       int          , 
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> void   
>       int          , 
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> void  ( 
>                 , 
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> void   
>                 , 
81c81
< void BZ2_bzWriteClose64 ( 
---
> void BZ2_bzWriteClose64  
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> void BZ2_bzWriteClose64  
>       *          , 
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> void BZ2_bzWriteClose64  
>       int          , 
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> void BZ2_bzWriteClose64  
>                 , 
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> void BZ2_bzWriteClose64  
>       int*           
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> void BZ2_bzWriteClose64  
>       *           
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> void BZ2_bzWriteClose64  
>       int           
81,82c81,82
< void BZ2_bzWriteClose64 ( 
<       int*          , 
---
> void BZ2_bzWriteClose64  
>                  
82c82
<       int*          , 
---
>       *          , 
82c82
<       int*          , 
---
>                 , 
82c82
<       int*          , 
---
>       *           
82c82
<       int*          , 
---
>                  
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       *          , 
>       *       , 
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>                 , 
>       *       , 
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       *           
>       *       , 
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>                  
>       *       , 
82c82
<       int*          , 
---
>       int          , 
82c82
<       int*          , 
---
>       int           
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       int          , 
>       *       , 
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       int           
>       *       , 
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       int          , 
>       BZFILE       , 
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       int           
>       BZFILE       , 
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       int          , 
>              , 
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       int           
>              , 
82c82
<       int*          , 
---
>       int*           
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>       *       , 
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>       BZFILE       , 
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>              , 
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>       BZFILE*        
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>       *        
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>       BZFILE        
82,83c82,83
<       int*          , 
<       BZFILE*       , 
---
>       int*           
>               
83c83
<       BZFILE*       , 
---
>       *       , 
83c83
<       BZFILE*       , 
---
>              , 
83c83
<       BZFILE*       , 
---
>       *        
83c83
<       BZFILE*       , 
---
>               
83,84c83,84
<       BZFILE*       , 
<       int           , 
---
>       *       , 
>                  , 
83,84c83,84
<       BZFILE*       , 
<       int           , 
---
>              , 
>                  , 
83,84c83,84
<       BZFILE*       , 
<       int           , 
---
>       *        
>                  , 
83,84c83,84
<       BZFILE*       , 
<       int           , 
---
>               
>                  , 
83c83
<       BZFILE*       , 
---
>       BZFILE       , 
83c83
<       BZFILE*       , 
---
>       BZFILE        
83,84c83,84
<       BZFILE*       , 
<       int           , 
---
>       BZFILE       , 
>                  , 
83,84c83,84
<       BZFILE*       , 
<       int           , 
---
>       BZFILE        
>                  , 
83,84c83,84
<       BZFILE*       , 
<       int           , 
---
>       BZFILE       , 
>       int            
83,84c83,84
<       BZFILE*       , 
<       int           , 
---
>       BZFILE        
>       int            
83,84c83,84
<       BZFILE*       , 
<       int           , 
---
>       BZFILE       , 
>                   
83,84c83,84
<       BZFILE*       , 
<       int           , 
---
>       BZFILE        
>                   
(97.9 %, 4350 bytes)
83c83
<       BZFILE       , 
---
>       BZFILE        
83,84c83,84
<       BZFILE       , 
<       int           , 
---
>       BZFILE        
>                  , 
83,84c83,84
<       BZFILE       , 
<       int           , 
---
>       BZFILE        
>       int            
83,84c83,84
<       BZFILE       , 
<       int           , 
---
>       BZFILE        
>                   
83c83
<       BZFILE       , 
---
>       BZFILE        
85c85
<       unsigned * , 
---
>        * , 
83,85c83,85
<       BZFILE       , 
<       int           , 
<       unsigned * , 
---
>       BZFILE        
>                  , 
>        * , 
83,85c83,85
<       BZFILE       , 
<       int           , 
<       unsigned * , 
---
>       BZFILE        
>       int            
>        * , 
83,85c83,85
<       BZFILE       , 
<       int           , 
<       unsigned * , 
---
>       BZFILE        
>                   
>        * , 
84c84
<       int           , 
---
>                  , 
84c84
<       int           , 
---
>                   
84,85c84,85
<       int           , 
<       unsigned * , 
---
>                  , 
>        * , 
84,85c84,85
<       int           , 
<       unsigned * , 
---
>                   
>        * , 
84,85c84,85
<       int           , 
<       unsigned * , 
---
>                  , 
>       unsigned  , 
84,85c84,85
<       int           , 
<       unsigned * , 
---
>                   
>       unsigned  , 
84,85c84,85
<       int           , 
<       unsigned * , 
---
>                  , 
>         , 
84,85c84,85
<       int           , 
<       unsigned * , 
---
>                   
>         , 
84c84
<       int           , 
---
>       int            
84,85c84,85
<       int           , 
<       unsigned * , 
---
>       int            
>        * , 
84,85c84,85
<       int           , 
<       unsigned * , 
---
>       int            
>       unsigned  , 
84,85c84,85
<       int           , 
<       unsigned * , 
---
>       int            
>         , 
84,85c84,85
<       int           , 
<       unsigned * , 
---
>       int            
>       unsigned *  
84,85c84,85
<       int           , 
<       unsigned * , 
---
>       int            
>        *  
84,85c84,85
<       int           , 
<       unsigned * , 
---
>       int            
>       unsigned   
84,85c84,85
<       int           , 
<       unsigned * , 
---
>       int            
>          
85c85
<       unsigned * , 
---
>        * , 
85c85
<       unsigned * , 
---
>         , 
85c85
<       unsigned * , 
---
>        *  
85c85
<       unsigned * , 
---
>          
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>        * , 
>        * , 
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>         , 
>        * , 
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>        *  
>        * , 
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>          
>        * , 
85c85
<       unsigned * , 
---
>       unsigned  , 
85c85
<       unsigned * , 
---
>       unsigned   
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>       unsigned  , 
>        * , 
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>       unsigned   
>        * , 
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>       unsigned  , 
>       unsigned  , 
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>       unsigned   
>       unsigned  , 
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>       unsigned  , 
>         , 
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>       unsigned   
>         , 
85c85
<       unsigned * , 
---
>       unsigned *  
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>        * , 
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>       unsigned  , 
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>         , 
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>       unsigned *  
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>        *  
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>       unsigned   
85,86c85,86
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>          
86c86
<       unsigned * , 
---
>        * , 
86c86
<       unsigned * , 
---
>         , 
86c86
<       unsigned * , 
---
>        *  
86c86
<       unsigned * , 
---
>          
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>        * , 
>        * , 
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>         , 
>        * , 
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>        *  
>        * , 
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>          
>        * , 
86c86
<       unsigned * , 
---
>       unsigned  , 
86c86
<       unsigned * , 
---
>       unsigned   
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>       unsigned  , 
>        * , 
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>       unsigned   
>        * , 
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>       unsigned  , 
>       unsigned  , 
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>       unsigned   
>       unsigned  , 
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>       unsigned  , 
>         , 
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>       unsigned   
>         , 
86c86
<       unsigned * , 
---
>       unsigned *  
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>        * , 
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>       unsigned  , 
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>         , 
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>       unsigned *  
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>        *  
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>       unsigned   
86,87c86,87
<       unsigned * , 
<       unsigned * , 
---
>       unsigned *  
>          
87c87
<       unsigned * , 
---
>        * , 
87c87
<       unsigned * , 
---
>         , 
87c87
<       unsigned * , 
---
>        *  
87c87
<       unsigned * , 
---
>          
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>        * , 
>        * );
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>         , 
>        * );
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>        *  
>        * );
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>          
>        * );
87c87
<       unsigned * , 
---
>       unsigned  , 
87c87
<       unsigned * , 
---
>       unsigned   
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>       unsigned  , 
>        * );
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>       unsigned   
>        * );
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>       unsigned  , 
>       unsigned  );
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>       unsigned   
>       unsigned  );
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>       unsigned  , 
>         );
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>       unsigned   
>         );
87c87
<       unsigned * , 
---
>       unsigned *  
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>        * );
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>       unsigned  );
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>         );
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>       unsigned * ;
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>        * ;
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>       unsigned  ;
87,88c87,88
<       unsigned * , 
<       unsigned * );
---
>       unsigned *  
>         ;
88c88
<       unsigned * );
---
>        * );
88c88
<       unsigned * );
---
>         );
88c88
<       unsigned * );
---
>        * ;
88c88
<       unsigned * );
---
>         ;
88c88
<       unsigned * );
---
>        * )
88c88
<       unsigned * );
---
>         )
88c88
<       unsigned * );
---
>        * 
88c88
<       unsigned * );
---
>         
88c88
<       unsigned * );
---
>       unsigned  );
88c88
<       unsigned * );
---
>       unsigned  ;
88c88
<       unsigned * );
---
>       unsigned  )
88c88
<       unsigned * );
---
>       unsigned  
88c88
<       unsigned * );
---
>       unsigned  );
93c93
< BZ2_bzBuffToBuffCompress ( 
---
>  ( 
88c88
<       unsigned * );
---
>       unsigned  ;
93c93
< BZ2_bzBuffToBuffCompress ( 
---
>  ( 
88c88
<       unsigned * );
---
>       unsigned  )
93c93
< BZ2_bzBuffToBuffCompress ( 
---
>  ( 
88c88
<       unsigned * );
---
>       unsigned  
93c93
< BZ2_bzBuffToBuffCompress ( 
---
>  ( 
88c88
<       unsigned * );
---
>       unsigned * ;
88c88
<       unsigned * );
---
>       unsigned * 
88c88
<       unsigned * );
---
>       unsigned * ;
93c93
< BZ2_bzBuffToBuffCompress ( 
---
>  ( 
88c88
<       unsigned * );
---
>       unsigned * 
93c93
< BZ2_bzBuffToBuffCompress ( 
---
>  ( 
88c88
<       unsigned * );
---
>       unsigned * ;
93c93
< BZ2_bzBuffToBuffCompress ( 
---
> BZ2_bzBuffToBuffCompress  
88c88
<       unsigned * );
---
>       unsigned * 
93c93
< BZ2_bzBuffToBuffCompress ( 
---
> BZ2_bzBuffToBuffCompress  
88c88
<       unsigned * );
---
>       unsigned * ;
93c93
< BZ2_bzBuffToBuffCompress ( 
---
>   
88c88
<       unsigned * );
---
>       unsigned * 
93c93
< BZ2_bzBuffToBuffCompress ( 
---
>   
88c88
<       unsigned * );
---
>       unsigned * )
88c88
<       unsigned * );
---
>       unsigned * )
93c93
< BZ2_bzBuffToBuffCompress ( 
---
>  ( 
88c88
<       unsigned * );
---
>       unsigned * )
93c93
< BZ2_bzBuffToBuffCompress ( 
---
> BZ2_bzBuffToBuffCompress  
88c88
<       unsigned * );
---
>       unsigned * )
93c93
< BZ2_bzBuffToBuffCompress ( 
---
>   
88c88
<       unsigned * );
---
>       unsigned * )
94c94
<       char*         , 
---
>       *         , 
88c88
<       unsigned * );
---
>       unsigned * )
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>  ( 
>       *         , 
88c88
<       unsigned * );
---
>       unsigned * )
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffCompress  
>       *         , 
88c88
<       unsigned * );
---
>       unsigned * )
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>   
>       *         , 
93c93
< BZ2_bzBuffToBuffCompress ( 
---
>  ( 
93c93
< BZ2_bzBuffToBuffCompress ( 
---
>   
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>  ( 
>       *         , 
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>   
>       *         , 
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>  ( 
>       char         , 
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>   
>       char         , 
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>  ( 
>                , 
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
>   
>                , 
93c93
< BZ2_bzBuffToBuffCompress ( 
---
> BZ2_bzBuffToBuffCompress  
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffCompress  
>       *         , 
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffCompress  
>       char         , 
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffCompress  
>                , 
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffCompress  
>       char*          
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffCompress  
>       *          
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffCompress  
>       char          
93,94c93,94
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffCompress  
>                 
94c94
<       char*         , 
---
>       *         , 
94c94
<       char*         , 
---
>                , 
94c94
<       char*         , 
---
>       *          
94c94
<       char*         , 
---
>                 
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       *         , 
>        * ,
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>                , 
>        * ,
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       *          
>        * ,
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>                 
>        * ,
94c94
<       char*         , 
---
>       char         , 
94c94
<       char*         , 
---
>       char          
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       char         , 
>        * ,
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       char          
>        * ,
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       char         , 
>       unsigned  ,
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       char          
>       unsigned  ,
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       char         , 
>         ,
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       char          
>         ,
94c94
<       char*         , 
---
>       char*          
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       char*          
>        * ,
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       char*          
>       unsigned  ,
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       char*          
>         ,
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       char*          
>       unsigned * 
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       char*          
>        * 
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       char*          
>       unsigned  
94,95c94,95
<       char*         , 
<       unsigned * ,
---
>       char*          
>         
95c95
<       unsigned * ,
---
>        * ,
95c95
<       unsigned * ,
---
>         ,
95c95
<       unsigned * ,
---
>        * 
95c95
<       unsigned * ,
---
>         
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>        * ,
>       *         , 
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>         ,
>       *         , 
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>        * 
>       *         , 
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>         
>       *         , 
95c95
<       unsigned * ,
---
>       unsigned  ,
95c95
<       unsigned * ,
---
>       unsigned  
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>       unsigned  ,
>       *         , 
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>       unsigned  
>       *         , 
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>       unsigned  ,
>       char         , 
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>       unsigned  
>       char         , 
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>       unsigned  ,
>                , 
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>       unsigned  
>                , 
95c95
<       unsigned * ,
---
>       unsigned * 
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>       *         , 
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>       char         , 
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>                , 
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>       char*          
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>       *          
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>       char          
95,96c95,96
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>                 
96c96
<       char*         , 
---
>       *         , 
96c96
<       char*         , 
---
>                , 
96c96
<       char*         , 
---
>       *          
96c96
<       char*         , 
---
>                 
96,97c96,97
<       char*         , 
<       unsigned ,
---
>       *         , 
>        ,
96,97c96,97
<       char*         , 
<       unsigned ,
---
>                , 
>        ,
96,97c96,97
<       char*         , 
<       unsigned ,
---
>       *          
>        ,
96,97c96,97
<       char*         , 
<       unsigned ,
---
>                 
>        ,
96c96
<       char*         , 
---
>       char         , 
96c96
<       char*         , 
---
>       char          
96,97c96,97
<       char*         , 
<       unsigned ,
---
>       char         , 
>        ,
96,97c96,97
<       char*         , 
<       unsigned ,
---
>       char          
>        ,
96,97c96,97
<       char*         , 
<       unsigned ,
---
>       char         , 
>       unsigned 
96,97c96,97
<       char*         , 
<       unsigned ,
---
>       char          
>       unsigned 
96,97c96,97
<       char*         , 
<       unsigned ,
---
>       char         , 
>        
96,97c96,97
<       char*         , 
<       unsigned ,
---
>       char          
>        
96c96
<       char*         , 
---
>       char*          
96,97c96,97
<       char*         , 
<       unsigned ,
---
>       char*          
>        ,
96,97c96,97
<       char*         , 
<       unsigned ,
---
>       char*          
>       unsigned 
96,97c96,97
<       char*         , 
<       unsigned ,
---
>       char*          
>        
96c96
<       char*         , 
---
>       char*          
98c98
<       int           , 
---
>                  , 
96,98c96,98
<       char*         , 
<       unsigned ,
<       int           , 
---
>       char*          
>        ,
>                  , 
96,98c96,98
<       char*         , 
<       unsigned ,
<       int           , 
---
>       char*          
>       unsigned 
>                  , 
96,98c96,98
<       char*         , 
<       unsigned ,
<       int           , 
---
>       char*          
>        
>                  , 
97c97
<       unsigned ,
---
>        ,
97c97
<       unsigned ,
---
>        
97,98c97,98
<       unsigned ,
<       int           , 
---
>        ,
>                  , 
97,98c97,98
<       unsigned ,
<       int           , 
---
>        
>                  , 
97,98c97,98
<       unsigned ,
<       int           , 
---
>        ,
>       int            
97,98c97,98
<       unsigned ,
<       int           , 
---
>        
>       int            
97,98c97,98
<       unsigned ,
<       int           , 
---
>        ,
>                   
97,98c97,98
<       unsigned ,
<       int           , 
---
>        
>                   
97c97
<       unsigned ,
---
>       unsigned 
97,98c97,98
<       unsigned ,
<       int           , 
---
>       unsigned 
>                  , 
97,98c97,98
<       unsigned ,
<       int           , 
---
>       unsigned 
>       int            
97,98c97,98
<       unsigned ,
<       int           , 
---
>       unsigned 
>                   
97,98c97
<       unsigned ,
<       int           , 
---
>       unsigned 
99a99
>                  , 
97,99c97,99
<       unsigned ,
<       int           , 
<       int           , 
---
>       unsigned 
>                  , 
>                  , 
97,99c97,99
<       unsigned ,
<       int           , 
<       int           , 
---
>       unsigned 
>       int            
>                  , 
97,99c97,99
<       unsigned ,
<       int           , 
<       int           , 
---
>       unsigned 
>                   
>                  , 
98c98
<       int           , 
---
>                  , 
98c98
<       int           , 
---
>                   
98,99c98,99
<       int           , 
<       int           , 
---
>                  , 
>                  , 
98,99c98,99
<       int           , 
<       int           , 
---
>                   
>                  , 
98,99c98,99
<       int           , 
<       int           , 
---
>                  , 
>       int            
98,99c98,99
<       int           , 
<       int           , 
---
>                   
>       int            
98,99c98,99
<       int           , 
<       int           , 
---
>                  , 
>                   
98,99c98,99
<       int           , 
<       int           , 
---
>                   
>                   
98c98
<       int           , 
---
>       int            
98,99c98,99
<       int           , 
<       int           , 
---
>       int            
>                  , 
98,99c98,99
<       int           , 
<       int           , 
---
>       int            
>       int            
98,99c98,99
<       int           , 
<       int           , 
---
>       int            
>                   
97a98
>       int            
99,100c100
<       int           , 
<       int           );
---
>                  );
98,100c98,100
<       int           , 
<       int           , 
<       int           );
---
>       int            
>                  , 
>                  );
98,100c98,100
<       int           , 
<       int           , 
<       int           );
---
>       int            
>       int            
>                  );
98,100c98,100
<       int           , 
<       int           , 
<       int           );
---
>       int            
>                   
>                  );
99c99
<       int           , 
---
>                  , 
99c99
<       int           , 
---
>                   
99,100c99,100
<       int           , 
<       int           );
---
>                  , 
>                  );
99,100c99,100
<       int           , 
<       int           );
---
>                   
>                  );
99,100c99,100
<       int           , 
<       int           );
---
>                  , 
>       int           ;
99,100c99,100
<       int           , 
<       int           );
---
>                   
>       int           ;
99,100c99,100
<       int           , 
<       int           );
---
>                  , 
>                  ;
99,100c99,100
<       int           , 
<       int           );
---
>                   
>                  ;
99c99
<       int           , 
---
>       int            
99,100c99,100
<       int           , 
<       int           );
---
>       int            
>                  );
99,100c99,100
<       int           , 
<       int           );
---
>       int            
>       int           ;
99,100c99,100
<       int           , 
<       int           );
---
>       int            
>                  ;
99,100c99,100
<       int           , 
<       int           );
---
>       int            
>       int           )
99,100c99,100
<       int           , 
<       int           );
---
>       int            
>                  )
99,100c99,100
<       int           , 
<       int           );
---
>       int            
>       int           
99,100c99,100
<       int           , 
<       int           );
---
>       int            
>                  
100c100
<       int           );
---
>                  );
100c100
<       int           );
---
>                  ;
100c100
<       int           );
---
>                  )
100c100
<       int           );
---
>                  
100c100
<       int           );
---
>                  );
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
>  ( 
100c100
<       int           );
---
>                  ;
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
>  ( 
100c100
<       int           );
---
>                  )
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
>  ( 
100c100
<       int           );
---
>                  
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
>  ( 
100c100
<       int           );
---
>       int           ;
100c100
<       int           );
---
>       int           
100c100
<       int           );
---
>       int           ;
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
>  ( 
100c100
<       int           );
---
>       int           
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
>  ( 
100c100
<       int           );
---
>       int           ;
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
> BZ2_bzBuffToBuffDecompress  
100c100
<       int           );
---
>       int           
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
> BZ2_bzBuffToBuffDecompress  
100c100
<       int           );
---
>       int           ;
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
>   
100c100
<       int           );
---
>       int           
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
>   
100c100
<       int           );
---
>       int           )
100c100
<       int           );
---
>       int           )
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
>  ( 
100c100
<       int           );
---
>       int           )
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
> BZ2_bzBuffToBuffDecompress  
100c100
<       int           );
---
>       int           )
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
>   
100c100
<       int           );
---
>       int           )
103c103
<       char*         , 
---
>       *         , 
100c100
<       int           );
---
>       int           )
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>  ( 
>       *         , 
100c100
<       int           );
---
>       int           )
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffDecompress  
>       *         , 
100c100
<       int           );
---
>       int           )
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>   
>       *         , 
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
>  ( 
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
>   
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>  ( 
>       *         , 
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>   
>       *         , 
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>  ( 
>       char         , 
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>   
>       char         , 
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>  ( 
>                , 
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
>   
>                , 
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
> BZ2_bzBuffToBuffDecompress  
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffDecompress  
>       *         , 
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffDecompress  
>       char         , 
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffDecompress  
>                , 
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffDecompress  
>       char*          
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffDecompress  
>       *          
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffDecompress  
>       char          
102,103c102,103
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
---
> BZ2_bzBuffToBuffDecompress  
>                 
103c103
<       char*         , 
---
>       *         , 
103c103
<       char*         , 
---
>                , 
103c103
<       char*         , 
---
>       *          
103c103
<       char*         , 
---
>                 
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       *         , 
>        * ,
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>                , 
>        * ,
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       *          
>        * ,
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>                 
>        * ,
103c103
<       char*         , 
---
>       char         , 
103c103
<       char*         , 
---
>       char          
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       char         , 
>        * ,
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       char          
>        * ,
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       char         , 
>       unsigned  ,
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       char          
>       unsigned  ,
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       char         , 
>         ,
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       char          
>         ,
103c103
<       char*         , 
---
>       char*          
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       char*          
>        * ,
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       char*          
>       unsigned  ,
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       char*          
>         ,
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       char*          
>       unsigned * 
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       char*          
>        * 
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       char*          
>       unsigned  
103,104c103,104
<       char*         , 
<       unsigned * ,
---
>       char*          
>         
104c104
<       unsigned * ,
---
>        * ,
104c104
<       unsigned * ,
---
>         ,
104c104
<       unsigned * ,
---
>        * 
104c104
<       unsigned * ,
---
>         
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>        * ,
>       *         , 
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>         ,
>       *         , 
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>        * 
>       *         , 
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>         
>       *         , 
104c104
<       unsigned * ,
---
>       unsigned  ,
104c104
<       unsigned * ,
---
>       unsigned  
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>       unsigned  ,
>       *         , 
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>       unsigned  
>       *         , 
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>       unsigned  ,
>       char         , 
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>       unsigned  
>       char         , 
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>       unsigned  ,
>                , 
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>       unsigned  
>                , 
104c104
<       unsigned * ,
---
>       unsigned * 
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>       *         , 
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>       char         , 
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>                , 
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>       char*          
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>       *          
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>       char          
104,105c104,105
<       unsigned * ,
<       char*         , 
---
>       unsigned * 
>                 
105c105
<       char*         , 
---
>       *         , 
105c105
<       char*         , 
---
>                , 
105c105
<       char*         , 
---
>       *          
105c105
<       char*         , 
---
>                 
105,106c105,106
<       char*         , 
<       unsigned ,
---
>       *         , 
>        ,
105,106c105,106
<       char*         , 
<       unsigned ,
---
>                , 
>        ,
105,106c105,106
<       char*         , 
<       unsigned ,
---
>       *          
>        ,
105,106c105,106
<       char*         , 
<       unsigned ,
---
>                 
>        ,
105c105
<       char*         , 
---
>       char         , 
105c105
<       char*         , 
---
>       char          
105,106c105,106
<       char*         , 
<       unsigned ,
---
>       char         , 
>        ,
105,106c105,106
<       char*         , 
<       unsigned ,
---
>       char          
>        ,
105,106c105,106
<       char*         , 
<       unsigned ,
---
>       char         , 
>       unsigned 
105,106c105,106
<       char*         , 
<       unsigned ,
---
>       char          
>       unsigned 
105,106c105,106
<       char*         , 
<       unsigned ,
---
>       char         , 
>        
105,106c105,106
<       char*         , 
<       unsigned ,
---
>       char          
>        
105c105
<       char*         , 
---
>       char*          
105,106c105,106
<       char*         , 
<       unsigned ,
---
>       char*          
>        ,
105,106c105,106
<       char*         , 
<       unsigned ,
---
>       char*          
>       unsigned 
105,106c105,106
<       char*         , 
<       unsigned ,
---
>       char*          
>        
105c105
<       char*         , 
---
>       char*          
107c107
<       int           , 
---
>                  , 
105,107c105,107
<       char*         , 
<       unsigned ,
<       int           , 
---
>       char*          
>        ,
>                  , 
105,107c105,107
<       char*         , 
<       unsigned ,
<       int           , 
---
>       char*          
>       unsigned 
>                  , 
105,107c105,107
<       char*         , 
<       unsigned ,
<       int           , 
---
>       char*          
>        
>                  , 
106c106
<       unsigned ,
---
>        ,
106c106
<       unsigned ,
---
>        
106,107c106,107
<       unsigned ,
<       int           , 
---
>        ,
>                  , 
106,107c106,107
<       unsigned ,
<       int           , 
---
>        
>                  , 
106,107c106,107
<       unsigned ,
<       int           , 
---
>        ,
>       int            
106,107c106,107
<       unsigned ,
<       int           , 
---
>        
>       int            
106,107c106,107
<       unsigned ,
<       int           , 
---
>        ,
>                   
106,107c106,107
<       unsigned ,
<       int           , 
---
>        
>                   
106c106
<       unsigned ,
---
>       unsigned 
106,107c106,107
<       unsigned ,
<       int           , 
---
>       unsigned 
>                  , 
106,107c106,107
<       unsigned ,
<       int           , 
---
>       unsigned 
>       int            
106,107c106,107
<       unsigned ,
<       int           , 
---
>       unsigned 
>                   
106c106
<       unsigned ,
---
>       unsigned 
108c108
<       int           );
---
>                  );
106,108c106,108
<       unsigned ,
<       int           , 
<       int           );
---
>       unsigned 
>                  , 
>                  );
106,108c106,108
<       unsigned ,
<       int           , 
<       int           );
---
>       unsigned 
>       int            
>                  );
106,108c106,108
<       unsigned ,
<       int           , 
<       int           );
---
>       unsigned 
>                   
>                  );
107c107
<       int           , 
---
>                  , 
107c107
<       int           , 
---
>                   
107,108c107,108
<       int           , 
<       int           );
---
>                  , 
>                  );
107,108c107,108
<       int           , 
<       int           );
---
>                   
>                  );
107,108c107,108
<       int           , 
<       int           );
---
>                  , 
>       int           ;
107,108c107,108
<       int           , 
<       int           );
---
>                   
>       int           ;
107,108c107,108
<       int           , 
<       int           );
---
>                  , 
>                  ;
107,108c107,108
<       int           , 
<       int           );
---
>                   
>                  ;
107c107
<       int           , 
---
>       int            
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>                  );
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>       int           ;
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>                  ;
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>       int           )
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>                  )
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>       int           
107,108c107,108
<       int           , 
<       int           );
---
>       int            
>                  
108c108
<       int           );
---
>                  );
108c108
<       int           );
---
>                  ;
108c108
<       int           );
---
>                  )
108c108
<       int           );
---
>                  
108c108,109
<       int           );
---
>                  );
> 
110d110
< ;
108c108,109
<       int           );
---
>                  ;
> 
110d110
< ;
108c108,109
<       int           );
---
>                  )
> 
110d110
< ;
108c108,109
<       int           );
---
>                  
> 
110d110
< ;
108c108
<       int           );
---
>       int           ;
108c108
<       int           );
---
>       int           
108c108,109
<       int           );
---
>       int           ;
> 
110d110
< ;
108c108,109
<       int           );
---
>       int           
> 
110d110
< ;
108c108
<       int           );
---
>       int           ;
111c111
< typedef Int32;
---
>  Int32;
108c108
<       int           );
---
>       int           
111c111
< typedef Int32;
---
>  Int32;
108c108
<       int           );
---
>       int           ;
110,111c110,111
< ;
< typedef Int32;
---
> 
>  Int32;
108c108
<       int           );
---
>       int           
110,111c110,111
< ;
< typedef Int32;
---
> 
>  Int32;
108c108
<       int           );
---
>       int           )
108c108,109
<       int           );
---
>       int           )
> 
110d110
< ;
108c108
<       int           );
---
>       int           )
111c111
< typedef Int32;
---
>  Int32;
108c108
<       int           );
---
>       int           )
110,111c110,111
< ;
< typedef Int32;
---
> 
>  Int32;
108c108
<       int           );
---
>       int           )
111c111
< typedef Int32;
---
> typedef ;
108c108
<       int           );
---
>       int           )
110,111c110,111
< ;
< typedef Int32;
---
> 
> typedef ;
108c108
<       int           );
---
>       int           )
111c111
< typedef Int32;
---
>  ;
108c108
<       int           );
---
>       int           )
110,111c110,111
< ;
< typedef Int32;
---
> 
>  ;
(97.9 %, 4349 bytes)
110c110
< ;
---
> 
110,111c110,111
< ;
< typedef Int32;
---
> 
>  Int32;
110,111c110,111
< ;
< typedef Int32;
---
> 
> typedef ;
110,111c110,111
< ;
< typedef Int32;
---
> 
>  ;
110,111c110,111
< ;
< typedef Int32;
---
> 
> typedef Int32
110,111c110,111
< ;
< typedef Int32;
---
> 
>  Int32
110,111c110,111
< ;
< typedef Int32;
---
> 
> typedef 
110,111c110,111
< ;
< typedef Int32;
---
> 
>  
111c111
< typedef Int32;
---
>  Int32;
111c111
< typedef Int32;
---
>  ;
111c111
< typedef Int32;
---
>  Int32
111c111
< typedef Int32;
---
>  
111,112c111,112
< typedef Int32;
< struct {
---
>  Int32;
>  {
111,112c111,112
< typedef Int32;
< struct {
---
>  ;
>  {
111,112c111,112
< typedef Int32;
< struct {
---
>  Int32
>  {
111,112c111,112
< typedef Int32;
< struct {
---
>  
>  {
111c111
< typedef Int32;
---
> typedef ;
111c111
< typedef Int32;
---
> typedef 
111,112c111,112
< typedef Int32;
< struct {
---
> typedef ;
>  {
111,112c111,112
< typedef Int32;
< struct {
---
> typedef 
>  {
111,112c111,112
< typedef Int32;
< struct {
---
> typedef ;
> struct 
111,112c111,112
< typedef Int32;
< struct {
---
> typedef 
> struct 
111,112c111,112
< typedef Int32;
< struct {
---
> typedef ;
>  
111,112c111,112
< typedef Int32;
< struct {
---
> typedef 
>  
111c111
< typedef Int32;
---
> typedef Int32
111,112c111,112
< typedef Int32;
< struct {
---
> typedef Int32
>  {
111,112c111,112
< typedef Int32;
< struct {
---
> typedef Int32
> struct 
111,112c111,112
< typedef Int32;
< struct {
---
> typedef Int32
>  
111c111
< typedef Int32;
---
> typedef Int32
114c114
<       }
---
>       
111,112c111,113
< typedef Int32;
< struct {
---
> typedef Int32
>  {
>       
114d114
<       }
111,112c111,113
< typedef Int32;
< struct {
---
> typedef Int32
> struct 
>       
114d114
<       }
111,112c111,113
< typedef Int32;
< struct {
---
> typedef Int32
>  
>       
114d114
<       }
112c112
< struct {
---
>  {
112c112
< struct {
---
>  
112c112,113
< struct {
---
>  {
>       
114d114
<       }
112c112,113
< struct {
---
>  
>       
114d114
<       }
112c112
< struct {
---
>  {
115c115
<    BZ2_bzCompressInit 
---
>     
112c112
< struct {
---
>  
115c115
<    BZ2_bzCompressInit 
---
>     
112c112
< struct {
---
>  {
114,115c114,115
<       }
<    BZ2_bzCompressInit 
---
>       
>     
112c112
< struct {
---
>  
114,115c114,115
<       }
<    BZ2_bzCompressInit 
---
>       
>     
112c112
< struct {
---
> struct 
112c112,113
< struct {
---
> struct 
>       
114d114
<       }
112c112
< struct {
---
> struct 
115c115
<    BZ2_bzCompressInit 
---
>     
(97.9 %, 4341 bytes)
115,116c115,116
<    BZ2_bzCompressInit 
<                     ( )
---
>     
>                      
115c115
<    BZ2_bzCompressInit 
---
>     
117c117
< {
---
> 
115,117c115,117
<    BZ2_bzCompressInit 
<                     ( )
< {
---
>     
>                      )
> 
115,117c115,117
<    BZ2_bzCompressInit 
<                     ( )
< {
---
>     
>                     ( 
> 
115,117c115,117
<    BZ2_bzCompressInit 
<                     ( )
< {
---
>     
>                      
> 
116c116
<                     ( )
---
>                      )
116c116
<                     ( )
---
>                      
116,117c116,117
<                     ( )
< {
---
>                      )
> 
116,117c116,117
<                     ( )
< {
---
>                      
> 
116c116
<                     ( )
---
>                      )
118c118
<    }
---
>    
116c116
<                     ( )
---
>                      
118c118
<    }
---
>    
116,118c116,118
<                     ( )
< {
<    }
---
>                      )
> 
>    
116,118c116,118
<                     ( )
< {
<    }
---
>                      
> 
>    
116c116
<                     ( )
---
>                     ( 
116,117c116,117
<                     ( )
< {
---
>                     ( 
> 
116c116
<                     ( )
---
>                     ( 
118c118
<    }
---
>    
116,118c116,118
<                     ( )
< {
<    }
---
>                     ( 
> 
>    
116c116
<                     ( )
---
>                     ( 
130c130
< BZ2_bzCompress ( )
---
>  ( )
116,117c116,117
<                     ( )
< {
---
>                     ( 
> 
130c130
< BZ2_bzCompress ( )
---
>  ( )
116c116
<                     ( )
---
>                     ( 
118c118
<    }
---
>    
130c130
< BZ2_bzCompress ( )
---
>  ( )
116,118c116
<                     ( )
< {
<    }
---
>                     ( 
119a118
>    
130c129,130
< BZ2_bzCompress ( )
---
> 
>  ( )
117c117
< {
---
> 
117,118c117,118
< {
<    }
---
> 
>    
117c117
< {
---
> 
130c130
< BZ2_bzCompress ( )
---
>  ( )
117,118d116
< {
<    }
119a118
>    
130c129,130
< BZ2_bzCompress ( )
---
> 
>  ( )
117c117
< {
---
> 
130c130
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  )
117,118d116
< {
<    }
119a118
>    
130c129,130
< BZ2_bzCompress ( )
---
> 
> BZ2_bzCompress  )
117c117
< {
---
> 
130c130
< BZ2_bzCompress ( )
---
>   )
117,118d116
< {
<    }
119a118
>    
130c129,130
< BZ2_bzCompress ( )
---
> 
>   )
118c118
<    }
---
>    
118c118
<    }
---
>    
130c130
< BZ2_bzCompress ( )
---
>  ( )
118c118
<    }
---
>    
130c130
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  )
118c118
<    }
---
>    
130c130
< BZ2_bzCompress ( )
---
>   )
118c118
<    }
---
>    
130c130
< BZ2_bzCompress ( )
---
> BZ2_bzCompress ( 
118c118
<    }
---
>    
130c130
< BZ2_bzCompress ( )
---
>  ( 
118c118
<    }
---
>    
130c130
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  
118c118
<    }
---
>    
130c130
< BZ2_bzCompress ( )
---
>   
130c130
< BZ2_bzCompress ( )
---
>  ( )
130c130
< BZ2_bzCompress ( )
---
>   )
130c130
< BZ2_bzCompress ( )
---
>  ( 
130c130
< BZ2_bzCompress ( )
---
>   
130,131c130,131
< BZ2_bzCompress ( )
< {
---
>  ( )
> 
130,131c130,131
< BZ2_bzCompress ( )
< {
---
>   )
> 
130,131c130,131
< BZ2_bzCompress ( )
< {
---
>  ( 
> 
130,131c130,131
< BZ2_bzCompress ( )
< {
---
>   
> 
130c130
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  )
130c130
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  
130,131c130,131
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress  )
> 
130,131c130,131
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress  
> 
130c130
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  )
133c133
<    }
---
>    
130c130
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  
133c133
<    }
---
>    
130,131c130,132
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress  )
> 
>    
133d133
<    }
130,131c130,132
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress  
> 
>    
133d133
<    }
130c130
< BZ2_bzCompress ( )
---
> BZ2_bzCompress ( 
130,131c130,131
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress ( 
> 
130c130
< BZ2_bzCompress ( )
---
> BZ2_bzCompress ( 
133c133
<    }
---
>    
130,131c130,132
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress ( 
> 
>    
133d133
<    }
130c130
< BZ2_bzCompress ( )
---
> BZ2_bzCompress ( 
141c141
< BZ2_bzDecompressInit 
---
>  
130,131c130,131
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress ( 
> 
141c141
< BZ2_bzDecompressInit 
---
>  
130c130
< BZ2_bzCompress ( )
---
> BZ2_bzCompress ( 
133c133
<    }
---
>    
141c141
< BZ2_bzDecompressInit 
---
>  
130,131c130,132
< BZ2_bzCompress ( )
< {
---
> BZ2_bzCompress ( 
> 
>    
133d133
<    }
141c141
< BZ2_bzDecompressInit 
---
>  
131c131
< {
---
> 
131c131,132
< {
---
> 
>    
133d133
<    }
131c131
< {
---
> 
141c141
< BZ2_bzDecompressInit 
---
>  
131c131,132
< {
---
> 
>    
133d133
<    }
141c141
< BZ2_bzDecompressInit 
---
>  
131c131
< {
---
> 
142c142
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
131c131,132
< {
---
> 
>    
133d133
<    }
142c142
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
131c131
< {
---
> 
141,142c141,142
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  
>                       bz_stream* strm, 
131c131,132
< {
---
> 
>    
133d133
<    }
141,142c141,142
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  
>                       bz_stream* strm, 
133c133
<    }
---
>    
133c133
<    }
---
>    
141c141
< BZ2_bzDecompressInit 
---
>  
133c133
<    }
---
>    
142c142
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
133c133
<    }
---
>    
141,142c141,142
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  
>                       bz_stream* strm, 
133c133
<    }
---
>    
142c142
<                      ( bz_stream* strm, 
---
>                      ( * strm, 
133c133
<    }
---
>    
141,142c141,142
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  
>                      ( * strm, 
133c133
<    }
---
>    
142c142
<                      ( bz_stream* strm, 
---
>                       * strm, 
133c133
<    }
---
>    
141,142c141,142
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  
>                       * strm, 
141c141
< BZ2_bzDecompressInit 
---
>  
141,142c141,142
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  
>                       bz_stream* strm, 
141,142c141,142
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  
>                      ( * strm, 
141,142c141,142
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  
>                       * strm, 
141,142c141,142
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  
>                      ( bz_stream strm, 
141,142c141,142
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  
>                       bz_stream strm, 
141,142c141,142
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  
>                      (  strm, 
141,142c141,142
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
---
>  
>                        strm, 
142c142
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
142c142
<                      ( bz_stream* strm, 
---
>                       * strm, 
142c142
<                      ( bz_stream* strm, 
---
>                       bz_stream strm, 
142c142
<                      ( bz_stream* strm, 
---
>                        strm, 
142c142
<                      ( bz_stream* strm, 
---
>                       bz_stream* , 
142c142
<                      ( bz_stream* strm, 
---
>                       * , 
142c142
<                      ( bz_stream* strm, 
---
>                       bz_stream , 
142c142
<                      ( bz_stream* strm, 
---
>                        , 
142c142
<                      ( bz_stream* strm, 
---
>                      ( * strm, 
142c142
<                      ( bz_stream* strm, 
---
>                      (  strm, 
142c142
<                      ( bz_stream* strm, 
---
>                      ( * , 
142c142
<                      ( bz_stream* strm, 
---
>                      (  , 
142c142
<                      ( bz_stream* strm, 
---
>                      ( * strm 
142c142
<                      ( bz_stream* strm, 
---
>                      (  strm 
142c142
<                      ( bz_stream* strm, 
---
>                      ( *  
142c142
<                      ( bz_stream* strm, 
---
>                      (   
142c142
<                      ( bz_stream* strm, 
---
>                      ( bz_stream strm, 
142c142
<                      ( bz_stream* strm, 
---
>                      ( bz_stream , 
142c142
<                      ( bz_stream* strm, 
---
>                      ( bz_stream strm 
142c142
<                      ( bz_stream* strm, 
---
>                      ( bz_stream  
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream strm, 
>                                verbosity,
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream , 
>                                verbosity,
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream strm 
>                                verbosity,
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream  
>                                verbosity,
142c142
<                      ( bz_stream* strm, 
---
>                      ( bz_stream* , 
142c142
<                      ( bz_stream* strm, 
---
>                      ( bz_stream*  
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* , 
>                                verbosity,
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream*  
>                                verbosity,
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* , 
>                        int        ,
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream*  
>                        int        ,
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* , 
>                                ,
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream*  
>                                ,
142c142
<                      ( bz_stream* strm, 
---
>                      ( bz_stream* strm 
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                                verbosity,
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                        int        ,
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                                ,
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                        int        verbosity
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                                verbosity
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                        int        
142,143c142,143
<                      ( bz_stream* strm, 
<                        int        verbosity,
---
>                      ( bz_stream* strm 
>                                
143c143
<                        int        verbosity,
---
>                                verbosity,
143c143
<                        int        verbosity,
---
>                                ,
143c143
<                        int        verbosity,
---
>                                verbosity
143c143
<                        int        verbosity,
---
>                                
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                                verbosity,
>                                small )
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                                ,
>                                small )
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                                verbosity
>                                small )
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                                
>                                small )
143c143
<                        int        verbosity,
---
>                        int        ,
143c143
<                        int        verbosity,
---
>                        int        
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                        int        ,
>                                small )
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                        int        
>                                small )
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                        int        ,
>                        int         )
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                        int        
>                        int         )
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                        int        ,
>                                 )
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                        int        
>                                 )
143c143
<                        int        verbosity,
---
>                        int        verbosity
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                                small )
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                        int         )
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                                 )
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                        int        small 
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                                small 
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                        int         
143,144c143,144
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity
>                                 
144c144
<                        int        small )
---
>                                small )
144c144
<                        int        small )
---
>                                 )
144c144
<                        int        small )
---
>                                small 
144c144
<                        int        small )
---
>                                 
144,145c144,145
<                        int        small )
< {
---
>                                small )
> 
144,145c144,145
<                        int        small )
< {
---
>                                 )
> 
144,145c144,145
<                        int        small )
< {
---
>                                small 
> 
144,145c144,145
<                        int        small )
< {
---
>                                 
> 
144c144
<                        int        small )
---
>                        int         )
144c144
<                        int        small )
---
>                        int         
144,145c144,145
<                        int        small )
< {
---
>                        int         )
> 
144,145c144,145
<                        int        small )
< {
---
>                        int         
> 
144c144
<                        int        small )
---
>                        int         )
146c146
<    }
---
>    
144c144
<                        int        small )
---
>                        int         
146c146
<    }
---
>    
144,146c144,146
<                        int        small )
< {
<    }
---
>                        int         )
> 
>    
144,146c144,146
<                        int        small )
< {
<    }
---
>                        int         
> 
>    
144c144
<                        int        small )
---
>                        int        small 
144,145c144,145
<                        int        small )
< {
---
>                        int        small 
> 
144c144
<                        int        small )
---
>                        int        small 
146c146
<    }
---
>    
144,146c144,146
<                        int        small )
< {
<    }
---
>                        int        small 
> 
>    
144c144
<                        int        small )
---
>                        int        small 
153c153
< typedef 
---
>  
144,145c144,145
<                        int        small )
< {
---
>                        int        small 
> 
153c153
< typedef 
---
>  
144c144
<                        int        small )
---
>                        int        small 
146c146
<    }
---
>    
153c153
< typedef 
---
>  
144,146c144
<                        int        small )
< {
<    }
---
>                        int        small 
147a146
>    
153c152,153
< typedef 
---
> 
>  
145c145
< {
---
> 
145,146c145,146
< {
<    }
---
> 
>    
145c145
< {
---
> 
153c153
< typedef 
---
>  
145,146d144
< {
<    }
147a146
>    
153c152,153
< typedef 
---
> 
>  
145c145
< {
---
> 
154c154
<    struct {
---
>     {
145,146c145,146
< {
<    }
---
> 
>    
154c154
<    struct {
---
>     {
145c145
< {
---
> 
153,154c153,154
< typedef 
<    struct {
---
>  
>     {
145,146d144
< {
<    }
147a146
>    
153,154c152,154
< typedef 
<    struct {
---
> 
>  
>     {
146c146
<    }
---
>    
146c146
<    }
---
>    
153c153
< typedef 
---
>  
146c146
<    }
---
>    
154c154
<    struct {
---
>     {
146c146
<    }
---
>    
153,154c153,154
< typedef 
<    struct {
---
>  
>     {
146c146
<    }
---
>    
154c154
<    struct {
---
>    struct 
146c146
<    }
---
>    
153,154c153,154
< typedef 
<    struct {
---
>  
>    struct 
146c146
<    }
---
>    
154c154
<    struct {
---
>     
146c146
<    }
---
>    
153,154c153,154
< typedef 
<    struct {
---
>  
>     
153c153
< typedef 
---
>  
153,154c153,154
< typedef 
<    struct {
---
>  
>     {
153,154c153,154
< typedef 
<    struct {
---
>  
>    struct 
153,154c153,154
< typedef 
<    struct {
---
>  
>     
153c153
< typedef 
---
>  
155c155
<       FILE*     handle;
---
>       *     handle;
153,155c153,155
< typedef 
<    struct {
<       FILE*     handle;
---
>  
>     {
>       *     handle;
153,155c153,155
< typedef 
<    struct {
<       FILE*     handle;
---
>  
>    struct 
>       *     handle;
153,155c153,155
< typedef 
<    struct {
<       FILE*     handle;
---
>  
>     
>       *     handle;
154c154
<    struct {
---
>     {
154c154
<    struct {
---
>     
154,155c154,155
<    struct {
<       FILE*     handle;
---
>     {
>       *     handle;
154,155c154,155
<    struct {
<       FILE*     handle;
---
>     
>       *     handle;
154,155c154,155
<    struct {
<       FILE*     handle;
---
>     {
>       FILE     handle;
154,155c154,155
<    struct {
<       FILE*     handle;
---
>     
>       FILE     handle;
154,155c154,155
<    struct {
<       FILE*     handle;
---
>     {
>            handle;
154,155c154,155
<    struct {
<       FILE*     handle;
---
>     
>            handle;
154c154
<    struct {
---
>    struct 
154,155c154,155
<    struct {
<       FILE*     handle;
---
>    struct 
>       *     handle;
154,155c154,155
<    struct {
<       FILE*     handle;
---
>    struct 
>       FILE     handle;
154,155c154,155
<    struct {
<       FILE*     handle;
---
>    struct 
>            handle;
154,155c154,155
<    struct {
<       FILE*     handle;
---
>    struct 
>       FILE*     ;
154,155c154,155
<    struct {
<       FILE*     handle;
---
>    struct 
>       *     ;
154,155c154,155
<    struct {
<       FILE*     handle;
---
>    struct 
>       FILE     ;
154,155c154,155
<    struct {
<       FILE*     handle;
---
>    struct 
>            ;
155c155
<       FILE*     handle;
---
>       *     handle;
155c155
<       FILE*     handle;
---
>            handle;
155c155
<       FILE*     handle;
---
>       *     ;
155c155
<       FILE*     handle;
---
>            ;
155c155
<       FILE*     handle;
---
>       *     handle
155c155
<       FILE*     handle;
---
>            handle
155c155
<       FILE*     handle;
---
>       *     
155c155
<       FILE*     handle;
---
>            
(97.9 %, 4330 bytes)
155,157c155,157
<            ;
<       }
<    bzFile;
---
>            
>       
>    ;
155c155
<            ;
---
>            
157c157
<    bzFile;
---
>    bzFile
155,157c155,157
<            ;
<       }
<    bzFile;
---
>            
>       
>    bzFile
155c155
<            ;
---
>            
157c157
<    bzFile;
---
>    
155,157c155,157
<            ;
<       }
<    bzFile;
---
>            
>       
>    
156c156
<       }
---
>       
156,157c156,157
<       }
<    bzFile;
---
>       
>    ;
156,157c156,157
<       }
<    bzFile;
---
>       
>    bzFile
156,157c156,157
<       }
<    bzFile;
---
>       
>    
156c156
<       }
---
>       
165c165
< * BZ2_bzWriteOpen 
---
>  BZ2_bzWriteOpen 
156,157c156,157
<       }
<    bzFile;
---
>       
>    ;
165c165
< * BZ2_bzWriteOpen 
---
>  BZ2_bzWriteOpen 
156,157c156,157
<       }
<    bzFile;
---
>       
>    bzFile
165c165
< * BZ2_bzWriteOpen 
---
>  BZ2_bzWriteOpen 
156,157c156,157
<       }
<    bzFile;
---
>       
>    
165c165
< * BZ2_bzWriteOpen 
---
>  BZ2_bzWriteOpen 
157c157
<    bzFile;
---
>    ;
157c157
<    bzFile;
---
>    
157c157
<    bzFile;
---
>    ;
165c165
< * BZ2_bzWriteOpen 
---
>  BZ2_bzWriteOpen 
157c157
<    bzFile;
---
>    
165c165
< * BZ2_bzWriteOpen 
---
>  BZ2_bzWriteOpen 
157c157
<    bzFile;
---
>    ;
165c165
< * BZ2_bzWriteOpen 
---
> *  
157c157
<    bzFile;
---
>    
165c165
< * BZ2_bzWriteOpen 
---
> *  
157c157
<    bzFile;
---
>    ;
165c165
< * BZ2_bzWriteOpen 
---
>   
157c157
<    bzFile;
---
>    
165c165
< * BZ2_bzWriteOpen 
---
>   
157c157
<    bzFile;
---
>    bzFile
157c157
<    bzFile;
---
>    bzFile
165c165
< * BZ2_bzWriteOpen 
---
>  BZ2_bzWriteOpen 
157c157
<    bzFile;
---
>    bzFile
165c165
< * BZ2_bzWriteOpen 
---
> *  
157c157
<    bzFile;
---
>    bzFile
165c165
< * BZ2_bzWriteOpen 
---
>   
157c157
<    bzFile;
---
>    bzFile
166c166
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
157c157
<    bzFile;
---
>    bzFile
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>  BZ2_bzWriteOpen 
>                      int*  bzerror,      
157c157
<    bzFile;
---
>    bzFile
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                      int*  bzerror,      
157c157
<    bzFile;
---
>    bzFile
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>   
>                      int*  bzerror,      
165c165
< * BZ2_bzWriteOpen 
---
>  BZ2_bzWriteOpen 
165c165
< * BZ2_bzWriteOpen 
---
>   
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>  BZ2_bzWriteOpen 
>                      int*  bzerror,      
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>   
>                      int*  bzerror,      
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>  BZ2_bzWriteOpen 
>                     ( *  bzerror,      
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>   
>                     ( *  bzerror,      
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>  BZ2_bzWriteOpen 
>                      *  bzerror,      
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
>   
>                      *  bzerror,      
165c165
< * BZ2_bzWriteOpen 
---
> *  
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                      int*  bzerror,      
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                     ( *  bzerror,      
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                      *  bzerror,      
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                     ( int  bzerror,      
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                      int  bzerror,      
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                     (   bzerror,      
165,166c165,166
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
---
> *  
>                        bzerror,      
166c166
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
166c166
<                     ( int*  bzerror,      
---
>                      *  bzerror,      
166c166
<                     ( int*  bzerror,      
---
>                      int  bzerror,      
166c166
<                     ( int*  bzerror,      
---
>                        bzerror,      
166c166
<                     ( int*  bzerror,      
---
>                      int*  ,      
166c166
<                     ( int*  bzerror,      
---
>                      *  ,      
166c166
<                     ( int*  bzerror,      
---
>                      int  ,      
166c166
<                     ( int*  bzerror,      
---
>                        ,      
166c166
<                     ( int*  bzerror,      
---
>                     ( *  bzerror,      
166c166
<                     ( int*  bzerror,      
---
>                     (   bzerror,      
166c166
<                     ( int*  bzerror,      
---
>                     ( *  ,      
166c166
<                     ( int*  bzerror,      
---
>                     (   ,      
166c166
<                     ( int*  bzerror,      
---
>                     ( *  bzerror      
166c166
<                     ( int*  bzerror,      
---
>                     (   bzerror      
166c166
<                     ( int*  bzerror,      
---
>                     ( *        
166c166
<                     ( int*  bzerror,      
---
>                     (         
166c166
<                     ( int*  bzerror,      
---
>                     ( int  bzerror,      
166c166
<                     ( int*  bzerror,      
---
>                     ( int  ,      
166c166
<                     ( int*  bzerror,      
---
>                     ( int  bzerror      
166c166
<                     ( int*  bzerror,      
---
>                     ( int        
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  bzerror,      
>                       * f, 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  ,      
>                       * f, 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int  bzerror      
>                       * f, 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int        
>                       * f, 
166c166
<                     ( int*  bzerror,      
---
>                     ( int*  ,      
166c166
<                     ( int*  bzerror,      
---
>                     ( int*        
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                       * f, 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                       * f, 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                       FILE f, 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                       FILE f, 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  ,      
>                        f, 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*        
>                        f, 
166c166
<                     ( int*  bzerror,      
---
>                     ( int*  bzerror      
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       * f, 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       FILE f, 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                        f, 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       FILE* , 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       * , 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                       FILE , 
166,167c166,167
<                     ( int*  bzerror,      
<                       FILE* f, 
---
>                     ( int*  bzerror      
>                        , 
167c167
<                       FILE* f, 
---
>                       * f, 
167c167
<                       FILE* f, 
---
>                        f, 
167c167
<                       FILE* f, 
---
>                       * , 
167c167
<                       FILE* f, 
---
>                        , 
167c167
<                       FILE* f, 
---
>                       * f 
167c167
<                       FILE* f, 
---
>                        f 
167c167
<                       FILE* f, 
---
>                       *  
167c167
<                       FILE* f, 
---
>                         
167c167
<                       FILE* f, 
---
>                       FILE f, 
167c167
<                       FILE* f, 
---
>                       FILE , 
167c167
<                       FILE* f, 
---
>                       FILE f 
167c167
<                       FILE* f, 
---
>                       FILE  
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE f, 
>                          blockSize100k, 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE , 
>                          blockSize100k, 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE f 
>                          blockSize100k, 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE  
>                          blockSize100k, 
167c167
<                       FILE* f, 
---
>                       FILE* , 
167c167
<                       FILE* f, 
---
>                       FILE*  
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                          blockSize100k, 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          blockSize100k, 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                       int   , 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                       int   , 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* , 
>                          , 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE*  
>                          , 
167c167
<                       FILE* f, 
---
>                       FILE* f 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                          blockSize100k, 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                       int   , 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                          , 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                       int   blockSize100k 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                          blockSize100k 
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                       int    
167,168c167,168
<                       FILE* f, 
<                       int   blockSize100k, 
---
>                       FILE* f 
>                           
168c168
<                       int   blockSize100k, 
---
>                          blockSize100k, 
168c168
<                       int   blockSize100k, 
---
>                          , 
168c168
<                       int   blockSize100k, 
---
>                          blockSize100k 
168c168
<                       int   blockSize100k, 
---
>                           
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          blockSize100k, 
>                          verbosity,
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          , 
>                          verbosity,
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                          blockSize100k 
>                          verbosity,
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                           
>                          verbosity,
168c168
<                       int   blockSize100k, 
---
>                       int   , 
168c168
<                       int   blockSize100k, 
---
>                       int    
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                          verbosity,
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                          verbosity,
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                       int   ,
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                       int   ,
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   , 
>                          ,
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int    
>                          ,
168c168
<                       int   blockSize100k, 
---
>                       int   blockSize100k 
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          verbosity,
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                       int   ,
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          ,
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                       int   verbosity
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          verbosity
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                       int   
168,169c168,169
<                       int   blockSize100k, 
<                       int   verbosity,
---
>                       int   blockSize100k 
>                          
169c169
<                       int   verbosity,
---
>                          verbosity,
169c169
<                       int   verbosity,
---
>                          ,
169c169
<                       int   verbosity,
---
>                          verbosity
169c169
<                       int   verbosity,
---
>                          
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                          verbosity,
>                          workFactor )
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                          ,
>                          workFactor )
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                          verbosity
>                          workFactor )
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                          
>                          workFactor )
169c169
<                       int   verbosity,
---
>                       int   ,
169c169
<                       int   verbosity,
---
>                       int   
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                          workFactor )
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                          workFactor )
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                       int    )
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                       int    )
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   ,
>                           )
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   
>                           )
169c169
<                       int   verbosity,
---
>                       int   verbosity
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                          workFactor )
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                       int    )
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                           )
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                       int   workFactor 
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                          workFactor 
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                       int    
169,170c169,170
<                       int   verbosity,
<                       int   workFactor )
---
>                       int   verbosity
>                           
170c170
<                       int   workFactor )
---
>                          workFactor )
170c170
<                       int   workFactor )
---
>                           )
170c170
<                       int   workFactor )
---
>                          workFactor 
170c170
<                       int   workFactor )
---
>                           
170,171c170,171
<                       int   workFactor )
< {
---
>                          workFactor )
> 
170,171c170,171
<                       int   workFactor )
< {
---
>                           )
> 
170,171c170,171
<                       int   workFactor )
< {
---
>                          workFactor 
> 
170,171c170,171
<                       int   workFactor )
< {
---
>                           
> 
170c170
<                       int   workFactor )
---
>                       int    )
170c170
<                       int   workFactor )
---
>                       int    
170,171c170,171
<                       int   workFactor )
< {
---
>                       int    )
> 
170,171c170,171
<                       int   workFactor )
< {
---
>                       int    
> 
170c170
<                       int   workFactor )
---
>                       int    )
172c172
<    }
---
>    
170c170
<                       int   workFactor )
---
>                       int    
172c172
<    }
---
>    
170,172c170,172
<                       int   workFactor )
< {
<    }
---
>                       int    )
> 
>    
170,172c170,172
<                       int   workFactor )
< {
<    }
---
>                       int    
> 
>    
170c170
<                       int   workFactor )
---
>                       int   workFactor 
170,171c170,171
<                       int   workFactor )
< {
---
>                       int   workFactor 
> 
170c170
<                       int   workFactor )
---
>                       int   workFactor 
172c172
<    }
---
>    
170,172c170,172
<                       int   workFactor )
< {
<    }
---
>                       int   workFactor 
> 
>    
170c170
<                       int   workFactor )
---
>                       int   workFactor 
177c177
< void BZ2_bzWrite
---
>  BZ2_bzWrite
170,171c170,171
<                       int   workFactor )
< {
---
>                       int   workFactor 
> 
177c177
< void BZ2_bzWrite
---
>  BZ2_bzWrite
170c170
<                       int   workFactor )
---
>                       int   workFactor 
172c172
<    }
---
>    
177c177
< void BZ2_bzWrite
---
>  BZ2_bzWrite
170,172c170
<                       int   workFactor )
< {
<    }
---
>                       int   workFactor 
173a172
>    
177c176,177
< void BZ2_bzWrite
---
> 
>  BZ2_bzWrite
171c171
< {
---
> 
171,172c171,172
< {
<    }
---
> 
>    
171c171
< {
---
> 
177c177
< void BZ2_bzWrite
---
>  BZ2_bzWrite
171,172d170
< {
<    }
173a172
>    
177c176,177
< void BZ2_bzWrite
---
> 
>  BZ2_bzWrite
171c171
< {
---
> 
177c177
< void BZ2_bzWrite
---
> void 
171,172d170
< {
<    }
173a172
>    
177c176,177
< void BZ2_bzWrite
---
> 
> void 
171c171
< {
---
> 
177c177
< void BZ2_bzWrite
---
>  
171,172d170
< {
<    }
173a172
>    
177c176,177
< void BZ2_bzWrite
---
> 
>  
172c172
<    }
---
>    
172c172
<    }
---
>    
177c177
< void BZ2_bzWrite
---
>  BZ2_bzWrite
172c172
<    }
---
>    
177c177
< void BZ2_bzWrite
---
> void 
172c172
<    }
---
>    
177c177
< void BZ2_bzWrite
---
>  
172c172
<    }
---
>    
178c178
<              ( int*    bzerror, 
---
>               int*    bzerror, 
172c172
<    }
---
>    
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
>  BZ2_bzWrite
>               int*    bzerror, 
172c172
<    }
---
>    
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>               int*    bzerror, 
172c172
<    }
---
>    
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
>  
>               int*    bzerror, 
177c177
< void BZ2_bzWrite
---
>  BZ2_bzWrite
177c177
< void BZ2_bzWrite
---
>  
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
>  BZ2_bzWrite
>               int*    bzerror, 
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
>  
>               int*    bzerror, 
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
>  BZ2_bzWrite
>              ( *    bzerror, 
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
>  
>              ( *    bzerror, 
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
>  BZ2_bzWrite
>               *    bzerror, 
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
>  
>               *    bzerror, 
177c177
< void BZ2_bzWrite
---
> void 
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>               int*    bzerror, 
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>              ( *    bzerror, 
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>               *    bzerror, 
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>              ( int    bzerror, 
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>               int    bzerror, 
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>              (     bzerror, 
177,178c177,178
< void BZ2_bzWrite
<              ( int*    bzerror, 
---
> void 
>                   bzerror, 
178c178
<              ( int*    bzerror, 
---
>               int*    bzerror, 
178c178
<              ( int*    bzerror, 
---
>               *    bzerror, 
178c178
<              ( int*    bzerror, 
---
>               int    bzerror, 
178c178
<              ( int*    bzerror, 
---
>                   bzerror, 
178c178
<              ( int*    bzerror, 
---
>               int*    , 
178c178
<              ( int*    bzerror, 
---
>               *    , 
178c178
<              ( int*    bzerror, 
---
>               int    , 
178c178
<              ( int*    bzerror, 
---
>                   , 
178c178
<              ( int*    bzerror, 
---
>              ( *    bzerror, 
178c178
<              ( int*    bzerror, 
---
>              (     bzerror, 
178c178
<              ( int*    bzerror, 
---
>              ( *    , 
178c178
<              ( int*    bzerror, 
---
>              (     , 
178c178
<              ( int*    bzerror, 
---
>              ( *    bzerror 
178c178
<              ( int*    bzerror, 
---
>              (     bzerror 
178c178
<              ( int*    bzerror, 
---
>              ( *     
178c178
<              ( int*    bzerror, 
---
>              (      
178c178
<              ( int*    bzerror, 
---
>              ( int    bzerror, 
178c178
<              ( int*    bzerror, 
---
>              ( int    , 
178c178
<              ( int*    bzerror, 
---
>              ( int    bzerror 
178c178
<              ( int*    bzerror, 
---
>              ( int     
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int    bzerror, 
>                * b, 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int    , 
>                * b, 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int    bzerror 
>                * b, 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int     
>                * b, 
178c178
<              ( int*    bzerror, 
---
>              ( int*    , 
178c178
<              ( int*    bzerror, 
---
>              ( int*     
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    , 
>                * b, 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*     
>                * b, 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    , 
>                BZFILE b, 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*     
>                BZFILE b, 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    , 
>                 b, 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*     
>                 b, 
178c178
<              ( int*    bzerror, 
---
>              ( int*    bzerror 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                * b, 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                BZFILE b, 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                 b, 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                BZFILE* , 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                * , 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                BZFILE , 
178,179c178,179
<              ( int*    bzerror, 
<                BZFILE* b, 
---
>              ( int*    bzerror 
>                 , 
179c179
<                BZFILE* b, 
---
>                * b, 
179c179
<                BZFILE* b, 
---
>                 b, 
179c179
<                BZFILE* b, 
---
>                * , 
179c179
<                BZFILE* b, 
---
>                 , 
179c179
<                BZFILE* b, 
---
>                * b 
179c179
<                BZFILE* b, 
---
>                 b 
179c179
<                BZFILE* b, 
---
>                *  
179c179
<                BZFILE* b, 
---
>                  
179c179
<                BZFILE* b, 
---
>                BZFILE b, 
179c179
<                BZFILE* b, 
---
>                BZFILE , 
179c179
<                BZFILE* b, 
---
>                BZFILE b 
179c179
<                BZFILE* b, 
---
>                BZFILE  
179,180c179,180
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE b, 
>                *   buf, 
179,180c179,180
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE , 
>                *   buf, 
179,180c179,180
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE b 
>                *   buf, 
179,180c179,180
<                BZFILE* b, 
<                void*   buf, 
---
>                BZFILE  
>                *   buf, 
179c179
<                BZFILE* b, 
---
>                BZFILE* , 
179c179
<                BZFILE* b, 
---
>                BZFILE*  
(97.9 %, 4329 bytes)
179c179
<                BZFILE b, 
---
>                BZFILE , 
179c179
<                BZFILE b, 
---
>                BZFILE  
179,180c179,180
<                BZFILE b, 
<                void*   buf, 
---
>                BZFILE , 
>                *   buf, 
179,180c179,180
<                BZFILE b, 
<                void*   buf, 
---
>                BZFILE  
>                *   buf, 
179,180c179,180
<                BZFILE b, 
<                void*   buf, 
---
>                BZFILE , 
>                void   buf, 
179,180c179,180
<                BZFILE b, 
<                void*   buf, 
---
>                BZFILE  
>                void   buf, 
179,180c179,180
<                BZFILE b, 
<                void*   buf, 
---
>                BZFILE , 
>                   buf, 
179,180c179,180
<                BZFILE b, 
<                void*   buf, 
---
>                BZFILE  
>                   buf, 
179c179
<                BZFILE b, 
---
>                BZFILE b 
179,180c179,180
<                BZFILE b, 
<                void*   buf, 
---
>                BZFILE b 
>                *   buf, 
179,180c179,180
<                BZFILE b, 
<                void*   buf, 
---
>                BZFILE b 
>                void   buf, 
179,180c179,180
<                BZFILE b, 
<                void*   buf, 
---
>                BZFILE b 
>                   buf, 
179,180c179,180
<                BZFILE b, 
<                void*   buf, 
---
>                BZFILE b 
>                void*   , 
179,180c179,180
<                BZFILE b, 
<                void*   buf, 
---
>                BZFILE b 
>                *   , 
179,180c179,180
<                BZFILE b, 
<                void*   buf, 
---
>                BZFILE b 
>                void   , 
179,180c179,180
<                BZFILE b, 
<                void*   buf, 
---
>                BZFILE b 
>                   , 
180c180
<                void*   buf, 
---
>                *   buf, 
180c180
<                void*   buf, 
---
>                   buf, 
180c180
<                void*   buf, 
---
>                *   , 
180c180
<                void*   buf, 
---
>                   , 
180c180
<                void*   buf, 
---
>                *   buf 
180c180
<                void*   buf, 
---
>                   buf 
180c180
<                void*   buf, 
---
>                *    
180c180
<                void*   buf, 
---
>                    
180c180
<                void*   buf, 
---
>                void   buf, 
180c180
<                void*   buf, 
---
>                void   , 
180c180
<                void*   buf, 
---
>                void   buf 
180c180
<                void*   buf, 
---
>                void    
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void   buf, 
>                     len )
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void   , 
>                     len )
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void   buf 
>                     len )
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void    
>                     len )
180c180
<                void*   buf, 
---
>                void*   , 
180c180
<                void*   buf, 
---
>                void*    
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void*   , 
>                     len )
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void*    
>                     len )
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void*   , 
>                int      )
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void*    
>                int      )
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void*   , 
>                      )
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void*    
>                      )
180c180
<                void*   buf, 
---
>                void*   buf 
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                     len )
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                int      )
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                      )
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                int     len 
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                     len 
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                int      
180,181c180,181
<                void*   buf, 
<                int     len )
---
>                void*   buf 
>                      
181c181
<                int     len )
---
>                     len )
181c181
<                int     len )
---
>                      )
181c181
<                int     len )
---
>                     len 
181c181
<                int     len )
---
>                      
181,182c181,182
<                int     len )
< {
---
>                     len )
> 
181,182c181,182
<                int     len )
< {
---
>                      )
> 
181,182c181,182
<                int     len )
< {
---
>                     len 
> 
181,182c181,182
<                int     len )
< {
---
>                      
> 
181c181
<                int     len )
---
>                int      )
181c181
<                int     len )
---
>                int      
181,182c181,182
<                int     len )
< {
---
>                int      )
> 
181,182c181,182
<                int     len )
< {
---
>                int      
> 
181c181
<                int     len )
---
>                int      )
183c183
<    Int32   handle
---
>       handle
181c181
<                int     len )
---
>                int      
183c183
<    Int32   handle
---
>       handle
181,183c181,183
<                int     len )
< {
<    Int32   handle
---
>                int      )
> 
>       handle
181,183c181,183
<                int     len )
< {
<    Int32   handle
---
>                int      
> 
>       handle
181c181
<                int     len )
---
>                int     len 
181,182c181,182
<                int     len )
< {
---
>                int     len 
> 
181c181
<                int     len )
---
>                int     len 
183c183
<    Int32   handle
---
>       handle
181,183c181,183
<                int     len )
< {
<    Int32   handle
---
>                int     len 
> 
>       handle
181c181
<                int     len )
---
>                int     len 
183c183
<    Int32   handle
---
>    Int32   
181,183c181,183
<                int     len )
< {
<    Int32   handle
---
>                int     len 
> 
>    Int32   
181c181
<                int     len )
---
>                int     len 
183c183
<    Int32   handle
---
>       
181,183c181,183
<                int     len )
< {
<    Int32   handle
---
>                int     len 
> 
>       
182c182
< {
---
> 
182,183c182,183
< {
<    Int32   handle
---
> 
>       handle
182,183c182,183
< {
<    Int32   handle
---
> 
>    Int32   
182,183c182,183
< {
<    Int32   handle
---
> 
>       
182c182
< {
---
> 
184c184
<       ;
---
>       
182,184c182,184
< {
<    Int32   handle
<       ;
---
> 
>       handle
>       
182,184c182,184
< {
<    Int32   handle
<       ;
---
> 
>    Int32   
>       
182,184c182,184
< {
<    Int32   handle
<       ;
---
> 
>       
>       
183c183
<    Int32   handle
---
>       handle
183c183
<    Int32   handle
---
>       
183,184c183,184
<    Int32   handle
<       ;
---
>       handle
>       
183,184c183,184
<    Int32   handle
<       ;
---
>       
>       
(97.9 %, 4318 bytes)
184c184
<       ;
---
>       
186c186
<    {
---
>    
184c184
<       ;
---
>       
187c187
<       }
---
>       
184c184
<       ;
---
>       
186,187c186,187
<    {
<       }
---
>    
>       
184c184
<       ;
---
>       
188c188
< }
---
> 
184c184
<       ;
---
>       
186c186
<    {
---
>    
188c188
< }
---
> 
(97.9 %, 4315 bytes)
188d187
< }
192c191,192
< void BZ2_bzWriteClose
---
> 
>  
188c188
< }
---
> 
193c193
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
188d187
< }
192,193c191,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> 
>  BZ2_bzWriteClose
>                    int*          bzerror, 
188d187
< }
192,193c191,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> 
> void 
>                    int*          bzerror, 
188d187
< }
192,193c191,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> 
>  
>                    int*          bzerror, 
192c192
< void BZ2_bzWriteClose
---
>  BZ2_bzWriteClose
192c192
< void BZ2_bzWriteClose
---
>  
192,193c192,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  BZ2_bzWriteClose
>                    int*          bzerror, 
192,193c192,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  
>                    int*          bzerror, 
192,193c192,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  BZ2_bzWriteClose
>                   ( *          bzerror, 
192,193c192,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  
>                   ( *          bzerror, 
192,193c192,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  BZ2_bzWriteClose
>                    *          bzerror, 
192,193c192,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
>  
>                    *          bzerror, 
192c192
< void BZ2_bzWriteClose
---
> void 
192,193c192,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                    int*          bzerror, 
192,193c192,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   ( *          bzerror, 
192,193c192,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                    *          bzerror, 
192,193c192,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   ( int          bzerror, 
192,193c192,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                    int          bzerror, 
192,193c192,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                   (           bzerror, 
192,193c192,193
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
---
> void 
>                              bzerror, 
193c193
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
193c193
<                   ( int*          bzerror, 
---
>                    *          bzerror, 
193c193
<                   ( int*          bzerror, 
---
>                    int          bzerror, 
193c193
<                   ( int*          bzerror, 
---
>                              bzerror, 
193c193
<                   ( int*          bzerror, 
---
>                    int*          , 
193c193
<                   ( int*          bzerror, 
---
>                    *          , 
193c193
<                   ( int*          bzerror, 
---
>                    int          , 
193c193
<                   ( int*          bzerror, 
---
>                              , 
193c193
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
193c193
<                   ( int*          bzerror, 
---
>                   (           bzerror, 
193c193
<                   ( int*          bzerror, 
---
>                   ( *          , 
193c193
<                   ( int*          bzerror, 
---
>                   (           , 
193c193
<                   ( int*          bzerror, 
---
>                   ( *          bzerror 
193c193
<                   ( int*          bzerror, 
---
>                   (           bzerror 
193c193
<                   ( int*          bzerror, 
---
>                   ( *           
193c193
<                   ( int*          bzerror, 
---
>                   (            
193c193
<                   ( int*          bzerror, 
---
>                   ( int          bzerror, 
193c193
<                   ( int*          bzerror, 
---
>                   ( int          , 
193c193
<                   ( int*          bzerror, 
---
>                   ( int          bzerror 
193c193
<                   ( int*          bzerror, 
---
>                   ( int           
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror, 
>                     *       b, 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          , 
>                     *       b, 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror 
>                     *       b, 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int           
>                     *       b, 
193c193
<                   ( int*          bzerror, 
---
>                   ( int*          , 
193c193
<                   ( int*          bzerror, 
---
>                   ( int*           
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     *       b, 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     *       b, 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     BZFILE       b, 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE       b, 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                            b, 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                            b, 
193c193
<                   ( int*          bzerror, 
---
>                   ( int*          bzerror 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       b, 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       b, 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            b, 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE*       , 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       , 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       , 
193,194c193,194
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            , 
194c194
<                     BZFILE*       b, 
---
>                     *       b, 
194c194
<                     BZFILE*       b, 
---
>                            b, 
194c194
<                     BZFILE*       b, 
---
>                     *       , 
194c194
<                     BZFILE*       b, 
---
>                            , 
194c194
<                     BZFILE*       b, 
---
>                     *       b 
194c194
<                     BZFILE*       b, 
---
>                            b 
194c194
<                     BZFILE*       b, 
---
>                     *        
194c194
<                     BZFILE*       b, 
---
>                             
194c194
<                     BZFILE*       b, 
---
>                     BZFILE       b, 
194c194
<                     BZFILE*       b, 
---
>                     BZFILE       , 
194c194
<                     BZFILE*       b, 
---
>                     BZFILE       b 
194c194
<                     BZFILE*       b, 
---
>                     BZFILE        
194,195c194,195
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b, 
>                                abandon,
194,195c194,195
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                abandon,
194,195c194,195
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon,
194,195c194,195
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                abandon,
(97.9 %, 4314 bytes)
194c194
<                     BZFILE       b, 
---
>                     BZFILE       , 
194c194
<                     BZFILE       b, 
---
>                     BZFILE        
194,195c194,195
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                abandon,
194,195c194,195
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                abandon,
194,195c194,195
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                     int           ,
194,195c194,195
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE        
>                     int           ,
194,195c194,195
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                ,
194,195c194,195
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                ,
194c194
<                     BZFILE       b, 
---
>                     BZFILE       b 
194,195c194,195
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon,
194,195c194,195
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                     int           ,
194,195c194,195
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                ,
194,195c194,195
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                     int           abandon
194,195c194,195
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon
194,195c194,195
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                     int           
194,195c194,195
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                
195c195
<                     int           abandon,
---
>                                abandon,
195c195
<                     int           abandon,
---
>                                ,
195c195
<                     int           abandon,
---
>                                abandon
195c195
<                     int           abandon,
---
>                                
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                                abandon,
>                      * nbytes_in,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                                ,
>                      * nbytes_in,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                                abandon
>                      * nbytes_in,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                                
>                      * nbytes_in,
195c195
<                     int           abandon,
---
>                     int           ,
195c195
<                     int           abandon,
---
>                     int           
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           ,
>                      * nbytes_in,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           
>                      * nbytes_in,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           ,
>                     unsigned  nbytes_in,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           
>                     unsigned  nbytes_in,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           ,
>                       nbytes_in,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           
>                       nbytes_in,
195c195
<                     int           abandon,
---
>                     int           abandon
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           abandon
>                      * nbytes_in,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           abandon
>                     unsigned  nbytes_in,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           abandon
>                       nbytes_in,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           abandon
>                     unsigned * ,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           abandon
>                      * ,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           abandon
>                     unsigned  ,
195,196c195,196
<                     int           abandon,
<                     unsigned * nbytes_in,
---
>                     int           abandon
>                       ,
196c196
<                     unsigned * nbytes_in,
---
>                      * nbytes_in,
196c196
<                     unsigned * nbytes_in,
---
>                       nbytes_in,
196c196
<                     unsigned * nbytes_in,
---
>                      * ,
196c196
<                     unsigned * nbytes_in,
---
>                       ,
196c196
<                     unsigned * nbytes_in,
---
>                      * nbytes_in
196c196
<                     unsigned * nbytes_in,
---
>                       nbytes_in
196c196
<                     unsigned * nbytes_in,
---
>                      * 
196c196
<                     unsigned * nbytes_in,
---
>                       
196c196
<                     unsigned * nbytes_in,
---
>                     unsigned  nbytes_in,
196c196
<                     unsigned * nbytes_in,
---
>                     unsigned  ,
196c196
<                     unsigned * nbytes_in,
---
>                     unsigned  nbytes_in
196c196
<                     unsigned * nbytes_in,
---
>                     unsigned  
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned  nbytes_in,
>                      * nbytes_out )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned  ,
>                      * nbytes_out )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned  nbytes_in
>                      * nbytes_out )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned  
>                      * nbytes_out )
196c196
<                     unsigned * nbytes_in,
---
>                     unsigned * ,
196c196
<                     unsigned * nbytes_in,
---
>                     unsigned * 
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * ,
>                      * nbytes_out )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * 
>                      * nbytes_out )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * ,
>                     unsigned  nbytes_out )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * 
>                     unsigned  nbytes_out )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * ,
>                       nbytes_out )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * 
>                       nbytes_out )
196c196
<                     unsigned * nbytes_in,
---
>                     unsigned * nbytes_in
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_in
>                      * nbytes_out )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_in
>                     unsigned  nbytes_out )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_in
>                       nbytes_out )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_in
>                     unsigned *  )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_in
>                      *  )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_in
>                     unsigned   )
196,197c196,197
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_in
>                        )
197c197
<                     unsigned * nbytes_out )
---
>                      * nbytes_out )
197c197
<                     unsigned * nbytes_out )
---
>                       nbytes_out )
197c197
<                     unsigned * nbytes_out )
---
>                      *  )
197c197
<                     unsigned * nbytes_out )
---
>                        )
197c197
<                     unsigned * nbytes_out )
---
>                      * nbytes_out 
197c197
<                     unsigned * nbytes_out )
---
>                       nbytes_out 
197c197
<                     unsigned * nbytes_out )
---
>                      *  
197c197
<                     unsigned * nbytes_out )
---
>                        
197c197
<                     unsigned * nbytes_out )
---
>                     unsigned  nbytes_out )
197c197
<                     unsigned * nbytes_out )
---
>                     unsigned   )
197c197
<                     unsigned * nbytes_out )
---
>                     unsigned  nbytes_out 
197c197
<                     unsigned * nbytes_out )
---
>                     unsigned   
197,198c197,198
<                     unsigned * nbytes_out )
< {
---
>                     unsigned  nbytes_out )
> 
197,198c197,198
<                     unsigned * nbytes_out )
< {
---
>                     unsigned   )
> 
197,198c197,198
<                     unsigned * nbytes_out )
< {
---
>                     unsigned  nbytes_out 
> 
197,198c197,198
<                     unsigned * nbytes_out )
< {
---
>                     unsigned   
> 
197c197
<                     unsigned * nbytes_out )
---
>                     unsigned *  )
197c197
<                     unsigned * nbytes_out )
---
>                     unsigned *  
197,198c197,198
<                     unsigned * nbytes_out )
< {
---
>                     unsigned *  )
> 
197,198c197,198
<                     unsigned * nbytes_out )
< {
---
>                     unsigned *  
> 
197c197
<                     unsigned * nbytes_out )
---
>                     unsigned *  )
199c199
<     bzerror, b, abandon, 
---
>     , b, abandon, 
197c197
<                     unsigned * nbytes_out )
---
>                     unsigned *  
199c199
<     bzerror, b, abandon, 
---
>     , b, abandon, 
197,199c197,199
<                     unsigned * nbytes_out )
< {
<     bzerror, b, abandon, 
---
>                     unsigned *  )
> 
>     , b, abandon, 
197,199c197,199
<                     unsigned * nbytes_out )
< {
<     bzerror, b, abandon, 
---
>                     unsigned *  
> 
>     , b, abandon, 
197c197
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
197,198c197,198
<                     unsigned * nbytes_out )
< {
---
>                     unsigned * nbytes_out 
> 
197c197
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
199c199
<     bzerror, b, abandon, 
---
>     , b, abandon, 
197,199c197,199
<                     unsigned * nbytes_out )
< {
<     bzerror, b, abandon, 
---
>                     unsigned * nbytes_out 
> 
>     , b, abandon, 
197c197
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
199c199
<     bzerror, b, abandon, 
---
>     bzerror b, abandon, 
197,199c197,199
<                     unsigned * nbytes_out )
< {
<     bzerror, b, abandon, 
---
>                     unsigned * nbytes_out 
> 
>     bzerror b, abandon, 
197c197
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
199c199
<     bzerror, b, abandon, 
---
>      b, abandon, 
197,199c197,199
<                     unsigned * nbytes_out )
< {
<     bzerror, b, abandon, 
---
>                     unsigned * nbytes_out 
> 
>      b, abandon, 
198c198
< {
---
> 
198,199c198,199
< {
<     bzerror, b, abandon, 
---
> 
>     , b, abandon, 
198,199c198,199
< {
<     bzerror, b, abandon, 
---
> 
>     bzerror b, abandon, 
198,199c198,199
< {
<     bzerror, b, abandon, 
---
> 
>      b, abandon, 
198,199c198,199
< {
<     bzerror, b, abandon, 
---
> 
>     bzerror, , abandon, 
198,199c198,199
< {
<     bzerror, b, abandon, 
---
> 
>     , , abandon, 
198,199c198,199
< {
<     bzerror, b, abandon, 
---
> 
>     bzerror , abandon, 
198,199c198,199
< {
<     bzerror, b, abandon, 
---
> 
>      , abandon, 
199c199
<     bzerror, b, abandon, 
---
>     , b, abandon, 
199c199
<     bzerror, b, abandon, 
---
>      b, abandon, 
199c199
<     bzerror, b, abandon, 
---
>     , , abandon, 
199c199
<     bzerror, b, abandon, 
---
>      , abandon, 
199c199
<     bzerror, b, abandon, 
---
>     , b abandon, 
199c199
<     bzerror, b, abandon, 
---
>      b abandon, 
199c199
<     bzerror, b, abandon, 
---
>     ,  abandon, 
199c199
<     bzerror, b, abandon, 
---
>       abandon, 
(97.9 %, 4306 bytes)
199c199
<      b, abandon, 
---
>       abandon, 
199c199
<      b, abandon, 
---
>      , , 
199c199
<      b, abandon, 
---
>       , 
199c199
<      b, abandon, 
---
>      , abandon 
199c199
<      b, abandon, 
---
>       abandon 
199c199
<      b, abandon, 
---
>      ,  
199c199
<      b, abandon, 
---
>        
(97.9 %, 4304 bytes)
199c199
<       abandon, 
---
>        
199,200c199,200
<       abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>       , 
>                         , NULL, nbytes_out, NULL ;
199,200c199,200
<       abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>        
>                         , NULL, nbytes_out, NULL ;
199,200c199,200
<       abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>       , 
>                         nbytes_in NULL, nbytes_out, NULL ;
199,200c199,200
<       abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>        
>                         nbytes_in NULL, nbytes_out, NULL ;
199,200c199,200
<       abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>       , 
>                          NULL, nbytes_out, NULL ;
199,200c199,200
<       abandon, 
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>        
>                          NULL, nbytes_out, NULL ;
(97.9 %, 4296 bytes)
200c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>                          NULL, nbytes_out, NULL ;
200c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>                         , , nbytes_out, NULL ;
200c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>                          , nbytes_out, NULL ;
200c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>                         , NULL nbytes_out, NULL ;
200c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>                          NULL nbytes_out, NULL ;
200c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>                         ,  nbytes_out, NULL ;
200c200
<                         nbytes_in, NULL, nbytes_out, NULL ;
---
>                           nbytes_out, NULL ;
(97.9 %, 4286 bytes)
200c200
<                          NULL, nbytes_out, NULL ;
---
>                           nbytes_out, NULL ;
200c200
<                          NULL, nbytes_out, NULL ;
---
>                          , , NULL ;
200c200
<                          NULL, nbytes_out, NULL ;
---
>                           , NULL ;
200c200
<                          NULL, nbytes_out, NULL ;
---
>                          , nbytes_out NULL ;
200c200
<                          NULL, nbytes_out, NULL ;
---
>                           nbytes_out NULL ;
200c200
<                          NULL, nbytes_out, NULL ;
---
>                          ,  NULL ;
200c200
<                          NULL, nbytes_out, NULL ;
---
>                            NULL ;
(97.9 %, 4281 bytes)
200c200
<                           nbytes_out, NULL ;
---
>                            NULL ;
200c200
<                           nbytes_out, NULL ;
---
>                           ,  ;
200c200
<                           nbytes_out, NULL ;
---
>                             ;
(97.9 %, 4270 bytes)
200c200
<                            NULL ;
---
>                             
200,201c200,201
<                            NULL ;
< }
---
>                             ;
> 
200,201c200,201
<                            NULL ;
< }
---
>                             
> 
200c200
<                            NULL ;
---
>                             ;
204c204
< void BZ2_bzWriteClose64
---
>  BZ2_bzWriteClose64
(97.9 %, 4265 bytes)
201d200
< }
204c203,204
< void BZ2_bzWriteClose64
---
> 
>  BZ2_bzWriteClose64
201d200
< }
204c203,204
< void BZ2_bzWriteClose64
---
> 
> void 
201d200
< }
204c203,204
< void BZ2_bzWriteClose64
---
> 
>  
201c201
< }
---
> 
205c205
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
201d200
< }
204,205c203,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> 
>  BZ2_bzWriteClose64
>                    int*          bzerror, 
201d200
< }
204,205c203,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> 
> void 
>                    int*          bzerror, 
201d200
< }
204,205c203,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> 
>  
>                    int*          bzerror, 
204c204
< void BZ2_bzWriteClose64
---
>  BZ2_bzWriteClose64
204c204
< void BZ2_bzWriteClose64
---
>  
204,205c204,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  BZ2_bzWriteClose64
>                    int*          bzerror, 
204,205c204,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                    int*          bzerror, 
204,205c204,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  BZ2_bzWriteClose64
>                   ( *          bzerror, 
204,205c204,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                   ( *          bzerror, 
204,205c204,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  BZ2_bzWriteClose64
>                    *          bzerror, 
204,205c204,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
>  
>                    *          bzerror, 
204c204
< void BZ2_bzWriteClose64
---
> void 
204,205c204,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                    int*          bzerror, 
204,205c204,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                   ( *          bzerror, 
204,205c204,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                    *          bzerror, 
204,205c204,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                   ( int          bzerror, 
204,205c204,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                    int          bzerror, 
204,205c204,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                   (           bzerror, 
204,205c204,205
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
---
> void 
>                              bzerror, 
205c205
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
205c205
<                   ( int*          bzerror, 
---
>                    *          bzerror, 
205c205
<                   ( int*          bzerror, 
---
>                    int          bzerror, 
205c205
<                   ( int*          bzerror, 
---
>                              bzerror, 
205c205
<                   ( int*          bzerror, 
---
>                    int*          , 
205c205
<                   ( int*          bzerror, 
---
>                    *          , 
205c205
<                   ( int*          bzerror, 
---
>                    int          , 
205c205
<                   ( int*          bzerror, 
---
>                              , 
205c205
<                   ( int*          bzerror, 
---
>                   ( *          bzerror, 
205c205
<                   ( int*          bzerror, 
---
>                   (           bzerror, 
205c205
<                   ( int*          bzerror, 
---
>                   ( *          , 
205c205
<                   ( int*          bzerror, 
---
>                   (           , 
205c205
<                   ( int*          bzerror, 
---
>                   ( *          bzerror 
205c205
<                   ( int*          bzerror, 
---
>                   (           bzerror 
205c205
<                   ( int*          bzerror, 
---
>                   ( *           
205c205
<                   ( int*          bzerror, 
---
>                   (            
205c205
<                   ( int*          bzerror, 
---
>                   ( int          bzerror, 
205c205
<                   ( int*          bzerror, 
---
>                   ( int          , 
205c205
<                   ( int*          bzerror, 
---
>                   ( int          bzerror 
205c205
<                   ( int*          bzerror, 
---
>                   ( int           
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror, 
>                     *       b, 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          , 
>                     *       b, 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int          bzerror 
>                     *       b, 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int           
>                     *       b, 
205c205
<                   ( int*          bzerror, 
---
>                   ( int*          , 
205c205
<                   ( int*          bzerror, 
---
>                   ( int*           
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     *       b, 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     *       b, 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                     BZFILE       b, 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                     BZFILE       b, 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          , 
>                            b, 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*           
>                            b, 
205c205
<                   ( int*          bzerror, 
---
>                   ( int*          bzerror 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       b, 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       b, 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            b, 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE*       , 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     *       , 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                     BZFILE       , 
205,206c205,206
<                   ( int*          bzerror, 
<                     BZFILE*       b, 
---
>                   ( int*          bzerror 
>                            , 
206c206
<                     BZFILE*       b, 
---
>                     *       b, 
206c206
<                     BZFILE*       b, 
---
>                            b, 
206c206
<                     BZFILE*       b, 
---
>                     *       , 
206c206
<                     BZFILE*       b, 
---
>                            , 
206c206
<                     BZFILE*       b, 
---
>                     *       b 
206c206
<                     BZFILE*       b, 
---
>                            b 
206c206
<                     BZFILE*       b, 
---
>                     *        
206c206
<                     BZFILE*       b, 
---
>                             
206c206
<                     BZFILE*       b, 
---
>                     BZFILE       b, 
206c206
<                     BZFILE*       b, 
---
>                     BZFILE       , 
206c206
<                     BZFILE*       b, 
---
>                     BZFILE       b 
206c206
<                     BZFILE*       b, 
---
>                     BZFILE        
206,207c206,207
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b, 
>                                abandon,
206,207c206,207
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                abandon,
206,207c206,207
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon,
206,207c206,207
<                     BZFILE*       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                abandon,
206c206
<                     BZFILE*       b, 
---
>                     BZFILE*       , 
(97.9 %, 4264 bytes)
206c206
<                     BZFILE       b, 
---
>                     BZFILE       , 
206c206
<                     BZFILE       b, 
---
>                     BZFILE        
206,207c206,207
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                abandon,
206,207c206,207
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                abandon,
206,207c206,207
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                     int           ,
206,207c206,207
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE        
>                     int           ,
206,207c206,207
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       , 
>                                ,
206,207c206,207
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE        
>                                ,
206c206
<                     BZFILE       b, 
---
>                     BZFILE       b 
206,207c206,207
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon,
206,207c206,207
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                     int           ,
206,207c206,207
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                ,
206,207c206,207
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                     int           abandon
206,207c206,207
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                abandon
206,207c206,207
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                     int           
206,207c206,207
<                     BZFILE       b, 
<                     int           abandon,
---
>                     BZFILE       b 
>                                
207c207
<                     int           abandon,
---
>                                abandon,
207c207
<                     int           abandon,
---
>                                ,
207c207
<                     int           abandon,
---
>                                abandon
207c207
<                     int           abandon,
---
>                                
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                                abandon,
>                      * nbytes_in_lo32,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                                ,
>                      * nbytes_in_lo32,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                                abandon
>                      * nbytes_in_lo32,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                                
>                      * nbytes_in_lo32,
207c207
<                     int           abandon,
---
>                     int           ,
207c207
<                     int           abandon,
---
>                     int           
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           ,
>                      * nbytes_in_lo32,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           
>                      * nbytes_in_lo32,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           ,
>                     unsigned  nbytes_in_lo32,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           
>                     unsigned  nbytes_in_lo32,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           ,
>                       nbytes_in_lo32,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           
>                       nbytes_in_lo32,
207c207
<                     int           abandon,
---
>                     int           abandon
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           abandon
>                      * nbytes_in_lo32,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           abandon
>                     unsigned  nbytes_in_lo32,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           abandon
>                       nbytes_in_lo32,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           abandon
>                     unsigned * ,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           abandon
>                      * ,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           abandon
>                     unsigned  ,
207,208c207,208
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
---
>                     int           abandon
>                       ,
208c208
<                     unsigned * nbytes_in_lo32,
---
>                      * nbytes_in_lo32,
208c208
<                     unsigned * nbytes_in_lo32,
---
>                       nbytes_in_lo32,
208c208
<                     unsigned * nbytes_in_lo32,
---
>                      * ,
208c208
<                     unsigned * nbytes_in_lo32,
---
>                       ,
208c208
<                     unsigned * nbytes_in_lo32,
---
>                      * nbytes_in_lo32
208c208
<                     unsigned * nbytes_in_lo32,
---
>                       nbytes_in_lo32
208c208
<                     unsigned * nbytes_in_lo32,
---
>                      * 
208c208
<                     unsigned * nbytes_in_lo32,
---
>                       
208c208
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  nbytes_in_lo32,
208c208
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  ,
208c208
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  nbytes_in_lo32
208c208
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned  
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  nbytes_in_lo32,
>                      * nbytes_in_hi32,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  ,
>                      * nbytes_in_hi32,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  nbytes_in_lo32
>                      * nbytes_in_hi32,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  
>                      * nbytes_in_hi32,
208c208
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * ,
208c208
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * 
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * ,
>                      * nbytes_in_hi32,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * 
>                      * nbytes_in_hi32,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * ,
>                     unsigned  nbytes_in_hi32,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * 
>                     unsigned  nbytes_in_hi32,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * ,
>                       nbytes_in_hi32,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * 
>                       nbytes_in_hi32,
208c208
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                      * nbytes_in_hi32,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                     unsigned  nbytes_in_hi32,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                       nbytes_in_hi32,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                     unsigned * ,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                      * ,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                     unsigned  ,
208,209c208,209
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * nbytes_in_lo32
>                       ,
209c209
<                     unsigned * nbytes_in_hi32,
---
>                      * nbytes_in_hi32,
209c209
<                     unsigned * nbytes_in_hi32,
---
>                       nbytes_in_hi32,
209c209
<                     unsigned * nbytes_in_hi32,
---
>                      * ,
209c209
<                     unsigned * nbytes_in_hi32,
---
>                       ,
209c209
<                     unsigned * nbytes_in_hi32,
---
>                      * nbytes_in_hi32
209c209
<                     unsigned * nbytes_in_hi32,
---
>                       nbytes_in_hi32
209c209
<                     unsigned * nbytes_in_hi32,
---
>                      * 
209c209
<                     unsigned * nbytes_in_hi32,
---
>                       
209c209
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  nbytes_in_hi32,
209c209
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  ,
209c209
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  nbytes_in_hi32
209c209
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned  
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  nbytes_in_hi32,
>                      * nbytes_out_lo32,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  ,
>                      * nbytes_out_lo32,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  nbytes_in_hi32
>                      * nbytes_out_lo32,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  
>                      * nbytes_out_lo32,
209c209
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * ,
209c209
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * 
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * ,
>                      * nbytes_out_lo32,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * 
>                      * nbytes_out_lo32,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * ,
>                     unsigned  nbytes_out_lo32,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * 
>                     unsigned  nbytes_out_lo32,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * ,
>                       nbytes_out_lo32,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * 
>                       nbytes_out_lo32,
209c209
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                      * nbytes_out_lo32,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                     unsigned  nbytes_out_lo32,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                       nbytes_out_lo32,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                     unsigned * ,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                      * ,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                     unsigned  ,
209,210c209,210
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_in_hi32
>                       ,
210c210
<                     unsigned * nbytes_out_lo32,
---
>                      * nbytes_out_lo32,
210c210
<                     unsigned * nbytes_out_lo32,
---
>                       nbytes_out_lo32,
210c210
<                     unsigned * nbytes_out_lo32,
---
>                      * ,
210c210
<                     unsigned * nbytes_out_lo32,
---
>                       ,
210c210
<                     unsigned * nbytes_out_lo32,
---
>                      * nbytes_out_lo32
210c210
<                     unsigned * nbytes_out_lo32,
---
>                       nbytes_out_lo32
210c210
<                     unsigned * nbytes_out_lo32,
---
>                      * 
210c210
<                     unsigned * nbytes_out_lo32,
---
>                       
210c210
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  nbytes_out_lo32,
210c210
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  ,
210c210
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  nbytes_out_lo32
210c210
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned  
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_lo32,
>                      * nbytes_out_hi32 )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned  ,
>                      * nbytes_out_hi32 )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_lo32
>                      * nbytes_out_hi32 )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned  
>                      * nbytes_out_hi32 )
210c210
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * ,
210c210
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * 
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * ,
>                      * nbytes_out_hi32 )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * 
>                      * nbytes_out_hi32 )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * ,
>                     unsigned  nbytes_out_hi32 )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * 
>                     unsigned  nbytes_out_hi32 )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * ,
>                       nbytes_out_hi32 )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * 
>                       nbytes_out_hi32 )
210c210
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                      * nbytes_out_hi32 )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                     unsigned  nbytes_out_hi32 )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                       nbytes_out_hi32 )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                     unsigned *  )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                      *  )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                     unsigned   )
210,211c210,211
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32
>                        )
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                      * nbytes_out_hi32 )
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                       nbytes_out_hi32 )
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                      *  )
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                        )
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                      * nbytes_out_hi32 
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                       nbytes_out_hi32 
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                      *  
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                        
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_hi32 )
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned   )
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned  nbytes_out_hi32 
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned   
211,212c211,212
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned  nbytes_out_hi32 )
> 
211,212c211,212
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned   )
> 
211,212c211,212
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned  nbytes_out_hi32 
> 
211,212c211,212
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned   
> 
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  )
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  
211,212c211,212
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned *  )
> 
211,212c211,212
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned *  
> 
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  )
214c214
<    bzFile bzf ;
---
>     bzf ;
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned *  
214c214
<    bzFile bzf ;
---
>     bzf ;
211,212c211,212
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned *  )
> 
214c214
<    bzFile bzf ;
---
>     bzf ;
211,212c211,212
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned *  
> 
214c214
<    bzFile bzf ;
---
>     bzf ;
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
211,212c211,212
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_out_hi32 
> 
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
214c214
<    bzFile bzf ;
---
>     bzf ;
211,212c211,212
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_out_hi32 
> 
214c214
<    bzFile bzf ;
---
>     bzf ;
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
214c214
<    bzFile bzf ;
---
>    bzFile  ;
211,212c211,212
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_out_hi32 
> 
214c214
<    bzFile bzf ;
---
>    bzFile  ;
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
214c214
<    bzFile bzf ;
---
>      ;
211,212c211,212
<                     unsigned * nbytes_out_hi32 )
< {
---
>                     unsigned * nbytes_out_hi32 
> 
214c214
<    bzFile bzf ;
---
>      ;
212c212
< {
---
> 
212c212
< {
---
> 
214c214
<    bzFile bzf ;
---
>     bzf ;
212c212
< {
---
> 
214c214
<    bzFile bzf ;
---
>    bzFile  ;
212c212
< {
---
> 
214c214
<    bzFile bzf ;
---
>      ;
212c212
< {
---
> 
214c214
<    bzFile bzf ;
---
>    bzFile bzf 
212c212
< {
---
> 
214c214
<    bzFile bzf ;
---
>     bzf 
212c212
< {
---
> 
214c214
<    bzFile bzf ;
---
>    bzFile  
212c212
< {
---
> 
214c214
<    bzFile bzf ;
---
>      
214c214
<    bzFile bzf ;
---
>     bzf ;
214c214
<    bzFile bzf ;
---
>      ;
214c214
<    bzFile bzf ;
---
>     bzf 
214c214
<    bzFile bzf ;
---
>      
(97.9 %, 4255 bytes)
214,215c214,215
<      ;
<    NULL ;
---
>      
>     ;
214,215c214,215
<      ;
<    NULL ;
---
>      
>    NULL 
214,215c214,215
<      ;
<    NULL ;
---
>      
>     
(97.9 %, 4250 bytes)
215,216c215,216
<     ;
<    }
---
>     
>    
215c215
<     ;
---
>     
220c220
< * BZ2_bzReadOpen 
---
>  BZ2_bzReadOpen 
215,216c215,216
<     ;
<    }
---
>     
>    
220c220
< * BZ2_bzReadOpen 
---
>  BZ2_bzReadOpen 
215c215
<     ;
---
>     
220c220
< * BZ2_bzReadOpen 
---
> *  
215,216c215,216
<     ;
<    }
---
>     
>    
220c220
< * BZ2_bzReadOpen 
---
> *  
215c215
<     ;
---
>     
220c220
< * BZ2_bzReadOpen 
---
>   
215,216c215,216
<     ;
<    }
---
>     
>    
220c220
< * BZ2_bzReadOpen 
---
>   
216c216
<    }
---
>    
216c216
<    }
---
>    
220c220
< * BZ2_bzReadOpen 
---
>  BZ2_bzReadOpen 
216c216
<    }
---
>    
220c220
< * BZ2_bzReadOpen 
---
> *  
(97.9 %, 4248 bytes)
216c216
<    }
---
>    
221c221
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
216c216
<    }
---
>    
220,221c220,221
<  BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                     int*  bzerror, 
216c216
<    }
---
>    
221c221
<                    ( int*  bzerror, 
---
>                    ( *  bzerror, 
216c216
<    }
---
>    
220,221c220,221
<  BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                    ( *  bzerror, 
216c216
<    }
---
>    
221c221
<                    ( int*  bzerror, 
---
>                     *  bzerror, 
216c216
<    }
---
>    
220,221c220,221
<  BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                     *  bzerror, 
220c220
<  BZ2_bzReadOpen 
---
>   
220,221c220,221
<  BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                     int*  bzerror, 
220,221c220,221
<  BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                    ( *  bzerror, 
220,221c220,221
<  BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                     *  bzerror, 
220,221c220,221
<  BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                    ( int  bzerror, 
220,221c220,221
<  BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                     int  bzerror, 
220,221c220,221
<  BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                    (   bzerror, 
220,221c220,221
<  BZ2_bzReadOpen 
<                    ( int*  bzerror, 
---
>   
>                       bzerror, 
221c221
<                    ( int*  bzerror, 
---
>                     int*  bzerror, 
221c221
<                    ( int*  bzerror, 
---
>                     *  bzerror, 
221c221
<                    ( int*  bzerror, 
---
>                     int  bzerror, 
221c221
<                    ( int*  bzerror, 
---
>                       bzerror, 
221c221
<                    ( int*  bzerror, 
---
>                     int*  , 
221c221
<                    ( int*  bzerror, 
---
>                     *  , 
221c221
<                    ( int*  bzerror, 
---
>                     int  , 
221c221
<                    ( int*  bzerror, 
---
>                       , 
221c221
<                    ( int*  bzerror, 
---
>                    ( *  bzerror, 
221c221
<                    ( int*  bzerror, 
---
>                    (   bzerror, 
221c221
<                    ( int*  bzerror, 
---
>                    ( *  , 
221c221
<                    ( int*  bzerror, 
---
>                    (   , 
221c221
<                    ( int*  bzerror, 
---
>                    ( *  bzerror 
221c221
<                    ( int*  bzerror, 
---
>                    (   bzerror 
221c221
<                    ( int*  bzerror, 
---
>                    ( *   
221c221
<                    ( int*  bzerror, 
---
>                    (    
221c221
<                    ( int*  bzerror, 
---
>                    ( int  bzerror, 
221c221
<                    ( int*  bzerror, 
---
>                    ( int  , 
(97.9 %, 4236 bytes)
222c222
<                      FILE* f, 
---
>                        
222c222
<                      FILE* f, 
---
>                      FILE f, 
222c222
<                      FILE* f, 
---
>                      FILE , 
(97.9 %, 4229 bytes)
223,224c223,224
<                      int   verbosity,
<                      int   small,
---
>                         
>                         small,
223c223
<                      int   verbosity,
---
>                      int   ,
223c223
<                      int   verbosity,
---
>                      int   
223,224c223,224
<                      int   verbosity,
<                      int   small,
---
>                      int   ,
>                         small,
223,224c223,224
<                      int   verbosity,
<                      int   small,
---
>                      int   
>                         small,
223,224c223,224
<                      int   verbosity,
<                      int   small,
---
>                      int   ,
>                      int   ,
223,224c223,224
<                      int   verbosity,
<                      int   small,
---
>                      int   
>                      int   ,
223,224c223,224
<                      int   verbosity,
<                      int   small,
---
>                      int   ,
>                         ,
223,224c223,224
<                      int   verbosity,
<                      int   small,
---
>                      int   
>                         ,
223c223
<                      int   verbosity,
---
>                      int   verbosity
223,224c223,224
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                         small,
223,224c223,224
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                      int   ,
223,224c223,224
<                      int   verbosity,
<                      int   small,
---
>                      int   verbosity
>                         ,
(97.9 %, 4216 bytes)
224,225c224,225
<                         small,
<                      void* unused,
---
>                         
>                      * unused,
224,225c224,225
<                         small,
<                      void* unused,
---
>                         ,
>                      void unused,
224,225c224,225
<                         small,
<                      void* unused,
---
>                         
>                      void unused,
224,225c224,225
<                         small,
<                      void* unused,
---
>                         ,
>                       unused,
224,225c224,225
<                         small,
<                      void* unused,
---
>                         
>                       unused,
(97.9 %, 4206 bytes)
225c225
<                      * unused,
---
>                       
225,226c225,226
<                      * unused,
<                      int   nUnused )
---
>                       unused,
>                         nUnused )
225,226c225,226
<                      * unused,
<                      int   nUnused )
---
>                       ,
>                         nUnused )
225,226c225,226
<                      * unused,
<                      int   nUnused )
---
>                       unused
>                         nUnused )
225,226c225,226
<                      * unused,
<                      int   nUnused )
---
>                       
>                         nUnused )
225c225
<                      * unused,
---
>                      * ,
225c225
<                      * unused,
---
>                      * 
225,226c225,226
<                      * unused,
<                      int   nUnused )
---
>                      * ,
>                         nUnused )
225,226c225,226
<                      * unused,
<                      int   nUnused )
---
>                      * 
>                         nUnused )
(98.0 %, 4195 bytes)
226,228c226,228
<                         nUnused )
< {
<    ;   
---
>                          
> 
>       
226c226
<                         nUnused )
---
>                         nUnused 
226,227c226,227
<                         nUnused )
< {
---
>                         nUnused 
> 
226c226
<                         nUnused )
---
>                         nUnused 
228c228
<    ;   
---
>       
226,228c226,228
<                         nUnused )
< {
<    ;   
---
>                         nUnused 
> 
>       
226c226
<                         nUnused )
---
>                         nUnused 
229c229
< ;
---
> 
226,227c226,227
<                         nUnused )
< {
---
>                         nUnused 
> 
229c229
< ;
---
> 
226c226
<                         nUnused )
---
>                         nUnused 
228,229c228,229
<    ;   
< ;
---
>       
> 
226,229c226,229
<                         nUnused )
< {
<    ;   
< ;
---
>                         nUnused 
> 
>       
> 
227c227
< {
---
> 
227,228c227,228
< {
<    ;   
---
> 
>       
227c227
< {
---
> 
229c229
< ;
---
> 
227,229c227,229
< {
<    ;   
< ;
---
> 
>       
> 
227c227
< {
---
> 
230c230
< }
---
> 
227,228c227,228
< {
<    ;   
---
> 
>       
230c230
< }
---
> 
(98.0 %, 4193 bytes)
228c228
<    ;   
---
>       
235c235
<            ( int*    bzerror, 
---
>             int*    bzerror, 
228,229c228,229
<    ;   
< ;
---
>       
> 
235c235
<            ( int*    bzerror, 
---
>             int*    bzerror, 
228c228
<    ;   
---
>       
234,235c234,235
< BZ2_bzRead 
<            ( int*    bzerror, 
---
>  
>             int*    bzerror, 
228,229c228
<    ;   
< ;
---
>       
234,235c233,235
< BZ2_bzRead 
<            ( int*    bzerror, 
---
> 
>  
>             int*    bzerror, 
229c229
< ;
---
> 
229d228
< ;
234c233,234
< BZ2_bzRead 
---
> 
>  
229c229
< ;
---
> 
235c235
<            ( int*    bzerror, 
---
>             int*    bzerror, 
229d228
< ;
234,235c233,235
< BZ2_bzRead 
<            ( int*    bzerror, 
---
> 
>  
>             int*    bzerror, 
229c229
< ;
---
> 
235c235
<            ( int*    bzerror, 
---
>            ( *    bzerror, 
229d228
< ;
234,235c233,235
< BZ2_bzRead 
<            ( int*    bzerror, 
---
> 
>  
>            ( *    bzerror, 
229c229
< ;
---
> 
235c235
<            ( int*    bzerror, 
---
>             *    bzerror, 
229d228
< ;
234,235c233,235
< BZ2_bzRead 
<            ( int*    bzerror, 
---
> 
>  
>             *    bzerror, 
234c234
< BZ2_bzRead 
---
>  
(98.0 %, 4192 bytes)
234c234
< BZ2_bzRead 
---
>  
234,235c234,235
< BZ2_bzRead 
<            ( int*    bzerror, 
---
>  
>             int*    bzerror, 
234,235c234,235
< BZ2_bzRead 
<            ( int*    bzerror, 
---
>  
>            ( *    bzerror, 
234,235c234,235
< BZ2_bzRead 
<            ( int*    bzerror, 
---
>  
>             *    bzerror, 
234,235c234,235
< BZ2_bzRead 
<            ( int*    bzerror, 
---
>  
>            ( int    bzerror, 
234,235c234,235
< BZ2_bzRead 
<            ( int*    bzerror, 
---
>  
>             int    bzerror, 
234,235c234,235
< BZ2_bzRead 
<            ( int*    bzerror, 
---
>  
>            (     bzerror, 
234,235c234,235
< BZ2_bzRead 
<            ( int*    bzerror, 
---
>  
>                 bzerror, 
235c235
<            ( int*    bzerror, 
---
>             int*    bzerror, 
235c235
<            ( int*    bzerror, 
---
>             *    bzerror, 
235c235
<            ( int*    bzerror, 
---
>             int    bzerror, 
235c235
<            ( int*    bzerror, 
---
>                 bzerror, 
235c235
<            ( int*    bzerror, 
---
>             int*    , 
235c235
<            ( int*    bzerror, 
---
>             *    , 
235c235
<            ( int*    bzerror, 
---
>             int    , 
235c235
<            ( int*    bzerror, 
---
>                 , 
235c235
<            ( int*    bzerror, 
---
>            ( *    bzerror, 
235c235
<            ( int*    bzerror, 
---
>            (     bzerror, 
235c235
<            ( int*    bzerror, 
---
>            ( *    , 
235c235
<            ( int*    bzerror, 
---
>            (     , 
235c235
<            ( int*    bzerror, 
---
>            ( *    bzerror 
235c235
<            ( int*    bzerror, 
---
>            (     bzerror 
235c235
<            ( int*    bzerror, 
---
>            ( *     
235c235
<            ( int*    bzerror, 
---
>            (      
235c235
<            ( int*    bzerror, 
---
>            ( int    bzerror, 
235c235
<            ( int*    bzerror, 
---
>            ( int    , 
235c235
<            ( int*    bzerror, 
---
>            ( int    bzerror 
235c235
<            ( int*    bzerror, 
---
>            ( int     
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int    bzerror, 
>              * b, 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int    , 
>              * b, 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int    bzerror 
>              * b, 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int     
>              * b, 
235c235
<            ( int*    bzerror, 
---
>            ( int*    , 
235c235
<            ( int*    bzerror, 
---
>            ( int*     
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    , 
>              * b, 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*     
>              * b, 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    , 
>              BZFILE b, 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*     
>              BZFILE b, 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    , 
>               b, 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*     
>               b, 
235c235
<            ( int*    bzerror, 
---
>            ( int*    bzerror 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              * b, 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              BZFILE b, 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>               b, 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              BZFILE* , 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              * , 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>              BZFILE , 
235,236c235,236
<            ( int*    bzerror, 
<              BZFILE* b, 
---
>            ( int*    bzerror 
>               , 
236c236
<              BZFILE* b, 
---
>              * b, 
236c236
<              BZFILE* b, 
---
>               b, 
236c236
<              BZFILE* b, 
---
>              * , 
236c236
<              BZFILE* b, 
---
>               , 
236c236
<              BZFILE* b, 
---
>              * b 
236c236
<              BZFILE* b, 
---
>               b 
236c236
<              BZFILE* b, 
---
>              *  
236c236
<              BZFILE* b, 
---
>                
236c236
<              BZFILE* b, 
---
>              BZFILE b, 
236c236
<              BZFILE* b, 
---
>              BZFILE , 
236c236
<              BZFILE* b, 
---
>              BZFILE b 
236c236
<              BZFILE* b, 
---
>              BZFILE  
236,237c236,237
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE b, 
>              *   buf, 
236,237c236,237
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE , 
>              *   buf, 
236,237c236,237
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE b 
>              *   buf, 
236,237c236,237
<              BZFILE* b, 
<              void*   buf, 
---
>              BZFILE  
>              *   buf, 
(98.0 %, 4191 bytes)
236c236
<              BZFILE b, 
---
>              BZFILE , 
236c236
<              BZFILE b, 
---
>              BZFILE  
236,237c236,237
<              BZFILE b, 
<              void*   buf, 
---
>              BZFILE , 
>              *   buf, 
236,237c236,237
<              BZFILE b, 
<              void*   buf, 
---
>              BZFILE  
>              *   buf, 
236,237c236,237
<              BZFILE b, 
<              void*   buf, 
---
>              BZFILE , 
>              void   buf, 
236,237c236,237
<              BZFILE b, 
<              void*   buf, 
---
>              BZFILE  
>              void   buf, 
236,237c236,237
<              BZFILE b, 
<              void*   buf, 
---
>              BZFILE , 
>                 buf, 
236,237c236,237
<              BZFILE b, 
<              void*   buf, 
---
>              BZFILE  
>                 buf, 
236c236
<              BZFILE b, 
---
>              BZFILE b 
236,237c236,237
<              BZFILE b, 
<              void*   buf, 
---
>              BZFILE b 
>              *   buf, 
236,237c236,237
<              BZFILE b, 
<              void*   buf, 
---
>              BZFILE b 
>              void   buf, 
236,237c236,237
<              BZFILE b, 
<              void*   buf, 
---
>              BZFILE b 
>                 buf, 
236,237c236,237
<              BZFILE b, 
<              void*   buf, 
---
>              BZFILE b 
>              void*   , 
236,237c236,237
<              BZFILE b, 
<              void*   buf, 
---
>              BZFILE b 
>              *   , 
236,237c236,237
<              BZFILE b, 
<              void*   buf, 
---
>              BZFILE b 
>              void   , 
236,237c236,237
<              BZFILE b, 
<              void*   buf, 
---
>              BZFILE b 
>                 , 
237c237
<              void*   buf, 
---
>              *   buf, 
237c237
<              void*   buf, 
---
>                 buf, 
237c237
<              void*   buf, 
---
>              *   , 
237c237
<              void*   buf, 
---
>                 , 
237c237
<              void*   buf, 
---
>              *   buf 
237c237
<              void*   buf, 
---
>                 buf 
237c237
<              void*   buf, 
---
>              *    
237c237
<              void*   buf, 
---
>                  
237c237
<              void*   buf, 
---
>              void   buf, 
237c237
<              void*   buf, 
---
>              void   , 
237c237
<              void*   buf, 
---
>              void   buf 
237c237
<              void*   buf, 
---
>              void    
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void   buf, 
>                   len )
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void   , 
>                   len )
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void   buf 
>                   len )
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void    
>                   len )
237c237
<              void*   buf, 
---
>              void*   , 
237c237
<              void*   buf, 
---
>              void*    
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void*   , 
>                   len )
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void*    
>                   len )
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void*   , 
>              int      )
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void*    
>              int      )
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void*   , 
>                    )
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void*    
>                    )
237c237
<              void*   buf, 
---
>              void*   buf 
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>                   len )
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>              int      )
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>                    )
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>              int     len 
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>                   len 
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>              int      
237,238c237,238
<              void*   buf, 
<              int     len )
---
>              void*   buf 
>                    
238c238
<              int     len )
---
>                   len )
238c238
<              int     len )
---
>                    )
238c238
<              int     len )
---
>                   len 
238c238
<              int     len )
---
>                    
238,239c238,239
<              int     len )
< {
---
>                   len )
> 
238,239c238,239
<              int     len )
< {
---
>                    )
> 
238,239c238,239
<              int     len )
< {
---
>                   len 
> 
238,239c238,239
<              int     len )
< {
---
>                    
> 
238c238
<              int     len )
---
>              int      )
238c238
<              int     len )
---
>              int      
238,239c238,239
<              int     len )
< {
---
>              int      )
> 
238,239c238,239
<              int     len )
< {
---
>              int      
> 
238c238
<              int     len )
---
>              int      )
241c241
<    bzFile bzf ;
---
>     bzf ;
238c238
<              int     len )
---
>              int      
241c241
<    bzFile bzf ;
---
>     bzf ;
238,239c238,239
<              int     len )
< {
---
>              int      )
> 
241c241
<    bzFile bzf ;
---
>     bzf ;
238,239c238,239
<              int     len )
< {
---
>              int      
> 
241c241
<    bzFile bzf ;
---
>     bzf ;
238c238
<              int     len )
---
>              int     len 
238,239c238,239
<              int     len )
< {
---
>              int     len 
> 
238c238
<              int     len )
---
>              int     len 
241c241
<    bzFile bzf ;
---
>     bzf ;
238,239c238,239
<              int     len )
< {
---
>              int     len 
> 
241c241
<    bzFile bzf ;
---
>     bzf ;
238c238
<              int     len )
---
>              int     len 
241c241
<    bzFile bzf ;
---
>    bzFile  ;
238,239c238,239
<              int     len )
< {
---
>              int     len 
> 
241c241
<    bzFile bzf ;
---
>    bzFile  ;
238c238
<              int     len )
---
>              int     len 
241c241
<    bzFile bzf ;
---
>      ;
238,239c238,239
<              int     len )
< {
---
>              int     len 
> 
241c241
<    bzFile bzf ;
---
>      ;
239c239
< {
---
> 
239c239
< {
---
> 
241c241
<    bzFile bzf ;
---
>     bzf ;
239c239
< {
---
> 
241c241
<    bzFile bzf ;
---
>    bzFile  ;
239c239
< {
---
> 
241c241
<    bzFile bzf ;
---
>      ;
239c239
< {
---
> 
241c241
<    bzFile bzf ;
---
>    bzFile bzf 
239c239
< {
---
> 
241c241
<    bzFile bzf ;
---
>     bzf 
239c239
< {
---
> 
241c241
<    bzFile bzf ;
---
>    bzFile  
239c239
< {
---
> 
241c241
<    bzFile bzf ;
---
>      
241c241
<    bzFile bzf ;
---
>     bzf ;
241c241
<    bzFile bzf ;
---
>      ;
241c241
<    bzFile bzf ;
---
>     bzf 
241c241
<    bzFile bzf ;
---
>      
(98.0 %, 4182 bytes)
241c241
<      ;
---
>      
243c243
<    }
---
>    
241c241
<      ;
---
>      
247c247
< void BZ2_bzReadGetUnused 
---
>  BZ2_bzReadGetUnused 
241c241
<      ;
---
>      
243c243
<    }
---
>    
247c247
< void BZ2_bzReadGetUnused 
---
>  BZ2_bzReadGetUnused 
241c241
<      ;
---
>      
247c247
< void BZ2_bzReadGetUnused 
---
> void  
241c241
<      ;
---
>      
243c243
<    }
---
>    
247c247
< void BZ2_bzReadGetUnused 
---
> void  
241c241
<      ;
---
>      
247c247
< void BZ2_bzReadGetUnused 
---
>   
241c241
<      ;
---
>      
243c243
<    }
---
>    
247c247
< void BZ2_bzReadGetUnused 
---
>   
243c243
<    }
---
>    
243c243
<    }
---
>    
247c247
< void BZ2_bzReadGetUnused 
---
>  BZ2_bzReadGetUnused 
243c243
<    }
---
>    
247c247
< void BZ2_bzReadGetUnused 
---
> void  
243c243
<    }
---
>    
247c247
< void BZ2_bzReadGetUnused 
---
>   
243c243
<    }
---
>    
248c248
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
243c243
<    }
---
>    
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>  BZ2_bzReadGetUnused 
>                       int*    bzerror, 
243c243
<    }
---
>    
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       int*    bzerror, 
243c243
<    }
---
>    
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>   
>                       int*    bzerror, 
247c247
< void BZ2_bzReadGetUnused 
---
>  BZ2_bzReadGetUnused 
247c247
< void BZ2_bzReadGetUnused 
---
>   
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>  BZ2_bzReadGetUnused 
>                       int*    bzerror, 
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>   
>                       int*    bzerror, 
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>  BZ2_bzReadGetUnused 
>                      ( *    bzerror, 
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>   
>                      ( *    bzerror, 
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>  BZ2_bzReadGetUnused 
>                       *    bzerror, 
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
>   
>                       *    bzerror, 
247c247
< void BZ2_bzReadGetUnused 
---
> void  
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       int*    bzerror, 
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      ( *    bzerror, 
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       *    bzerror, 
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      ( int    bzerror, 
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                       int    bzerror, 
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                      (     bzerror, 
247,248c247,248
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
---
> void  
>                           bzerror, 
248c248
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
248c248
<                      ( int*    bzerror, 
---
>                       *    bzerror, 
248c248
<                      ( int*    bzerror, 
---
>                       int    bzerror, 
248c248
<                      ( int*    bzerror, 
---
>                           bzerror, 
248c248
<                      ( int*    bzerror, 
---
>                       int*    , 
248c248
<                      ( int*    bzerror, 
---
>                       *    , 
248c248
<                      ( int*    bzerror, 
---
>                       int    , 
248c248
<                      ( int*    bzerror, 
---
>                           , 
248c248
<                      ( int*    bzerror, 
---
>                      ( *    bzerror, 
248c248
<                      ( int*    bzerror, 
---
>                      (     bzerror, 
248c248
<                      ( int*    bzerror, 
---
>                      ( *    , 
248c248
<                      ( int*    bzerror, 
---
>                      (     , 
248c248
<                      ( int*    bzerror, 
---
>                      ( *    bzerror 
248c248
<                      ( int*    bzerror, 
---
>                      (     bzerror 
248c248
<                      ( int*    bzerror, 
---
>                      ( *     
248c248
<                      ( int*    bzerror, 
---
>                      (      
248c248
<                      ( int*    bzerror, 
---
>                      ( int    bzerror, 
248c248
<                      ( int*    bzerror, 
---
>                      ( int    , 
248c248
<                      ( int*    bzerror, 
---
>                      ( int    bzerror 
248c248
<                      ( int*    bzerror, 
---
>                      ( int     
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    bzerror, 
>                        * b, 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    , 
>                        * b, 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int    bzerror 
>                        * b, 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int     
>                        * b, 
248c248
<                      ( int*    bzerror, 
---
>                      ( int*    , 
248c248
<                      ( int*    bzerror, 
---
>                      ( int*     
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                        * b, 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                        * b, 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                        BZFILE b, 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                        BZFILE b, 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    , 
>                         b, 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*     
>                         b, 
248c248
<                      ( int*    bzerror, 
---
>                      ( int*    bzerror 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        * b, 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        BZFILE b, 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                         b, 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        BZFILE* , 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        * , 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                        BZFILE , 
248,249c248,249
<                      ( int*    bzerror, 
<                        BZFILE* b, 
---
>                      ( int*    bzerror 
>                         , 
249c249
<                        BZFILE* b, 
---
>                        * b, 
249c249
<                        BZFILE* b, 
---
>                         b, 
249c249
<                        BZFILE* b, 
---
>                        * , 
249c249
<                        BZFILE* b, 
---
>                         , 
249c249
<                        BZFILE* b, 
---
>                        * b 
249c249
<                        BZFILE* b, 
---
>                         b 
249c249
<                        BZFILE* b, 
---
>                        *  
249c249
<                        BZFILE* b, 
---
>                          
249c249
<                        BZFILE* b, 
---
>                        BZFILE b, 
249c249
<                        BZFILE* b, 
---
>                        BZFILE , 
249c249
<                        BZFILE* b, 
---
>                        BZFILE b 
249c249
<                        BZFILE* b, 
---
>                        BZFILE  
249,250c249,250
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE b, 
>                        **  unused, 
249,250c249,250
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE , 
>                        **  unused, 
249,250c249,250
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        **  unused, 
249,250c249,250
<                        BZFILE* b, 
<                        void**  unused, 
---
>                        BZFILE  
>                        **  unused, 
(98.0 %, 4181 bytes)
249c249
<                        BZFILE b, 
---
>                        BZFILE , 
249c249
<                        BZFILE b, 
---
>                        BZFILE  
249,250c249,250
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE , 
>                        **  unused, 
249,250c249,250
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE  
>                        **  unused, 
249,250c249,250
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE , 
>                        void*  unused, 
249,250c249,250
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE  
>                        void*  unused, 
249,250c249,250
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE , 
>                        *  unused, 
249,250c249,250
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE  
>                        *  unused, 
249c249
<                        BZFILE b, 
---
>                        BZFILE b 
249,250c249,250
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        **  unused, 
249,250c249,250
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        void*  unused, 
249,250c249,250
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        *  unused, 
249,250c249,250
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        void*  unused, 
249,250c249,250
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        *  unused, 
249,250c249,250
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                        void  unused, 
249,250c249,250
<                        BZFILE b, 
<                        void**  unused, 
---
>                        BZFILE b 
>                          unused, 
250c250
<                        void**  unused, 
---
>                        **  unused, 
250c250
<                        void**  unused, 
---
>                        *  unused, 
250c250
<                        void**  unused, 
---
>                        *  unused, 
250c250
<                        void**  unused, 
---
>                          unused, 
250c250
<                        void**  unused, 
---
>                        **  , 
250c250
<                        void**  unused, 
---
>                        *  , 
250c250
<                        void**  unused, 
---
>                        *  , 
250c250
<                        void**  unused, 
---
>                          , 
250c250
<                        void**  unused, 
---
>                        void*  unused, 
250c250
<                        void**  unused, 
---
>                        void  unused, 
250c250
<                        void**  unused, 
---
>                        void*  , 
250c250
<                        void**  unused, 
---
>                        void  , 
250c250
<                        void**  unused, 
---
>                        void*  unused 
250c250
<                        void**  unused, 
---
>                        void  unused 
250c250
<                        void**  unused, 
---
>                        void*   
250c250
<                        void**  unused, 
---
>                        void   
250c250
<                        void**  unused, 
---
>                        void*  unused, 
250c250
<                        void**  unused, 
---
>                        void*  , 
250c250
<                        void**  unused, 
---
>                        void*  unused 
250c250
<                        void**  unused, 
---
>                        void*   
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  unused, 
>                        *    nUnused )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  , 
>                        *    nUnused )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*  unused 
>                        *    nUnused )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void*   
>                        *    nUnused )
250c250
<                        void**  unused, 
---
>                        void**  , 
250c250
<                        void**  unused, 
---
>                        void**   
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                        *    nUnused )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                        *    nUnused )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                        int    nUnused )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                        int    nUnused )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  , 
>                            nUnused )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**   
>                            nUnused )
250c250
<                        void**  unused, 
---
>                        void**  unused 
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        *    nUnused )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        int    nUnused )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                            nUnused )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        int*     )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        *     )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                        int     )
250,251c250,251
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused 
>                             )
251c251
<                        int*    nUnused )
---
>                        *    nUnused )
251c251
<                        int*    nUnused )
---
>                            nUnused )
251c251
<                        int*    nUnused )
---
>                        *     )
251c251
<                        int*    nUnused )
---
>                             )
251c251
<                        int*    nUnused )
---
>                        *    nUnused 
251c251
<                        int*    nUnused )
---
>                            nUnused 
251c251
<                        int*    nUnused )
---
>                        *     
251c251
<                        int*    nUnused )
---
>                             
251c251
<                        int*    nUnused )
---
>                        int    nUnused )
251c251
<                        int*    nUnused )
---
>                        int     )
251c251
<                        int*    nUnused )
---
>                        int    nUnused 
251c251
<                        int*    nUnused )
---
>                        int     
251,252c251,252
<                        int*    nUnused )
< {
---
>                        int    nUnused )
> 
251,252c251,252
<                        int*    nUnused )
< {
---
>                        int     )
> 
251,252c251,252
<                        int*    nUnused )
< {
---
>                        int    nUnused 
> 
251,252c251,252
<                        int*    nUnused )
< {
---
>                        int     
> 
251c251
<                        int*    nUnused )
---
>                        int*     )
251c251
<                        int*    nUnused )
---
>                        int*     
251,252c251,252
<                        int*    nUnused )
< {
---
>                        int*     )
> 
251,252c251,252
<                        int*    nUnused )
< {
---
>                        int*     
> 
251c251
<                        int*    nUnused )
---
>                        int*     )
253c253
<    bzFile next_in;
---
>     next_in;
251c251
<                        int*    nUnused )
---
>                        int*     
253c253
<    bzFile next_in;
---
>     next_in;
251,253c251,253
<                        int*    nUnused )
< {
<    bzFile next_in;
---
>                        int*     )
> 
>     next_in;
251,253c251,253
<                        int*    nUnused )
< {
<    bzFile next_in;
---
>                        int*     
> 
>     next_in;
251c251
<                        int*    nUnused )
---
>                        int*    nUnused 
251,252c251,252
<                        int*    nUnused )
< {
---
>                        int*    nUnused 
> 
251c251
<                        int*    nUnused )
---
>                        int*    nUnused 
253c253
<    bzFile next_in;
---
>     next_in;
251,253c251,253
<                        int*    nUnused )
< {
<    bzFile next_in;
---
>                        int*    nUnused 
> 
>     next_in;
251c251
<                        int*    nUnused )
---
>                        int*    nUnused 
253c253
<    bzFile next_in;
---
>    bzFile ;
251,253c251,253
<                        int*    nUnused )
< {
<    bzFile next_in;
---
>                        int*    nUnused 
> 
>    bzFile ;
251c251
<                        int*    nUnused )
---
>                        int*    nUnused 
253c253
<    bzFile next_in;
---
>     ;
251,253c251,253
<                        int*    nUnused )
< {
<    bzFile next_in;
---
>                        int*    nUnused 
> 
>     ;
252c252
< {
---
> 
252,253c252,253
< {
<    bzFile next_in;
---
> 
>     next_in;
252,253c252,253
< {
<    bzFile next_in;
---
> 
>    bzFile ;
252,253c252,253
< {
<    bzFile next_in;
---
> 
>     ;
252,253c252,253
< {
<    bzFile next_in;
---
> 
>    bzFile next_in
252,253c252,253
< {
<    bzFile next_in;
---
> 
>     next_in
252,253c252,253
< {
<    bzFile next_in;
---
> 
>    bzFile 
252,253c252,253
< {
<    bzFile next_in;
---
> 
>     
253c253
<    bzFile next_in;
---
>     next_in;
253c253
<    bzFile next_in;
---
>     ;
253c253
<    bzFile next_in;
---
>     next_in
253c253
<    bzFile next_in;
---
>     
(98.0 %, 4168 bytes)
253,254c253,254
<     ;
< }
---
>     
> 
253c253
<     ;
---
>     
262c262
< BZ2_bzBuffToBuffCompress 
---
>  
253,254c253
<     ;
< }
---
>     
262c261,262
< BZ2_bzBuffToBuffCompress 
---
> 
>  
253c253
<     ;
---
>     
263c263
<                          ( char*         dest, 
---
>                           char*         dest, 
253,254c253,254
<     ;
< }
---
>     
> 
263c263
<                          ( char*         dest, 
---
>                           char*         dest, 
253c253
<     ;
---
>     
262,263c262,263
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                           char*         dest, 
253,254c253
<     ;
< }
---
>     
262,263c261,263
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
> 
>  
>                           char*         dest, 
254c254
< }
---
> 
254d253
< }
262c261,262
< BZ2_bzBuffToBuffCompress 
---
> 
>  
254c254
< }
---
> 
263c263
<                          ( char*         dest, 
---
>                           char*         dest, 
254d253
< }
262,263c261,263
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
> 
>  
>                           char*         dest, 
254c254
< }
---
> 
263c263
<                          ( char*         dest, 
---
>                          ( *         dest, 
254d253
< }
262,263c261,263
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
> 
>  
>                          ( *         dest, 
254c254
< }
---
> 
263c263
<                          ( char*         dest, 
---
>                           *         dest, 
254d253
< }
262,263c261,263
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
> 
>  
>                           *         dest, 
262c262
< BZ2_bzBuffToBuffCompress 
---
>  
262,263c262,263
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                           char*         dest, 
262,263c262,263
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                          ( *         dest, 
262,263c262,263
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                           *         dest, 
262,263c262,263
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                          ( char         dest, 
262,263c262,263
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                           char         dest, 
262,263c262,263
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                          (          dest, 
262,263c262,263
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
---
>  
>                                    dest, 
263c263
<                          ( char*         dest, 
---
>                           char*         dest, 
263c263
<                          ( char*         dest, 
---
>                           *         dest, 
263c263
<                          ( char*         dest, 
---
>                           char         dest, 
263c263
<                          ( char*         dest, 
---
>                                    dest, 
263c263
<                          ( char*         dest, 
---
>                           char*         , 
263c263
<                          ( char*         dest, 
---
>                           *         , 
263c263
<                          ( char*         dest, 
---
>                           char         , 
263c263
<                          ( char*         dest, 
---
>                                    , 
263c263
<                          ( char*         dest, 
---
>                          ( *         dest, 
263c263
<                          ( char*         dest, 
---
>                          (          dest, 
263c263
<                          ( char*         dest, 
---
>                          ( *         , 
263c263
<                          ( char*         dest, 
---
>                          (          , 
263c263
<                          ( char*         dest, 
---
>                          ( *         dest 
263c263
<                          ( char*         dest, 
---
>                          (          dest 
263c263
<                          ( char*         dest, 
---
>                          ( *          
263c263
<                          ( char*         dest, 
---
>                          (           
263c263
<                          ( char*         dest, 
---
>                          ( char         dest, 
263c263
<                          ( char*         dest, 
---
>                          ( char         , 
263c263
<                          ( char*         dest, 
---
>                          ( char         dest 
263c263
<                          ( char*         dest, 
---
>                          ( char          
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char         dest, 
>                             * destLen,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char         , 
>                             * destLen,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char         dest 
>                             * destLen,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char          
>                             * destLen,
263c263
<                          ( char*         dest, 
---
>                          ( char*         , 
263c263
<                          ( char*         dest, 
---
>                          ( char*          
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char*         , 
>                             * destLen,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char*          
>                             * destLen,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char*         , 
>                            unsigned  destLen,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char*          
>                            unsigned  destLen,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char*         , 
>                              destLen,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char*          
>                              destLen,
263c263
<                          ( char*         dest, 
---
>                          ( char*         dest 
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char*         dest 
>                             * destLen,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char*         dest 
>                            unsigned  destLen,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char*         dest 
>                              destLen,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char*         dest 
>                            unsigned * ,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char*         dest 
>                             * ,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char*         dest 
>                            unsigned  ,
263,264c263,264
<                          ( char*         dest, 
<                            unsigned * destLen,
---
>                          ( char*         dest 
>                              ,
264c264
<                            unsigned * destLen,
---
>                             * destLen,
264c264
<                            unsigned * destLen,
---
>                              destLen,
264c264
<                            unsigned * destLen,
---
>                             * ,
264c264
<                            unsigned * destLen,
---
>                              ,
264c264
<                            unsigned * destLen,
---
>                             * destLen
264c264
<                            unsigned * destLen,
---
>                              destLen
264c264
<                            unsigned * destLen,
---
>                             * 
264c264
<                            unsigned * destLen,
---
>                              
264c264
<                            unsigned * destLen,
---
>                            unsigned  destLen,
264c264
<                            unsigned * destLen,
---
>                            unsigned  ,
264c264
<                            unsigned * destLen,
---
>                            unsigned  destLen
264c264
<                            unsigned * destLen,
---
>                            unsigned  
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  destLen,
>                            *         source, 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  ,
>                            *         source, 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  destLen
>                            *         source, 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned  
>                            *         source, 
264c264
<                            unsigned * destLen,
---
>                            unsigned * ,
264c264
<                            unsigned * destLen,
---
>                            unsigned * 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                            *         source, 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                            *         source, 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                            char         source, 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                            char         source, 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * ,
>                                     source, 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * 
>                                     source, 
264c264
<                            unsigned * destLen,
---
>                            unsigned * destLen
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            *         source, 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            char         source, 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                                     source, 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            char*         , 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            *         , 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                            char         , 
264,265c264,265
<                            unsigned * destLen,
<                            char*         source, 
---
>                            unsigned * destLen
>                                     , 
265c265
<                            char*         source, 
---
>                            *         source, 
265c265
<                            char*         source, 
---
>                                     source, 
265c265
<                            char*         source, 
---
>                            *         , 
265c265
<                            char*         source, 
---
>                                     , 
265c265
<                            char*         source, 
---
>                            *         source 
265c265
<                            char*         source, 
---
>                                     source 
265c265
<                            char*         source, 
---
>                            *          
265c265
<                            char*         source, 
---
>                                      
265c265
<                            char*         source, 
---
>                            char         source, 
265c265
<                            char*         source, 
---
>                            char         , 
265c265
<                            char*         source, 
---
>                            char         source 
265c265
<                            char*         source, 
---
>                            char          
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char         source, 
>                             sourceLen,
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char         , 
>                             sourceLen,
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char         source 
>                             sourceLen,
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char          
>                             sourceLen,
265c265
<                            char*         source, 
---
>                            char*         , 
265c265
<                            char*         source, 
---
>                            char*          
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char*         , 
>                             sourceLen,
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char*          
>                             sourceLen,
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char*         , 
>                            unsigned ,
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char*          
>                            unsigned ,
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char*         , 
>                             ,
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char*          
>                             ,
265c265
<                            char*         source, 
---
>                            char*         source 
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char*         source 
>                             sourceLen,
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char*         source 
>                            unsigned ,
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char*         source 
>                             ,
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char*         source 
>                            unsigned sourceLen
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char*         source 
>                             sourceLen
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char*         source 
>                            unsigned 
265,266c265,266
<                            char*         source, 
<                            unsigned sourceLen,
---
>                            char*         source 
>                             
266c266
<                            unsigned sourceLen,
---
>                             sourceLen,
266c266
<                            unsigned sourceLen,
---
>                             ,
266c266
<                            unsigned sourceLen,
---
>                             sourceLen
266c266
<                            unsigned sourceLen,
---
>                             
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                             sourceLen,
>                                       blockSize100k, 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                             ,
>                                       blockSize100k, 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                             sourceLen
>                                       blockSize100k, 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                             
>                                       blockSize100k, 
266c266
<                            unsigned sourceLen,
---
>                            unsigned ,
266c266
<                            unsigned sourceLen,
---
>                            unsigned 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned ,
>                                       blockSize100k, 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned 
>                                       blockSize100k, 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned ,
>                            int           , 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned 
>                            int           , 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned ,
>                                       , 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned 
>                                       , 
266c266
<                            unsigned sourceLen,
---
>                            unsigned sourceLen
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned sourceLen
>                                       blockSize100k, 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned sourceLen
>                            int           , 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned sourceLen
>                                       , 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned sourceLen
>                            int           blockSize100k 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned sourceLen
>                                       blockSize100k 
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned sourceLen
>                            int            
266,267c266,267
<                            unsigned sourceLen,
<                            int           blockSize100k, 
---
>                            unsigned sourceLen
>                                        
267c267
<                            int           blockSize100k, 
---
>                                       blockSize100k, 
267c267
<                            int           blockSize100k, 
---
>                                       , 
267c267
<                            int           blockSize100k, 
---
>                                       blockSize100k 
267c267
<                            int           blockSize100k, 
---
>                                        
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       blockSize100k, 
>                                       verbosity, 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       , 
>                                       verbosity, 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                       blockSize100k 
>                                       verbosity, 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                                        
>                                       verbosity, 
267c267
<                            int           blockSize100k, 
---
>                            int           , 
267c267
<                            int           blockSize100k, 
---
>                            int            
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                                       verbosity, 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int            
>                                       verbosity, 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                            int           , 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int            
>                            int           , 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           , 
>                                       , 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int            
>                                       , 
267c267
<                            int           blockSize100k, 
---
>                            int           blockSize100k 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                       verbosity, 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                            int           , 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                       , 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                            int           verbosity 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                       verbosity 
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                            int            
267,268c267,268
<                            int           blockSize100k, 
<                            int           verbosity, 
---
>                            int           blockSize100k 
>                                        
268c268
<                            int           verbosity, 
---
>                                       verbosity, 
268c268
<                            int           verbosity, 
---
>                                       , 
268c268
<                            int           verbosity, 
---
>                                       verbosity 
268c268
<                            int           verbosity, 
---
>                                        
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       verbosity, 
>                                       workFactor )
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       , 
>                                       workFactor )
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                                       verbosity 
>                                       workFactor )
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                                        
>                                       workFactor )
268c268
<                            int           verbosity, 
---
>                            int           , 
268c268
<                            int           verbosity, 
---
>                            int            
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                                       workFactor )
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int            
>                                       workFactor )
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                            int            )
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int            
>                            int            )
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           , 
>                                        )
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int            
>                                        )
268c268
<                            int           verbosity, 
---
>                            int           verbosity 
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                       workFactor )
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                            int            )
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                        )
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                            int           workFactor 
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                       workFactor 
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                            int            
268,269c268,269
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity 
>                                        
269c269
<                            int           workFactor )
---
>                                       workFactor )
269c269
<                            int           workFactor )
---
>                                        )
269c269
<                            int           workFactor )
---
>                                       workFactor 
269c269
<                            int           workFactor )
---
>                                        
269,270c269,270
<                            int           workFactor )
< {
---
>                                       workFactor )
> 
269,270c269,270
<                            int           workFactor )
< {
---
>                                        )
> 
269,270c269,270
<                            int           workFactor )
< {
---
>                                       workFactor 
> 
269,270c269,270
<                            int           workFactor )
< {
---
>                                        
> 
269c269
<                            int           workFactor )
---
>                            int            )
269c269
<                            int           workFactor )
---
>                            int            
269,270c269,270
<                            int           workFactor )
< {
---
>                            int            )
> 
269,270c269,270
<                            int           workFactor )
< {
---
>                            int            
> 
269c269
<                            int           workFactor )
---
>                            int            )
271c271
<    }
---
>    
269c269
<                            int           workFactor )
---
>                            int            
271c271
<    }
---
>    
269,271c269,271
<                            int           workFactor )
< {
<    }
---
>                            int            )
> 
>    
269,271c269,271
<                            int           workFactor )
< {
<    }
---
>                            int            
> 
>    
269c269
<                            int           workFactor )
---
>                            int           workFactor 
269,270c269,270
<                            int           workFactor )
< {
---
>                            int           workFactor 
> 
269c269
<                            int           workFactor )
---
>                            int           workFactor 
271c271
<    }
---
>    
269,271c269,271
<                            int           workFactor )
< {
<    }
---
>                            int           workFactor 
> 
>    
269c269
<                            int           workFactor )
---
>                            int           workFactor 
275c275
< BZ2_bzBuffToBuffDecompress 
---
>  
269,270c269,270
<                            int           workFactor )
< {
---
>                            int           workFactor 
> 
275c275
< BZ2_bzBuffToBuffDecompress 
---
>  
269c269
<                            int           workFactor )
---
>                            int           workFactor 
271c271
<    }
---
>    
275c275
< BZ2_bzBuffToBuffDecompress 
---
>  
269,271c269
<                            int           workFactor )
< {
<    }
---
>                            int           workFactor 
272a271
>    
275c274,275
< BZ2_bzBuffToBuffDecompress 
---
> 
>  
270c270
< {
---
> 
270,271c270,271
< {
<    }
---
> 
>    
270c270
< {
---
> 
275c275
< BZ2_bzBuffToBuffDecompress 
---
>  
270,271d269
< {
<    }
272a271
>    
275c274,275
< BZ2_bzBuffToBuffDecompress 
---
> 
>  
270c270
< {
---
> 
276c276
<                            ( char*         dest, 
---
>                             char*         dest, 
270,271c270,271
< {
<    }
---
> 
>    
276c276
<                            ( char*         dest, 
---
>                             char*         dest, 
270c270
< {
---
> 
275,276c275,276
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                             char*         dest, 
270,271d269
< {
<    }
272a271
>    
275,276c274,276
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
> 
>  
>                             char*         dest, 
271c271
<    }
---
>    
271c271
<    }
---
>    
275c275
< BZ2_bzBuffToBuffDecompress 
---
>  
271c271
<    }
---
>    
276c276
<                            ( char*         dest, 
---
>                             char*         dest, 
271c271
<    }
---
>    
275,276c275,276
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                             char*         dest, 
271c271
<    }
---
>    
276c276
<                            ( char*         dest, 
---
>                            ( *         dest, 
271c271
<    }
---
>    
275,276c275,276
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                            ( *         dest, 
271c271
<    }
---
>    
276c276
<                            ( char*         dest, 
---
>                             *         dest, 
271c271
<    }
---
>    
275,276c275,276
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                             *         dest, 
275c275
< BZ2_bzBuffToBuffDecompress 
---
>  
275,276c275,276
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                             char*         dest, 
275,276c275,276
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                            ( *         dest, 
275,276c275,276
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                             *         dest, 
275,276c275,276
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                            ( char         dest, 
275,276c275,276
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                             char         dest, 
275,276c275,276
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                            (          dest, 
275,276c275,276
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
---
>  
>                                      dest, 
276c276
<                            ( char*         dest, 
---
>                             char*         dest, 
276c276
<                            ( char*         dest, 
---
>                             *         dest, 
276c276
<                            ( char*         dest, 
---
>                             char         dest, 
276c276
<                            ( char*         dest, 
---
>                                      dest, 
276c276
<                            ( char*         dest, 
---
>                             char*         , 
276c276
<                            ( char*         dest, 
---
>                             *         , 
276c276
<                            ( char*         dest, 
---
>                             char         , 
276c276
<                            ( char*         dest, 
---
>                                      , 
276c276
<                            ( char*         dest, 
---
>                            ( *         dest, 
276c276
<                            ( char*         dest, 
---
>                            (          dest, 
276c276
<                            ( char*         dest, 
---
>                            ( *         , 
276c276
<                            ( char*         dest, 
---
>                            (          , 
276c276
<                            ( char*         dest, 
---
>                            ( *         dest 
276c276
<                            ( char*         dest, 
---
>                            (          dest 
276c276
<                            ( char*         dest, 
---
>                            ( *          
276c276
<                            ( char*         dest, 
---
>                            (           
276c276
<                            ( char*         dest, 
---
>                            ( char         dest, 
276c276
<                            ( char*         dest, 
---
>                            ( char         , 
276c276
<                            ( char*         dest, 
---
>                            ( char         dest 
276c276
<                            ( char*         dest, 
---
>                            ( char          
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char         dest, 
>                               * destLen,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char         , 
>                               * destLen,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char         dest 
>                               * destLen,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char          
>                               * destLen,
276c276
<                            ( char*         dest, 
---
>                            ( char*         , 
276c276
<                            ( char*         dest, 
---
>                            ( char*          
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char*         , 
>                               * destLen,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char*          
>                               * destLen,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char*         , 
>                              unsigned  destLen,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char*          
>                              unsigned  destLen,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char*         , 
>                                destLen,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char*          
>                                destLen,
276c276
<                            ( char*         dest, 
---
>                            ( char*         dest 
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char*         dest 
>                               * destLen,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char*         dest 
>                              unsigned  destLen,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char*         dest 
>                                destLen,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char*         dest 
>                              unsigned * ,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char*         dest 
>                               * ,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char*         dest 
>                              unsigned  ,
276,277c276,277
<                            ( char*         dest, 
<                              unsigned * destLen,
---
>                            ( char*         dest 
>                                ,
277c277
<                              unsigned * destLen,
---
>                               * destLen,
277c277
<                              unsigned * destLen,
---
>                                destLen,
277c277
<                              unsigned * destLen,
---
>                               * ,
277c277
<                              unsigned * destLen,
---
>                                ,
277c277
<                              unsigned * destLen,
---
>                               * destLen
277c277
<                              unsigned * destLen,
---
>                                destLen
277c277
<                              unsigned * destLen,
---
>                               * 
277c277
<                              unsigned * destLen,
---
>                                
277c277
<                              unsigned * destLen,
---
>                              unsigned  destLen,
277c277
<                              unsigned * destLen,
---
>                              unsigned  ,
277c277
<                              unsigned * destLen,
---
>                              unsigned  destLen
277c277
<                              unsigned * destLen,
---
>                              unsigned  
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  destLen,
>                              *         source, 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  ,
>                              *         source, 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  destLen
>                              *         source, 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned  
>                              *         source, 
277c277
<                              unsigned * destLen,
---
>                              unsigned * ,
277c277
<                              unsigned * destLen,
---
>                              unsigned * 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                              *         source, 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                              *         source, 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                              char         source, 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                              char         source, 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * ,
>                                       source, 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * 
>                                       source, 
277c277
<                              unsigned * destLen,
---
>                              unsigned * destLen
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              *         source, 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              char         source, 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                                       source, 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              char*         , 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              *         , 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                              char         , 
277,278c277,278
<                              unsigned * destLen,
<                              char*         source, 
---
>                              unsigned * destLen
>                                       , 
278c278
<                              char*         source, 
---
>                              *         source, 
278c278
<                              char*         source, 
---
>                                       source, 
278c278
<                              char*         source, 
---
>                              *         , 
278c278
<                              char*         source, 
---
>                                       , 
278c278
<                              char*         source, 
---
>                              *         source 
278c278
<                              char*         source, 
---
>                                       source 
278c278
<                              char*         source, 
---
>                              *          
278c278
<                              char*         source, 
---
>                                        
278c278
<                              char*         source, 
---
>                              char         source, 
278c278
<                              char*         source, 
---
>                              char         , 
278c278
<                              char*         source, 
---
>                              char         source 
278c278
<                              char*         source, 
---
>                              char          
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char         source, 
>                               sourceLen,
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char         , 
>                               sourceLen,
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char         source 
>                               sourceLen,
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char          
>                               sourceLen,
278c278
<                              char*         source, 
---
>                              char*         , 
278c278
<                              char*         source, 
---
>                              char*          
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char*         , 
>                               sourceLen,
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char*          
>                               sourceLen,
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char*         , 
>                              unsigned ,
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char*          
>                              unsigned ,
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char*         , 
>                               ,
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char*          
>                               ,
278c278
<                              char*         source, 
---
>                              char*         source 
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char*         source 
>                               sourceLen,
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char*         source 
>                              unsigned ,
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char*         source 
>                               ,
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char*         source 
>                              unsigned sourceLen
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char*         source 
>                               sourceLen
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char*         source 
>                              unsigned 
278,279c278,279
<                              char*         source, 
<                              unsigned sourceLen,
---
>                              char*         source 
>                               
279c279
<                              unsigned sourceLen,
---
>                               sourceLen,
279c279
<                              unsigned sourceLen,
---
>                               ,
279c279
<                              unsigned sourceLen,
---
>                               sourceLen
279c279
<                              unsigned sourceLen,
---
>                               
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                               sourceLen,
>                                         small,
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                               ,
>                                         small,
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                               sourceLen
>                                         small,
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                               
>                                         small,
279c279
<                              unsigned sourceLen,
---
>                              unsigned ,
279c279
<                              unsigned sourceLen,
---
>                              unsigned 
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned ,
>                                         small,
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned 
>                                         small,
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned ,
>                              int           ,
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned 
>                              int           ,
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned ,
>                                         ,
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned 
>                                         ,
279c279
<                              unsigned sourceLen,
---
>                              unsigned sourceLen
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned sourceLen
>                                         small,
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned sourceLen
>                              int           ,
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned sourceLen
>                                         ,
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned sourceLen
>                              int           small
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned sourceLen
>                                         small
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned sourceLen
>                              int           
279,280c279,280
<                              unsigned sourceLen,
<                              int           small,
---
>                              unsigned sourceLen
>                                         
280c280
<                              int           small,
---
>                                         small,
280c280
<                              int           small,
---
>                                         ,
280c280
<                              int           small,
---
>                                         small
280c280
<                              int           small,
---
>                                         
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                                         small,
>                                         verbosity )
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                                         ,
>                                         verbosity )
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                                         small
>                                         verbosity )
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                                         
>                                         verbosity )
280c280
<                              int           small,
---
>                              int           ,
280c280
<                              int           small,
---
>                              int           
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                                         verbosity )
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                                         verbosity )
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                              int            )
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                              int            )
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                              int           ,
>                                          )
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                              int           
>                                          )
280c280
<                              int           small,
---
>                              int           small
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                         verbosity )
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                              int            )
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                          )
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                              int           verbosity 
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                         verbosity 
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                              int            
280,281c280,281
<                              int           small,
<                              int           verbosity )
---
>                              int           small
>                                          
281c281
<                              int           verbosity )
---
>                                         verbosity )
281c281
<                              int           verbosity )
---
>                                          )
281c281
<                              int           verbosity )
---
>                                         verbosity 
281c281
<                              int           verbosity )
---
>                                          
281,282c281,282
<                              int           verbosity )
< {
---
>                                         verbosity )
> 
281,282c281,282
<                              int           verbosity )
< {
---
>                                          )
> 
281,282c281,282
<                              int           verbosity )
< {
---
>                                         verbosity 
> 
281,282c281,282
<                              int           verbosity )
< {
---
>                                          
> 
281c281
<                              int           verbosity )
---
>                              int            )
281c281
<                              int           verbosity )
---
>                              int            
281,282c281,282
<                              int           verbosity )
< {
---
>                              int            )
> 
281,282c281,282
<                              int           verbosity )
< {
---
>                              int            
> 
281c281
<                              int           verbosity )
---
>                              int            )
283c283
<    }
---
>    
281c281
<                              int           verbosity )
---
>                              int            
283c283
<    }
---
>    
281,283c281,283
<                              int           verbosity )
< {
<    }
---
>                              int            )
> 
>    
281,283c281,283
<                              int           verbosity )
< {
<    }
---
>                              int            
> 
>    
281c281
<                              int           verbosity )
---
>                              int           verbosity 
281,282c281,282
<                              int           verbosity )
< {
---
>                              int           verbosity 
> 
281c281
<                              int           verbosity )
---
>                              int           verbosity 
283c283
<    }
---
>    
281,283c281,283
<                              int           verbosity )
< {
<    }
---
>                              int           verbosity 
> 
>    
281c281
<                              int           verbosity )
---
>                              int           verbosity 
288c288
< BZ2_bzopen
---
> 
281,282c281,282
<                              int           verbosity )
< {
---
>                              int           verbosity 
> 
288c288
< BZ2_bzopen
---
> 
281c281
<                              int           verbosity )
---
>                              int           verbosity 
283c283,284
<    }
---
>    
> 
288d288
< BZ2_bzopen
281,283c281,284
<                              int           verbosity )
< {
<    }
---
>                              int           verbosity 
> 
>    
> 
288d288
< BZ2_bzopen
282c282
< {
---
> 
282,283c282,283
< {
<    }
---
> 
>    
282c282
< {
---
> 
288c288
< BZ2_bzopen
---
> 
282,283c282,284
< {
<    }
---
> 
>    
> 
288d288
< BZ2_bzopen
282c282
< {
---
> 
289c289
<                ( )
---
>                 )
282,283c282,283
< {
<    }
---
> 
>    
289c289
<                ( )
---
>                 )
282c282
< {
---
> 
288,289c288,289
< BZ2_bzopen
<                ( )
---
> 
>                 )
282,283d281
< {
<    }
284a283
>    
288,289c287,289
< BZ2_bzopen
<                ( )
---
> 
> 
>                 )
283c283
<    }
---
>    
283c283,284
<    }
---
>    
> 
288d288
< BZ2_bzopen
283c283
<    }
---
>    
289c289
<                ( )
---
>                 )
283c283
<    }
---
>    
288,289c288,289
< BZ2_bzopen
<                ( )
---
> 
>                 )
283c283
<    }
---
>    
289c289
<                ( )
---
>                ( 
283c283
<    }
---
>    
288,289c288,289
< BZ2_bzopen
<                ( )
---
> 
>                ( 
283c283
<    }
---
>    
289c289
<                ( )
---
>                 
283c283
<    }
---
>    
288,289c288,289
< BZ2_bzopen
<                ( )
---
> 
>                 
288c288
< BZ2_bzopen
---
> 
288,289c288,289
< BZ2_bzopen
<                ( )
---
> 
>                 )
288,289c288,289
< BZ2_bzopen
<                ( )
---
> 
>                ( 
288,289c288,289
< BZ2_bzopen
<                ( )
---
> 
>                 
288c288
< BZ2_bzopen
---
> 
290c290
< {
---
> 
288,290c288,290
< BZ2_bzopen
<                ( )
< {
---
> 
>                 )
> 
288,290c288,290
< BZ2_bzopen
<                ( )
< {
---
> 
>                ( 
> 
288,290c288,290
< BZ2_bzopen
<                ( )
< {
---
> 
>                 
> 
289c289
<                ( )
---
>                 )
289c289
<                ( )
---
>                 
289,290c289,290
<                ( )
< {
---
>                 )
> 
289,290c289,290
<                ( )
< {
---
>                 
> 
289c289
<                ( )
---
>                 )
291c291
<    }
---
>    
289c289
<                ( )
---
>                 
291c291
<    }
---
>    
289,291c289,291
<                ( )
< {
<    }
---
>                 )
> 
>    
289,291c289,291
<                ( )
< {
<    }
---
>                 
> 
>    
289c289
<                ( )
---
>                ( 
289,290c289,290
<                ( )
< {
---
>                ( 
> 
289c289
<                ( )
---
>                ( 
291c291
<    }
---
>    
289,291c289,291
<                ( )
< {
<    }
---
>                ( 
> 
>    
289c289
<                ( )
---
>                ( 
295c295
< BZ2_bzdopen
---
> 
289,290c289,290
<                ( )
< {
---
>                ( 
> 
295c295
< BZ2_bzdopen
---
> 
289c289
<                ( )
---
>                ( 
291c291,292
<    }
---
>    
> 
295d295
< BZ2_bzdopen
289,291c289,292
<                ( )
< {
<    }
---
>                ( 
> 
>    
> 
295d295
< BZ2_bzdopen
290c290
< {
---
> 
290,291c290,291
< {
<    }
---
> 
>    
290c290
< {
---
> 
295c295
< BZ2_bzdopen
---
> 
290,291c290,292
< {
<    }
---
> 
>    
> 
295d295
< BZ2_bzdopen
290c290
< {
---
> 
296c296
<                ( )
---
>                 )
290,291c290,291
< {
<    }
---
> 
>    
296c296
<                ( )
---
>                 )
290c290
< {
---
> 
295,296c295,296
< BZ2_bzdopen
<                ( )
---
> 
>                 )
290,291d289
< {
<    }
292a291
>    
295,296c294,296
< BZ2_bzdopen
<                ( )
---
> 
> 
>                 )
291c291
<    }
---
>    
291c291,292
<    }
---
>    
> 
295d295
< BZ2_bzdopen
291c291
<    }
---
>    
296c296
<                ( )
---
>                 )
291c291
<    }
---
>    
295,296c295,296
< BZ2_bzdopen
<                ( )
---
> 
>                 )
291c291
<    }
---
>    
296c296
<                ( )
---
>                ( 
291c291
<    }
---
>    
295,296c295,296
< BZ2_bzdopen
<                ( )
---
> 
>                ( 
291c291
<    }
---
>    
296c296
<                ( )
---
>                 
291c291
<    }
---
>    
295,296c295,296
< BZ2_bzdopen
<                ( )
---
> 
>                 
295c295
< BZ2_bzdopen
---
> 
295,296c295,296
< BZ2_bzdopen
<                ( )
---
> 
>                 )
295,296c295,296
< BZ2_bzdopen
<                ( )
---
> 
>                ( 
295,296c295,296
< BZ2_bzdopen
<                ( )
---
> 
>                 
295c295
< BZ2_bzdopen
---
> 
297c297
< {
---
> 
295,297c295,297
< BZ2_bzdopen
<                ( )
< {
---
> 
>                 )
> 
295,297c295,297
< BZ2_bzdopen
<                ( )
< {
---
> 
>                ( 
> 
295,297c295,297
< BZ2_bzdopen
<                ( )
< {
---
> 
>                 
> 
296c296
<                ( )
---
>                 )
296c296
<                ( )
---
>                 
296,297c296,297
<                ( )
< {
---
>                 )
> 
296,297c296,297
<                ( )
< {
---
>                 
> 
296c296
<                ( )
---
>                 )
298c298
<    int bzerr, nread;
---
>     bzerr, nread;
296c296
<                ( )
---
>                 
298c298
<    int bzerr, nread;
---
>     bzerr, nread;
296,298c296,298
<                ( )
< {
<    int bzerr, nread;
---
>                 )
> 
>     bzerr, nread;
296,298c296,298
<                ( )
< {
<    int bzerr, nread;
---
>                 
> 
>     bzerr, nread;
296c296
<                ( )
---
>                ( 
296,297c296,297
<                ( )
< {
---
>                ( 
> 
296c296
<                ( )
---
>                ( 
298c298
<    int bzerr, nread;
---
>     bzerr, nread;
296,298c296,298
<                ( )
< {
<    int bzerr, nread;
---
>                ( 
> 
>     bzerr, nread;
296c296
<                ( )
---
>                ( 
298c298
<    int bzerr, nread;
---
>    int , nread;
296,298c296,298
<                ( )
< {
<    int bzerr, nread;
---
>                ( 
> 
>    int , nread;
296c296
<                ( )
---
>                ( 
298c298
<    int bzerr, nread;
---
>     , nread;
296,298c296,298
<                ( )
< {
<    int bzerr, nread;
---
>                ( 
> 
>     , nread;
297c297
< {
---
> 
297,298c297,298
< {
<    int bzerr, nread;
---
> 
>     bzerr, nread;
297,298c297,298
< {
<    int bzerr, nread;
---
> 
>    int , nread;
297,298c297,298
< {
<    int bzerr, nread;
---
> 
>     , nread;
297,298c297,298
< {
<    int bzerr, nread;
---
> 
>    int bzerr nread;
297,298c297,298
< {
<    int bzerr, nread;
---
> 
>     bzerr nread;
297,298c297,298
< {
<    int bzerr, nread;
---
> 
>    int  nread;
297,298c297,298
< {
<    int bzerr, nread;
---
> 
>      nread;
298c298
<    int bzerr, nread;
---
>     bzerr, nread;
298c298
<    int bzerr, nread;
---
>     , nread;
298c298
<    int bzerr, nread;
---
>     bzerr nread;
298c298
<    int bzerr, nread;
---
>      nread;
298c298
<    int bzerr, nread;
---
>     bzerr, ;
298c298
<    int bzerr, nread;
---
>     , ;
298c298
<    int bzerr, nread;
---
>     bzerr ;
298c298
<    int bzerr, nread;
---
>      ;
298c298
<    int bzerr, nread;
---
>    int , nread;
298c298
<    int bzerr, nread;
---
>    int  nread;
298c298
<    int bzerr, nread;
---
>    int , ;
298c298
<    int bzerr, nread;
---
>    int  ;
298c298
<    int bzerr, nread;
---
>    int , nread
298c298
<    int bzerr, nread;
---
>    int  nread
298c298
<    int bzerr, nread;
---
>    int , 
298c298
<    int bzerr, nread;
---
>    int  
298c298
<    int bzerr, nread;
---
>    int bzerr nread;
298c298
<    int bzerr, nread;
---
>    int bzerr ;
298c298
<    int bzerr, nread;
---
>    int bzerr nread
298c298
<    int bzerr, nread;
---
>    int bzerr 
298,299c298,299
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr nread;
>     (bzerr == BZ_STREAM_END) {
298,299c298,299
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr ;
>     (bzerr == BZ_STREAM_END) {
298,299c298,299
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr nread
>     (bzerr == BZ_STREAM_END) {
298,299c298,299
<    int bzerr, nread;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>     (bzerr == BZ_STREAM_END) {
298c298
<    int bzerr, nread;
---
>    int bzerr, ;
298c298
<    int bzerr, nread;
---
>    int bzerr, 
(98.0 %, 4162 bytes)
298,299c298,299
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>     (bzerr == BZ_STREAM_END) {
298,299c298,299
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>    if bzerr == BZ_STREAM_END) {
298,299c298,299
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>     bzerr == BZ_STREAM_END) {
298,299c298,299
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>    if ( == BZ_STREAM_END) {
298,299c298,299
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>     ( == BZ_STREAM_END) {
298,299c298,299
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>    if  == BZ_STREAM_END) {
298,299c298,299
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
---
>    int bzerr 
>      == BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>     (bzerr == BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>     bzerr == BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>     ( == BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>      == BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>     (bzerr  BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>     bzerr  BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>     (  BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>       BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if  == BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr  BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if   BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr == ) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if  == ) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr  ) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if   ) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if ( == BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (  BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if ( == ) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (  ) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if ( == BZ_STREAM_END {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (  BZ_STREAM_END {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if ( ==  {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (   {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  BZ_STREAM_END) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  ) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  BZ_STREAM_END {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr   {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  BZ_STREAM_END) 
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  ) 
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr  BZ_STREAM_END 
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr   
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == ) {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr ==  {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == ) 
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr ==  
299,300c299,300
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == ) {
>       
299,300c299,300
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr ==  {
>       
299,300c299,300
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == ) 
>       
299,300c299,300
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr ==  
>       
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END {
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END 
299,300c299,300
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END {
>       
299,300c299,300
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END 
>       
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END {
301c301
< }
---
> 
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END 
301c301
< }
---
> 
299,301c299,301
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == BZ_STREAM_END {
>       
> 
299,301c299,301
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == BZ_STREAM_END 
>       
> 
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) 
299,300c299,300
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END) 
>       
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) 
301c301
< }
---
> 
299,301c299,301
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == BZ_STREAM_END) 
>       
> 
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) 
305c305
< BZ2_bzwrite (BZFILEb)
---
>  (BZFILEb)
299,300c299,300
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END) 
>       
305c305
< BZ2_bzwrite (BZFILEb)
---
>  (BZFILEb)
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if (bzerr == BZ_STREAM_END) 
301d300
< }
305c304,305
< BZ2_bzwrite (BZFILEb)
---
> 
>  (BZFILEb)
299,301c299,300
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
>    if (bzerr == BZ_STREAM_END) 
>       
305c304,305
< BZ2_bzwrite (BZFILEb)
---
> 
>  (BZFILEb)
300c300
<       }
---
>       
300,301c300,301
<       }
< }
---
>       
> 
300c300
<       }
---
>       
305c305
< BZ2_bzwrite (BZFILEb)
---
>  (BZFILEb)
300,301c300
<       }
< }
---
>       
305c304,305
< BZ2_bzwrite (BZFILEb)
---
> 
>  (BZFILEb)
300c300
<       }
---
>       
305c305
< BZ2_bzwrite (BZFILEb)
---
> BZ2_bzwrite BZFILEb)
300,301c300
<       }
< }
---
>       
305c304,305
< BZ2_bzwrite (BZFILEb)
---
> 
> BZ2_bzwrite BZFILEb)
300c300
<       }
---
>       
305c305
< BZ2_bzwrite (BZFILEb)
---
>  BZFILEb)
300,301c300
<       }
< }
---
>       
305c304,305
< BZ2_bzwrite (BZFILEb)
---
> 
>  BZFILEb)
301c301
< }
---
> 
301d300
< }
305c304,305
< BZ2_bzwrite (BZFILEb)
---
> 
>  (BZFILEb)
301d300
< }
305c304,305
< BZ2_bzwrite (BZFILEb)
---
> 
> BZ2_bzwrite BZFILEb)
301d300
< }
305c304,305
< BZ2_bzwrite (BZFILEb)
---
> 
>  BZFILEb)
301d300
< }
305c304,305
< BZ2_bzwrite (BZFILEb)
---
> 
> BZ2_bzwrite ()
301d300
< }
305c304,305
< BZ2_bzwrite (BZFILEb)
---
> 
>  ()
301d300
< }
305c304,305
< BZ2_bzwrite (BZFILEb)
---
> 
> BZ2_bzwrite )
301d300
< }
305c304,305
< BZ2_bzwrite (BZFILEb)
---
> 
>  )
305c305
< BZ2_bzwrite (BZFILEb)
---
>  (BZFILEb)
305c305
< BZ2_bzwrite (BZFILEb)
---
>  BZFILEb)
305c305
< BZ2_bzwrite (BZFILEb)
---
>  ()
305c305
< BZ2_bzwrite (BZFILEb)
---
>  )
305c305
< BZ2_bzwrite (BZFILEb)
---
>  (BZFILEb
305c305
< BZ2_bzwrite (BZFILEb)
---
>  BZFILEb
305c305
< BZ2_bzwrite (BZFILEb)
---
>  (
305c305
< BZ2_bzwrite (BZFILEb)
---
>  
305c305
< BZ2_bzwrite (BZFILEb)
---
> BZ2_bzwrite BZFILEb)
305c305
< BZ2_bzwrite (BZFILEb)
---
> BZ2_bzwrite )
305c305
< BZ2_bzwrite (BZFILEb)
---
> BZ2_bzwrite BZFILEb
305c305
< BZ2_bzwrite (BZFILEb)
---
> BZ2_bzwrite 
305,306c305,306
< BZ2_bzwrite (BZFILEb)
< {
---
> BZ2_bzwrite BZFILEb)
> 
305,306c305,306
< BZ2_bzwrite (BZFILEb)
< {
---
> BZ2_bzwrite )
> 
305,306c305,306
< BZ2_bzwrite (BZFILEb)
< {
---
> BZ2_bzwrite BZFILEb
> 
305,306c305,306
< BZ2_bzwrite (BZFILEb)
< {
---
> BZ2_bzwrite 
> 
305c305
< BZ2_bzwrite (BZFILEb)
---
> BZ2_bzwrite ()
305c305
< BZ2_bzwrite (BZFILEb)
---
> BZ2_bzwrite (
305,306c305,306
< BZ2_bzwrite (BZFILEb)
< {
---
> BZ2_bzwrite ()
> 
305,306c305,306
< BZ2_bzwrite (BZFILEb)
< {
---
> BZ2_bzwrite (
> 
305c305
< BZ2_bzwrite (BZFILEb)
---
> BZ2_bzwrite ()
307c307
<    {
---
>    
305c305
< BZ2_bzwrite (BZFILEb)
---
> BZ2_bzwrite (
307c307
<    {
---
>    
305,307c305,307
< BZ2_bzwrite (BZFILEb)
< {
<    {
---
> BZ2_bzwrite ()
> 
>    
305,307c305,307
< BZ2_bzwrite (BZFILEb)
< {
<    {
---
> BZ2_bzwrite (
> 
>    
305c305
< BZ2_bzwrite (BZFILEb)
---
> BZ2_bzwrite (BZFILEb
(98.0 %, 4155 bytes)
305c305
< BZ2_bzwrite ()
---
> BZ2_bzwrite (
305,306c305,306
< BZ2_bzwrite ()
< {
---
> BZ2_bzwrite (
> 
305c305
< BZ2_bzwrite ()
---
> BZ2_bzwrite (
307c307
<    {
---
>    
305,307c305,307
< BZ2_bzwrite ()
< {
<    {
---
> BZ2_bzwrite (
> 
>    
305c305
< BZ2_bzwrite ()
---
> BZ2_bzwrite (
308c308
<       }
---
>       
305,306c305,306
< BZ2_bzwrite ()
< {
---
> BZ2_bzwrite (
> 
308c308
<       }
---
>       
305c305
< BZ2_bzwrite ()
---
> BZ2_bzwrite (
307,308c307,308
<    {
<       }
---
>    
>       
305,308c305,308
< BZ2_bzwrite ()
< {
<    {
<       }
---
> BZ2_bzwrite (
> 
>    
>       
306c306
< {
---
> 
306,307c306,307
< {
<    {
---
> 
>    
306c306
< {
---
> 
308c308
<       }
---
>       
306,308c306,308
< {
<    {
<       }
---
> 
>    
>       
306c306
< {
---
> 
309c309
< }
---
> 
(98.0 %, 4153 bytes)
307c307
<    {
---
>    
307c307
<    {
---
>    
309c309
< }
---
> 
307c307
<    {
---
>    
307c307
<    {
---
>    
309c309
< }
---
> 
307c307
<    {
---
>    
307c307
<    {
---
>    
309c309
< }
---
> 
309c309
< }
---
> 
309c309
< }
---
> 
309c309
< }
---
> 
309c309
< }
---
> 
309c309
< }
---
> 
309c309
< }
---
> 
309c309
< }
---
> 
309c309
< }
---
> 
Termination check: size was 4863; now 4153
===< pass_include_includes :: 0 >===
===< pass_balanced :: parens-only >===
28c28
< BZ2_bzDecompressInit ( 
---
> BZ2_bzDecompressInit  
31c31
<       int       );
---
>       int       ;
313a314
>  
\ No newline at end of file
41c41
<   ( 
---
>    
47c47
<          );
---
>          ;
313a314
>  
\ No newline at end of file
49c49
< void BZ2_bzReadGetUnused ( 
---
> void BZ2_bzReadGetUnused  
53c53
<       int*    );
---
>       int*    ;
313a314
>  
\ No newline at end of file
55c55
< BZ2_bzRead ( 
---
> BZ2_bzRead  
59c59
<       int     );
---
>       int     ;
313a314
>  
\ No newline at end of file
61c61
< * BZ2_bzWriteOpen ( 
---
> * BZ2_bzWriteOpen  
66c66
<       int   );
---
>       int   ;
313a314
>  
\ No newline at end of file
68c68
< void BZ2_bzWrite ( 
---
> void BZ2_bzWrite  
72c72
<       int     );
---
>       int     ;
313a314
>  
\ No newline at end of file
74c74
< void BZ2_bzWriteClose ( 
---
> void BZ2_bzWriteClose  
79c79
<       unsigned * );
---
>       unsigned * ;
313a314
>  
\ No newline at end of file
81c81
< void BZ2_bzWriteClose64 ( 
---
> void BZ2_bzWriteClose64  
88c88
<       unsigned * );
---
>       unsigned * ;
313a314
>  
\ No newline at end of file
(98.0 %, 4152 bytes)
49c49
< void BZ2_bzReadGetUnused ( 
---
> void BZ2_bzReadGetUnused  
53c53
<       int*    );
---
>       int*    ;
55c55
< BZ2_bzRead ( 
---
> BZ2_bzRead  
59c59
<       int     );
---
>       int     ;
61c61
< * BZ2_bzWriteOpen ( 
---
> * BZ2_bzWriteOpen  
66c66
<       int   );
---
>       int   ;
68c68
< void BZ2_bzWrite ( 
---
> void BZ2_bzWrite  
72c72
<       int     );
---
>       int     ;
74c74
< void BZ2_bzWriteClose ( 
---
> void BZ2_bzWriteClose  
79c79
<       unsigned * );
---
>       unsigned * ;
81c81
< void BZ2_bzWriteClose64 ( 
---
> void BZ2_bzWriteClose64  
88c88
<       unsigned * );
---
>       unsigned * ;
93c93
< BZ2_bzBuffToBuffCompress ( 
---
> BZ2_bzBuffToBuffCompress  
100c100
<       int           );
---
>       int           ;
102c102
< BZ2_bzBuffToBuffDecompress ( 
---
> BZ2_bzBuffToBuffDecompress  
108c108
<       int           )
---
>       int           
116c116
<                     ( )
---
>                      
130c130
< BZ2_bzCompress ( )
---
> BZ2_bzCompress  
142c142
<                      ( bz_stream* strm, 
---
>                       bz_stream* strm, 
144c144
<                        int        small )
---
>                        int        small 
166c166
<                     ( int*  bzerror,      
---
>                      int*  bzerror,      
170c170
<                       int   workFactor )
---
>                       int   workFactor 
178c178
<              ( int*    bzerror, 
---
>               int*    bzerror, 
181c181
<                int     len )
---
>                int     len 
193c193
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
197c197
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_out 
205c205
<                   ( int*          bzerror, 
---
>                    int*          bzerror, 
211c211
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_hi32 
221c221
<                    (    
---
>                        
226c226
<                         nUnused )
---
>                         nUnused 
235c235
<            ( int*    bzerror, 
---
>             int*    bzerror, 
238c238
<              int     len )
---
>              int     len 
248c248
<                      ( int*    bzerror, 
---
>                       int*    bzerror, 
251c251
<                        int*    nUnused )
---
>                        int*    nUnused 
263c263
<                          ( char*         dest, 
---
>                           char*         dest, 
269c269
<                            int           workFactor )
---
>                            int           workFactor 
276c276
<                            ( char*         dest, 
---
>                             char*         dest, 
281c281
<                              int           verbosity )
---
>                              int           verbosity 
289c289
<                ( )
---
>                 
296c296
<                ( )
---
>                 
299c299
<    if (bzerr == BZ_STREAM_END) {
---
>    if bzerr == BZ_STREAM_END {
305c305
< BZ2_bzwrite ()
---
> BZ2_bzwrite 
===< pass_clang :: remove-namespace >===
===< pass_clang :: aggregate-to-scalar >===
===< pass_clang :: param-to-local >===
29c29
<       bz_stream *, 
---
>       , 
142c142
<                      ( bz_stream* strm, 
---
>                      (  
145a146
>     bz_stream * strm = 0;
30c30
<       int       , 
---
>              , 
143c143
<                        int        verbosity,
---
>                        
145a146
>     int verbosity = 0;
30,31c30
<       int       , 
<       int       );
---
>       int       t       );
143,144c142
<                        int        verbosity,
<                        int        small )
---
>                        int        verbosity )
145a144
>     int small = 0;
50c50
<       int*    , 
---
>           , 
248c248
<                      ( int*    bzerror, 
---
>                      (  
252a253
>     int * bzerror = 0;
51c51
<       BZFILE , 
---
>        , 
249c249
<                        BZFILE b, 
---
>                         
252a253
>     BZFILE b = 0;
52c52
<       void**  ,  
---
>         ,  
250c250
<                        void**  unused, 
---
>                         
252a253
>     void ** unused = 0;
52,53c52
<       void**  ,  
<       int*    );
---
>       void**  *    );
250,251c249
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused )
252a251
>     int * nUnused = 0;
56c56
<       int*    , 
---
>           , 
235c235
<            ( int*    bzerror, 
---
>            (  
239a240
>      int * bzerror = 0;
57c57
<       BZFILE , 
---
>        , 
236c236
<              BZFILE b, 
---
>               
239a240
>      BZFILE b = 0;
(98.0 %, 4119 bytes)
49c49
<       int*    , 
---
>           , 
247c247
<                      ( int*    bzerror, 
---
>                      (  
251a252
>     int * bzerror = 0;
50c50
<       BZFILE , 
---
>        , 
248c248
<                        BZFILE b, 
---
>                         
251a252
>     BZFILE b = 0;
51c51
<       void**  ,  
---
>         ,  
249c249
<                        void**  unused, 
---
>                         
251a252
>     void ** unused = 0;
51,52c51
<       void**  ,  
<       int*    );
---
>       void**  *    );
249,250c248
<                        void**  unused, 
<                        int*    nUnused )
---
>                        void**  unused )
251a250
>     int * nUnused = 0;
55c55
<       int*    , 
---
>           , 
234c234
<            ( int*    bzerror, 
---
>            (  
238a239
>      int * bzerror = 0;
56c56
<       BZFILE , 
---
>        , 
235c235
<              BZFILE b, 
---
>               
238a239
>      BZFILE b = 0;
57c57
<       void*   , 
---
>          , 
236c236
<              void*   buf, 
---
>               
238a239
>      void * buf = 0;
57,58c57
<       void*   , 
<       int     );
---
>       void*   t     );
236,237c235
<              void*   buf, 
<              int     len )
---
>              void*   buf )
238a237
>      int len = 0;
68c68
<       int*    , 
---
>           , 
177c177
<              ( int*    bzerror, 
---
>              (  
181a182
>     int * bzerror = 0;
69c69
<       BZFILE , 
---
>        , 
178c178
<                BZFILE b, 
---
>                 
181a182
>     BZFILE b = 0;
70c70
<       void*   , 
---
>          , 
179c179
<                void*   buf, 
---
>                 
181a182
>     void * buf = 0;
70,71c70
<       void*   , 
<       int     );
---
>       void*   t     );
179,180c178
<                void*   buf, 
<                int     len )
---
>                void*   buf )
181a180
>     int len = 0;
(98.0 %, 4099 bytes)
67c67
<       int*    , 
---
>           , 
176c176
<              ( int*    bzerror, 
---
>              (  
180a181
>     int * bzerror = 0;
68c68
<       BZFILE , 
---
>        , 
177c177
<                BZFILE b, 
---
>                 
180a181
>     BZFILE b = 0;
69c69
<       void*   , 
---
>          , 
178c178
<                void*   buf, 
---
>                 
180a181
>     void * buf = 0;
69,70c69
<       void*   , 
<       int     );
---
>       void*   t     );
178,179c177
<                void*   buf, 
<                int     len )
---
>                void*   buf )
180a179
>     int len = 0;
73c73
<       int*          , 
---
>                 , 
191c191
<                   ( int*          bzerror, 
---
>                   (  
196a197
>     int * bzerror = 0;
74c74
<       BZFILE       , 
---
>              , 
192c192
<                     BZFILE       b, 
---
>                      
196a197
>     BZFILE b = 0;
75c75
<       int           , 
---
>                  , 
193c193
<                     int           abandon,
---
>                     
196a197
>     int abandon = 0;
76c76
<       unsigned * , 
---
>        , 
194c194
<                     unsigned * nbytes_in,
---
>                     
196a197
>     unsigned int * nbytes_in = 0;
76,77c76
<       unsigned * , 
<       unsigned * );
---
>       unsigned * * );
194,195c193
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_in )
196a195
>     unsigned int * nbytes_out = 0;
(98.0 %, 4076 bytes)
72c72
<       int*          , 
---
>                 , 
190c190
<                   ( int*          bzerror, 
---
>                   (  
195a196
>     int * bzerror = 0;
73c73
<       BZFILE       , 
---
>              , 
191c191
<                     BZFILE       b, 
---
>                      
195a196
>     BZFILE b = 0;
74c74
<       int           , 
---
>                  , 
192c192
<                     int           abandon,
---
>                     
195a196
>     int abandon = 0;
75c75
<       unsigned * , 
---
>        , 
193c193
<                     unsigned * nbytes_in,
---
>                     
195a196
>     unsigned int * nbytes_in = 0;
75,76c75
<       unsigned * , 
<       unsigned * );
---
>       unsigned * * );
193,194c192
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                     unsigned * nbytes_in )
195a194
>     unsigned int * nbytes_out = 0;
79c79
<       int*          , 
---
>                 , 
202c202
<                   ( int*          bzerror, 
---
>                   (  
209a210
>     int * bzerror = 0;
80c80
<       BZFILE       , 
---
>              , 
203c203
<                     BZFILE       b, 
---
>                      
209a210
>     BZFILE b = 0;
81c81
<       int           , 
---
>                  , 
204c204
<                     int           abandon,
---
>                     
209a210
>     int abandon = 0;
82c82
<       unsigned * , 
---
>        , 
205c205
<                     unsigned * nbytes_in_lo32,
---
>                     
209a210
>     unsigned int * nbytes_in_lo32 = 0;
83c83
<       unsigned * , 
---
>        , 
206c206
<                     unsigned * nbytes_in_hi32,
---
>                     
209a210
>     unsigned int * nbytes_in_hi32 = 0;
84c84
<       unsigned * , 
---
>        , 
207c207
<                     unsigned * nbytes_out_lo32,
---
>                     
209a210
>     unsigned int * nbytes_out_lo32 = 0;
84,85c84
<       unsigned * , 
<       unsigned * );
---
>       unsigned * * );
207,208c206
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                     unsigned * nbytes_out_lo32 )
209a208
>     unsigned int * nbytes_out_hi32 = 0;
91c91
<       char*         , 
---
>                , 
260c260
<                          ( char*         dest, 
---
>                          (  
267a268
>     char * dest = 0;
92c92
<       unsigned * ,
---
>        ,
261c261
<                            unsigned * destLen,
---
>                            
267a268
>     unsigned int * destLen = 0;
93c93
<       char*         , 
---
>                , 
262c262
<                            char*         source, 
---
>                             
267a268
>     char * source = 0;
94c94
<       unsigned ,
---
>        ,
263c263
<                            unsigned sourceLen,
---
>                            
267a268
>     unsigned int sourceLen = 0;
95c95
<       int           , 
---
>                  , 
264c264
<                            int           blockSize100k, 
---
>                             
267a268
>     int blockSize100k = 0;
96c96
<       int           , 
---
>                  , 
265c265
<                            int           verbosity, 
---
>                             
267a268
>     int verbosity = 0;
96,97c96
<       int           , 
<       int           );
---
>       int           t           );
265,266c264
<                            int           verbosity, 
<                            int           workFactor )
---
>                            int           verbosity )
267a266
>     int workFactor = 0;
100c100
<       char*         , 
---
>                , 
273c273
<                            ( char*         dest, 
---
>                            (  
279a280
>     char * dest = 0;
101c101
<       unsigned * ,
---
>        ,
274c274
<                              unsigned * destLen,
---
>                              
279a280
>     unsigned int * destLen = 0;
102c102
<       char*         , 
---
>                , 
275c275
<                              char*         source, 
---
>                               
279a280
>     char * source = 0;
103c103
<       unsigned ,
---
>        ,
276c276
<                              unsigned sourceLen,
---
>                              
279a280
>     unsigned int sourceLen = 0;
104c104
<       int           , 
---
>                  , 
277c277
<                              int           small,
---
>                              
279a280
>     int small = 0;
(98.0 %, 4035 bytes)
99c99
<       char*         , 
---
>                , 
272c272
<                            ( char*         dest, 
---
>                            (  
278a279
>     char * dest = 0;
100c100
<       unsigned * ,
---
>        ,
273c273
<                              unsigned * destLen,
---
>                              
278a279
>     unsigned int * destLen = 0;
101c101
<       char*         , 
---
>                , 
274c274
<                              char*         source, 
---
>                               
278a279
>     char * source = 0;
102c102
<       unsigned ,
---
>        ,
275c275
<                              unsigned sourceLen,
---
>                              
278a279
>     unsigned int sourceLen = 0;
103c103
<       int           , 
---
>                  , 
276c276
<                              int           small,
---
>                              
278a279
>     int small = 0;
103,104c103
<       int           , 
<       int           )
---
>       int           t           )
276,277c275
<                              int           small,
<                              int           verbosity )
---
>                              int           small )
278a277
>     int verbosity = 0;
219,222c219
<                      int   
<                         
<                       
<                         nUnused )
---
>                      void )
(98.1 %, 3993 bytes)
218,221c218
<                      int   
<                         
<                       
<                         nUnused )
---
>                      void )
(98.1 %, 3911 bytes)
===< pass_clang :: reduce-pointer-level >===
===< pass_clang :: lift-assignment-expr >===
===< pass_clang :: template-arg-to-int >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: replace-class-with-base-template-spec >===
===< pass_clang :: simplify-nested-class >===
===< pass_clang :: replace-array-index-var >===
===< pass_comments :: 0 >===
===< pass_peep :: a >===
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
17c17
<    bz_stream;
---
>    bz_stream
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
21c21
< #include <stdio.h>
---
> #include 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
28,30c28
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
<       int       t       );
---
> BZ2_bzDecompressInit ;
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
29c29
<       bz_stream *, 
---
>       bz_stream * 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
30c30
<       int       t       );
---
>       int       t       )
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
46c46
<          ;
---
>          
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
48,52c48
< void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE , 
<       void**  ,  
<       int*    );
---
> void BZ2_bzReadGetUnused ;
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
49c49
<       int*    , 
---
>       int*     
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
50c50
<       BZFILE , 
---
>       BZFILE  
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
51c51
<       void**  ,  
---
>       void**    
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
52c52
<       int*    );
---
>       int*    )
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
54,57c54
< BZ2_bzRead ( 
<       int*    , 
<       BZFILE , 
<       void*   t     );
---
> BZ2_bzRead ;
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
55c55
<       int*    , 
---
>       int*     
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
56c56
<       BZFILE , 
---
>       BZFILE  
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
57c57
<       void*   t     );
---
>       void*   t     )
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
59,64c59
< * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int   );
---
> * BZ2_bzWriteOpen ;
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
60c60
<       int*  ,      
---
>       int*        
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
61c61
<       FILE* , 
---
>       FILE*  
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
62c62
<       int   , 
---
>       int    
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
63c63
<       int   , 
---
>       int    
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
64c64
<       int   );
---
>       int   )
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
66,69c66
< void BZ2_bzWrite ( 
<       int*    , 
<       BZFILE , 
<       void*   t     );
---
> void BZ2_bzWrite ;
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
67c67
<       int*    , 
---
>       int*     
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
68c68
<       BZFILE , 
---
>       BZFILE  
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
69c69
<       void*   t     );
---
>       void*   t     )
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
71,76c71
< void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
---
> void BZ2_bzWriteClose ;
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
72c72
<       int*          , 
---
>       int*           
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
73c73
<       BZFILE       , 
---
>       BZFILE        
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
74c74
<       int           , 
---
>       int            
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
75c75
<       unsigned * , 
---
>       unsigned *  
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
76c76
<       unsigned * );
---
>       unsigned * )
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
78,85c78
< void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
---
> void BZ2_bzWriteClose64 ;
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
79c79
<       int*          , 
---
>       int*           
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
80c80
<       BZFILE       , 
---
>       BZFILE        
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
81c81
<       int           , 
---
>       int            
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
82c82
<       unsigned * , 
---
>       unsigned *  
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
83c83
<       unsigned * , 
---
>       unsigned *  
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
84c84
<       unsigned * , 
---
>       unsigned *  
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
85c85
<       unsigned * );
---
>       unsigned * )
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
90,96c90
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           t           );
---
> BZ2_bzBuffToBuffCompress ;
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
91c91
<       char*         , 
---
>       char*          
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
92c92
<       unsigned * ,
---
>       unsigned * 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
93c93
<       char*         , 
---
>       char*          
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
94c94
<       unsigned ,
---
>       unsigned 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
95c95
<       int           , 
---
>       int            
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
96c96
<       int           t           );
---
>       int           t           )
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
98,103c98
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           t           )
---
> BZ2_bzBuffToBuffDecompress 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
99c99
<       char*         , 
---
>       char*          
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
100c100
<       unsigned * ,
---
>       unsigned * 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
101c101
<       char*         , 
---
>       char*          
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
102c102
<       unsigned ,
---
>       unsigned 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
105c105
< ;
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
106c106
< typedef Int32;
---
> typedef Int32
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
111c111
<                     ( )
---
>                     
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
112,113c112
< {
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
125c125
< BZ2_bzCompress ( )
---
> BZ2_bzCompress 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
126,128c126
< {
<    
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
137,138c137
<                      ( bz_stream* strm, 
<                        int        verbosity )
---
>                      
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
137c137
<                      ( bz_stream* strm, 
---
>                      ( bz_stream* strm 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
139,141c139
< {
<     int small = 0;
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
140c140
<     int small = 0;
---
>     int small = 0
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
149,151c149
<    struct {
<            ;
<       }
---
>    
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
166,167c166
< {
<    }
---
> 
149,151c149
<    struct {
<            ;
<       }
---
>    struct 
(98.1 %, 3882 bytes)
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
150c150
<    bzFile;
---
>    bzFile
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
159,163c159
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
---
>                     
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
159c159
<                     ( int*  bzerror,      
---
>                     ( int*  bzerror      
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
160c160
<                       FILE* f, 
---
>                       FILE* f 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
161c161
<                       int   blockSize100k, 
---
>                       int   blockSize100k 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
162c162
<                       int   verbosity,
---
>                       int   verbosity
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
164,165c164
< {
<    }
---
> 
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
171,173c171
<              ( int*    bzerror, 
<                BZFILE b, 
<                void*   buf )
---
>              
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
171c171
<              ( int*    bzerror, 
---
>              ( int*    bzerror 
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
172c172
<                BZFILE b, 
---
>                BZFILE b 
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
174,177d173
< {
<     int len = 0;
<       
<       
179,181d174
<    
<       
< }
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
175c175
<     int len = 0;
---
>     int len = 0
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
186,190c186
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
---
>                   
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
186c186
<                   ( int*          bzerror, 
---
>                   ( int*          bzerror 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
187c187
<                     BZFILE       b, 
---
>                     BZFILE       b 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
188c188
<                     int           abandon,
---
>                     int           abandon
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
189c189
<                     unsigned * nbytes_in,
---
>                     unsigned * nbytes_in
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
191,194c191
< {
<        
<                             
< }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
198,204c198
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
---
>                   
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
198c198
<                   ( int*          bzerror, 
---
>                   ( int*          bzerror 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
199c199
<                     BZFILE       b, 
---
>                     BZFILE       b 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
200c200
<                     int           abandon,
---
>                     int           abandon
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
201c201
<                     unsigned * nbytes_in_lo32,
---
>                     unsigned * nbytes_in_lo32
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
202c202
<                     unsigned * nbytes_in_hi32,
---
>                     unsigned * nbytes_in_hi32
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
203c203
<                     unsigned * nbytes_out_lo32,
---
>                     unsigned * nbytes_out_lo32
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
205,209c205
< {
<    
<      
<     
<    }
---
> 
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
214,216c214
<                    (    
<                        
<                      void )
---
>                    
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
228,231d227
< {
<      int len = 0;
<    
<      ;
233d228
<    }
(98.1 %, 3825 bytes)
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
216c216
<    ;   
---
>       
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
223,225c223
<            ( int*    bzerror, 
<              BZFILE b, 
<              void*   buf )
---
>            
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
223c223
<            ( int*    bzerror, 
---
>            ( int*    bzerror 
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
224c224
<              BZFILE b, 
---
>              BZFILE b 
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
226,229d225
< {
<      int len = 0;
<    
<      ;
231d226
<    }
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
227c227
<      int len = 0;
---
>      int len = 0
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
(98.1 %, 3824 bytes)
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
229c229
<      ;
---
>      
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
236,239c236
<                      ( int*    bzerror, 
<                        BZFILE b, 
<                        void**  unused, 
<                        int*    nUnused )
---
>                      
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
236c236
<                      ( int*    bzerror, 
---
>                      ( int*    bzerror 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
237c237
<                        BZFILE b, 
---
>                        BZFILE b 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
238c238
<                        void**  unused, 
---
>                        void**  unused 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
240,242c240
< {
<     ;
< }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
241c241
<     ;
---
>     
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
(98.1 %, 3823 bytes)
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
251,256c251
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity )
---
>                          
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
251c251
<                          ( char*         dest, 
---
>                          ( char*         dest 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
252c252
<                            unsigned * destLen,
---
>                            unsigned * destLen
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
253c253
<                            char*         source, 
---
>                            char*         source 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
254c254
<                            unsigned sourceLen,
---
>                            unsigned sourceLen
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
255c255
<                            int           blockSize100k, 
---
>                            int           blockSize100k 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
257,259c257
< {
<     int workFactor = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
258c258
<     int workFactor = 0;
---
>     int workFactor = 0
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
264,268c264
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned sourceLen,
<                              int           small )
---
>                            
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
264c264
<                            ( char*         dest, 
---
>                            ( char*         dest 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
265c265
<                              unsigned * destLen,
---
>                              unsigned * destLen
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
266c266
<                              char*         source, 
---
>                              char*         source 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
267c267
<                              unsigned sourceLen,
---
>                              unsigned sourceLen
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
269,271c269
< {
<     int verbosity = 0;
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
270c270
<     int verbosity = 0;
---
>     int verbosity = 0
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
277c277
<                ( )
---
>                
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
278,279c278
< {
<    }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
284c284
<                ( )
---
>                
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
285,289c285
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
< }
---
> 
286c286
<    int bzerr ;
---
>    int bzerr 
287c287
<    if (bzerr == BZ_STREAM_END) {
---
>     {
287c287
<    if (bzerr == BZ_STREAM_END) {
---
>    if  {
287,288c287
<    if (bzerr == BZ_STREAM_END) {
<       }
---
>    if (bzerr == BZ_STREAM_END) 
293c293
< BZ2_bzwrite ()
---
> BZ2_bzwrite 
295,297c295
<    {
<       
< }
---
>    
===< pass_indent :: regular >===
1d0
<  
3a3
> #define BZ_STREAM_END 9
4a5
> typedef
6,19c7
< 
< 
< 
< 
< 
<                  
< #define BZ_STREAM_END        9
< 
< typedef 
<     
<        
<    bz_stream;
< 
< 
---
>     bz_stream;
23,36c11
< 
< 
< 
< 
< 
< BZ2_bzDecompressInit ( 
<       bz_stream *, 
<       int       t       );
< 
< 
< 
< 
< 
<   
---
> BZ2_bzDecompressInit(bz_stream *, int t);
40,133c15
<    
<            
<         
<           
<          
<            
<          ;
< 
< void BZ2_bzReadGetUnused ( 
<       int*    , 
<       BZFILE , 
<       void**  ,  
<       int*    );
< 
< BZ2_bzRead ( 
<       int*    , 
<       BZFILE , 
<       void*   t     );
< 
< * BZ2_bzWriteOpen ( 
<       int*  ,      
<       FILE* , 
<       int   , 
<       int   , 
<       int   );
< 
< void BZ2_bzWrite ( 
<       int*    , 
<       BZFILE , 
<       void*   t     );
< 
< void BZ2_bzWriteClose ( 
<       int*          , 
<       BZFILE       , 
<       int           , 
<       unsigned * , 
<       unsigned * );
< 
< void BZ2_bzWriteClose64 ( 
<       int*          , 
<       BZFILE       , 
<       int           , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * , 
<       unsigned * );
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           , 
<       int           t           );
< 
< BZ2_bzBuffToBuffDecompress ( 
<       char*         , 
<       unsigned * ,
<       char*         , 
<       unsigned ,
<       int           t           )
< 
< ;
< typedef Int32;
<  
<       
<       
<    BZ2_bzCompressInit 
<                     ( )
< {
<    }
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzCompress ( )
< {
<    
<    }
< 
< 
< 
< 
< 
---
>     ;
134a17
> void BZ2_bzReadGetUnused(int *, BZFILE, void **, int *);
136,141c19
< BZ2_bzDecompressInit 
<                      ( bz_stream* strm, 
<                        int        verbosity )
< {
<     int small = 0;
<    }
---
> BZ2_bzRead(int *, BZFILE, void *t);
142a21
> *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
143a23
> void BZ2_bzWrite(int *, BZFILE, void *t);
144a25
> void BZ2_bzWriteClose(int *, BZFILE, int, unsigned *, unsigned *);
145a27,28
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
>                         unsigned *);
146a30
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
148,151c32
< typedef 
<    
<    bzFile;
< 
---
> BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
152a34,35
>     ;
> typedef Int32;
153a37
> BZ2_bzCompressInit() {}
154a39
> BZ2_bzCompress() {}
155a41
> BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
156a43
> typedef
158,165c45
< * BZ2_bzWriteOpen 
<                     ( int*  bzerror,      
<                       FILE* f, 
<                       int   blockSize100k, 
<                       int   verbosity,
<                       int   workFactor )
< {
<    }
---
>     bzFile;
166a47,48
> *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
>                  int workFactor) {}
167a50
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
168a52,53
> void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
>                       unsigned *nbytes_out) {}
170,177c55,57
< void BZ2_bzWrite
<              ( int*    bzerror, 
<                BZFILE b, 
<                void*   buf )
< {
<     int len = 0;
<       
<       
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
179,181c59
<    
<       
< }
---
> BZ2_bzReadOpen
182a61
>     ;
183a63,64
> BZ2_bzRead(int *bzerror, BZFILE b, void *buf) {
>   int len = 0
185,193c66
< void BZ2_bzWriteClose
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in,
<                     unsigned * nbytes_out )
< {
<        
<                             
---
>       ;
195a69
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused, int *nUnused) {}
197,241c71,73
< void BZ2_bzWriteClose64
<                   ( int*          bzerror, 
<                     BZFILE       b, 
<                     int           abandon,
<                     unsigned * nbytes_in_lo32,
<                     unsigned * nbytes_in_hi32,
<                     unsigned * nbytes_out_lo32,
<                     unsigned * nbytes_out_hi32 )
< {
<    
<      
<     
<    }
< 
< 
< 
<  BZ2_bzReadOpen 
<                    
< 
<    ;   
< 
< 
< 
< 
< 
< BZ2_bzRead 
<            ( int*    bzerror, 
<              BZFILE b, 
<              void*   buf )
< {
<      int len = 0
<    
<      ;
< 
<    }
< 
< 
< 
< void BZ2_bzReadGetUnused 
<                      ( int*    bzerror, 
<                        BZFILE b, 
<                        void**  unused, 
<                        int*    nUnused )
< {
<     
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
>                          unsigned sourceLen, int blockSize100k, int verbosity) {
>   int workFactor = 0;
244,288c76,78
< 
< 
< 
< 
< 
< 
< BZ2_bzBuffToBuffCompress 
<                          ( char*         dest, 
<                            unsigned * destLen,
<                            char*         source, 
<                            unsigned sourceLen,
<                            int           blockSize100k, 
<                            int           verbosity )
< {
<     int workFactor = 0;
<    }
< 
< 
< 
< BZ2_bzBuffToBuffDecompress 
<                            ( char*         dest, 
<                              unsigned * destLen,
<                              char*         source, 
<                              unsigned sourceLen,
<                              int           small )
< {
<     int verbosity = 0;
<    }
< 
< 
< 
< 
< BZ2_bzopen
<                ( )
< {
<    }
< 
< 
< 
< BZ2_bzdopen
<                ( )
< {
<    int bzerr ;
<    if (bzerr == BZ_STREAM_END) {
<       }
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
>                            unsigned sourceLen, int small) {
>   int verbosity = 0;
290a81
> BZ2_bzopen() {}
292,296c83,86
< 
< BZ2_bzwrite ()
< 
<    {
<       
---
> BZ2_bzdopen() {
>   int bzerr;
>   if (bzerr == BZ_STREAM_END) {
>   }
298a89
> BZ2_bzwrite()
300,302c91
< 
< 
<  
\ No newline at end of file
---
> {}
(99.0 %, 1966 bytes)
Termination check: size was 4153; now 1966
===< pass_ternary :: b >===
===< pass_clang :: remove-namespace >===
===< pass_clang :: simple-inliner >===
===< pass_clang :: move-function-body >===
25a26,27
> void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
>                       unsigned *nbytes_out) {}
52,53c54
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out) {}
---
> 
23a24
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
50c51
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> 
(99.0 %, 1967 bytes)
19a20,24
> BZ2_bzRead(int *bzerror, BZFILE b, void *buf) {
>   int len = 0
> 
>       ;
> }
64,65d68
< BZ2_bzRead(int *bzerror, BZFILE b, void *buf) {
<   int len = 0
67,68d69
<       ;
< }
30a31,33
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
56,58c59
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> 
(99.0 %, 1968 bytes)
17a18
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused, int *nUnused) {}
71c72
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused, int *nUnused) {}
---
> 
28a29
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
57c58
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> 
(99.0 %, 1969 bytes)
11a12
> BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
49c50
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> 
38a39,42
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
>                          unsigned sourceLen, int blockSize100k, int verbosity) {
>   int workFactor = 0;
> }
74,77c78
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
---
> 
(99.0 %, 1970 bytes)
37a38,40
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
63,65c66
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> 
43a44,47
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
>                            unsigned sourceLen, int small) {
>   int verbosity = 0;
> }
80,83c84
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int small) {
<   int verbosity = 0;
< }
---
> 
(99.0 %, 1971 bytes)
46a47,50
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
>                            unsigned sourceLen, int small) {
>   int verbosity = 0;
> }
81,84c85
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int small) {
<   int verbosity = 0;
< }
---
> 
42a43,46
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
>                          unsigned sourceLen, int blockSize100k, int verbosity) {
>   int workFactor = 0;
> }
76,79c80
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
---
> 
42a43,46
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
>                          unsigned sourceLen, int blockSize100k, int verbosity) {
>   int workFactor = 0;
> }
76,79c80
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
---
> 
(99.0 %, 1972 bytes)
42a43,46
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
>                          unsigned sourceLen, int blockSize100k, int verbosity) {
>   int workFactor = 0;
> }
80,83c84
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
---
> 
30a31
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
66c67
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> 
(99.0 %, 1973 bytes)
30a31
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
70c71
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> 
(99.0 %, 1974 bytes)
===< pass_clang :: replace-one-level-typedef-type >===
===< pass_clang :: instantiate-template-param >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: remove-array >===
===< pass_clang :: replace-array-index-var >===
===< pass_comments :: 0 >===
===< pass_special :: b >===
===< pass_ints :: c >===
===< pass_clex :: rm-toks-16 >===
3,11c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
< 
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> bz_stream *, int t);
3,11c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
< 
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> #*, int t);
3,11c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
< 
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> #define , int t);
3,11c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
< 
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> #define BZ_STREAM_END int t);
5,11c5
< typedef
< 
<     bz_stream;
< 
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> t);
7,11c7
<     bz_stream;
< 
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
>     );
8,11d7
< 
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
9,11d8
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
9,12c9
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> #(bz_stream *strm, int verbosity) { int small = 0; }
9,12c9
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> #include bz_stream *strm, int verbosity) { int small = 0; }
9,12c9
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> #include <*strm, int verbosity) { int small = 0; }
9,12c9
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> #include <stdiostrm, int verbosity) { int small = 0; }
9,12c9
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> #include <stdio., int verbosity) { int small = 0; }
9,12c9
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> #include <stdio.hint verbosity) { int small = 0; }
11,12c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> verbosity) { int small = 0; }
11,12c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> BZ2_bzDecompressInit) { int small = 0; }
11,12c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> BZ2_bzDecompressInit({ int small = 0; }
11,12c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> BZ2_bzDecompressInit(bz_stream int small = 0; }
11,12c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> BZ2_bzDecompressInit(bz_stream *small = 0; }
11,12c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> BZ2_bzDecompressInit(bz_stream *, = 0; }
11,12c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> BZ2_bzDecompressInit(bz_stream *, int 0; }
11,12c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> BZ2_bzDecompressInit(bz_stream *, int t; }
11,12c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
---
> BZ2_bzDecompressInit(bz_stream *, int t)}
12,13d11
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
< 
12,14c12
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
< 
< typedef BZFILE
---
> BZ2_bzDecompressInitBZFILE
12,16c12
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
< 
< typedef BZFILE
< 
<     ;
---
> BZ2_bzDecompressInit(;
12,18c12
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
< 
< typedef BZFILE
< 
<     ;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE, void **, int *);
---
> BZ2_bzDecompressInit(bz_stream void BZ2_bzReadGetUnused(int *, BZFILE, void **, int *);
12,18c12
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
< 
< typedef BZFILE
< 
<     ;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE, void **, int *);
---
> BZ2_bzDecompressInit(bz_stream *BZ2_bzReadGetUnused(int *, BZFILE, void **, int *);
12,18c12
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
< 
< typedef BZFILE
< 
<     ;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE, void **, int *);
---
> BZ2_bzDecompressInit(bz_stream *strm(int *, BZFILE, void **, int *);
12,18c12
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
< 
< typedef BZFILE
< 
<     ;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE, void **, int *);
---
> BZ2_bzDecompressInit(bz_stream *strm, int *, BZFILE, void **, int *);
12,18c12
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
< 
< typedef BZFILE
< 
<     ;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE, void **, int *);
---
> BZ2_bzDecompressInit(bz_stream *strm, int *, BZFILE, void **, int *);
12,18c12
< BZ2_bzDecompressInit(bz_stream *strm, int verbosity) { int small = 0; }
< 
< typedef BZFILE
< 
<     ;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE, void **, int *);
---
> BZ2_bzDecompressInit(bz_stream *strm, int verbosity, BZFILE, void **, int *);
(99.1 %, 1901 bytes)
12,16c12
< typedef BZFILE
< 
<     ;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE, void **, int *);
---
> *);
12,16c12
< typedef BZFILE
< 
<     ;
< 
< void BZ2_bzReadGetUnused(int *, BZFILE, void **, int *);
---
> typedef );
15,16d14
< 
< void BZ2_bzReadGetUnused(int *, BZFILE, void **, int *);
16d15
< void BZ2_bzReadGetUnused(int *, BZFILE, void **, int *);
(99.1 %, 1843 bytes)
14,15c14
<     ;
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused, int *nUnused) {}
---
>     int *nUnused) {}
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused, int *nUnused) {}
---
> *nUnused) {}
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused, int *nUnused) {}
---
> void nUnused) {}
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused, int *nUnused) {}
---
> void BZ2_bzReadGetUnused) {}
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused, int *nUnused) {}
---
> void BZ2_bzReadGetUnused({}
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused, int *nUnused) {}
---
> void BZ2_bzReadGetUnused(int }
15,17c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused, int *nUnused) {}
< 
< BZ2_bzRead(int *, BZFILE, void *t);
---
> void BZ2_bzReadGetUnused(int *BZ2_bzRead(int *, BZFILE, void *t);
15,17c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused, int *nUnused) {}
< 
< BZ2_bzRead(int *, BZFILE, void *t);
---
> void BZ2_bzReadGetUnused(int *bzerror(int *, BZFILE, void *t);
15,17c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused, int *nUnused) {}
< 
< BZ2_bzRead(int *, BZFILE, void *t);
---
> void BZ2_bzReadGetUnused(int *bzerror, int *, BZFILE, void *t);
15,17c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **unused, int *nUnused) {}
< 
< BZ2_bzRead(int *, BZFILE, void *t);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE *, BZFILE, void *t);
(99.1 %, 1789 bytes)
15,16c15
< void BZ2_bzReadGetUnused(int *bzerror, int *, BZFILE, void *t);
< BZ2_bzRead(int *bzerror, BZFILE b, void *buf) {
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *buf) {
15,16c15
< void BZ2_bzReadGetUnused(int *bzerror, int *, BZFILE, void *t);
< BZ2_bzRead(int *bzerror, BZFILE b, void *buf) {
---
> void BZ2_bzReadGetUnused(int *bzerror, int b, void *buf) {
(99.2 %, 1739 bytes)
15,21c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *buf) {
<   int len = 0
< 
<       ;
< }
< 
< *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> void BZ2_bzReadGetUnused(int *bzerror, (int *, FILE *, int, int, int);
15,21c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *buf) {
<   int len = 0
< 
<       ;
< }
< 
< *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE int *, FILE *, int, int, int);
15,21c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *buf) {
<   int len = 0
< 
<       ;
< }
< 
< *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b*, FILE *, int, int, int);
15,21c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *buf) {
<   int len = 0
< 
<       ;
< }
< 
< *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, , FILE *, int, int, int);
15,21c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *buf) {
<   int len = 0
< 
<       ;
< }
< 
< *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void FILE *, int, int, int);
15,21c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *buf) {
<   int len = 0
< 
<       ;
< }
< 
< *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int, int);
15,21c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *buf) {
<   int len = 0
< 
<       ;
< }
< 
< *BZ2_bzWriteOpen(int *, FILE *, int, int, int);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *buf, int, int, int);
(99.2 %, 1677 bytes)
15,17c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int, int);
< 
< void BZ2_bzWrite(int *, BZFILE, void *t);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
15,17c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int, int);
< 
< void BZ2_bzWrite(int *, BZFILE, void *t);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **void *t);
15,17c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int, int);
< 
< void BZ2_bzWrite(int *, BZFILE, void *t);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, *t);
15,17c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int, int);
< 
< void BZ2_bzWrite(int *, BZFILE, void *t);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, intt);
15,17c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int, int);
< 
< void BZ2_bzWrite(int *, BZFILE, void *t);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, );
15,17c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int, int);
< 
< void BZ2_bzWrite(int *, BZFILE, void *t);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int;
15,18c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int, int);
< 
< void BZ2_bzWrite(int *, BZFILE, void *t);
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int, void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
15,18c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int, int);
< 
< void BZ2_bzWrite(int *, BZFILE, void *t);
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int, intBZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
15,18c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int, int);
< 
< void BZ2_bzWrite(int *, BZFILE, void *t);
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void **, int, int, int)(int *bzerror, BZFILE b, void *buf) { int len = 0; }
(99.2 %, 1627 bytes)
15,16c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *void *buf) { int len = 0; }
15,16c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, *buf) { int len = 0; }
15,16c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void buf) { int len = 0; }
15,16c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *) { int len = 0; }
15,16c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t{ int len = 0; }
15,16c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t)int len = 0; }
16c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> len = 0; }
16c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> void = 0; }
16c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> void BZ2_bzWrite0; }
16c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> void BZ2_bzWrite(; }
16c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
---
> void BZ2_bzWrite(int }
16,18c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
< 
< void BZ2_bzWriteClose(int *, BZFILE, int, unsigned *, unsigned *);
---
> void BZ2_bzWrite(int *void BZ2_bzWriteClose(int *, BZFILE, int, unsigned *, unsigned *);
16,18c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
< 
< void BZ2_bzWriteClose(int *, BZFILE, int, unsigned *, unsigned *);
---
> void BZ2_bzWrite(int *bzerrorBZ2_bzWriteClose(int *, BZFILE, int, unsigned *, unsigned *);
16,18c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
< 
< void BZ2_bzWriteClose(int *, BZFILE, int, unsigned *, unsigned *);
---
> void BZ2_bzWrite(int *bzerror, (int *, BZFILE, int, unsigned *, unsigned *);
16,18c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
< 
< void BZ2_bzWriteClose(int *, BZFILE, int, unsigned *, unsigned *);
---
> void BZ2_bzWrite(int *bzerror, BZFILE int *, BZFILE, int, unsigned *, unsigned *);
16,18c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
< 
< void BZ2_bzWriteClose(int *, BZFILE, int, unsigned *, unsigned *);
---
> void BZ2_bzWrite(int *bzerror, BZFILE b*, BZFILE, int, unsigned *, unsigned *);
16,18c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
< 
< void BZ2_bzWriteClose(int *, BZFILE, int, unsigned *, unsigned *);
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, , BZFILE, int, unsigned *, unsigned *);
16,18c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
< 
< void BZ2_bzWriteClose(int *, BZFILE, int, unsigned *, unsigned *);
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void BZFILE, int, unsigned *, unsigned *);
16,18c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
< 
< void BZ2_bzWriteClose(int *, BZFILE, int, unsigned *, unsigned *);
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
16,18c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *buf) { int len = 0; }
< 
< void BZ2_bzWriteClose(int *, BZFILE, int, unsigned *, unsigned *);
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *bufint, unsigned *, unsigned *);
(99.2 %, 1569 bytes)
16,17c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *, BZFILE b, int abandon, unsigned *nbytes_in,
16,17c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *, BZFILE b, int abandon, unsigned *nbytes_in,
16,17c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *, intb, int abandon, unsigned *nbytes_in,
16,17c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, , int abandon, unsigned *nbytes_in,
16,17c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned int abandon, unsigned *nbytes_in,
16,17c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *abandon, unsigned *nbytes_in,
16,17c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, , unsigned *nbytes_in,
16,17c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned unsigned *nbytes_in,
16,17c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned **nbytes_in,
16,17c16
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
---
> void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *)nbytes_in,
17c17
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
---
> ,
17,18c17
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out) {}
---
> void unsigned *nbytes_out) {}
17,18c17
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out) {}
---
> void BZ2_bzWriteClose*nbytes_out) {}
17,18c17
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out) {}
---
> void BZ2_bzWriteClose(nbytes_out) {}
17,18c17
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out) {}
---
> void BZ2_bzWriteClose(int ) {}
17,18c17
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out) {}
---
> void BZ2_bzWriteClose(int *{}
17,18c17
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out) {}
---
> void BZ2_bzWriteClose(int *bzerror}
17,20c17
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(int *bzerror, void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
17,20c17
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
17,20c17
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE b(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
17,20c17
< void BZ2_bzWriteClose(int *bzerror, BZFILE b, int abandon, unsigned *nbytes_in,
<                       unsigned *nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(int *bzerror, BZFILE b, int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
(99.3 %, 1479 bytes)
17,19c17
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(, unsigned *, unsigned *,
17,19c17
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_outunsigned *, unsigned *,
17,19c17
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_out) *, unsigned *,
17,19c17
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_out) {, unsigned *,
19c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> unsigned *,
19c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void *,
19c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64,
19,20c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(unsigned *);
19,20c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *);
19,20c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *);
19,20c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, ;
19,21c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILEvoid BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
19,21c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
19,21c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int(int *bzerror, BZFILE b, int abandon,
19,21c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, int *bzerror, BZFILE b, int abandon,
19,21c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *bzerror, BZFILE b, int abandon,
19,21c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *bzerror, BZFILE b, int abandon,
19,21c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, , BZFILE b, int abandon,
19,21c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned BZFILE b, int abandon,
19,21c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *b, int abandon,
19,21c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, , int abandon,
19,21c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned int abandon,
19,21c19
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *abandon,
20,21c20
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         ,
20,22c20
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
20,22c20
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned **nbytes_in_lo32, unsigned *nbytes_in_hi32,
20,22c20
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned *)nbytes_in_lo32, unsigned *nbytes_in_hi32,
21,22c21
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> , unsigned *nbytes_in_hi32,
21,22c21
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void unsigned *nbytes_in_hi32,
21,22c21
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64*nbytes_in_hi32,
21,22c21
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(nbytes_in_hi32,
21,22c21
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int ,
21,23c21
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
21,23c21
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror*nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
21,23c21
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror, nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
21,23c21
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE , unsigned *nbytes_out_hi32) {}
21,23c21
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE bunsigned *nbytes_out_hi32) {}
21,23c21
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, *nbytes_out_hi32) {}
21,23c21
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int nbytes_out_hi32) {}
21,23c21
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon) {}
22,23c22
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         {}
22,23c22
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned }
22,25c22
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
22,25c22
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_in_lo32(char *, unsigned *, char *, unsigned, int, int t);
22,25c22
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_in_lo32, char *, unsigned *, char *, unsigned, int, int t);
22,25c22
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_in_lo32, unsigned *, unsigned *, char *, unsigned, int, int t);
22,25c22
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_in_lo32, unsigned *, unsigned *, char *, unsigned, int, int t);
22,25c22
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32unsigned *, char *, unsigned, int, int t);
23,25c23
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         *, char *, unsigned, int, int t);
23,25c23
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned , char *, unsigned, int, int t);
23,25c23
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *char *, unsigned, int, int t);
23,25c23
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32*, unsigned, int, int t);
23,25c23
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, , unsigned, int, int t);
23,25c23
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned unsigned, int, int t);
23,25c23
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *, int, int t);
23,25c23
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int, int t);
23,25c23
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) , int t);
23,25c23
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {int t);
25c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> t);
25c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress);
25c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(;
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *(char *dest, unsigned *destLen, char *source,
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, char *dest, unsigned *destLen, char *source,
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *dest, unsigned *destLen, char *source,
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *dest, unsigned *destLen, char *source,
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, , unsigned *destLen, char *source,
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char unsigned *destLen, char *source,
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char **destLen, char *source,
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, destLen, char *source,
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, char *source,
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, char *source,
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int*source,
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, source,
25,26c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int ,
25,27c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int tunsigned sourceLen, int blockSize100k, int verbosity) {
25,27c25
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t)sourceLen, int blockSize100k, int verbosity) {
26,27c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> , int blockSize100k, int verbosity) {
26,27c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompressint blockSize100k, int verbosity) {
26,27c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(blockSize100k, int verbosity) {
26,27c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char , int verbosity) {
26,27c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *int verbosity) {
26,27c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *destverbosity) {
26,27c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, ) {
26,27c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned {
26,28c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *int workFactor = 0;
26,28c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLenworkFactor = 0;
26,28c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, = 0;
26,28c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char 0;
26,28c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *;
26,29c26
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source}
27,31c27
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>                          BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
27,31c27
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>                          unsigned (char *, unsigned *, char *, unsigned, int t)
27,31c27
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>                          unsigned sourceLenchar *, unsigned *, char *, unsigned, int t)
27,31c27
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>                          unsigned sourceLen, *, unsigned *, char *, unsigned, int t)
27,31c27
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>                          unsigned sourceLen, int , unsigned *, char *, unsigned, int t)
27,31c27
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>                          unsigned sourceLen, int blockSize100kunsigned *, char *, unsigned, int t)
27,31c27
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>                          unsigned sourceLen, int blockSize100k, *, char *, unsigned, int t)
27,31c27
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>                          unsigned sourceLen, int blockSize100k, int , char *, unsigned, int t)
27,31c27
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>                          unsigned sourceLen, int blockSize100k, int verbositychar *, unsigned, int t)
27,31c27
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>                          unsigned sourceLen, int blockSize100k, int verbosity) *, unsigned, int t)
28,31c28
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>   , unsigned, int t)
28,31c28
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>   int unsigned, int t)
28,31c28
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>   int workFactor , int t)
28,31c28
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>   int workFactor = int t)
28,31c28
<   int workFactor = 0;
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
>   int workFactor = 0t)
29,31c29
< }
< 
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
---
> )
31,33c31
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
< 
<     ;
---
> ;
31,34c31
< BZ2_bzBuffToBuffDecompress(char *, unsigned *, char *, unsigned, int t)
< 
<     ;
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffDecompressBZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
(99.3 %, 1402 bytes)
31,33c31
< ;
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int small) {
---
> sourceLen, int small) {
32,33c32
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int small) {
---
> , int small) {
32,33c32
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int small) {
---
> BZ2_bzBuffToBuffDecompressint small) {
32,33c32
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int small) {
---
> BZ2_bzBuffToBuffDecompress(small) {
32,33c32
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int small) {
---
> BZ2_bzBuffToBuffDecompress(char ) {
32,33c32
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int small) {
---
> BZ2_bzBuffToBuffDecompress(char *{
32,34c32
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int small) {
<   int verbosity = 0;
---
> BZ2_bzBuffToBuffDecompress(char *destint verbosity = 0;
32,34c32
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int small) {
<   int verbosity = 0;
---
> BZ2_bzBuffToBuffDecompress(char *dest, verbosity = 0;
32,34c32
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int small) {
<   int verbosity = 0;
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned = 0;
32,34c32
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int small) {
<   int verbosity = 0;
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *0;
32,34c32
< BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen, char *source,
<                            unsigned sourceLen, int small) {
<   int verbosity = 0;
---
> BZ2_bzBuffToBuffDecompress(char *dest, unsigned *destLen;
(99.4 %, 1306 bytes)
32,37c32
< BZ2_bzBuffToBuffDecompress(small) {
<   int verbosity = 0;
< }
< typedef Int32;
< 
< BZ2_bzCompressInit() {}
---
> BZ2_bzBuffToBuffDecompress(}
32,39c32
< BZ2_bzBuffToBuffDecompress(small) {
<   int verbosity = 0;
< }
< typedef Int32;
< 
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
---
> BZ2_bzBuffToBuffDecompress(smallBZ2_bzCompress() {}
32,39c32
< BZ2_bzBuffToBuffDecompress(small) {
<   int verbosity = 0;
< }
< typedef Int32;
< 
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
---
> BZ2_bzBuffToBuffDecompress(small) () {}
33,39c33
<   int verbosity = 0;
< }
< typedef Int32;
< 
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
---
>   ) {}
33,39c33
<   int verbosity = 0;
< }
< typedef Int32;
< 
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
---
>   int {}
33,39c33
<   int verbosity = 0;
< }
< typedef Int32;
< 
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
---
>   int verbosity }
33,43c33
<   int verbosity = 0;
< }
< typedef Int32;
< 
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
< 
< 
< 
< typedef
---
>   int verbosity = typedef
33,45c33
<   int verbosity = 0;
< }
< typedef Int32;
< 
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
< 
< 
< 
< typedef
< 
<     bzFile;
---
>   int verbosity = 0bzFile;
34,45c34
< }
< typedef Int32;
< 
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
< 
< 
< 
< typedef
< 
<     bzFile;
---
> ;
35,46d34
< typedef Int32;
< 
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
< 
< 
< 
< typedef
< 
<     bzFile;
< 
35,47c35
< typedef Int32;
< 
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
< 
< 
< 
< typedef
< 
<     bzFile;
< 
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
---
> typedef BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
35,47c35
< typedef Int32;
< 
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
< 
< 
< 
< typedef
< 
<     bzFile;
< 
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
---
> typedef Int32(int *bzerror, FILE *f, int blockSize100k, int verbosity,
37,47c37
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
< 
< 
< 
< typedef
< 
<     bzFile;
< 
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
---
> int *bzerror, FILE *f, int blockSize100k, int verbosity,
37,47c37
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
< 
< 
< 
< typedef
< 
<     bzFile;
< 
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
---
> BZ2_bzCompressInit*bzerror, FILE *f, int blockSize100k, int verbosity,
37,47c37
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
< 
< 
< 
< typedef
< 
<     bzFile;
< 
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
---
> BZ2_bzCompressInit(bzerror, FILE *f, int blockSize100k, int verbosity,
37,47c37
< BZ2_bzCompressInit() {}
< 
< BZ2_bzCompress() {}
< 
< 
< 
< typedef
< 
<     bzFile;
< 
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
---
> BZ2_bzCompressInit() , FILE *f, int blockSize100k, int verbosity,
(99.4 %, 1220 bytes)
35c35
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
---
> ,
35,36c35
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
<                  int workFactor) {}
---
> *int workFactor) {}
35,36c35
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
<                  int workFactor) {}
---
> *BZ2_bzWriteOpenworkFactor) {}
35,36c35
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
<                  int workFactor) {}
---
> *BZ2_bzWriteOpen() {}
35,36c35
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
<                  int workFactor) {}
---
> *BZ2_bzWriteOpen(int {}
35,36c35
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
<                  int workFactor) {}
---
> *BZ2_bzWriteOpen(int *}
35,44c35
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
<                  int workFactor) {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
---
> *BZ2_bzWriteOpen(int *bzerrorBZ2_bzReadOpen
35,46c35
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
<                  int workFactor) {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
< 
<     ;
---
> *BZ2_bzWriteOpen(int *bzerror, ;
35,56c35
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
<                  int workFactor) {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
---
> *BZ2_bzWriteOpen(int *bzerror, FILE BZ2_bzopen() {}
35,56c35
< *BZ2_bzWriteOpen(int *bzerror, FILE *f, int blockSize100k, int verbosity,
<                  int workFactor) {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
---
> *BZ2_bzWriteOpen(int *bzerror, FILE *() {}
(99.4 %, 1132 bytes)
35,58c35
< *BZ2_bzWriteOpen() {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
<   int bzerr;
---
> *BZ2_bzWriteOpen(;
35,59c35
< *BZ2_bzWriteOpen() {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> *BZ2_bzWriteOpen() if (bzerr == BZ_STREAM_END) {
35,59c35
< *BZ2_bzWriteOpen() {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> *BZ2_bzWriteOpen() {(bzerr == BZ_STREAM_END) {
43,59c43
< BZ2_bzReadOpen
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> bzerr == BZ_STREAM_END) {
45,59c45
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
>     == BZ_STREAM_END) {
55,59c55
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ_STREAM_END) {
55,59c55
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzopen) {
55,59c55
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzopen({
55,60c55
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
---
> BZ2_bzopen() }
57,62d56
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
57,62d56
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
57,63c57
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
< BZ2_bzwrite()
---
> BZ2_bzdopen()
57,63c57
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
< BZ2_bzwrite()
---
> BZ2_bzdopen()
57,65c57
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
< BZ2_bzwrite()
< 
< {}
---
> BZ2_bzdopen() {}
58,59d57
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
61,65d58
< }
< 
< BZ2_bzwrite()
< 
< {}
58,65c58
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
< BZ2_bzwrite()
< 
< {}
---
>   int 
\ No newline at end of file
58,65c58
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
< BZ2_bzwrite()
< 
< {}
---
>   int bzerr
\ No newline at end of file
59,65c59
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
< BZ2_bzwrite()
< 
< {}
---
>   
\ No newline at end of file
59,65c59
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
< BZ2_bzwrite()
< 
< {}
---
>   if 
\ No newline at end of file
59,65c59
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
< BZ2_bzwrite()
< 
< {}
---
>   if (
\ No newline at end of file
59,65c59
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
< BZ2_bzwrite()
< 
< {}
---
>   if (bzerr 
\ No newline at end of file
59,65c59
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
< BZ2_bzwrite()
< 
< {}
---
>   if (bzerr == 
\ No newline at end of file
59,65c59
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
< BZ2_bzwrite()
< 
< {}
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
59,65c59
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
< BZ2_bzwrite()
< 
< {}
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
60,65c60
<   }
< }
< 
< BZ2_bzwrite()
< 
< {}
---
>   
\ No newline at end of file
61,65d60
< }
< 
< BZ2_bzwrite()
< 
< {}
63,65d62
< BZ2_bzwrite()
< 
< {}
63,65c63
< BZ2_bzwrite()
< 
< {}
---
> BZ2_bzwrite
\ No newline at end of file
63,65c63
< BZ2_bzwrite()
< 
< {}
---
> BZ2_bzwrite(
\ No newline at end of file
65d64
< {}
65c65
< {}
---
> {
\ No newline at end of file
(99.5 %, 1114 bytes)
===< pass_clex :: rm-toks-8 >===
3,9c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
< 
< #include <stdio.h>
---
> include <stdio.h>
3,9c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
< 
< #include <stdio.h>
---
> #<stdio.h>
3,9c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
< 
< #include <stdio.h>
---
> #define stdio.h>
3,9c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END .h>
5,9c5
< typedef
< 
<     bz_stream;
< 
< #include <stdio.h>
---
> h>
7,9c7
<     bz_stream;
< 
< #include <stdio.h>
---
>     >
7,11c7
<     bz_stream;
< 
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
>     bz_streamBZ2_bzDecompressInit(bz_stream *, int t);
9,11c9
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> (bz_stream *, int t);
9,11c9
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> #bz_stream *, int t);
9,11c9
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> #include *, int t);
9,11c9
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> #include <, int t);
9,11c9
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> #include <stdioint t);
9,11c9
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> #include <stdio.t);
9,11c9
< #include <stdio.h>
< 
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> #include <stdio.h);
11c11
< BZ2_bzDecompressInit(bz_stream *, int t);
---
> ;
11,12c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< typedef BZFILE
---
> BZ2_bzDecompressInittypedef BZFILE
11,12c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< typedef BZFILE
---
> BZ2_bzDecompressInit(BZFILE
11,14c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< typedef BZFILE
< 
<     ;
---
> BZ2_bzDecompressInit(bz_stream ;
11,15c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< typedef BZFILE
< 
<     ;
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> BZ2_bzDecompressInit(bz_stream *void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
11,15c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< typedef BZFILE
< 
<     ;
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> BZ2_bzDecompressInit(bz_stream *, BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
11,15c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< typedef BZFILE
< 
<     ;
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> BZ2_bzDecompressInit(bz_stream *, int (int *bzerror, BZFILE b, void *, void *t);
11,15c11
< BZ2_bzDecompressInit(bz_stream *, int t);
< typedef BZFILE
< 
<     ;
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> BZ2_bzDecompressInit(bz_stream *, int tint *bzerror, BZFILE b, void *, void *t);
(99.5 %, 1074 bytes)
11,15c11
< ;
< typedef BZFILE
< 
<     ;
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> *bzerror, BZFILE b, void *, void *t);
12,15c12
< typedef BZFILE
< 
<     ;
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> bzerror, BZFILE b, void *, void *t);
12,15c12
< typedef BZFILE
< 
<     ;
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> typedef , BZFILE b, void *, void *t);
14,15c14
<     ;
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
>     BZFILE b, void *, void *t);
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> b, void *, void *t);
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> void , void *, void *t);
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> void BZ2_bzReadGetUnusedvoid *, void *t);
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> void BZ2_bzReadGetUnused(*, void *t);
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> void BZ2_bzReadGetUnused(int , void *t);
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> void BZ2_bzReadGetUnused(int *void *t);
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> void BZ2_bzReadGetUnused(int *bzerror*t);
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> void BZ2_bzReadGetUnused(int *bzerror, t);
15c15
< void BZ2_bzReadGetUnused(int *bzerror, BZFILE b, void *, void *t);
---
> void BZ2_bzReadGetUnused(int *bzerror, BZFILE );
(99.5 %, 1048 bytes)
15,16c15
< void BZ2_bzReadGetUnused(int , void *t);
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
---
> void BZ2_bzReadGetUnused(int (int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
15,16c15
< void BZ2_bzReadGetUnused(int , void *t);
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
---
> void BZ2_bzReadGetUnused(int , int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
15,16c15
< void BZ2_bzReadGetUnused(int , void *t);
< void BZ2_bzWrite(int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
---
> void BZ2_bzReadGetUnused(int , void *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
(99.5 %, 1021 bytes)
15c15
< void BZ2_bzReadGetUnused(int , int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
---
> void BZ2_bzReadGetUnused(int , *, int, unsigned *, unsigned *);
15c15
< void BZ2_bzReadGetUnused(int , int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
---
> void BZ2_bzReadGetUnused(int , int , int, unsigned *, unsigned *);
15c15
< void BZ2_bzReadGetUnused(int , int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
---
> void BZ2_bzReadGetUnused(int , int *int, unsigned *, unsigned *);
15c15
< void BZ2_bzReadGetUnused(int , int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
---
> void BZ2_bzReadGetUnused(int , int *bzerror, unsigned *, unsigned *);
15c15
< void BZ2_bzReadGetUnused(int , int *bzerror, BZFILE b, void *, int, unsigned *, unsigned *);
---
> void BZ2_bzReadGetUnused(int , int *bzerror, unsigned *, unsigned *);
(99.5 %, 995 bytes)
15c15
< void BZ2_bzReadGetUnused(int , int , int, unsigned *, unsigned *);
---
> void BZ2_bzReadGetUnused(int , int );
15c15
< void BZ2_bzReadGetUnused(int , int , int, unsigned *, unsigned *);
---
> void BZ2_bzReadGetUnused(int , int , ;
15,16c15
< void BZ2_bzReadGetUnused(int , int , int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzReadGetUnused(int , int , intvoid BZ2_bzWriteClose(nbytes_out) {}
15,16c15
< void BZ2_bzReadGetUnused(int , int , int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzReadGetUnused(int , int , int, BZ2_bzWriteClose(nbytes_out) {}
15,16c15
< void BZ2_bzReadGetUnused(int , int , int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzReadGetUnused(int , int , int, unsigned (nbytes_out) {}
15,16c15
< void BZ2_bzReadGetUnused(int , int , int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzReadGetUnused(int , int , int, unsigned *nbytes_out) {}
15,16c15
< void BZ2_bzReadGetUnused(int , int , int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzReadGetUnused(int , int , int, unsigned *, ) {}
15,16c15
< void BZ2_bzReadGetUnused(int , int , int, unsigned *, unsigned *);
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzReadGetUnused(int , int , int, unsigned *, unsigned {}
(99.5 %, 966 bytes)
15,16c15
< void BZ2_bzReadGetUnused(int , int );
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzReadGetUnused(int , int }
15,18c15
< void BZ2_bzReadGetUnused(int , int );
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzReadGetUnused(int , int )void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
16,18c16
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
16,18c16
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void (int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
16,18c16
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteCloseint *, BZFILE, int, unsigned *, unsigned *, unsigned *,
16,18c16
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(*, BZFILE, int, unsigned *, unsigned *, unsigned *,
16,18c16
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_out, BZFILE, int, unsigned *, unsigned *, unsigned *,
16,18c16
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_out) BZFILE, int, unsigned *, unsigned *, unsigned *,
16,18c16
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_out) {, int, unsigned *, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> int, unsigned *, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void , unsigned *, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64unsigned *, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(*, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int , unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int*,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, ,
18,19c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned unsigned *);
18,19c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned **);
18,19c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, );
18,19c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned ;
18,20c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
18,20c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
18,20c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned (int *bzerror, BZFILE b, int abandon,
18,20c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *int *bzerror, BZFILE b, int abandon,
19,20c19
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         *bzerror, BZFILE b, int abandon,
19,20c19
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         unsigned bzerror, BZFILE b, int abandon,
19,20c19
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         unsigned *, BZFILE b, int abandon,
19,20c19
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         unsigned *)BZFILE b, int abandon,
20c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> b, int abandon,
20c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void , int abandon,
20c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64int abandon,
20c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(abandon,
20c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int ,
20,21c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
20,21c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror*nbytes_in_lo32, unsigned *nbytes_in_hi32,
20,21c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, nbytes_in_lo32, unsigned *nbytes_in_hi32,
20,21c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE , unsigned *nbytes_in_hi32,
20,21c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE bunsigned *nbytes_in_hi32,
20,21c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, *nbytes_in_hi32,
20,21c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int nbytes_in_hi32,
21d20
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
21d20
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
21d20
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
21d20
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
21,22c21
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_out_hi32) {}
21,22c21
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_out_hi32) {}
21,22c21
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_out_hi32) {}
21,22c21
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_out_hi32) {}
21,22c21
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32) {}
22c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         {}
22c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned }
22,24c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
22,24c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32(char *, unsigned *, char *, unsigned, int, int t);
22,24c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, char *, unsigned *, char *, unsigned, int, int t);
22,24c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *, unsigned *, char *, unsigned, int, int t);
22,24c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *, unsigned *, char *, unsigned, int, int t);
22,24c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32unsigned *, char *, unsigned, int, int t);
22,24c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) *, char *, unsigned, int, int t);
22,24c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {, char *, unsigned, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> char *, unsigned, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress*, unsigned, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(, unsigned, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char unsigned, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned , int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char );
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *;
24,25c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
24,25c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned(char *dest, unsigned *destLen, char *source,
24,25c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, char *dest, unsigned *destLen, char *source,
24,25c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int*dest, unsigned *destLen, char *source,
24,25c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, dest, unsigned *destLen, char *source,
24,25c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int , unsigned *destLen, char *source,
24,25c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int tunsigned *destLen, char *source,
24,25c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t)*destLen, char *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> destLen, char *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress, char *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest,
25,26c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned sourceLen, int blockSize100k, int verbosity) {
25,26c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned sourceLen, int blockSize100k, int verbosity) {
25,26c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *, int blockSize100k, int verbosity) {
25,26c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLenint blockSize100k, int verbosity) {
25,26c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, blockSize100k, int verbosity) {
25,26c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char , int verbosity) {
25,26c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *int verbosity) {
25,26c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *sourceverbosity) {
26c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          ) {
26c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned {
26,27c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
>                          unsigned sourceLenint workFactor = 0;
26,27c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
>                          unsigned sourceLen, workFactor = 0;
26,27c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
>                          unsigned sourceLen, int = 0;
26,27c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
>                          unsigned sourceLen, int blockSize100k0;
26,27c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
>                          unsigned sourceLen, int blockSize100k, ;
26,28c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
---
>                          unsigned sourceLen, int blockSize100k, int }
26,30c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
< 
< ;
---
>                          unsigned sourceLen, int blockSize100k, int verbosity;
26,31c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
< }
< 
< ;
< BZ2_bzBuffToBuffDecompress(small) {
---
>                          unsigned sourceLen, int blockSize100k, int verbosity) BZ2_bzBuffToBuffDecompress(small) {
27,31c27
<   int workFactor = 0;
< }
< 
< ;
< BZ2_bzBuffToBuffDecompress(small) {
---
>   (small) {
27,31c27
<   int workFactor = 0;
< }
< 
< ;
< BZ2_bzBuffToBuffDecompress(small) {
---
>   int small) {
27,31c27
<   int workFactor = 0;
< }
< 
< ;
< BZ2_bzBuffToBuffDecompress(small) {
---
>   int workFactor ) {
27,31c27
<   int workFactor = 0;
< }
< 
< ;
< BZ2_bzBuffToBuffDecompress(small) {
---
>   int workFactor = {
27,32c27
<   int workFactor = 0;
< }
< 
< ;
< BZ2_bzBuffToBuffDecompress(small) {
<   int verbosity = 0;
---
>   int workFactor = 0int verbosity = 0;
28,32c28
< }
< 
< ;
< BZ2_bzBuffToBuffDecompress(small) {
<   int verbosity = 0;
---
> verbosity = 0;
30,32c30
< ;
< BZ2_bzBuffToBuffDecompress(small) {
<   int verbosity = 0;
---
> = 0;
31,32c31
< BZ2_bzBuffToBuffDecompress(small) {
<   int verbosity = 0;
---
> 0;
31,32c31
< BZ2_bzBuffToBuffDecompress(small) {
<   int verbosity = 0;
---
> BZ2_bzBuffToBuffDecompress;
31,33c31
< BZ2_bzBuffToBuffDecompress(small) {
<   int verbosity = 0;
< }
---
> BZ2_bzBuffToBuffDecompress(}
31,34c31
< BZ2_bzBuffToBuffDecompress(small) {
<   int verbosity = 0;
< }
< *BZ2_bzWriteOpen() {}
---
> BZ2_bzBuffToBuffDecompress(small*BZ2_bzWriteOpen() {}
31,34c31
< BZ2_bzBuffToBuffDecompress(small) {
<   int verbosity = 0;
< }
< *BZ2_bzWriteOpen() {}
---
> BZ2_bzBuffToBuffDecompress(small) BZ2_bzWriteOpen() {}
32,34c32
<   int verbosity = 0;
< }
< *BZ2_bzWriteOpen() {}
---
>   () {}
32,34c32
<   int verbosity = 0;
< }
< *BZ2_bzWriteOpen() {}
---
>   int ) {}
32,34c32
<   int verbosity = 0;
< }
< *BZ2_bzWriteOpen() {}
---
>   int verbosity {}
(99.6 %, 919 bytes)
28,30c28
< verbosity = 0;
< }
< *BZ2_bzWriteOpen() {}
---
> ) {}
28,30c28
< verbosity = 0;
< }
< *BZ2_bzWriteOpen() {}
---
> verbosity {}
28,30c28
< verbosity = 0;
< }
< *BZ2_bzWriteOpen() {}
---
> verbosity = }
28,38c28
< verbosity = 0;
< }
< *BZ2_bzWriteOpen() {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
---
> verbosity = 0BZ2_bzReadOpen
29,40c29
< }
< *BZ2_bzWriteOpen() {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
< 
<     ;
---
> ;
30,49d29
< *BZ2_bzWriteOpen() {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
30,50c30
< *BZ2_bzWriteOpen() {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
---
> *() {}
30,50c30
< *BZ2_bzWriteOpen() {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
---
> *BZ2_bzWriteOpen) {}
30,50c30
< *BZ2_bzWriteOpen() {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
---
> *BZ2_bzWriteOpen({}
30,50c30
< *BZ2_bzWriteOpen() {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
---
> *BZ2_bzWriteOpen() }
30,52c30
< *BZ2_bzWriteOpen() {}
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzReadOpen
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
---
> *BZ2_bzWriteOpen() {BZ2_bzdopen() {
38,52c38
< BZ2_bzReadOpen
< 
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
---
> () {
40,52c40
<     ;
< 
< 
< 
< 
< 
< 
< 
< 
< 
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
---
>     ) {
(99.6 %, 859 bytes)
30,32c30
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
---
> {
30,33c30
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
<   int bzerr;
---
> BZ2_bzopenint bzerr;
30,33c30
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
<   int bzerr;
---
> BZ2_bzopen(bzerr;
30,33c30
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
<   int bzerr;
---
> BZ2_bzopen() ;
30,34c30
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzopen() {if (bzerr == BZ_STREAM_END) {
32,34c32
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> (bzerr == BZ_STREAM_END) {
32,34c32
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzdopenbzerr == BZ_STREAM_END) {
32,34c32
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzdopen(== BZ_STREAM_END) {
32,34c32
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzdopen() BZ_STREAM_END) {
33,34c33
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
>   ) {
33,34c33
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
>   int {
33,35c33
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   int bzerr}
34d33
<   if (bzerr == BZ_STREAM_END) {
36d34
< }
34,37c34
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if 
\ No newline at end of file
34,37c34
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (
\ No newline at end of file
34,37c34
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr 
\ No newline at end of file
34,37c34
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == 
\ No newline at end of file
34,37c34
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
34,37c34
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
35,37c35
<   }
< }
< 
---
>   
\ No newline at end of file
36,37d35
< }
< 
===< pass_clex :: rm-toks-5 >===
3,7c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
---
> bz_stream;
3,7c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
---
> #;
3,9c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
< 
< #include <stdio.h>
---
> #define #include <stdio.h>
3,9c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END include <stdio.h>
5,9c5
< typedef
< 
<     bz_stream;
< 
< #include <stdio.h>
---
> <stdio.h>
7,9c7
<     bz_stream;
< 
< #include <stdio.h>
---
>     stdio.h>
7,9c7
<     bz_stream;
< 
< #include <stdio.h>
---
>     bz_stream.h>
9c9
< #include <stdio.h>
---
> h>
9c9
< #include <stdio.h>
---
> #>
9,11c9
< #include <stdio.h>
< 
< ;
---
> #include ;
9,12c9
< #include <stdio.h>
< 
< ;
< typedef BZFILE
---
> #include <typedef BZFILE
9,12c9
< #include <stdio.h>
< 
< ;
< typedef BZFILE
---
> #include <stdioBZFILE
9,14c9
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
---
> #include <stdio.;
9,15c9
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< void BZ2_bzReadGetUnused(int , int );
---
> #include <stdio.hvoid BZ2_bzReadGetUnused(int , int );
11,15c11
< ;
< typedef BZFILE
< 
<     ;
< void BZ2_bzReadGetUnused(int , int );
---
> BZ2_bzReadGetUnused(int , int );
12,15c12
< typedef BZFILE
< 
<     ;
< void BZ2_bzReadGetUnused(int , int );
---
> (int , int );
12,15c12
< typedef BZFILE
< 
<     ;
< void BZ2_bzReadGetUnused(int , int );
---
> typedef int , int );
14,15c14
<     ;
< void BZ2_bzReadGetUnused(int , int );
---
>     , int );
15c15
< void BZ2_bzReadGetUnused(int , int );
---
> int );
15c15
< void BZ2_bzReadGetUnused(int , int );
---
> void );
15c15
< void BZ2_bzReadGetUnused(int , int );
---
> void BZ2_bzReadGetUnused;
15,16c15
< void BZ2_bzReadGetUnused(int , int );
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzReadGetUnused(void BZ2_bzWriteClose(nbytes_out) {}
15,16c15
< void BZ2_bzReadGetUnused(int , int );
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzReadGetUnused(int BZ2_bzWriteClose(nbytes_out) {}
15,16c15
< void BZ2_bzReadGetUnused(int , int );
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzReadGetUnused(int , (nbytes_out) {}
15,16c15
< void BZ2_bzReadGetUnused(int , int );
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzReadGetUnused(int , int nbytes_out) {}
15,16c15
< void BZ2_bzReadGetUnused(int , int );
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzReadGetUnused(int , int )) {}
16c16
< void BZ2_bzWriteClose(nbytes_out) {}
---
> {}
16c16
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void }
16,18c16
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClosevoid BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
16,18c16
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
16,18c16
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_out(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
16,18c16
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_out) int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
16,18c16
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_out) {*, BZFILE, int, unsigned *, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> , BZFILE, int, unsigned *, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZFILE, int, unsigned *, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64, int, unsigned *, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int, unsigned *, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int , unsigned *, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *unsigned *, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, *, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, unsigned *, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int*, unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, , unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned unsigned *,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned **,
18c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, ,
18,19c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned unsigned *);
18,19c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned **);
18,19c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, );
18,19c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned ;
18,20c18
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
19,20c19
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
19,20c19
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         unsigned (int *bzerror, BZFILE b, int abandon,
19,20c19
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         unsigned *int *bzerror, BZFILE b, int abandon,
19,20c19
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         unsigned *)*bzerror, BZFILE b, int abandon,
20c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> bzerror, BZFILE b, int abandon,
20c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void , BZFILE b, int abandon,
20c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64BZFILE b, int abandon,
20c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(b, int abandon,
20c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int , int abandon,
20c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *int abandon,
20c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerrorabandon,
20c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, ,
20,21c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
20,21c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b*nbytes_in_lo32, unsigned *nbytes_in_hi32,
20,21c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, nbytes_in_lo32, unsigned *nbytes_in_hi32,
20,21c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int , unsigned *nbytes_in_hi32,
20,21c20
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandonunsigned *nbytes_in_hi32,
21c21
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         *nbytes_in_hi32,
21c21
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned nbytes_in_hi32,
21c21
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned *,
21,22c21
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
21,22c21
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
21,22c21
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, unsigned nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
21,22c21
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, unsigned *, unsigned *nbytes_out_hi32) {}
21,22c21
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32unsigned *nbytes_out_hi32) {}
22c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         *nbytes_out_hi32) {}
22c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned nbytes_out_hi32) {}
22c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *) {}
22c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32{}
22c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32, }
22,24c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
22,24c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *(char *, unsigned *, char *, unsigned, int, int t);
22,24c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32char *, unsigned *, char *, unsigned, int, int t);
22,24c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) *, unsigned *, char *, unsigned, int, int t);
22,24c22
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {, unsigned *, char *, unsigned, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> unsigned *, char *, unsigned, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress*, char *, unsigned, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(, char *, unsigned, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char char *, unsigned, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char **, unsigned, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, , unsigned, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned unsigned, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, int, int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char , int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *int t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, t);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned);
24c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, ;
24,25c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, intBZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
24,25c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, (char *dest, unsigned *destLen, char *source,
24,25c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int char *dest, unsigned *destLen, char *source,
24,25c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t*dest, unsigned *destLen, char *source,
24,25c24
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t)dest, unsigned *destLen, char *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> , unsigned *destLen, char *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompressunsigned *destLen, char *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(*destLen, char *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char destLen, char *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, char *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *destchar *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, *source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned source,
25c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *,
25,26c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLenunsigned sourceLen, int blockSize100k, int verbosity) {
25,26c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, sourceLen, int blockSize100k, int verbosity) {
25,26c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char , int blockSize100k, int verbosity) {
25,26c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *int blockSize100k, int verbosity) {
25,26c25
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *sourceblockSize100k, int verbosity) {
26c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          , int verbosity) {
26c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned int verbosity) {
26c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLenverbosity) {
26c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, ) {
26c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, int {
26,27c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
>                          unsigned sourceLen, int blockSize100kint workFactor = 0;
26,27c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
>                          unsigned sourceLen, int blockSize100k, workFactor = 0;
26,27c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
>                          unsigned sourceLen, int blockSize100k, int = 0;
26,27c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
>                          unsigned sourceLen, int blockSize100k, int verbosity0;
26,27c26
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   int workFactor = 0;
---
>                          unsigned sourceLen, int blockSize100k, int verbosity) ;
27,28c27
<   int workFactor = 0;
< verbosity = 0;
---
>   verbosity = 0;
27,28c27
<   int workFactor = 0;
< verbosity = 0;
---
>   int = 0;
27,28c27
<   int workFactor = 0;
< verbosity = 0;
---
>   int workFactor 0;
27,28c27
<   int workFactor = 0;
< verbosity = 0;
---
>   int workFactor = ;
27,29c27
<   int workFactor = 0;
< verbosity = 0;
< }
---
>   int workFactor = 0}
28,29d27
< verbosity = 0;
< }
28,30c28
< verbosity = 0;
< }
< BZ2_bzopen() {}
---
> verbosity () {}
28,30c28
< verbosity = 0;
< }
< BZ2_bzopen() {}
---
> verbosity = ) {}
(99.6 %, 839 bytes)
27,29c27
<   verbosity = 0;
< }
< BZ2_bzopen() {}
---
>   BZ2_bzopen() {}
27,29c27
<   verbosity = 0;
< }
< BZ2_bzopen() {}
---
>   verbosity () {}
27,29c27
<   verbosity = 0;
< }
< BZ2_bzopen() {}
---
>   verbosity = ) {}
27,29c27
<   verbosity = 0;
< }
< BZ2_bzopen() {}
---
>   verbosity = 0{}
29d28
< BZ2_bzopen() {}
29,30d28
< BZ2_bzopen() {}
< 
29,31c29
< BZ2_bzopen() {}
< 
< BZ2_bzdopen() {
---
> BZ2_bzopen() {
(99.6 %, 823 bytes)
28,31c28
< }
< 
< BZ2_bzdopen() {
<   int bzerr;
---
> int bzerr;
30,31c30
< BZ2_bzdopen() {
<   int bzerr;
---
> bzerr;
30,31c30
< BZ2_bzdopen() {
<   int bzerr;
---
> BZ2_bzdopen;
30,32c30
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzdopen(if (bzerr == BZ_STREAM_END) {
30,32c30
< BZ2_bzdopen() {
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzdopen() (bzerr == BZ_STREAM_END) {
31,32c31
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
>   bzerr == BZ_STREAM_END) {
31,32c31
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
>   int == BZ_STREAM_END) {
31,32c31
<   int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
>   int bzerrBZ_STREAM_END) {
32c32
<   if (bzerr == BZ_STREAM_END) {
---
>   ) {
(99.6 %, 802 bytes)
28,29c28
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> bzerr == BZ_STREAM_END) {
28,29c28
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int == BZ_STREAM_END) {
28,29c28
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int bzerrBZ_STREAM_END) {
29c29
<   if (bzerr == BZ_STREAM_END) {
---
>   ) {
29c29
<   if (bzerr == BZ_STREAM_END) {
---
>   if {
29,30c29
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   if (}
29,31c29
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
>   if (bzerr }
29,32c29
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == 
\ No newline at end of file
29,32c29
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
29,32c29
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
30,32c30
<   }
< }
< 
---
>   
\ No newline at end of file
31,32d30
< }
< 
===< pass_clex :: rm-toks-3 >===
3c3
< #define BZ_STREAM_END 9
---
> 9
3,5c3
< #define BZ_STREAM_END 9
< 
< typedef
---
> #typedef
3,7c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
---
> #define bz_stream;
3,7c3
< #define BZ_STREAM_END 9
< 
< typedef
< 
<     bz_stream;
---
> #define BZ_STREAM_END ;
5,8d4
< typedef
< 
<     bz_stream;
< 
7,9c7
<     bz_stream;
< 
< #include <stdio.h>
---
>     include <stdio.h>
7,9c7
<     bz_stream;
< 
< #include <stdio.h>
---
>     bz_stream<stdio.h>
9c9
< #include <stdio.h>
---
> stdio.h>
9c9
< #include <stdio.h>
---
> #.h>
9c9
< #include <stdio.h>
---
> #include h>
9c9
< #include <stdio.h>
---
> #include <>
9,11c9
< #include <stdio.h>
< 
< ;
---
> #include <stdio;
9,12c9
< #include <stdio.h>
< 
< ;
< typedef BZFILE
---
> #include <stdio.typedef BZFILE
(99.6 %, 777 bytes)
5c5
< #include <stdio.h>
---
> stdio.h>
5c5
< #include <stdio.h>
---
> #.h>
5c5
< #include <stdio.h>
---
> #include h>
5c5
< #include <stdio.h>
---
> #include <>
5,7c5
< #include <stdio.h>
< 
< ;
---
> #include <stdio;
5,8c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
---
> #include <stdio.typedef BZFILE
5,8c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
---
> #include <stdio.hBZFILE
8,10d7
< typedef BZFILE
< 
<     ;
8,10d7
< typedef BZFILE
< 
<     ;
8,11c8
< typedef BZFILE
< 
<     ;
< void BZ2_bzReadGetUnused(int , int );
---
> typedef BZ2_bzReadGetUnused(int , int );
10,11c10
<     ;
< void BZ2_bzReadGetUnused(int , int );
---
>     (int , int );
11c11
< void BZ2_bzReadGetUnused(int , int );
---
> int , int );
11c11
< void BZ2_bzReadGetUnused(int , int );
---
> void , int );
11c11
< void BZ2_bzReadGetUnused(int , int );
---
> void BZ2_bzReadGetUnusedint );
11c11
< void BZ2_bzReadGetUnused(int , int );
---
> void BZ2_bzReadGetUnused();
(99.6 %, 751 bytes)
10c10
<     (int , int );
---
>     int );
10c10
<     (int , int );
---
>     ();
10c10
<     (int , int );
---
>     (int ;
10,11c10
<     (int , int );
< void BZ2_bzWriteClose(nbytes_out) {}
---
>     (int , void BZ2_bzWriteClose(nbytes_out) {}
10,11c10
<     (int , int );
< void BZ2_bzWriteClose(nbytes_out) {}
---
>     (int , int BZ2_bzWriteClose(nbytes_out) {}
10,11c10
<     (int , int );
< void BZ2_bzWriteClose(nbytes_out) {}
---
>     (int , int )(nbytes_out) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> nbytes_out) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void ) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzWriteClose{}
(99.6 %, 741 bytes)
10,11c10
<     ();
< void BZ2_bzWriteClose(nbytes_out) {}
---
>     (BZ2_bzWriteClose(nbytes_out) {}
10,11c10
<     ();
< void BZ2_bzWriteClose(nbytes_out) {}
---
>     ()(nbytes_out) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> nbytes_out) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void ) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzWriteClose{}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzWriteClose(}
11,13c11
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_outvoid BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
11,13c11
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_out) BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
11,13c11
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_out) {(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void *, BZFILE, int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64, BZFILE, int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(BZFILE, int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int , int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, , unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILEunsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *,
13,14c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *);
13,14c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *);
13,14c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *);
14c14
<                         unsigned *);
---
>                         ;
14,15c14
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         unsigned void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
14,15c14
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         unsigned *BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
14,15c14
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         unsigned *)(int *bzerror, BZFILE b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> int *bzerror, BZFILE b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void *bzerror, BZFILE b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64bzerror, BZFILE b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(, BZFILE b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int BZFILE b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b,
15,16c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
15,16c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int *nbytes_in_lo32, unsigned *nbytes_in_hi32,
15,16c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandonnbytes_in_lo32, unsigned *nbytes_in_hi32,
16c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         , unsigned *nbytes_in_hi32,
16c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned unsigned *nbytes_in_hi32,
16c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned **nbytes_in_hi32,
16c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned *nbytes_in_lo32nbytes_in_hi32,
16c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned *nbytes_in_lo32, ,
16,17c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, unsigned unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
16,17c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, unsigned **nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
16,17c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         , unsigned *nbytes_out_hi32) {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned unsigned *nbytes_out_hi32) {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned **nbytes_out_hi32) {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32nbytes_out_hi32) {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32, ) {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32, unsigned {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32, unsigned *}
17,19c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
17,19c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) (char *, unsigned *, char *, unsigned, int, int t);
17,19c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {char *, unsigned *, char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> *, unsigned *, char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress, unsigned *, char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(unsigned *, char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char , int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, , int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsignedint t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, ;
19,20c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
19,20c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t(char *dest, unsigned *destLen, char *source,
19,20c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t)char *dest, unsigned *destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> *dest, unsigned *destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompressdest, unsigned *destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(, unsigned *destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char unsigned *destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char **destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *destdestLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, , char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned **source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLensource,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, ,
20,21c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char unsigned sourceLen, int blockSize100k, int verbosity) {
20,21c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *sourceLen, int blockSize100k, int verbosity) {
20,21c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source, int blockSize100k, int verbosity) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          int blockSize100k, int verbosity) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned blockSize100k, int verbosity) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, int verbosity) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, int verbosity) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, int verbosity) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, int blockSize100k) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, int blockSize100k, {
21,22c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   verbosity = 0;
---
>                          unsigned sourceLen, int blockSize100k, int verbosity = 0;
21,22c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   verbosity = 0;
---
>                          unsigned sourceLen, int blockSize100k, int verbosity= 0;
21,22c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   verbosity = 0;
---
>                          unsigned sourceLen, int blockSize100k, int verbosity) 0;
22c22
<   verbosity = 0;
---
>   ;
22,23c22
<   verbosity = 0;
< int bzerr;
---
>   verbosity int bzerr;
22,23c22
<   verbosity = 0;
< int bzerr;
---
>   verbosity = bzerr;
23d22
< int bzerr;
23,24c23
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> if (bzerr == BZ_STREAM_END) {
23,24c23
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int (bzerr == BZ_STREAM_END) {
23,24c23
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int bzerrbzerr == BZ_STREAM_END) {
(99.6 %, 728 bytes)
23d22
< int bzerr;
23,24c23
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> if (bzerr == BZ_STREAM_END) {
23,24c23
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int (bzerr == BZ_STREAM_END) {
23,24c23
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int bzerrbzerr == BZ_STREAM_END) {
24c24
<   if (bzerr == BZ_STREAM_END) {
---
>   == BZ_STREAM_END) {
24c24
<   if (bzerr == BZ_STREAM_END) {
---
>   if BZ_STREAM_END) {
24c24
<   if (bzerr == BZ_STREAM_END) {
---
>   if () {
24c24
<   if (bzerr == BZ_STREAM_END) {
---
>   if (bzerr {
24,25c24
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   if (bzerr == }
24,26c24
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
>   if (bzerr == BZ_STREAM_END}
24,27c24
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
25,27c25
<   }
< }
< 
---
>   
\ No newline at end of file
26,27d25
< }
< 
===< pass_clex :: rm-toks-2 >===
3c3
< #define BZ_STREAM_END 9
---
> BZ_STREAM_END 9
3c3
< #define BZ_STREAM_END 9
---
> #9
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define #include <stdio.h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define BZ_STREAM_END include <stdio.h>
5c5
< #include <stdio.h>
---
> <stdio.h>
5c5
< #include <stdio.h>
---
> #stdio.h>
5c5
< #include <stdio.h>
---
> #include .h>
5c5
< #include <stdio.h>
---
> #include <h>
5c5
< #include <stdio.h>
---
> #include <stdio>
5,7c5
< #include <stdio.h>
< 
< ;
---
> #include <stdio.;
5,8c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
---
> #include <stdio.htypedef BZFILE
7,8c7
< ;
< typedef BZFILE
---
> BZFILE
8,10c8
< typedef BZFILE
< 
<     ();
---
> ();
8,10c8
< typedef BZFILE
< 
<     ();
---
> typedef );
10c10
<     ();
---
>     ;
10,11c10
<     ();
< void BZ2_bzWriteClose(nbytes_out) {}
---
>     (void BZ2_bzWriteClose(nbytes_out) {}
10,11c10
<     ();
< void BZ2_bzWriteClose(nbytes_out) {}
---
>     ()BZ2_bzWriteClose(nbytes_out) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> (nbytes_out) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void nbytes_out) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzWriteClose) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzWriteClose({}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzWriteClose(nbytes_out}
(99.6 %, 726 bytes)
10,11c10
<     ;
< void BZ2_bzWriteClose(nbytes_out) {}
---
>     BZ2_bzWriteClose(nbytes_out) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> (nbytes_out) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void nbytes_out) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzWriteClose) {}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzWriteClose({}
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzWriteClose(nbytes_out}
11,13c11
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_out) void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
11,13c11
< void BZ2_bzWriteClose(nbytes_out) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(nbytes_out) {BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> (int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64*, BZFILE, int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(, BZFILE, int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int BZFILE, int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, int, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, unsigned *, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int*, unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, , unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned unsigned *, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned **, unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, , unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned unsigned *,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned **,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, ,
13,14c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned unsigned *);
13,14c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned **);
14c14
<                         unsigned *);
---
>                         );
14c14
<                         unsigned *);
---
>                         unsigned ;
14,15c14
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         unsigned *void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
14,15c14
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         unsigned *)BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> (int *bzerror, BZFILE b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void int *bzerror, BZFILE b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64*bzerror, BZFILE b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(bzerror, BZFILE b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int , BZFILE b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *BZFILE b, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerrorb, int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, , int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE int abandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE babandon,
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, ,
15,16c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
15,16c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon*nbytes_in_lo32, unsigned *nbytes_in_hi32,
16c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         nbytes_in_lo32, unsigned *nbytes_in_hi32,
16c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned , unsigned *nbytes_in_hi32,
16c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned *unsigned *nbytes_in_hi32,
16c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned *nbytes_in_lo32*nbytes_in_hi32,
16c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned *nbytes_in_lo32, nbytes_in_hi32,
16c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned *nbytes_in_lo32, unsigned ,
16,17c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, unsigned *unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
16,17c16
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32*nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned , unsigned *nbytes_out_hi32) {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *unsigned *nbytes_out_hi32) {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32*nbytes_out_hi32) {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32, nbytes_out_hi32) {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32, unsigned ) {}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32, unsigned *{}
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32}
17,19c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
17,19c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {(char *, unsigned *, char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> char *, unsigned *, char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress*, unsigned *, char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(, unsigned *, char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char unsigned *, char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char **, char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, , char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned char *, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned **, unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, , unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char unsigned, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, int, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int t);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, intt);
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, );
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int ;
19,20c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int tBZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
19,20c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t)(char *dest, unsigned *destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> char *dest, unsigned *destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress*dest, unsigned *destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(dest, unsigned *destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char , unsigned *destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *unsigned *destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest*destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, destLen, char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned , char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *char *source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen*source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, source,
20c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char ,
20,21c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *unsigned sourceLen, int blockSize100k, int verbosity) {
20,21c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *sourcesourceLen, int blockSize100k, int verbosity) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          , int blockSize100k, int verbosity) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned int blockSize100k, int verbosity) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLenblockSize100k, int verbosity) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, , int verbosity) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, int int verbosity) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, int blockSize100kverbosity) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, int blockSize100k, ) {
21c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, int blockSize100k, int {
21,22c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   ;
---
>                          unsigned sourceLen, int blockSize100k, int verbosity;
21,23c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   ;
< int bzerr;
---
>                          unsigned sourceLen, int blockSize100k, int verbosity) int bzerr;
22,23c22
<   ;
< int bzerr;
---
>   bzerr;
23c23
< int bzerr;
---
> ;
23,24c23
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int if (bzerr == BZ_STREAM_END) {
23,24c23
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int bzerr(bzerr == BZ_STREAM_END) {
24c24
<   if (bzerr == BZ_STREAM_END) {
---
>   bzerr == BZ_STREAM_END) {
24c24
<   if (bzerr == BZ_STREAM_END) {
---
>   if == BZ_STREAM_END) {
24c24
<   if (bzerr == BZ_STREAM_END) {
---
>   if (BZ_STREAM_END) {
24c24
<   if (bzerr == BZ_STREAM_END) {
---
>   if (bzerr ) {
24c24
<   if (bzerr == BZ_STREAM_END) {
---
>   if (bzerr == {
24,25c24
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   if (bzerr == BZ_STREAM_END}
24,26c24
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
>   if (bzerr == BZ_STREAM_END) }
25,27c25
<   }
< }
< 
---
>   
\ No newline at end of file
26,27d25
< }
< 
Termination check: size was 1966; now 726
===< pass_balanced :: curly >===
1c1
< 
---
>  
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzWriteClose(nbytes_out) 
27a28
>  
\ No newline at end of file
1c1
< 
---
>  
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) 
27a28
>  
\ No newline at end of file
1c1
< 
---
>  
21,26c21
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
>                          unsigned sourceLen, int blockSize100k, int verbosity) 
27a23
>  
\ No newline at end of file
1c1
< 
---
>  
24,25c24
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   if (bzerr == BZ_STREAM_END) 
27a27
>  
\ No newline at end of file
===< pass_balanced :: angles >===
1c1
< 
---
>  
5c5
< #include <stdio.h>
---
> #include 
27a28
>  
\ No newline at end of file
===< pass_balanced :: parens-only >===
1c1
< 
---
>  
11c11
< void BZ2_bzWriteClose(nbytes_out) {}
---
> void BZ2_bzWriteClosenbytes_out {}
27a28
>  
\ No newline at end of file
1c1
< 
---
>  
13,14c13,14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
>                         unsigned *;
27a28
>  
\ No newline at end of file
1c1
< 
---
>  
15c15
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64int *bzerror, BZFILE b, int abandon,
17c17
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32 {}
27a28
>  
\ No newline at end of file
1c1
< 
---
>  
19c19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompresschar *, unsigned *, char *, unsigned, int, int t;
27a28
>  
\ No newline at end of file
1c1
< 
---
>  
20,21c20,21
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
> BZ2_bzBuffToBuffCompresschar *dest, unsigned *destLen, char *source,
>                          unsigned sourceLen, int blockSize100k, int verbosity {
27a28
>  
\ No newline at end of file
1c1
< 
---
>  
24c24
<   if (bzerr == BZ_STREAM_END) {
---
>   if bzerr == BZ_STREAM_END {
27a28
>  
\ No newline at end of file
===< pass_clang :: remove-namespace >===
===< pass_clang :: param-to-global >===
11c11,12
< void BZ2_bzWriteClose(nbytes_out) {}
---
> int BZ2_bzWriteClose_nbytes_out;
> void BZ2_bzWriteClose(void) {}
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(, BZFILE, int, unsigned *, unsigned *, unsigned *,
15c15,16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> int * BZ2_bzWriteClose64_bzerror;
> void BZ2_bzWriteClose64( BZFILE b, int abandon,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, , int, unsigned *, unsigned *, unsigned *,
15c15,16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> BZFILE BZ2_bzWriteClose64_b;
> void BZ2_bzWriteClose64(int *bzerror,  int abandon,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, , unsigned *, unsigned *, unsigned *,
15c15,16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> int BZ2_bzWriteClose64_abandon;
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, 
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, , unsigned *, unsigned *,
14a15
> unsigned int * BZ2_bzWriteClose64_nbytes_in_lo32;
16c17
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                          unsigned *nbytes_in_hi32,
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, , unsigned *,
14a15
> unsigned int * BZ2_bzWriteClose64_nbytes_in_hi32;
16c17
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned *nbytes_in_lo32, 
13c13
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, ,
14a15
> unsigned int * BZ2_bzWriteClose64_nbytes_out_lo32;
17c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                          unsigned *nbytes_out_hi32) {}
(99.6 %, 753 bytes)
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(, BZFILE, int, unsigned *, unsigned *, unsigned *,
16c16,17
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> int * BZ2_bzWriteClose64_bzerror;
> void BZ2_bzWriteClose64( BZFILE b, int abandon,
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, , int, unsigned *, unsigned *, unsigned *,
16c16,17
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> BZFILE BZ2_bzWriteClose64_b;
> void BZ2_bzWriteClose64(int *bzerror,  int abandon,
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, , unsigned *, unsigned *, unsigned *,
16c16,17
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> int BZ2_bzWriteClose64_abandon;
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, 
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, , unsigned *, unsigned *,
15a16
> unsigned int * BZ2_bzWriteClose64_nbytes_in_lo32;
17c18
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                          unsigned *nbytes_in_hi32,
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, , unsigned *,
15a16
> unsigned int * BZ2_bzWriteClose64_nbytes_in_hi32;
17c18
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned *nbytes_in_lo32, 
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, ,
15a16
> unsigned int * BZ2_bzWriteClose64_nbytes_out_lo32;
18c19
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                          unsigned *nbytes_out_hi32) {}
14,15c14,15
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned **);
> unsigned int * BZ2_bzWriteClose64_nbytes_out_hi32;
18c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned *nbytes_out_lo32) {}
20,21c20,22
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(, unsigned *, char *, unsigned, int, int t);
> char * BZ2_bzBuffToBuffCompress_dest;
> BZ2_bzBuffToBuffCompress( unsigned *destLen, char *source,
20,21c20,22
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, , char *, unsigned, int, int t);
> unsigned int * BZ2_bzBuffToBuffCompress_destLen;
> BZ2_bzBuffToBuffCompress(char *dest,  char *source,
20,21c20,22
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, , unsigned, int, int t);
> char * BZ2_bzBuffToBuffCompress_source;
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, 
20c20,21
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, , int, int t);
> unsigned int BZ2_bzBuffToBuffCompress_sourceLen;
22c23
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                           int blockSize100k, int verbosity) {
20c20,21
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, , int t);
> int BZ2_bzBuffToBuffCompress_blockSize100k;
22c23
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen,  int verbosity) {
20c20,21
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int, int t);
---
> BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
> int BZ2_bzBuffToBuffCompress_verbosity;
22c23
<                          unsigned sourceLen, int blockSize100k, int verbosity) {
---
>                          unsigned sourceLen, int blockSize100k) {
(99.6 %, 771 bytes)
===< pass_clang :: union-to-struct >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: replace-dependent-typedef >===
===< pass_clang :: remove-unused-field >===
===< pass_clang :: class-template-to-class >===
===< pass_clang :: remove-base-class >===
===< pass_clang :: replace-array-index-var >===
===< pass_unifdef :: 0 >===
===< pass_clex :: rm-toks-16 >===
3,11c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
---
> BZ2_bzWriteClose_nbytes_out;
3,11c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
---
> #;
3,12c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> #define void BZ2_bzWriteClose(void) {}
3,12c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> #define BZ_STREAM_END BZ2_bzWriteClose(void) {}
5,12c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> (void) {}
5,12c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> #void) {}
5,12c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> #include ) {}
5,12c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> #include <{}
5,12c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> #include <stdio}
5,14c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> #include <stdio.void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
5,14c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> #include <stdio.hBZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
7,14c7
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> (int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
8,14c8
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
8,14c8
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> typedef *, BZFILE, int, unsigned *, unsigned *, unsigned *,
10,14c10
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
>     , BZFILE, int, unsigned *, unsigned *, unsigned *,
11,14c11
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> BZFILE, int, unsigned *, unsigned *, unsigned *,
11,14c11
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> int , int, unsigned *, unsigned *, unsigned *,
11,14c11
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> int BZ2_bzWriteClose_nbytes_outint, unsigned *, unsigned *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> , unsigned *, unsigned *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void unsigned *, unsigned *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose*, unsigned *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(, unsigned *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(voidunsigned *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(void) *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(void) {, unsigned *,
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> unsigned *,
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void *,
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64,
14,15c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(unsigned *);
14,15c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *);
14,15c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *);
14,15c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose64(int *, ;
14,16c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILEvoid BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
14,16c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
14,16c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int(int *bzerror, BZFILE b, int abandon,
14,16c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, int *bzerror, BZFILE b, int abandon,
14,16c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *bzerror, BZFILE b, int abandon,
14,16c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *bzerror, BZFILE b, int abandon,
14,16c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, , BZFILE b, int abandon,
14,16c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned BZFILE b, int abandon,
14,16c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *b, int abandon,
14,16c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, , int abandon,
14,16c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned int abandon,
14,16c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *abandon,
15,16c15
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
>                         ,
15,17c15
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
15,17c15
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned **nbytes_in_lo32, unsigned *nbytes_in_hi32,
15,17c15
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
>                         unsigned *)nbytes_in_lo32, unsigned *nbytes_in_hi32,
16,17c16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> , unsigned *nbytes_in_hi32,
16,17c16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void unsigned *nbytes_in_hi32,
16,17c16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64*nbytes_in_hi32,
16,17c16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(nbytes_in_hi32,
16,17c16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int ,
16,18c16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
16,18c16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror*nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
16,18c16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror, nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
16,18c16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE , unsigned *nbytes_out_hi32) {}
16,18c16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE bunsigned *nbytes_out_hi32) {}
16,18c16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, *nbytes_out_hi32) {}
16,18c16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int nbytes_out_hi32) {}
16,18c16
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon) {}
17,18c17
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         {}
17,18c17
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
---
>                         unsigned }
17,20c17
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
17,20c17
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *nbytes_in_lo32(char *, unsigned *, char *, unsigned, int);
17,20c17
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *nbytes_in_lo32, char *, unsigned *, char *, unsigned, int);
17,20c17
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *nbytes_in_lo32, unsigned *, unsigned *, char *, unsigned, int);
17,20c17
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *nbytes_in_lo32, unsigned *, unsigned *, char *, unsigned, int);
17,20c17
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32unsigned *, char *, unsigned, int);
18,20c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         *, char *, unsigned, int);
18,20c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned , char *, unsigned, int);
18,20c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *char *, unsigned, int);
18,20c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *nbytes_out_lo32*, unsigned, int);
18,20c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *nbytes_out_lo32, , unsigned, int);
18,20c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *nbytes_out_lo32, unsigned unsigned, int);
18,20c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *nbytes_out_lo32, unsigned *, int);
18,20c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int);
18,20c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) );
18,20c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {}
< 
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32) {;
20d19
< BZ2_bzBuffToBuffCompress(char *, unsigned *, char *, unsigned, int);
(99.7 %, 702 bytes)
18,20c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int);
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int*source,
18,20c18
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int);
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
>                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int)source,
19,20c19
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
---
> ,
19,21c19
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
---
> int unsigned sourceLen, int blockSize100k) {
19,21c19
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
---
> int BZ2_bzBuffToBuffCompress_verbositysourceLen, int blockSize100k) {
20,21c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
---
> , int blockSize100k) {
20,21c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
---
> BZ2_bzBuffToBuffCompressint blockSize100k) {
20,21c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
---
> BZ2_bzBuffToBuffCompress(blockSize100k) {
20,21c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
---
> BZ2_bzBuffToBuffCompress(char ) {
20,21c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
---
> BZ2_bzBuffToBuffCompress(char *{
20,22c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
<   ;
---
> BZ2_bzBuffToBuffCompress(char *dest;
20,23c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
<   ;
< int bzerr;
---
> BZ2_bzBuffToBuffCompress(char *dest, int bzerr;
20,23c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
<   ;
< int bzerr;
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned bzerr;
20,23c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
<   ;
< int bzerr;
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *;
20,24c20
< BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLen, char *source,
<                          unsigned sourceLen, int blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(char *dest, unsigned *destLenif (bzerr == BZ_STREAM_END) {
(99.7 %, 608 bytes)
20,26c20
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
> BZ2_bzBuffToBuffCompress(
\ No newline at end of file
20,26c20
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
> BZ2_bzBuffToBuffCompress(blockSize100k
\ No newline at end of file
20,26c20
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
> BZ2_bzBuffToBuffCompress(blockSize100k) 
\ No newline at end of file
21,26c21
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   
\ No newline at end of file
22,26d21
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
22,26c22
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
> int 
\ No newline at end of file
22,26c22
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
> int bzerr
\ No newline at end of file
23,26c23
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   
\ No newline at end of file
23,26c23
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if 
\ No newline at end of file
23,26c23
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (
\ No newline at end of file
23,26c23
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr 
\ No newline at end of file
23,26c23
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == 
\ No newline at end of file
23,26c23
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
23,26c23
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
24,26c24
<   }
< }
< 
---
>   
\ No newline at end of file
25,26d24
< }
< 
===< pass_clex :: rm-toks-12 >===
3,7d2
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< ;
3,8c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< ;
< typedef BZFILE
---
> #BZFILE
3,10c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
---
> #define ;
3,11c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
---
> #define BZ_STREAM_END int BZ2_bzWriteClose_nbytes_out;
5,11c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
---
> BZ2_bzWriteClose_nbytes_out;
5,11c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
---
> #;
5,12c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> #include void BZ2_bzWriteClose(void) {}
5,12c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> #include <BZ2_bzWriteClose(void) {}
5,12c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> #include <stdio(void) {}
5,12c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> #include <stdio.void) {}
5,12c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> #include <stdio.h) {}
7,12c7
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> {}
8,12c8
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
---
> }
8,14c8
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> typedef void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
10,14c10
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
>     BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
11,14c11
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> (int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
11,14c11
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> int int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
11,14c11
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> int BZ2_bzWriteClose_nbytes_out*, BZFILE, int, unsigned *, unsigned *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> , BZFILE, int, unsigned *, unsigned *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZFILE, int, unsigned *, unsigned *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose, int, unsigned *, unsigned *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(int, unsigned *, unsigned *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(void, unsigned *, unsigned *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(void) unsigned *, unsigned *, unsigned *,
12,14c12
< void BZ2_bzWriteClose(void) {}
< 
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose(void) {*, unsigned *, unsigned *,
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> , unsigned *, unsigned *,
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void unsigned *, unsigned *,
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64*, unsigned *,
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(, unsigned *,
14c14
< void BZ2_bzWriteClose64(int *, BZFILE, int, unsigned *, unsigned *, unsigned *,
---
> void BZ2_bzWriteClose64(int unsigned *,
(99.7 %, 559 bytes)
12,13c12
< void BZ2_bzWriteClose(int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose(*);
12,13c12
< void BZ2_bzWriteClose(int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose(int);
12,13c12
< void BZ2_bzWriteClose(int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
---
> void BZ2_bzWriteClose(int, ;
12,14c12
< void BZ2_bzWriteClose(int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose(int, unsigned void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
12,14c12
< void BZ2_bzWriteClose(int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose(int, unsigned *BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
12,14c12
< void BZ2_bzWriteClose(int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose(int, unsigned *, (int *bzerror, BZFILE b, int abandon,
12,14c12
< void BZ2_bzWriteClose(int, unsigned *, unsigned *, unsigned *,
<                         unsigned *);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose(int, unsigned *, unsigned int *bzerror, BZFILE b, int abandon,
(99.8 %, 487 bytes)
12,13c12
< void BZ2_bzWriteClose(int);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose(intint abandon,
12,13c12
< void BZ2_bzWriteClose(int);
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> void BZ2_bzWriteClose(int)abandon,
13c13
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
---
> ,
13,14c13
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
13,14c13
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64*nbytes_in_lo32, unsigned *nbytes_in_hi32,
13,14c13
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(nbytes_in_lo32, unsigned *nbytes_in_hi32,
13,14c13
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int , unsigned *nbytes_in_hi32,
13,14c13
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *unsigned *nbytes_in_hi32,
13,14c13
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror*nbytes_in_hi32,
13,14c13
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, nbytes_in_hi32,
13,14c13
< void BZ2_bzWriteClose64(int *bzerror, BZFILE b, int abandon,
<                         unsigned *nbytes_in_lo32, unsigned *nbytes_in_hi32,
---
> void BZ2_bzWriteClose64(int *bzerror, BZFILE ,
(99.8 %, 406 bytes)
13,14c13
< void BZ2_bzWriteClose64(int , unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int);
---
> void BZ2_bzWriteClose64(int );
13,14c13
< void BZ2_bzWriteClose64(int , unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int);
---
> void BZ2_bzWriteClose64(int , ;
13,15c13
< void BZ2_bzWriteClose64(int , unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int);
< int BZ2_bzBuffToBuffCompress_verbosity;
---
> void BZ2_bzWriteClose64(int , unsigned int BZ2_bzBuffToBuffCompress_verbosity;
13,15c13
< void BZ2_bzWriteClose64(int , unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int);
< int BZ2_bzBuffToBuffCompress_verbosity;
---
> void BZ2_bzWriteClose64(int , unsigned *BZ2_bzBuffToBuffCompress_verbosity;
13,15c13
< void BZ2_bzWriteClose64(int , unsigned *nbytes_in_hi32,
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int);
< int BZ2_bzBuffToBuffCompress_verbosity;
---
> void BZ2_bzWriteClose64(int , unsigned *nbytes_in_hi32;
14,16c14
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int);
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(blockSize100k) {
---
>                         BZ2_bzBuffToBuffCompress(blockSize100k) {
14,16c14
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int);
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(blockSize100k) {
---
>                         unsigned (blockSize100k) {
14,16c14
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int);
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(blockSize100k) {
---
>                         unsigned *blockSize100k) {
14,16c14
<                         unsigned *nbytes_out_lo32, unsigned *nbytes_out_hi32int);
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(blockSize100k) {
---
>                         unsigned *nbytes_out_lo32) {
(99.9 %, 299 bytes)
13,17c13
< void BZ2_bzWriteClose64(int );
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
---
> void BZ2_bzWriteClose64(int bzerr;
14,17d13
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
14,18c14
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> if (bzerr == BZ_STREAM_END) {
14,18c14
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int (bzerr == BZ_STREAM_END) {
14,18c14
< int BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int BZ2_bzBuffToBuffCompress_verbositybzerr == BZ_STREAM_END) {
15,18c15
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> == BZ_STREAM_END) {
15,18c15
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompressBZ_STREAM_END) {
15,18c15
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress() {
15,18c15
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(blockSize100k{
15,19c15
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
---
> BZ2_bzBuffToBuffCompress(blockSize100k) }
16,18d15
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
20d16
< }
17,21d16
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
17,21c17
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
> int 
\ No newline at end of file
17,21c17
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
> int bzerr
\ No newline at end of file
18,21c18
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   
\ No newline at end of file
18,21c18
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if 
\ No newline at end of file
18,21c18
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (
\ No newline at end of file
18,21c18
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr 
\ No newline at end of file
18,21c18
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == 
\ No newline at end of file
18,21c18
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
18,21c18
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
19,21c19
<   }
< }
< 
---
>   
\ No newline at end of file
20,21d19
< }
< 
===< pass_clex :: rm-toks-8 >===
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> .h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #h>
3,5c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
---
> #define >
3,7c3
< #define BZ_STREAM_END 9
< 
< #include <stdio.h>
< 
< ;
---
> #define BZ_STREAM_END ;
5,7d4
< #include <stdio.h>
< 
< ;
5,8c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
---
> #BZFILE
5,10c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
---
> #include ;
5,11c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
---
> #include <int BZ2_bzWriteClose_nbytes_out;
5,11c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
---
> #include <stdioBZ2_bzWriteClose_nbytes_out;
5,11c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
---
> #include <stdio.;
5,12c5
< #include <stdio.h>
< 
< ;
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(int);
---
> #include <stdio.hvoid BZ2_bzWriteClose(int);
(99.9 %, 277 bytes)
5,9c5
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(int);
---
> (int);
5,9c5
< typedef BZFILE
< 
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(int);
---
> typedef int);
7,9c7
<     ;
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(int);
---
>     );
8,9c8
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(int);
---
> ;
8,10c8
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(int);
< void BZ2_bzWriteClose64(int );
---
> int void BZ2_bzWriteClose64(int );
8,10c8
< int BZ2_bzWriteClose_nbytes_out;
< void BZ2_bzWriteClose(int);
< void BZ2_bzWriteClose64(int );
---
> int BZ2_bzWriteClose_nbytes_outBZ2_bzWriteClose64(int );
(99.9 %, 218 bytes)
8,10c8
< ;
< void BZ2_bzWriteClose64(int );
< int BZ2_bzBuffToBuffCompress_verbosity;
---
> BZ2_bzBuffToBuffCompress_verbosity;
9,10c9
< void BZ2_bzWriteClose64(int );
< int BZ2_bzBuffToBuffCompress_verbosity;
---
> ;
(99.9 %, 181 bytes)
8,10d7
< BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
8,11c8
< BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
---
> BZ2_bzBuffToBuffCompress_verbositybzerr;
9,11c9
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
---
> ;
9,12c9
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompressif (bzerr == BZ_STREAM_END) {
9,12c9
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress((bzerr == BZ_STREAM_END) {
9,12c9
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(blockSize100kbzerr == BZ_STREAM_END) {
9,12c9
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(blockSize100k) == BZ_STREAM_END) {
10,12c10
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
>   BZ_STREAM_END) {
11,12c11
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> ) {
11,12c11
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int {
11,13c11
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
---
> int bzerr}
12d11
<   if (bzerr == BZ_STREAM_END) {
14d12
< }
12,15c12
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if 
\ No newline at end of file
12,15c12
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (
\ No newline at end of file
12,15c12
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr 
\ No newline at end of file
12,15c12
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == 
\ No newline at end of file
12,15c12
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
12,15c12
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
13,15c13
<   }
< }
< 
---
>   
\ No newline at end of file
14,15d13
< }
< 
===< pass_clex :: rm-toks-2 >===
3c3
< #define BZ_STREAM_END 9
---
> BZ_STREAM_END 9
3c3
< #define BZ_STREAM_END 9
---
> #9
3,5c3
< #define BZ_STREAM_END 9
< 
< typedef BZFILE
---
> #define typedef BZFILE
3,5c3
< #define BZ_STREAM_END 9
< 
< typedef BZFILE
---
> #define BZ_STREAM_END BZFILE
5,7c5
< typedef BZFILE
< 
<     ;
---
> ;
5,8c5
< typedef BZFILE
< 
<     ;
< BZ2_bzBuffToBuffCompress_verbosity;
---
> typedef BZ2_bzBuffToBuffCompress_verbosity;
8d7
< BZ2_bzBuffToBuffCompress_verbosity;
(99.9 %, 161 bytes)
6d5
< BZ2_bzBuffToBuffCompress_verbosity;
6d5
< BZ2_bzBuffToBuffCompress_verbosity;
6,7c6
< BZ2_bzBuffToBuffCompress_verbosity;
< BZ2_bzBuffToBuffCompress(blockSize100k) {
---
> BZ2_bzBuffToBuffCompress_verbosity(blockSize100k) {
(99.9 %, 125 bytes)
5,6c5
< ;
< BZ2_bzBuffToBuffCompress(blockSize100k) {
---
> (blockSize100k) {
6c6
< BZ2_bzBuffToBuffCompress(blockSize100k) {
---
> blockSize100k) {
6c6
< BZ2_bzBuffToBuffCompress(blockSize100k) {
---
> BZ2_bzBuffToBuffCompress) {
6c6
< BZ2_bzBuffToBuffCompress(blockSize100k) {
---
> BZ2_bzBuffToBuffCompress({
6,7c6
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
---
> BZ2_bzBuffToBuffCompress(blockSize100k;
6,8c6
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
---
> BZ2_bzBuffToBuffCompress(blockSize100k) int bzerr;
7,8c7
<   ;
< int bzerr;
---
>   bzerr;
8c8
< int bzerr;
---
> ;
8,9c8
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int if (bzerr == BZ_STREAM_END) {
8,9c8
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int bzerr(bzerr == BZ_STREAM_END) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   bzerr == BZ_STREAM_END) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   if == BZ_STREAM_END) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   if (BZ_STREAM_END) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   if (bzerr ) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   if (bzerr == {
9,10c9
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   if (bzerr == BZ_STREAM_END}
9,11c9
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
>   if (bzerr == BZ_STREAM_END) }
10,12c10
<   }
< }
< 
---
>   
\ No newline at end of file
11,12d10
< }
< 
Termination check: size was 726; now 125
===< pass_ternary :: c >===
===< pass_balanced :: curly >===
1c1
< 
---
>  
6,11c6
< BZ2_bzBuffToBuffCompress(blockSize100k) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
> BZ2_bzBuffToBuffCompress(blockSize100k) 
12a8
>  
\ No newline at end of file
1c1
< 
---
>  
9,10c9
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   if (bzerr == BZ_STREAM_END) 
12a12
>  
\ No newline at end of file
===< pass_clang :: param-to-global >===
6c6,7
< BZ2_bzBuffToBuffCompress(blockSize100k) {
---
> int BZ2_bzBuffToBuffCompress_blockSize100k;
> BZ2_bzBuffToBuffCompress(void) {
(99.9 %, 160 bytes)
===< pass_clang :: remove-nested-function >===
===< pass_clang :: lift-assignment-expr >===
===< pass_clang :: remove-enum-member-value >===
===< pass_clang :: reduce-array-size >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: simplify-struct >===
===< pass_clang :: replace-array-index-var >===
===< pass_unifdef :: 0 >===
===< pass_peep :: a >===
1c1
< 
---
>  
5c5
< ;
---
> 
13a14
>  
\ No newline at end of file
1c1
< 
---
>  
5c5
< ;
---
> 
13a14
>  
\ No newline at end of file
1c1
< 
---
>  
5c5
< ;
---
> 
13a14
>  
\ No newline at end of file
(99.9 %, 161 bytes)
6c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
---
> int BZ2_bzBuffToBuffCompress_blockSize100k
7c7
< BZ2_bzBuffToBuffCompress(void) {
---
> BZ2_bzBuffToBuffCompress {
7,12c7
< BZ2_bzBuffToBuffCompress(void) {
<   ;
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
> BZ2_bzBuffToBuffCompress(void) 
8c8
<   ;
---
>   
9c9
< int bzerr;
---
> int bzerr
10c10
<   if (bzerr == BZ_STREAM_END) {
---
>    {
(99.9 %, 160 bytes)
9c9
< int bzerr;
---
> int bzerr
10c10
<   if (bzerr == BZ_STREAM_END) {
---
>    {
10c10
<   if (bzerr == BZ_STREAM_END) {
---
>   if  {
10,11c10
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   if (bzerr == BZ_STREAM_END) 
===< pass_ints :: c >===
===< pass_clex :: rm-toks-13 >===
3,9c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> bzerr;
3,9c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> #;
3,10c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> #define if (bzerr == BZ_STREAM_END) {
3,10c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> #define BZ_STREAM_END (bzerr == BZ_STREAM_END) {
6,10c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> bzerr == BZ_STREAM_END) {
6,10c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int == BZ_STREAM_END) {
6,10c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int BZ2_bzBuffToBuffCompress_blockSize100kBZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> ) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress{
7,11c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
---
> BZ2_bzBuffToBuffCompress(}
7,12c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
> BZ2_bzBuffToBuffCompress(void}
7,14c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
> BZ2_bzBuffToBuffCompress(void) 
\ No newline at end of file
9,14d8
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
9,14c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
> int 
\ No newline at end of file
9,14c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
> int bzerr
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
11,14c11
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
12,14d11
< }
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-12 >===
3,8d2
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
3,9c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> #bzerr;
3,9c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> #define ;
3,10c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> #define BZ_STREAM_END if (bzerr == BZ_STREAM_END) {
6,10c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> (bzerr == BZ_STREAM_END) {
6,10c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int bzerr == BZ_STREAM_END) {
6,10c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int BZ2_bzBuffToBuffCompress_blockSize100k== BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress({
7,11c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
---
> BZ2_bzBuffToBuffCompress(void}
7,12c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
> BZ2_bzBuffToBuffCompress(void) }
9,14d8
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
9,14c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
> int 
\ No newline at end of file
9,14c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
> int bzerr
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
11,14c11
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
12,14d11
< }
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-10 >===
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
---
> ) {
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
---
> #{
3,9c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> #define int bzerr;
3,9c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> #define BZ_STREAM_END bzerr;
6,9c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> ;
6,10c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int if (bzerr == BZ_STREAM_END) {
6,10c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int BZ2_bzBuffToBuffCompress_blockSize100k(bzerr == BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> bzerr == BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress== BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(BZ_STREAM_END) {
8,10d7
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
8,10d7
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
9,11c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
---
> }
9,12c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
> int }
9,14c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
> int bzerr
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
11,14c11
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
12,14d11
< }
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-9 >===
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
---
> void) {
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
---
> #) {
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
---
> #define {
3,9c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> #define BZ_STREAM_END int bzerr;
6,9c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> bzerr;
6,9c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> int ;
6,10c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int BZ2_bzBuffToBuffCompress_blockSize100kif (bzerr == BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> (bzerr == BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompressbzerr == BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(== BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(voidBZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(void) ) {
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> {
9,11c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
---
> int }
9,12c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
> int bzerr}
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
11,14c11
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
12,14d11
< }
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-6 >===
3,6c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
---
> ;
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
---
> #BZ2_bzBuffToBuffCompress(void) {
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
---
> #define (void) {
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
---
> #define BZ_STREAM_END void) {
6,7c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
---
> ) {
6,7c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
---
> int {
6,9c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> int BZ2_bzBuffToBuffCompress_blockSize100kint bzerr;
7,9c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> bzerr;
7,9c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> BZ2_bzBuffToBuffCompress;
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(if (bzerr == BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(void(bzerr == BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(void) bzerr == BZ_STREAM_END) {
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> == BZ_STREAM_END) {
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int BZ_STREAM_END) {
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int bzerr) {
10c10
<   if (bzerr == BZ_STREAM_END) {
---
>   {
10,11c10
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   if }
10,12c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
>   if (}
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
11,14c11
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
12,14d11
< }
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-2 >===
3c3
< #define BZ_STREAM_END 9
---
> BZ_STREAM_END 9
3c3
< #define BZ_STREAM_END 9
---
> #9
3,6c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
---
> #define int BZ2_bzBuffToBuffCompress_blockSize100k;
3,6c3
< #define BZ_STREAM_END 9
< 
< 
< int BZ2_bzBuffToBuffCompress_blockSize100k;
---
> #define BZ_STREAM_END BZ2_bzBuffToBuffCompress_blockSize100k;
6c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
---
> ;
6,7c6
< int BZ2_bzBuffToBuffCompress_blockSize100k;
< BZ2_bzBuffToBuffCompress(void) {
---
> int BZ2_bzBuffToBuffCompress(void) {
(99.9 %, 118 bytes)
6,7c6
< ;
< BZ2_bzBuffToBuffCompress(void) {
---
> (void) {
7c7
< BZ2_bzBuffToBuffCompress(void) {
---
> void) {
7c7
< BZ2_bzBuffToBuffCompress(void) {
---
> BZ2_bzBuffToBuffCompress) {
7c7
< BZ2_bzBuffToBuffCompress(void) {
---
> BZ2_bzBuffToBuffCompress({
7,9c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> BZ2_bzBuffToBuffCompress(voidint bzerr;
7,9c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> BZ2_bzBuffToBuffCompress(void) bzerr;
9c9
< int bzerr;
---
> ;
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int if (bzerr == BZ_STREAM_END) {
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int bzerr(bzerr == BZ_STREAM_END) {
10c10
<   if (bzerr == BZ_STREAM_END) {
---
>   bzerr == BZ_STREAM_END) {
10c10
<   if (bzerr == BZ_STREAM_END) {
---
>   if == BZ_STREAM_END) {
10c10
<   if (bzerr == BZ_STREAM_END) {
---
>   if (BZ_STREAM_END) {
10c10
<   if (bzerr == BZ_STREAM_END) {
---
>   if (bzerr ) {
10c10
<   if (bzerr == BZ_STREAM_END) {
---
>   if (bzerr == {
10,11c10
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   if (bzerr == BZ_STREAM_END}
10,12c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
>   if (bzerr == BZ_STREAM_END) }
11,14c11
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
12,14d11
< }
< 
<  
\ No newline at end of file
Termination check: size was 125; now 118
===< pass_clang :: param-to-global >===
===< pass_clang :: param-to-local >===
===< pass_clang :: remove-nested-function >===
===< pass_clang :: lift-assignment-expr >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: reduce-array-dim >===
===< pass_clang :: replace-simple-typedef >===
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: remove-unresolved-base >===
===< pass_clang :: simplify-nested-class >===
===< pass_clang :: empty-struct-to-int >===
===< pass_clang :: remove-pointer >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: remove-array >===
===< pass_clang :: simplify-struct >===
===< pass_clang :: replace-undefined-function >===
===< pass_unifdef :: 0 >===
===< pass_comments :: 0 >===
===< pass_special :: c >===
===< pass_ints :: d >===
===< pass_clex :: rm-toks-13 >===
3,10c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> if (bzerr == BZ_STREAM_END) {
3,10c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> #(bzerr == BZ_STREAM_END) {
3,10c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> #define bzerr == BZ_STREAM_END) {
3,10c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> #define BZ_STREAM_END == BZ_STREAM_END) {
6,10c6
< ;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> ) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress{
7,11c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
---
> BZ2_bzBuffToBuffCompress(}
7,12c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
> BZ2_bzBuffToBuffCompress(void}
7,14c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
> BZ2_bzBuffToBuffCompress(void) 
\ No newline at end of file
9,14d8
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
9,14c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
> int 
\ No newline at end of file
9,14c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
> int bzerr
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
11,14c11
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
12,14d11
< }
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-8 >===
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
---
> ) {
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
---
> #{
3,9c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> #define int bzerr;
3,9c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> #define BZ_STREAM_END bzerr;
7,9d6
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> if (bzerr == BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(bzerr == BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(bzerr == BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(void== BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(void) BZ_STREAM_END) {
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> ) {
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int {
9,11c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
---
> int bzerr}
10d9
<   if (bzerr == BZ_STREAM_END) {
12d10
< }
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
11,14c11
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
12,14d11
< }
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-6 >===
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
---
> (void) {
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
---
> #void) {
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
---
> #define ) {
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
---
> #define BZ_STREAM_END {
6,8d5
< ;
< BZ2_bzBuffToBuffCompress(void) {
<   
7,9c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> bzerr;
7,9c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> BZ2_bzBuffToBuffCompress;
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(if (bzerr == BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(void(bzerr == BZ_STREAM_END) {
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(void) bzerr == BZ_STREAM_END) {
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> == BZ_STREAM_END) {
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int BZ_STREAM_END) {
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int bzerr) {
10c10
<   if (bzerr == BZ_STREAM_END) {
---
>   {
10,11c10
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   if }
10,12c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
>   if (}
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == 
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
11,14c11
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
12,14d11
< }
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-4 >===
3,5d2
< #define BZ_STREAM_END 9
< 
< 
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
---
> #BZ2_bzBuffToBuffCompress(void) {
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
---
> #define (void) {
3,7c3
< #define BZ_STREAM_END 9
< 
< 
< ;
< BZ2_bzBuffToBuffCompress(void) {
---
> #define BZ_STREAM_END void) {
6,7c6
< ;
< BZ2_bzBuffToBuffCompress(void) {
---
> ) {
7c7
< BZ2_bzBuffToBuffCompress(void) {
---
> {
7,9c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> BZ2_bzBuffToBuffCompressint bzerr;
7,9c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> BZ2_bzBuffToBuffCompress(bzerr;
7,9c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> BZ2_bzBuffToBuffCompress(void;
7,10c7
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompress(void) if (bzerr == BZ_STREAM_END) {
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> (bzerr == BZ_STREAM_END) {
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int bzerr == BZ_STREAM_END) {
9,10c9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int bzerr== BZ_STREAM_END) {
10c10
<   if (bzerr == BZ_STREAM_END) {
---
>   BZ_STREAM_END) {
10c10
<   if (bzerr == BZ_STREAM_END) {
---
>   if ) {
10c10
<   if (bzerr == BZ_STREAM_END) {
---
>   if ({
10,11c10
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   if (bzerr }
10,12c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
>   if (bzerr == }
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
10,14c10
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
11,14c11
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
12,14d11
< }
< 
<  
\ No newline at end of file
===< pass_clex :: rm-toks-1 >===
3c3
< #define BZ_STREAM_END 9
---
> define BZ_STREAM_END 9
3c3
< #define BZ_STREAM_END 9
---
> #BZ_STREAM_END 9
3c3
< #define BZ_STREAM_END 9
---
> #define 9
3,6c3
< #define BZ_STREAM_END 9
< 
< 
< ;
---
> #define BZ_STREAM_END ;
6d5
< ;
7c7
< BZ2_bzBuffToBuffCompress(void) {
---
> (void) {
7c7
< BZ2_bzBuffToBuffCompress(void) {
---
> BZ2_bzBuffToBuffCompressvoid) {
7c7
< BZ2_bzBuffToBuffCompress(void) {
---
> BZ2_bzBuffToBuffCompress() {
(99.9 %, 116 bytes)
6c6
< BZ2_bzBuffToBuffCompress(void) {
---
> (void) {
6c6
< BZ2_bzBuffToBuffCompress(void) {
---
> BZ2_bzBuffToBuffCompressvoid) {
6c6
< BZ2_bzBuffToBuffCompress(void) {
---
> BZ2_bzBuffToBuffCompress() {
6c6
< BZ2_bzBuffToBuffCompress(void) {
---
> BZ2_bzBuffToBuffCompress(void{
6,8c6
< BZ2_bzBuffToBuffCompress(void) {
<   
< int bzerr;
---
> BZ2_bzBuffToBuffCompress(void) int bzerr;
8c8
< int bzerr;
---
> bzerr;
8c8
< int bzerr;
---
> int ;
8,9c8
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int bzerrif (bzerr == BZ_STREAM_END) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   (bzerr == BZ_STREAM_END) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   if bzerr == BZ_STREAM_END) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   if (== BZ_STREAM_END) {
(99.9 %, 112 bytes)
6c6
< BZ2_bzBuffToBuffCompress() {
---
> BZ2_bzBuffToBuffCompress({
6,8c6
< BZ2_bzBuffToBuffCompress() {
<   
< int bzerr;
---
> BZ2_bzBuffToBuffCompress() int bzerr;
8c8
< int bzerr;
---
> bzerr;
8c8
< int bzerr;
---
> int ;
8,9c8
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int bzerrif (bzerr == BZ_STREAM_END) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   (bzerr == BZ_STREAM_END) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   if bzerr == BZ_STREAM_END) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   if (== BZ_STREAM_END) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   if (bzerr BZ_STREAM_END) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   if (bzerr == ) {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   if (bzerr == BZ_STREAM_END{
9,10c9
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   if (bzerr == BZ_STREAM_END) }
11d10
< }
11,13d10
< }
< 
<  
\ No newline at end of file
Termination check: size was 118; now 112
===< pass_balanced :: parens >===
6c6
< BZ2_bzBuffToBuffCompress() {
---
> BZ2_bzBuffToBuffCompress {
9c9
<   if (bzerr == BZ_STREAM_END) {
---
>   if  {
===< pass_balanced :: curly-only >===
6c6
< BZ2_bzBuffToBuffCompress() {
---
> BZ2_bzBuffToBuffCompress() 
11c11
< }
---
> 
9,10c9,10
<   if (bzerr == BZ_STREAM_END) {
<   }
---
>   if (bzerr == BZ_STREAM_END) 
>   
===< pass_clang :: local-to-global >===
5a6
> int BZ2_bzBuffToBuffCompress_bzerr;
8,9c9,10
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> 
>   if (BZ2_bzBuffToBuffCompress_bzerr == BZ_STREAM_END) {
===< pass_clang :: callexpr-to-value >===
===< pass_clang :: replace-callexpr >===
===< pass_clang :: simplify-callexpr >===
===< pass_clang :: remove-unused-function >===
6,11c6
< BZ2_bzBuffToBuffCompress() {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
> 
===< pass_clang :: simplify-if >===
9c9,11
<   if (bzerr == BZ_STREAM_END) {
---
>   ;
>   
>    {
===< pass_clang :: remove-trivial-base-template >===
===< pass_clang :: remove-ctor-initializer >===
===< pass_clang :: remove-unused-outer-class >===
===< pass_clang :: remove-pointer-pairs >===
===< pass_clang :: remove-array >===
===< pass_clang :: replace-undefined-function >===
===< pass_clang :: replace-array-index-var >===
===< pass_ints :: e >===
===< pass_clex :: rm-toks-10 >===
3,8c3
< #define BZ_STREAM_END 9
< 
< 
< BZ2_bzBuffToBuffCompress() {
<   
< int bzerr;
---
> ;
3,9c3
< #define BZ_STREAM_END 9
< 
< 
< BZ2_bzBuffToBuffCompress() {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> #if (bzerr == BZ_STREAM_END) {
3,9c3
< #define BZ_STREAM_END 9
< 
< 
< BZ2_bzBuffToBuffCompress() {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> #define (bzerr == BZ_STREAM_END) {
3,9c3
< #define BZ_STREAM_END 9
< 
< 
< BZ2_bzBuffToBuffCompress() {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> #define BZ_STREAM_END bzerr == BZ_STREAM_END) {
6,9c6
< BZ2_bzBuffToBuffCompress() {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> == BZ_STREAM_END) {
6,9c6
< BZ2_bzBuffToBuffCompress() {
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> BZ2_bzBuffToBuffCompressBZ_STREAM_END) {
7,9d6
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
7,9d6
<   
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
8,10c8
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
---
> }
8,11c8
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
---
> int }
8,13c8
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
> int bzerr
\ No newline at end of file
9,13c9
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
9,13c9
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if 
\ No newline at end of file
9,13c9
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (
\ No newline at end of file
9,13c9
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr 
\ No newline at end of file
9,13c9
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == 
\ No newline at end of file
9,13c9
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END
\ No newline at end of file
9,13c9
<   if (bzerr == BZ_STREAM_END) {
<   }
< }
< 
<  
\ No newline at end of file
---
>   if (bzerr == BZ_STREAM_END) 
\ No newline at end of file
10,13c10
<   }
< }
< 
<  
\ No newline at end of file
---
>   
\ No newline at end of file
11,13d10
< }
< 
<  
\ No newline at end of file
Termination check: size was 112; now 112
===< pass_clang :: rename-fun >===
6c6
< BZ2_bzBuffToBuffCompress() {
---
> fn1() {
(100.0 %, 91 bytes)
===< pass_clang :: rename-param >===
===< pass_clang :: rename-var >===
8,9c8,9
< int bzerr;
<   if (bzerr == BZ_STREAM_END) {
---
> int a;
>   if (a == BZ_STREAM_END) {
(100.0 %, 83 bytes)
===< pass_clang :: rename-class >===
===< pass_clang :: rename-cxx-method >===
===< pass_clang :: combine-global-var >===
===< pass_clang :: combine-local-var >===
===< pass_clang :: simplify-struct-union-decl >===
===< pass_clang :: move-global-var >===
===< pass_clang :: unify-function-decl >===
===< pass_clex :: delete-string >===
===< pass_indent :: final >===
1d0
<  
4a4,5
> fn1 (  )
> {
6,10c7,10
< fn1() {
<   
< int a;
<   if (a == BZ_STREAM_END) {
<   }
---
>   int a;
>   if ( a == BZ_STREAM_END )
>     {
>     }
12,13d11
< 
<  
\ No newline at end of file
1c1
<  
---
> 
7,10c7,10
<   
< int a;
<   if (a == BZ_STREAM_END) {
<   }
---
> 
>     int a;
>     if (a == BZ_STREAM_END) {
>     }
13d12
<  
\ No newline at end of file
(100.0 %, 89 bytes)
7,8c7,8
<   int a;
<   if ( a == BZ_STREAM_END )
---
>     int a;
>     if ( a == BZ_STREAM_END )
4,5c4
< fn1 (  )
< {
---
> fn1() {
8,10c7,8
<   if ( a == BZ_STREAM_END )
<     {
<     }
---
>   if (a == BZ_STREAM_END) {
>   }
(100.0 %, 93 bytes)
4,5c4
< fn1 (  )
< {
---
> fn1() {
7,10c6,8
<     int a;
<     if ( a == BZ_STREAM_END )
<     {
<     }
---
>   int a;
>   if (a == BZ_STREAM_END) {
>   }
(100.0 %, 78 bytes)
===================== done ====================

pass statistics:
  method pass_balanced :: angles worked 0 times and failed 1 times
  method pass_balanced :: angles-only worked 0 times and failed 0 times
  method pass_balanced :: curly worked 69 times and failed 56 times
  method pass_balanced :: curly-only worked 0 times and failed 2 times
  method pass_balanced :: parens worked 0 times and failed 2 times
  method pass_balanced :: parens-only worked 38 times and failed 60 times
  method pass_blank :: 0 worked 0 times and failed 1 times
  method pass_clang :: aggregate-to-scalar worked 0 times and failed 0 times
  method pass_clang :: callexpr-to-value worked 23 times and failed 0 times
  method pass_clang :: class-template-to-class worked 0 times and failed 0 times
  method pass_clang :: combine-global-var worked 0 times and failed 0 times
  method pass_clang :: combine-local-var worked 0 times and failed 0 times
  method pass_clang :: copy-propagation worked 0 times and failed 0 times
  method pass_clang :: empty-struct-to-int worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-param worked 0 times and failed 0 times
  method pass_clang :: instantiate-template-type-param-to-int worked 0 times and failed 0 times
  method pass_clang :: lift-assignment-expr worked 0 times and failed 0 times
  method pass_clang :: local-to-global worked 0 times and failed 1 times
  method pass_clang :: move-function-body worked 8 times and failed 0 times
  method pass_clang :: move-global-var worked 0 times and failed 0 times
  method pass_clang :: param-to-global worked 3 times and failed 12 times
  method pass_clang :: param-to-local worked 6 times and failed 35 times
  method pass_clang :: reduce-array-dim worked 0 times and failed 0 times
  method pass_clang :: reduce-array-size worked 0 times and failed 0 times
  method pass_clang :: reduce-class-template-param worked 0 times and failed 0 times
  method pass_clang :: reduce-pointer-level worked 4 times and failed 2 times
  method pass_clang :: remove-addr-taken worked 0 times and failed 0 times
  method pass_clang :: remove-array worked 0 times and failed 0 times
  method pass_clang :: remove-base-class worked 0 times and failed 0 times
  method pass_clang :: remove-ctor-initializer worked 0 times and failed 0 times
  method pass_clang :: remove-enum-member-value worked 0 times and failed 0 times
  method pass_clang :: remove-namespace worked 0 times and failed 0 times
  method pass_clang :: remove-nested-function worked 0 times and failed 0 times
  method pass_clang :: remove-pointer worked 0 times and failed 0 times
  method pass_clang :: remove-pointer-pairs worked 0 times and failed 0 times
  method pass_clang :: remove-trivial-base-template worked 0 times and failed 0 times
  method pass_clang :: remove-unresolved-base worked 0 times and failed 0 times
  method pass_clang :: remove-unused-enum-member worked 0 times and failed 0 times
  method pass_clang :: remove-unused-field worked 74 times and failed 2 times
  method pass_clang :: remove-unused-function worked 16 times and failed 2 times
  method pass_clang :: remove-unused-outer-class worked 0 times and failed 0 times
  method pass_clang :: remove-unused-var worked 38 times and failed 0 times
  method pass_clang :: rename-class worked 0 times and failed 0 times
  method pass_clang :: rename-cxx-method worked 0 times and failed 0 times
  method pass_clang :: rename-fun worked 1 times and failed 0 times
  method pass_clang :: rename-param worked 0 times and failed 0 times
  method pass_clang :: rename-var worked 1 times and failed 0 times
  method pass_clang :: replace-array-index-var worked 0 times and failed 0 times
  method pass_clang :: replace-callexpr worked 0 times and failed 0 times
  method pass_clang :: replace-class-with-base-template-spec worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-name worked 0 times and failed 0 times
  method pass_clang :: replace-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-derived-class worked 0 times and failed 0 times
  method pass_clang :: replace-one-level-typedef-type worked 0 times and failed 0 times
  method pass_clang :: replace-simple-typedef worked 0 times and failed 0 times
  method pass_clang :: replace-undefined-function worked 0 times and failed 0 times
  method pass_clang :: return-void worked 0 times and failed 0 times
  method pass_clang :: simple-inliner worked 0 times and failed 0 times
  method pass_clang :: simplify-callexpr worked 0 times and failed 0 times
  method pass_clang :: simplify-comma-expr worked 0 times and failed 0 times
  method pass_clang :: simplify-dependent-typedef worked 0 times and failed 0 times
  method pass_clang :: simplify-if worked 0 times and failed 1 times
  method pass_clang :: simplify-nested-class worked 0 times and failed 0 times
  method pass_clang :: simplify-recursive-template-instantiation worked 0 times and failed 0 times
  method pass_clang :: simplify-struct worked 0 times and failed 0 times
  method pass_clang :: simplify-struct-union-decl worked 0 times and failed 0 times
  method pass_clang :: template-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: template-non-type-arg-to-int worked 0 times and failed 0 times
  method pass_clang :: unify-function-decl worked 0 times and failed 0 times
  method pass_clang :: union-to-struct worked 0 times and failed 0 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: remove-unused-function worked 2 times and failed 1 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clang_binsrch :: replace-function-def-with-decl worked 4 times and failed 8 times
  method pass_clex :: delete-string worked 0 times and failed 0 times
  method pass_clex :: rm-tok-pattern-4 worked 47 times and failed 3368 times
  method pass_clex :: rm-toks-1 worked 184 times and failed 677 times
  method pass_clex :: rm-toks-10 worked 0 times and failed 44 times
  method pass_clex :: rm-toks-11 worked 34 times and failed 1308 times
  method pass_clex :: rm-toks-12 worked 66 times and failed 1757 times
  method pass_clex :: rm-toks-13 worked 222 times and failed 2473 times
  method pass_clex :: rm-toks-14 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-15 worked 0 times and failed 0 times
  method pass_clex :: rm-toks-16 worked 15 times and failed 316 times
  method pass_clex :: rm-toks-2 worked 4 times and failed 177 times
  method pass_clex :: rm-toks-3 worked 4 times and failed 134 times
  method pass_clex :: rm-toks-4 worked 0 times and failed 22 times
  method pass_clex :: rm-toks-5 worked 19 times and failed 986 times
  method pass_clex :: rm-toks-6 worked 20 times and failed 966 times
  method pass_clex :: rm-toks-7 worked 46 times and failed 1561 times
  method pass_clex :: rm-toks-8 worked 10 times and failed 210 times
  method pass_clex :: rm-toks-9 worked 0 times and failed 24 times
  method pass_comments :: 0 worked 1 times and failed 0 times
  method pass_include_includes :: 0 worked 0 times and failed 0 times
  method pass_includes :: 0 worked 20 times and failed 6 times
  method pass_indent :: final worked 3 times and failed 0 times
  method pass_indent :: regular worked 1 times and failed 0 times
  method pass_ints :: a worked 0 times and failed 0 times
  method pass_ints :: b worked 0 times and failed 0 times
  method pass_ints :: c worked 0 times and failed 0 times
  method pass_ints :: d worked 0 times and failed 0 times
  method pass_ints :: e worked 0 times and failed 0 times
  method pass_peep :: a worked 6 times and failed 5100 times
  method pass_special :: a worked 0 times and failed 0 times
  method pass_special :: b worked 0 times and failed 0 times
  method pass_special :: c worked 0 times and failed 0 times
  method pass_ternary :: b worked 0 times and failed 0 times
  method pass_ternary :: c worked 1 times and failed 0 times
  method pass_unifdef :: 0 worked 13 times and failed 3 times


          '/home/ukoc/mangroveL/sut-bzip2/runs/run-1454661722.25296/bzip2.c' reduced to:

#define BZ_STREAM_END 9

fn1() {

  int a;
  if (a == BZ_STREAM_END) {
  }
}
1568.74user 480.08system 23:47.05elapsed 143%CPU (0avgtext+0avgdata 61088maxresident)k
6040inputs+9482952outputs (32major+178303789minor)pagefaults 0swaps
